function aggregate_any(e,a){if(e.children&&0!==e.children.length){for(var l=0,n=0;n<e.children.length;n++)l+=aggregate_any(e.children[n],a);return e.values||(e.values={}),e.values[a]=l,document.getElementById(a+e.id).value=l,l}return e.values&&e.values[a]?parseFloat(e.values[a]):0}
"use strict";var REDIPS=REDIPS||{};REDIPS.drag=function(){var e,o,t,n,r,d,l,i,a,s,c,f,p,g,u,v,y,m,h,w,E,b,D,I,S,R,P,x,N,T,C,B,j,k=null,L={width:0,height:0},M={width:null,height:null,container:[],obj:null},O={page:{x:0,y:0},div:{x:0,y:0},flag:{x:0,y:0}},Y=[],H=[],W=null,_=null,X={x:0,y:0},A={x:0,y:0,value:7,flag:!1},V=!1,z=!1,F=null,q=null,K=null,$=null,G=null,J=null,Q=!1,U=!1,Z={colorTd:"#FFCFAE",colorTr:"#9BB3DA"},ee={enable:!0,bound:25,speed:20},oe={borderDisabled:"dotted",opacityDisabled:"",rowEmptyColor:"white"},te={},ne={keyDiv:!1,keyRow:!1,sendBack:!1,drop:!1},re={cloned:function(){},clonedDropped:function(){},clonedEnd1:function(){},clonedEnd2:function(){},dropped:function(){},droppedBefore:function(){},finish:function(){},notCloned:function(){},notMoved:function(){},rowChanged:function(){},rowClicked:function(){},rowCloned:function(){},rowDropped:function(){},rowDroppedBefore:function(){},rowDroppedSource:function(){},rowMoved:function(){},rowNotCloned:function(){},rowNotMoved:function(){}};return e=function(){if(W=document.getElementById("redips-drag"),j=m(),!document.getElementById("redips_clone")){var e=document.createElement("div");e.id="redips_clone",e.style.width=e.style.height="1px",W.appendChild(e)}o("init",".redips-drag"),T=document.getElementById("treeTable"),T.redips={},c(),REDIPS.event.add(window,"resize",c),REDIPS.event.add(window,"scroll",y)},n=function(e){var o,t,n,l,i=e||window.event;if(i.cancelBubble=!0,i.stopPropagation&&i.stopPropagation(),V=i.shiftKey,window.getSelection)window.getSelection().removeAllRanges();else if(document.selection&&"Text"===document.selection.type)try{document.selection.empty()}catch(a){}return n=X.x=i.clientX,l=X.y=i.clientY,A.x=n,A.y=l,A.flag=!1,REDIPS.drag.objOld=U=Q||this,REDIPS.drag.obj=Q=this,z=Q.className.indexOf("redips-clone")>-1,REDIPS.drag.obj=Q=R(Q),y(),F=$=null,f(),K=q=F,J=G=$,REDIPS.drag.event.rowClicked(te.current),null!==F&&null!==$||(f(),K=q=F,J=G=$,null!==F&&null!==$)?(C=B=!1,REDIPS.event.add(document,"mousemove",d),REDIPS.event.add(document,"mouseup",r),null!==F&&(N=u(F)),t=D(T,"position"),"fixed"!==t&&(t=D(T.parentNode,"position")),o=v(Q,t),k=[l-o[0],o[1]-n,o[2]-l,n-o[3]],!1):!0},R=function(e){var o,t,n;return"DIV"===e.nodeName?(n=e,e=I("TR",e),void 0===e.redips&&(e.redips={}),e.redips.div=n,e):(t=e,o=document.createElement("table"),o.innerHTML='<tr id="'+t.id+'" class="'+t.classList+'">'+t.innerHTML+"</tr>",o.redips={},o.redips.sourceRow=t,E(t,o.rows[0]),document.getElementById("redips_clone").appendChild(o),o)},P=function(e){var o,t,n;n=function(e){var o;void 0!==e.redips&&e.redips.emptyRow?S(e,"empty",REDIPS.drag.style.rowEmptyColor):(o=I("TABLE",e),o.deleteRow(e.rowIndex))};var r=Q;e>T.rows.length-1&&(e=T.rows.length-1);var d=T.rows[e];t=r.getElementsByTagName("tr")[0],r.parentNode.removeChild(r),o=REDIPS.drag.event.rowDroppedBefore(T,r.redips.sourceRow.rowIndex),o!==!1&&(e<T.rows.length?d.parentNode.insertBefore(t,d.nextSibling):(d.parentNode.appendChild(t),d=T.rows[0]),B||n(r.redips.sourceRow),delete t.redips.emptyRow,REDIPS.drag.event.rowDropped(d))},r=function(e){var o,t,n,a,s,c,f=e||window.event;if(n=f.clientX,a=f.clientY,O.flag.x=O.flag.y=0,REDIPS.event.remove(document,"mousemove",d),REDIPS.event.remove(document,"mouseup",r),W.onselectstart=null,i(Q),M.width=document.documentElement.scrollWidth,M.height=document.documentElement.scrollHeight,O.flag.x=O.flag.y=0,null===F||null===$)REDIPS.drag.event.notMoved();else{if(REDIPS.drag.td.target=te.target=T.rows[F].cells[$],g(F,N),o=F,C)if(K===o){for(t=Q.getElementsByTagName("tr")[0],U.style.backgroundColor=t.style.backgroundColor,s=0;s<t.cells.length;s++)U.cells[s].style.backgroundColor=t.cells[s].style.backgroundColor;Q.parentNode.removeChild(Q),delete U.redips.emptyRow,B?REDIPS.drag.event.rowNotCloned():REDIPS.drag.event.rowDroppedSource(te.target)}else P(o);else REDIPS.drag.event.rowNotMoved();B||A.flag?B&&K===F&&J===$?(Q.parentNode.removeChild(Q),Y[U.id]-=1,REDIPS.drag.event.notCloned()):B&&REDIPS.drag.clone.drop===!1&&(n<T.redips.offset[3]||n>T.redips.offset[1]||a<T.redips.offset[0]||a>T.redips.offset[2])?(Q.parentNode.removeChild(Q),Y[U.id]-=1,REDIPS.drag.event.notCloned()):(c=REDIPS.drag.event.droppedBefore(te.target),l(c)):REDIPS.drag.event.notMoved(),y(),REDIPS.drag.event.finish()}q=G=null},l=function(e){var o,t=null;if(e!==!1){if(ne.sendBack===!0){o=te.target.getElementsByTagName("DIV");for(var n=0;n<o.length;n++)if(Q!==o[n]&&0===Q.id.indexOf(o[n].id)){t=o[n];break}if(t)return b(t,1),void Q.parentNode.removeChild(Q)}te.target.appendChild(Q),a(Q),REDIPS.drag.event.dropped(te.target),B&&(REDIPS.drag.event.clonedDropped(te.target),b(U,-1))}else B&&Q.parentNode&&Q.parentNode.removeChild(Q)},a=function(e,o){e.onmousedown=o===!1?null:n},i=function(e){e.style.top="",e.style.left="",e.style.position="",e.style.zIndex=""},d=function(e){var o,t,n,r,d,l,i,a=e||window.event,c=REDIPS.drag.scroll.bound;if(t=X.x=a.clientX,n=X.y=a.clientY,r=Math.abs(A.x-t),d=Math.abs(A.y-n),C||((z||REDIPS.drag.clone.keyRow===!0&&V)&&(B=!0),REDIPS.drag.objOld=U=Q,REDIPS.drag.obj=Q=R(Q),Q.style.zIndex=999,Q.style.position="fixed",y(),f(),B?REDIPS.drag.event.rowCloned():REDIPS.drag.event.rowMoved(),p(),t>L.width-k[1]&&(Q.style.left=L.width-(k[1]+k[3])+"px"),n>L.height-k[2]&&(Q.style.top=L.height-(k[0]+k[2])+"px")),C=!0,t>k[3]&&t<L.width-k[1]&&(Q.style.left=t-k[3]+"px"),n>k[0]&&n<L.height-k[2]&&(Q.style.top=n-k[0]+"px"),t<_[1]&&t>_[3]&&n<_[2]&&n>_[0]&&0===O.flag.x&&0===O.flag.y&&(H.containTable||t<H[3]||t>H[1]||n<H[0]||n>H[2])&&(f(),s()),REDIPS.drag.scroll.enable)for(O.page.x=c-(L.width/2>t?t-k[3]:L.width-t-k[1]),O.page.x>0?(O.page.x>c&&(O.page.x=c),i=0,O.page.x*=t<L.width/2?-1:1,O.page.x<0&&0>=i||O.page.x>0&&i>=M.width-L.width||0===O.flag.x++&&(REDIPS.event.remove(window,"scroll",y),h(window))):O.page.x=0,O.page.y=c-(L.height/2>n?n-k[0]:L.height-n-k[2]),O.page.y>0?(O.page.y>c&&(O.page.y=c),i=window.pageYOffset||document.documentElement.scrollTop,O.page.y*=n<L.height/2?-1:1,O.page.y<0&&0>=i||O.page.y>0&&i>=M.height-L.height||0===O.flag.y++&&(REDIPS.event.remove(window,"scroll",y),w(window))):O.page.y=0,l=0;l<M.container.length;l++){if(o=M.container[l],o.autoscroll&&t<o.offset[1]&&t>o.offset[3]&&n<o.offset[2]&&n>o.offset[0]){O.div.x=c-(o.midstX>t?t-k[3]-o.offset[3]:o.offset[1]-t-k[1]),O.div.x>0?(O.div.x>c&&(O.div.x=c),O.div.x*=t<o.midstX?-1:1,0===O.flag.x++&&(REDIPS.event.remove(o.div,"scroll",y),h(o.div))):O.div.x=0,O.div.y=c-(o.midstY>n?n-k[0]-o.offset[0]:o.offset[2]-n-k[2]),O.div.y>0?(O.div.y>c&&(O.div.y=c),O.div.y*=n<o.midstY?-1:1,0===O.flag.y++&&(REDIPS.event.remove(o.div,"scroll",y),w(o.div))):O.div.y=0;break}O.div.x=O.div.y=0}a.cancelBubble=!0,a.stopPropagation&&a.stopPropagation()},s=function(){(F!==q||$!==G)&&(null!==q&&null!==G&&(g(q,N),REDIPS.drag.td.previous=te.previous=T.rows[q].cells[G],REDIPS.drag.td.current=te.current=T.rows[F].cells[$],F!==q&&REDIPS.drag.event.rowChanged(te.current)),p())},c=function(){L.width=window.innerWidth,L.height=window.innerHeight,M.width=document.documentElement.scrollWidth,M.height=document.documentElement.scrollHeight,y()},f=function(){var e,o,t,n,r,d,l=[];if(e=function(){null!==q&&null!==G&&(F=q,$=G)},n=X.x,r=X.y,l[0]=T.redips.offset[0],l[1]=T.redips.offset[1],l[2]=T.redips.offset[2],l[3]=T.redips.offset[3],void 0!==T.sca&&(l[0]=l[0]>T.sca.offset[0]?l[0]:T.sca.offset[0],l[1]=l[1]<T.sca.offset[1]?l[1]:T.sca.offset[1],l[2]=l[2]<T.sca.offset[2]?l[2]:T.sca.offset[2],l[3]=l[3]>T.sca.offset[3]?l[3]:T.sca.offset[3]),l[3]<n&&n<l[1]&&l[0]<r&&r<l[2]){for(o=T.redips.row_offset,F=0;F<o.length-1;F++)if(void 0!==o[F]){if(H[0]=o[F][0],void 0!==o[F+1])H[2]=o[F+1][0];else for(d=F+2;d<o.length;d++)if(void 0!==o[d]){H[2]=o[d][0];break}if(r<=H[2])break}t=F,F===o.length-1&&(H[0]=o[F][0],H[2]=T.redips.offset[2]),$=0,0>F||0>$?e():F!==t&&(H[0]=o[F][0],H[2]=H[0]+T.rows[F].cells[$].offsetHeight,(r<H[0]||r>H[2])&&e())}},p=function(){null!==F&&null!==$&&(N=u(F),g(F),q=F,G=$)},g=function(e,o){var t,n;t=T.rows[e];for(var r=0;r<t.cells.length;r++)n=t.cells[r].style,n.backgroundColor=void 0===o?REDIPS.drag.hover.colorTr:o.color[r].toString(),void 0!==REDIPS.drag.hover.borderTr&&(void 0===o?K>F?n.borderTop=REDIPS.drag.hover.borderTr:n.borderBottom=REDIPS.drag.hover.borderTr:(n.borderTopWidth=o.top[r][0],n.borderTopStyle=o.top[r][1],n.borderTopColor=o.top[r][2],n.borderBottomWidth=o.bottom[r][0],n.borderBottomStyle=o.bottom[r][1],n.borderBottomColor=o.bottom[r][2]))},u=function(e){var o,t,n={color:[],top:[],right:[],bottom:[],left:[]},r=function(e,o){var t="border"+o+"Width",n="border"+o+"Style",r="border"+o+"Color";return[D(e,t),D(e,n),D(e,r)]};o=T.rows[e];for(var d=0;d<o.cells.length;d++)t=o.cells[d],n.color[d]=t.style.backgroundColor,void 0!==REDIPS.drag.hover.borderTr&&(n.top[d]=r(t,"Top"),n.bottom[d]=r(t,"Bottom"));return n},v=function(e,o,t){var n=0,r=0,d=e;if("fixed"!==o&&(n=0-j[0],r=0-j[1]),void 0===t||t===!0){do n+=e.offsetLeft-e.scrollLeft,r+=e.offsetTop-e.scrollTop,e=e.offsetParent;while(e&&"BODY"!==e.nodeName)}else do n+=e.offsetLeft,r+=e.offsetTop,e=e.offsetParent;while(e&&"BODY"!==e.nodeName);return[r,n+d.offsetWidth,r+d.offsetHeight,n]},y=function(){var e,o,t;j=m(),e=[],o=D(T,"position"),"fixed"!==o&&(o=D(T.parentNode,"position"));for(var n=T.rows.length-1;n>=0;n--)"none"!==T.rows[n].style.display&&(e[n]=v(T.rows[n],o));T.redips.offset=v(T,o),T.redips.row_offset=e,_=v(W);for(var n=0;n<M.container.length;n++)o=D(M.container[n].div,"position"),t=v(M.container[n].div,o,!1),M.container[n].offset=t,M.container[n].midstX=(t[1]+t[3])/2,M.container[n].midstY=(t[0]+t[2])/2},m=function(){var e=window.pageYOffset||document.documentElement.scrollTop,o=0;return[o,e]},h=function(e){var o,t,n,r,d,l=X.x,i=X.y;O.flag.x>0&&(y(),f(),l<_[1]&&l>_[3]&&i<_[2]&&i>_[0]&&s()),"object"==typeof e&&(M.obj=e),M.obj===window?(n=t=m()[0],r=M.width-L.width,d=O.page.x):(n=M.obj.scrollLeft,r=M.obj.scrollWidth-M.obj.clientWidth,d=O.div.x),O.flag.x>0&&(0>d&&n>0||d>0&&r>n)?(M.obj===window?(window.scrollBy(d,0),n=m()[0],o=parseInt(Q.style.left,10),isNaN(o)&&(o=0)):M.obj.scrollLeft+=d,setTimeout(h,REDIPS.drag.scroll.speed)):(REDIPS.event.add(M.obj,"scroll",y),O.flag.x=0,H=[0,0,0,0])},w=function(e){var o,t,n,r,d,l=X.x,i=X.y;O.flag.y>0&&(y(),f(),l<_[1]&&l>_[3]&&i<_[2]&&i>_[0]&&s()),"object"==typeof e&&(M.obj=e),M.obj===window?(n=t=m()[1],r=M.height-L.height,d=O.page.y):(n=M.obj.scrollTop,r=M.obj.scrollHeight-M.obj.clientHeight,d=O.div.y),O.flag.y>0&&(0>d&&n>0||d>0&&r>n)?(M.obj===window?(window.scrollBy(0,d),n=m()[1],o=parseInt(Q.style.top,10),isNaN(o)&&(o=0)):M.obj.scrollTop+=d,setTimeout(w,REDIPS.drag.scroll.speed)):(REDIPS.event.add(M.obj,"scroll",y),O.flag.y=0,H=[0,0,0,0])},E=function(e,o){var t,n=[];n[0]=function(e,o){e.redips&&(o.redips={},o.redips.enabled=e.redips.enabled,o.redips.container=e.redips.container,e.redips.enabled&&a(o))},n[1]=function(e,o){e.redips&&(o.redips={},o.redips.emptyRow=e.redips.emptyRow)},t=function(t){var r,d,l=["DIV","TR"];r=e.getElementsByTagName(l[t]),d=o.getElementsByTagName(l[t]);for(var i=0;i<d.length;i++)n[t](r[i],d[i])},"DIV"===e.nodeName?n[0](e,o):"TR"===e.nodeName&&n[1](e,o),t(0),t(1)},b=function(e,t){var n,r,d,l;l=e.className,n=l.match(/climit(\d)_(\d+)/),null!==n&&(r=parseInt(n[1],10),d=parseInt(n[2],10),0===d&&1===t&&(l+=" redips-clone",2===r&&o(!0,e)),d+=t,l=l.replace(/climit\d_\d+/g,"climit"+r+"_"+d),0>=d&&(l=l.replace("redips-clone",""),2===r?(o(!1,e),REDIPS.drag.event.clonedEnd2()):REDIPS.drag.event.clonedEnd1()),e.className=x(l))},o=function(e,o){var n=[];void 0===o?n=W.getElementsByTagName("div"):"string"==typeof o?n=document.querySelectorAll(o):"object"!=typeof o||"DIV"===o.nodeName&&-1!==o.className.indexOf("redips-drag")?n[0]=o:n=o.getElementsByTagName("div"),t(e,n)},t=function(e,o){var t,n,r,d,l,i,s,c,f,p,g,u=[],m=/\bredips-drag\b/i,h=/\bredips-noautoscroll\b/i;for(l=REDIPS.drag.style.opacityDisabled,e===!0||"init"===e?(d=REDIPS.drag.style.borderEnabled,i="move",f=!0):(d=REDIPS.drag.style.borderDisabled,i="auto",f=!1),t=0,n=0;t<o.length;t++)if(m.test(o[t].className))"init"===e||void 0===o[t].redips?(o[t].redips={},o[t].redips.container=W):e===!0&&"number"==typeof l?(o[t].style.opacity="",o[t].style.filter=""):e===!1&&"number"==typeof l&&(o[t].style.opacity=l/100,o[t].style.filter="alpha(opacity="+l+")"),a(o[t],f),o[t].style.borderStyle=d,o[t].style.cursor=i,o[t].redips.enabled=f;else if("init"===e&&(s=D(o[t],"overflow"),"visible"!==s)){for(REDIPS.event.add(o[t],"scroll",y),g=D(o[t],"position"),p=v(o[t],g,!1),c=!h.test(o[t].className),M.container[n]={div:o[t],offset:p,midstX:(p[1]+p[3])/2,midstY:(p[0]+p[2])/2,autoscroll:c},u=o[t].getElementsByTagName("table"),r=0;r<u.length;r++)u[r].sca=M.container[n];n++}},D=function(e,o){return e&&e.currentStyle?e.currentStyle[o]:e&&window.getComputedStyle?document.defaultView.getComputedStyle(e,null)[o]:void 0},I=function(e,o){for(o=o.parentNode;o&&o.nodeName!==e;)o=o.parentNode;return o},x=function(e){return void 0!==e&&(e=e.replace(/^\s+|\s+$/g,"").replace(/\s{2,}/g," ")),e},S=function(e,o,t){var n,r,d;if("string"==typeof e&&(e=document.getElementById(e),e=I("TABLE",e)),"TR"===e.nodeName)for(n=e.getElementsByTagName("td"),r=0;r<n.length;r++)if(n[r].style.backgroundColor=t?t:"","empty"===o)n[r].innerHTML="";else for(d=0;d<n[r].childNodes.length;d++)1===n[r].childNodes[d].nodeType&&(n[r].childNodes[d].style.opacity=o/100,n[r].childNodes[d].style.filter="alpha(opacity="+o+")");else e.style.opacity=o/100,e.style.filter="alpha(opacity="+o+")",e.style.backgroundColor=t?t:""},{obj:Q,objOld:U,td:te,hover:Z,scroll:ee,style:oe,clone:ne,init:e,enableDrag:o,enableDivs:t,rowOpacity:S,getScrollPosition:m,getStyle:D,findParent:I,event:re}}(),REDIPS.event||(REDIPS.event=function(){var e,o;return e=function(e,o,t){e.addEventListener?e.addEventListener(o,t,!1):e.attachEvent?e.attachEvent("on"+o,t):e["on"+o]=t},o=function(e,o,t){e.removeEventListener?e.removeEventListener(o,t,!1):e.detachEvent?e.detachEvent("on"+o,t):e["on"+o]=null},{add:e,remove:o}}());
"use strict";var redips={};redips.init=function(){var e=REDIPS.drag;e.init(),e.event.rowDropped=function(o){var n=parseInt(e.objOld.id.replace("rowid","")),t=parseInt(o.id.replace("rowid",""));spreadSheet.moveNode(n,t)},e.event.rowDroppedSource=function(){e.rowOpacity(e.objOld,100)},e.event.rowMoved=function(){e.rowOpacity(e.obj,85),e.rowOpacity(e.objOld,20,"White")},e.event.rowClicked=function(){},e.event.rowNotMoved=function(){},e.event.rowCloned=function(){},e.event.rowNotCloned=function(){},e.event.rowDeleted=function(){},e.event.rowUndeleted=function(){e.rowOpacity(e.objOld,100)}};
var resizeColumnLeft=0,resizeField="0",MIN_COLUMN_WIDTH=70,GRIPS_WIDTH=16,startResize=function(e,i){$(document).bind("touchmove.resizeColGrip mousemove.resizeColGrip",resizeDrag).bind("touchend.resizeColGrip mouseup.resizeColGrip",resizeEnd),document.getElementById("resizeLine").style.visibility="visible",document.getElementById("resizeLine").style.left=e.pageX+"px",resizeColumnLeft=$(i.parentNode).position().left,resizeField=i.parentNode.id.replace("colHeader","")},resizeEnd=function(e){$(document).unbind("touchmove.resizeColGrip mousemove.resizeColGrip",resizeDrag).unbind("touchend.resizeColGrip mouseup.resizeColGrip",resizeEnd),document.getElementById("resizeLine").style.visibility="hidden";var i=e.pageX-resizeColumnLeft-GRIPS_WIDTH;MIN_COLUMN_WIDTH>i&&(i=MIN_COLUMN_WIDTH),document.getElementById("colHeaderInput"+resizeField).style.width=i+"px";for(var t=document.querySelectorAll(".fieldInput"+resizeField),r=0;r<t.length;r++)t[r].style.width=i+8+"px"},resizeDrag=function(e){e.pageX>resizeColumnLeft+MIN_COLUMN_WIDTH+GRIPS_WIDTH&&(document.getElementById("resizeLine").style.left=e.pageX+"px")};

var fieldMenuController={displayFieldMenu:function(e,i,t){var n=project.getField(e);this.menu=new FieldMenu(n,spreadSheet.fields),fieldMenuView.render(this.menu,i,t)},handleClick:function(e){var i=this.menu.getMenuItem(e,this.menu),t=this.menu.getMenuItemParent(e,this.menu);if(i.field){var n=project.getField(i.field.name);n[i.varName]=i.value,fieldMenuView.setCheckmarks(e,t.items),t===this.menu&&spreadSheet.updateNumberFieldFormatting(n)}}};
$(document).ready(function(){scrollBarWidth=getScrollBarWidth(),hms.init()});var hms={init:function(){projects.init(function(e){headerView.render(e)})},openProject:function(e){projects.openProject(e,function(t){project.tree=t,$.ajax({type:"GET",url:"api/versions?projectID="+e}).done(function(e){headerView.refresh(JSON.parse(e).versions),hms.selectView(headerView.selectedView())})})},openSaveDBDialog:function(){project.getCurrentVersion(function(e){saveDBDialog.render(project.tree.version,project.tree.versionLabel,project.tree.versionDate,e+1)})},saveToDatabase:function(){project.saveToDatabase(),this.openProject(project.tree.projectID)},selectView:function(e){project.tree&&(this.view&&this.view.destroy(),this.showView(e))},selectVersion:function(e){projects.openProjectVersion(project.tree.projectID,e,function(e){project.tree=e,hms.selectView(headerView.selectedView())})},showView:function(e){switch(e){case SPREADSHEET_VIEW:this.view=spreadSheetView,spreadSheet.display();break;case TREE_VIEW:this.view=treeView,tree.displayTree();break;case WEIGHTED_TREE_VIEW:this.view=weightedTreeView,tree.displayWeightedTree();break;case CIRCLE_VIEW:this.view=circleView,circleView.display()}},createNewProject:function(e){projects.createNewProject(e),hms.selectView(headerView.selectedView())},nextProjectID:function(){return projects.nextProjectID++},expandToLevel:function(e){project.expandToLevel(project.tree,e),this.view===spreadSheetView?spreadSheet.display():this.view===treeView?treeView.refresh():this.view===weightedTreeView&&weightedTreeView.refresh()}},scrollBarWidth,getScrollBarWidth=function(){var e,t;return e=document.createElement("div"),e.innerHTML='<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>',e=e.firstChild,document.body.appendChild(e),t=e.offsetWidth-e.clientWidth,document.body.removeChild(e),t};
var spreadSheet={display:function(){project.cleanseData(),spreadSheetView.render(project.tree)},fields:function(){return project.fields()},tree:function(){return project.tree},updateFieldValue:function(e,d){var r=project.findNode(d);r&&(r.values||(r.values={}),r.values[e]=spreadSheetView.getFieldValue(e,d)),project.tree.children.forEach(function(d){aggregate_any(d,e)})},rawValue:function(e,d){var r=project.findNode(parseInt(d));return r.values&&r.values[e]?r.values[e]:""},formattedValue:function(e,d){return d.values&&d.values[e.name]?Field.formatValue(e,d.values[e.name]):""},addField:function(e){project.addField(e),spreadSheetView.addField(e)},hasChildren:function(e){return!project.isNodeChildless(e)},childrenHidden:function(e){return project.isNodeCollapsed(e)},moveNode:function(e,d){var r=project.findNode(d),t=project.findNode(e);spreadSheet.removeNode(t),project.addNode(t,r),spreadSheet.addNode(t,r)},removeNode:function(e){var d=project.findParent(e.id);project.traverse(project.getChildren,spreadSheetView.removeNode,e),project.removeNode(e),spreadSheetView.redrawNodeContent(d)},deleteNode:function(e){var d=project.findNode(e);spreadSheet.removeNode(d)},addNode:function(e,d){project.isNodeCollapsed(d)&&spreadSheet.expandNode(d),spreadSheetView.redrawNodeContent(d),spreadSheetView.insertNodeAfter(e,d),spreadSheetView.renderExpander()},copyNode:function(e){var d=project.findNode(e),r=project.cloneNode(d);project.insertNode(r,d),spreadSheetView.insertNodeBefore(r,d)},expandNode:function(e){project.expandNode(e),spreadSheetView.expandNode(e),spreadSheetView.redrawNodeContent(e)},collapseNode:function(e){project.traverseDescendants(project.getChildren,spreadSheetView.removeNode,e),project.collapseNode(e),spreadSheetView.redrawNodeContent(e)},toggleNode:function(e){var d=project.findNode(e);project.isNodeExpanded(d)?spreadSheet.collapseNode(d):project.isNodeCollapsed(d)&&spreadSheet.expandNode(d)},updateNodeName:function(e,d){project.findNode(e).name=d},updateNumberFieldFormatting:function(e){project.traverse(project.getChildren,function(d){if(d.values){var r=Field.formatValue(e,Number(d.values[e.name]));spreadSheetView.updateFieldValue(e.name,d.id,r)}})},enableDragging:function(e){project.traverse(project.getChildren,spreadSheetView.enableDragging,e)}};
var tree={displayTree:function(){this.data=project.tree,this.field=project.fields()[0],treeView.render()},displayWeightedTree:function(){this.data=project.tree,this.field=project.fields()[0],this.maxFieldValue=this.calcMaxFieldValue(),weightedTreeView.render()},calcMaxFieldValue:function(){var e=Number.NEGATIVE_INFINITY;return project.traverse(project.getChildren,function(t){if(t.values){var r=t.values[tree.field.name];r>e&&(e=r)}}),e}};
var Field=function(i){this.name=i,this.datatype=Field.NUMBER,this.format=Field.NUMBER_FORMAT,this.precision=2,this.agg_type=Field.NO_AGGREGATION,this.agg_qty_field=null};Field.NUMBER="0",Field.STRING="1",Field.CHOICE="2",Field.NO_AGGREGATION="0",Field.SUM_ANY_AGGREGATION="1",Field.NUMBER_FORMAT="0",Field.PERCENT_FORMAT="1",Field.SCIENTIFIC_FORMAT="2",Field.formatValue=function(i,e){if(i.datatype===Field.NUMBER){if(e=Number(e),i.format===Field.NUMBER_FORMAT)return e.toFixed(i.precision);if(i.format===Field.PERCENT_FORMAT)return(100*e).toFixed(i.precision)+"%";if(i.format===Field.SCIENTIFIC_FORMAT)return e.toExponential(i.precision)}else{if(i.datatype===Field.STRING)return e;i.datatype===Field.CHOICE}};
var FieldMenu=function(e,i){var t=new FieldMenuItem("Number",Field.NUMBER,"datatype",e),n=new FieldMenuItem("Format"),m=new FieldMenuItem("Number",Field.NUMBER_FORMAT,"format",e);m.items.push(new FieldMenuItem("0",0,"precision",e));for(var s="0.",u=1;11>u;u++)s+="0",m.items.push(new FieldMenuItem(s,u,"precision",e));n.items.push(m);var r=new FieldMenuItem("Percent",Field.PERCENT_FORMAT,"format",e);r.items.push(new FieldMenuItem("0%",0,"precision",e));for(var s="0.",u=1;11>u;u++)s+="0",r.items.push(new FieldMenuItem(s+"%",u,"precision",e));n.items.push(r);var a=new FieldMenuItem("Scientific",Field.SCIENTIFIC_FORMAT,"format",e);a.items.push(new FieldMenuItem("0e+0",0,"precision",e));for(var s="0.",u=1;11>u;u++)s+="0",a.items.push(new FieldMenuItem(s+"e+0",u,"precision",e));n.items.push(a),t.items.push(n);var d=new FieldMenuItem("Aggregation");d.items.push(new FieldMenuItem("No Aggregation",Field.NO_AGGREGATION,"agg_type",e));var l=new FieldMenuItem("Sum any defined children",Field.SUM_ANY_AGGREGATION,"agg_type",e);for(var F in i){var p=i[F];p.name!=e.name&&l.items.push(new FieldMenuItem(p.name,p.name,"agg_qty_field",e))}d.items.push(l),t.items.push(d),this.items=[],this.items.push(t),this.items.push(new FieldMenuItem("Text",Field.STRING,"datatype",e))};FieldMenu.prototype.getMenuItem=function(e,i){if(e===i.id)return i;if(i.items&&i.items.length>0)for(var t,n=0;n<i.items.length;n++)if(t=this.getMenuItem(e,i.items[n]))return t},FieldMenu.prototype.getMenuItemParent=function(e,i){if(i.items&&i.items.length>0)for(var t=0;t<i.items.length;t++){if(i.items[t].id===e)return i;var n=this.getMenuItemParent(e,i.items[t]);if(n)return n}};
var FieldMenuItem=function(i,e,t,s){this.display=i,this.value=e,this.varName=t,this.field=s,this.items=[],this.id=FieldMenuItem.id++,this.parent=-1,this.checked=s?s[t]===e:!1};FieldMenuItem.id=0;
var project={saveToDatabase:function(){this.cleanseData(),$.ajax({type:"POST",url:"/api/tree",dataType:"json",data:{json:JSON.stringify(this.tree)}})},getCurrentVersion:function(e){$.ajax({type:"GET",url:"api/tree?projectID="+this.tree.projectID}).done(function(n){e(n.version)})},fields:function(){return this.tree.fields},cleanseData:function(){this.traverse(project.getChildren,function(e){e.children||(e.children=[]),delete e.parent,delete e.x,delete e.x0,delete e.y,delete e.y0})},addField:function(e){this.tree.fields.push(new Field(e))},getField:function(e){for(var n in this.tree.fields){var r=this.tree.fields[n];if(r.name===e)return r}},removeNode:function(e){var n=this.findParent(e.id);n?n.children.splice(n.children.indexOf(e),1):this.tree.children.splice(this.tree.children.indexOf(e),1)},addNode:function(e,n){n.children.push(e),project.setDepths(n)},setDepths:function(e){e.children.forEach(function(n,r){n.depth=e.depth+1,n.depth>project.tree.maxDepth&&(project.tree.maxDepth=n.depth),project.setDepths(n)})},insertNode:function(e,n){var r=this.findParent(n.id);r?r.children.splice(r.children.indexOf(n),0,e):this.tree.children.splice(this.tree.children.indexOf(n),0,e)},cloneNode:function(e){var n=$.extend(!0,{},e);return this.traverse(this.getChildren,function(e){e.id=project.tree.nextNodeID++},n),n},expandNode:function(e){project.isNodeCollapsed(e)&&(e.children=e._children,e._children=[])},fullyExpandNode:function(e){project.expandNode(e),e.children.forEach(function(e){project.fullyExpandNode(e)})},expandToLevel:function(e,n){if(e.depth<n){project.expandNode(e);for(var r in e.children)project.expandToLevel(e.children[r],n)}else{project.collapseNode(e);for(var r in e._children)project.expandToLevel(e._children[r],n)}},collapseNode:function(e){project.isNodeExpanded(e)&&(e._children=e.children,e.children=[])},fullyCollapseNode:function(e){e.children&&(e._children=e.children,e._children.forEach(project.fullyCollapseNode),e.children=[])},toggleExpansion:function(e){e.children?(e._children=e.children,e.children=[]):e._children&&(e.children=e._children,e._children=[])},hasChildren:function(e){return e.children&&0===e.children.length||e._children&&0===e._children.length},isNodeChildless:function(e){return!(e.children&&0!==e.children.length||e._children&&0!==e._children.length)},isNodeCollapsed:function(e){return e._children&&e._children.length>0},isNodeExpanded:function(e){return e.children&&e.children.length>0},findNode:function(e,n){if(n||(n=this.tree),n.id===e)return n;for(var r in n.children){var i=this.findNode(e,n.children[r]);if(i)return i}},findParent:function(e,n,r){if(n||(n=this.tree),n.id===e)return r;for(var i in n.children){var t=this.findParent(e,n.children[i],n);if(t)return t}},traverse:function(e,n,r){r||(r=project.tree),n(r);var i=e(r);for(var t in i)project.traverse(e,n,i[t])},traverseDescendants:function(e,n,r){r||(r=project.tree),r.children.forEach(function(r){project.traverse(e,n,r)})},getChildren:function(e){return e.children&&e.children.length>0?e.children:null}};
var projects={init:function(e){$.ajax({type:"GET",url:"api/projects"}).done(function(t){this.data=t,e(t.projects)})},createNewProject:function(e){$.ajax({type:"POST",url:"/api/addProject?projectName="+e}),project.tree={projectID:project.nextProjectID,projectName:e,name:e,version:1,nextNodeID:3,depth:0,id:1,fields:[],children:[{id:2,name:e,depth:1,children:[]}]},project.saveToDatabase()},openProject:function(e,t){$.ajax({type:"GET",url:"api/tree?projectID="+e}).done(function(e){t(e)})},openProjectVersion:function(e,t,o){$.ajax({type:"GET",url:"api/version?projectID="+e+"&version="+t}).done(function(e){o(e)})}};
var DOWN_ARROW_IMAGE_PATH="images/down-arrow.png",CHECK_MARK_IMAGE_PATH="images/checkmark.png",BLANK_MARK_IMAGE_PATH="images/blankmark.png",ENTER_KEY=13,KEY_UP_ARROW=38,KEY_DOWN_ARROW=40,KEY_LEFT_ARROW=37,KEY_RIGHT_ARROW=39,DEFAULT_NODE_INPUT_WIDTH=390,SPREADSHEET_VIEW="0",TREE_VIEW="1",WEIGHTED_TREE_VIEW="2",CIRCLE_VIEW="3";
function debug(){}debug.print=function(n){console.log(JSON.stringify(n,null,"	"))},debug.printTree=function(){console.log(JSON.stringify(project.tree,null,"	"))};
var circleView={destroy:function(){$("#circleView").remove()},display:function(){function t(t){s=t;var l=d3.transition().duration(d3.event.altKey?7500:750).tween("zoom",function(t){var l=d3.interpolateZoom(n,[s.x,s.y,2*s.r+r]);return function(t){e(l(t))}});l.selectAll("text").filter(function(t){return t.parent===s||"inline"===this.style.display}).style("fill-opacity",function(t){return t.parent===s?1:0}).each("start",function(t){t.parent===s&&(this.style.display="inline")}).each("end",function(t){t.parent!==s&&(this.style.display="none")})}function e(t){var e=l/t[2];n=t,p.attr("transform",function(n){return"translate("+(n.x-t[0])*e+","+(n.y-t[1])*e+")"}),u.attr("r",function(t){return t.r*e})}$("body").append('<div id="circleView"></div>');var n,r=20,l=960,a=d3.scale.linear().domain([-1,5]).range(["hsl(152,80%,80%)","hsl(228,30%,40%)"]).interpolate(d3.interpolateHcl),i=d3.layout.pack().padding(2).size([l-r,l-r]).value(function(t){return Math.PI*t.values.A*t.values.A/4}),c=d3.select("#circleView").append("svg").attr("width",l).attr("height",l).append("g").attr("transform","translate("+l/2+","+l/2+")"),o=project.tree,s=o,d=i.nodes(o),u=c.selectAll("circle").data(d).enter().append("circle").attr("class",function(t){return t.parent?t.children?"node":"node node--leaf":"node node--root"}).style("fill",function(t){return t.children?a(t.depth):null}).on("click",function(e){s!==e&&(t(e),d3.event.stopPropagation())}),p=(c.selectAll("text").data(d).enter().append("text").attr("class","label").style("fill-opacity",function(t){return t.parent===o?1:0}).style("display",function(t){return t.parent===o?null:"none"}).text(function(t){return t.name}),c.selectAll("circle,text"));d3.select("body").style("background",a(-1)).on("click",function(){t(o)}),e([o.x,o.y,2*o.r+r]),d3.select(self.frameElement).style("height",l+"px")}};
var expanderSelector={init:function(e){$("#expanderContainer").html(expanderSelector.getMarkup(e)),$("#expanderSelector").change(expanderSelector.handle)},handle:function(){var e=parseInt($("#expanderSelector").val());e>0&&hms.expandToLevel(e)},getMarkup:function(e){for(var n='<div id="expanderSelectContainer"><select id="expanderSelector" class="form-control"><option value="0">Expand/Collapse to Level</option>',t=1;e+1>t;t++)n+='<option value="'+t+'">'+t+"</option>";return n+='</select><input id="projectActionInput" class="form-control"></input></div>'}};
var fieldMenuView={render:function(e,d,i){var n='<div id="fieldMenu" style="left:'+(d-10)+"px;top:"+(i-10)+'px;">';n+=this.renderMenu(e),n+="</div>",$("body").append($(n)),$("#fieldMenu").mouseleave(function(){$("#fieldMenu").remove()})},renderMenu:function(e){var d="<ul>";return e.items.forEach(function(e){d+='<li onclick="fieldMenuController.handleClick('+e.id+');">';var i="uncheckedFieldMenuItem";e.field&&e.checked&&(i="checkedFieldMenuItem"),d+='<img id="FieldMenuItem'+e.id+'" src="'+CHECK_MARK_IMAGE_PATH+'" class="'+i+'"/>',d+=e.display,e.items&&e.items.length>0&&(d+='<div class="arrowRight"></div>',d+=fieldMenuView.renderMenu(e)),d+="</li>"}),d+"</ul>"},setCheckmarks:function(e,d){d.forEach(function(e){$("#FieldMenuItem"+e.id).removeClass("checkedFieldMenuItem").addClass("uncheckedFieldMenuItem")}),$("#FieldMenuItem"+e).removeClass("uncheckedFieldMenuItem").addClass("checkedFieldMenuItem")}};
var headerView={render:function(e){console.log("render");var t='<select id="projectSelector" class="form-control"><option id="selectProjectOption" value="0">Select Project...</option>';e.forEach(function(e){t+='<option value="'+e.id+'">'+e.name+"</option>"}),t+='<option id="newProjectOption" value="-1">Create New Project...</option></select><input id="editNewProjectNameInput" class="form-control"></input>',t+='<a href="#" id="save-database-button" class="btn btn-default">Save to Database</a>',t+='<select id="viewSelector" class="form-control"><option value="0">Spread Sheet</option><option value="1">Tree</option><option value="2">Weighted Tree</option><option value="3">Circle Packing</option></select>',$("#header").html(t),$("#viewSelector").hide(),$("#save-database-button").hide(),$("#projectSelector").change(function(){headerView.selectProject($(this))}),$("#editNewProjectNameInput").keyup(function(e){headerView.createNewProject(e)}),$("#save-database-button").click(function(){hms.openSaveDBDialog()}),$("#viewSelector").change(function(){hms.selectView($(this).val())})},refresh:function(e){console.log("refresh"),$("#versionSelector").remove();var t='<select id="versionSelector" class="form-control">';e.forEach(function(e){t+='<option value="'+e.version+'">'+e.version+"</option>"}),t+="</select>",$("#header").append(t),$("#viewSelector").show(),$("#save-database-button").show(),$("#versionSelector").change(function(){hms.selectVersion($(this).val())})},selectedView:function(){return $("#viewSelector").val()},selectProject:function(e){"newProjectOption"===e.find(":selected").attr("id")?($("#editNewProjectNameInput").val("Type New Project Name and Press Enter to Create"),$("#editNewProjectNameInput").show().focus().select()):($("#selectProjectOption").remove(),hms.openProject(e.val()))},createNewProject:function(e){if(e.keyCode==ENTER_KEY){$("#selectProjectOption").remove();var t=$("#editNewProjectNameInput").val();$("#editNewProjectNameInput").hide();var o=hms.nextProjectID(),n=document.createElement("option");n.text=t,n.value=o.toString(),$(n).insertBefore("#projectSelector option:nth-child("+$("#projectSelector").length+")"),$("#projectSelector").val(o),hms.createNewProject(t)}}};
var projectAction={init:function(){$("#project-action-container").html(projectAction.markup()),$("#projectActionInput").keyup(function(t){t.keyCode==ENTER_KEY&&projectAction.enterPressed()}),$("#projectActionSelector").change(projectAction.handle)},handle:function(){"addField"==$("#projectActionSelector").val()&&($("#projectActionInput").val("Type New Field Name and Press Enter to Create"),$("#projectActionInput").show().focus().select())},enterPressed:function(){"addField"==$("#projectActionSelector").val()&&(spreadSheet.addField($("#projectActionInput").val()),$("#projectActionInput").hide(),$("#projectActionSelector").val("blank"))},markup:function(){return'<div id="projectActionSelectorContainer"><select id="projectActionSelector" class="form-control"><option value="blank"></option><option value="addField">Add Field</option></select><input id="projectActionInput" class="form-control"></input></div>'}};
var saveDBDialog={render:function(a,e,o,l){$("#saveDBDialog").remove(),$("body").append('<div class="modal fade" id="saveDBDialog" role="dialog"></div>'),$("#saveDBDialog").append('<div class="modal-dialog"><div id="saveDBDialogContent" class="modal-content"></div></div>'),$("#saveDBDialogContent").append('<div class="modal-header" style="padding:15px 30px;"><button type="button" class="close" data-dismiss="modal">&times;</button><h4>Save Project Changes to Database</h4></div>'),$("#saveDBDialogContent").append('<div id="saveDBDialogBody" class="modal-body" style="padding:40px 50px;"></div>'),$("#saveDBDialogBody").append("<div><label>Base Version: "+a+" - "+o+" - "+e+"</label></div>"),$("#saveDBDialogBody").append('<div style="margin-top:20px"><label>New Version:  '+l+"</label></div><div></div>"),$("#saveDBDialogBody").append('<div ><label for="versionLabel">New Version Label</label>'),$("#saveDBDialogBody").append('<input type="text" class="form-control" id="versionLabel"></div>'),$("#saveDBDialogBody").append('<div style="margin-top:20px"><label for="reasonForChange">Reason for Changes</label>'),$("#saveDBDialogBody").append('<textarea style="resize:none" class="form-control" rows="5" id="reasonForChange"></textarea></div>'),$("#saveDBDialogContent").append('<div id="saveDBDialogFooter" class="modal-footer"></div>'),$("#saveDBDialogFooter").append('<button style="margin-left:10px" class="btn btn-danger btn-default pull-right" data-dismiss="modal">Cancel</button>'),$("#saveDBDialogFooter").append('<button id="saveDBDialogSaveButton" class="btn btn-info btn-default pull-right" data-dismiss="modal">Save</button>'),$("#saveDBDialogSaveButton").click(function(){hms.saveToDatabase()}),$("#saveDBDialog").modal()}};
var spreadSheetKeyHandler={checkKey:function(e){if(e=e||window.event,e.keyCode==KEY_UP_ARROW){e.preventDefault();var t=$(spreadSheetKeyHandler.findAncestor(document.activeElement,"tr")).prev()[0];t&&$("#"+spreadSheetKeyHandler.getNextElementID(t)).focus()}else if(e.keyCode==KEY_DOWN_ARROW){e.preventDefault();var n=$(spreadSheetKeyHandler.findAncestor(document.activeElement,"tr")).next()[0];n&&$("#"+spreadSheetKeyHandler.getNextElementID(n)).focus()}else e.keyCode==KEY_RIGHT_ARROW?(e.preventDefault(),$(spreadSheetKeyHandler.findAncestor(document.activeElement,"td")).next().find("input").focus()):e.keyCode==KEY_LEFT_ARROW&&(e.preventDefault(),$(spreadSheetKeyHandler.findAncestor(document.activeElement,"td")).prev().find("input").focus())},getNextElementID:function(e){var t=document.activeElement.id;if(t.indexOf("nodeInput")>-1)return"nodeInput"+e.id.replace("rowid","");for(var n=document.activeElement.className.split(" "),r=0;r<n.length;r++){var d=n[r];if(d.indexOf("fieldInput")>-1&&"fieldInput"!=d){var a=d.replace("fieldInput","");return a+e.id.replace("datarowid","")}}},findAncestor:function(e,t){for(t=t.toLowerCase();e&&e.parentNode;)if(e=e.parentNode,e.tagName&&e.tagName.toLowerCase()===t)return e}};
var spreadSheetView={render:function(){$(document).on("keydown",spreadSheetKeyHandler.checkKey),$("#spreadSheetView").remove(),$("body").append(this.spreadSheetMarkup()),projectAction.init(),this.renderExpander(),this.renderFieldsRow(),this.renderDataTable(),this.renderNodeColumn()},destroy:function(){$("#spreadSheetView").remove(),$(document).off("keydown")},spreadSheetMarkup:function(){return'<div id="spreadSheetView"><div id="spreadSheetViewActions"><div id="project-action-container"></div><div id="expanderContainer"></div></div><div id="fields-header-row"></div><div id="redips-drag"></div><div id="data-container"></div></div>'},renderExpander:function(){expanderSelector.init(spreadSheet.tree().maxDepth)},renderFieldsRow:function(){$("#fields-header-row").html('<table id="fieldHeaderTable"><tr id="fieldHeaderRow"></tr></table>'),spreadSheet.fields().forEach(function(e){$("#fieldHeaderRow").append(spreadSheetView.fieldHeader(e.name)),$("#fieldMenuButton"+e.name).click(function(d){spreadSheetView.showFieldMenu(d,e.name)})}),$("#fields-header-row").css("right",scrollBarWidth+"px")},fieldHeader:function(e){return'<td class="fieldHeaderCell"><div class="fieldHeaderContainer"><div class="moveColGrip"></div><div class="fieldNameInputContainer"><textarea id="colHeaderInput'+e+'" class="fieldNameInput">'+e+'</textarea></div><div class="fieldHeaderButton"><img id="fieldMenuButton'+e+'" src="images/down-arrow.png"/></div><div id="grip'+e+'" class="resizeColGrip" onmousedown="startResize(event, this)"></div></div></td>'},showFieldMenu:function(e,d){0===$("#fieldMenu").length&&fieldMenuController.displayFieldMenu(d,e.clientX,e.clientY)},renderDataTable:function(){$("#data-container").append('<table id="dataTable"></table>'),spreadSheet.tree().children.forEach(function(e){$("#dataTable").append(spreadSheetView.dataRowsMarkup(e))}),$("#data-container").scroll(function(){$("#redips-drag").scrollTop($("#data-container").scrollTop()),$("#fields-header-row").scrollLeft($("#data-container").scrollLeft())})},dataRowsMarkup:function(e){var d='<tr id="datarowid'+e.id+'" class="dataRow">';return spreadSheet.fields().forEach(function(t){d+='<td class="cell"><input class="fieldInput fieldInput'+t.name+'" type="text" id="'+t.name+e.id+'" value="'+spreadSheet.formattedValue(t,e)+'" oninput="spreadSheet.updateFieldValue(\''+t.name+"',"+e.id+')" onfocus="$(this).val(spreadSheet.rawValue(\''+t.name+"',"+e.id+'))"></td>'}),e.children.forEach(function(e){d+=spreadSheetView.dataRowsMarkup(e)}),d+"</tr>"},renderDataCell:function(e,d,t,n){$(e).append(spreadSheetView.fieldCell(d,t,n)),$("#"+d+t).on("input",function(){spreadSheet.updateFieldValue(d,t)}),$("#"+d+t).focus(function(){$(this).val(spreadSheet.rawValue(d,t))})},fieldCell:function(e,d,t){return'<td class="cell"><input class="fieldInput fieldInput'+e+'" type="text" id="'+e+d+'" value="'+t+'"></td>'},nodeRowMarkup:function(e){var d='<tr id="rowid'+e.id+'" class="nodeRow"><td class="redips-rowhandler cell"><div id="nodeContent'+e.id+'" class="node-container">';return d+=spreadSheetView.deleteButton(e.id)+spreadSheetView.copyButton(e.id)+spreadSheetView.dragHandle,d+=spreadSheetView.nodeContent(e),e.children.forEach(function(e){d+=spreadSheetView.nodeRowMarkup(e)}),d+"</div></td></tr>"},nodeContent:function(e){var d,t=10*(e.depth-1),n=t;return spreadSheet.hasChildren(e)?d=spreadSheet.childrenHidden(e)?'<span class="glyphicon glyphicon-chevron-right"></span>':'<span class="glyphicon glyphicon-chevron-down"></span>':(d="<span></span>",t+=12,n-=10),spreadSheetView.expandIcon(e.id,t,d)+spreadSheetView.nodeInput(e,DEFAULT_NODE_INPUT_WIDTH-n)},renderNodeColumn:function(){$("#redips-drag").html('<table id="treeTable"></table>'),spreadSheet.tree().children.forEach(function(e){$("#treeTable").append(spreadSheetView.nodeRowMarkup(e))}),$("#redips-drag").css("bottom",scrollBarWidth+"px"),redips.init()},dragHandle:'<div class="redips-drag pull-right"><i class="glyphicon glyphicon-move"></i></div>',copyButton:function(e){return'<a href="#"  class="pull-right btn btn-info btn-xs copy-button" onclick="spreadSheet.copyNode('+e+')"><i class="glyphicon glyphicon-plus"></i></a>'},deleteButton:function(e){return'<a href="#" class="pull-right btn btn-danger btn-xs delete-button" onclick="spreadSheet.deleteNode('+e+')"><i class="glyphicon glyphicon-remove"></i></a>'},expandIcon:function(e,d,t){return'<a href="#" id="icon'+e+'" class="btn btn-xs" style="margin-left:'+d+'px" onclick="spreadSheet.toggleNode('+e+')">'+t+"</a>"},nodeInput:function(e,d){return'<input id="nodeInput'+e.id+'" class="nodeTextInput" style="width:'+d+'px" type="text" value="'+e.name+'" oninput="spreadSheetView.updateNodeName('+e.id+')"/>'},expandNode:function(e){for(var d,t=e.children.length-1;t>=0;t--)d=e.children[t],$(spreadSheetView.dataRowsMarkup(d)).insertAfter($("#datarowid"+e.id)),$(spreadSheetView.nodeRowMarkup(d)).insertAfter($("#rowid"+e.id));spreadSheetView.enableDragging(e)},redrawNodeContent:function(e){$("#icon"+e.id).remove(),$("#nodeInput"+e.id).remove(),$("#nodeContent"+e.id).append(spreadSheetView.nodeContent(e))},addField:function(e){$("#fieldHeaderRow").append(spreadSheetView.fieldHeader(e)),$("#fieldMenuButton"+e).click(function(d){spreadSheetView.showFieldMenu(d,e)}),$(".dataRow").each(function(d,t){spreadSheetView.renderDataCell(t,e,parseInt(t.id.replace("datarowid","")),"")})},updateNodeName:function(e){var d=$("#nodeInput"+e).val();spreadSheet.updateNodeName(e,d),$("#nodeInput"+e).attr("value",d)},removeNode:function(e){$("#rowid"+e.id).remove(),$("#datarowid"+e.id).remove()},insertNodeBefore:function(e,d){$(spreadSheetView.nodeRowMarkup(e)).insertBefore($("#rowid"+d.id)),$(spreadSheetView.dataRowsMarkup(e)).insertBefore($("#datarowid"+d.id)),spreadSheetView.enableDragging(e)},insertNodeAfter:function(e,d){$(spreadSheetView.nodeRowMarkup(e)).insertAfter($("#rowid"+d.id)),$(spreadSheetView.dataRowsMarkup(e)).insertAfter($("#datarowid"+d.id)),spreadSheetView.enableDragging(e)},enableDragging:function(e){REDIPS.drag.enableDivs("init",$("#rowid"+e.id).find("div"))},getFieldValue:function(e,d){return $("#"+e+d).val()},updateFieldValue:function(e,d,t){$("#"+e+d).val(t)}};
var MIN_NODE_SIZE=5,MAX_NODE_SIZE=100,VERTICAL_VIEW=0,HORIZONTAL_VIEW=1,treeView={destroy:function(){$("#treeView").remove()},refresh:function(){treeView.update(treeView.root)},rotate:function(){treeView.direction===HORIZONTAL_VIEW?(treeView.direction=VERTICAL_VIEW,treeView.horizontal_spacing=100,treeView.vertical_spacing=60,treeView.diagonal=d3.svg.diagonal().projection(function(e){return[e.x,e.y]}),treeView.root.y0=treeView.viewerHeight/2,treeView.root.x0=0):(treeView.direction=HORIZONTAL_VIEW,treeView.horizontal_spacing=150,treeView.vertical_spacing=25,treeView.diagonal=d3.svg.diagonal().projection(function(e){return[e.y,e.x]}),treeView.root.x0=treeView.viewerHeight/2,treeView.root.y0=0),treeView.update(treeView.root)},init:function(){treeView.direction=HORIZONTAL_VIEW,treeView.selectedNode=null,treeView.draggingNode=null,treeView.duration=750,treeView.horizontal_spacing=150,treeView.vertical_spacing=25,treeView.maxLabelLength=0,project.traverse(project.getChildren,function(e){treeView.maxLabelLength=Math.max(e.name.length,treeView.maxLabelLength)}),treeView.viewerWidth=$("#tree-container").width(),treeView.viewerHeight=$("#tree-container").height(),treeView.tree=d3.layout.tree().size([treeView.viewerHeight,treeView.viewerWidth]),treeView.root=project.tree,treeView.dragStarted=null,treeView.diagonal=d3.svg.diagonal().projection(function(e){return[e.y,e.x]})},render:function(){function e(){treeView.svgGroup.attr("transform","translate("+d3.event.translate+")scale("+d3.event.scale+")")}function t(e,t){treeView.draggingNode=e,d3.select(t).select(".ghostCircle").attr("pointer-events","none"),d3.selectAll(".ghostCircle").attr("class","ghostCircle show"),d3.select(t).attr("class","node activeDrag"),treeView.svgGroup.selectAll("g.node").sort(function(e,t){return e.id!=treeView.draggingNode.id?1:-1}),nodes.length>1&&(links=treeView.tree.links(nodes),nodePaths=treeView.svgGroup.selectAll("path.link").data(links,function(e){return e.target.id}).remove(),nodesExit=treeView.svgGroup.selectAll("g.node").data(nodes,function(e){return e.id}).filter(function(e,t){return e.id!=treeView.draggingNode.id}).remove()),parentLink=treeView.tree.links(treeView.tree.nodes(treeView.draggingNode.parent)),treeView.svgGroup.selectAll("path.link").filter(function(e,t){return e.target.id==treeView.draggingNode.id}).remove(),treeView.dragStarted=null}function r(e){e!=treeView.root&&(treeView.dragStarted&&(domNode=this,t(e,domNode)),e.x0+=d3.event.dy,e.y0+=d3.event.dx,d3.select(this).attr("transform","translate("+e.y0+","+e.x0+")"),treeView.updateTempConnector())}treeView.destroy(),$("body").append('<div id="treeView"><div id="treeViewOptions"><div id="expanderContainer"></div></div><div id="tree-container"></div></div>'),expanderSelector.init(project.tree.maxDepth),$("#treeViewOptions").append('<a href="#" id="treeViewRotateButton" class="btn btn-default pull-right">Rotate View</a>'),$("#treeViewRotateButton").click(function(){treeView.rotate()}),treeView.init(),treeView.zoomListener=d3.behavior.zoom().scaleExtent([.1,3]).on("zoom",e);var i=d3.select("#tree-container").append("svg").attr("width",treeView.viewerWidth).attr("height",treeView.viewerHeight).attr("class","overlay").call(treeView.zoomListener);dragListener=d3.behavior.drag().on("dragstart",treeView.dragstart).on("drag",r).on("dragend",treeView.dragend),treeView.svgGroup=i.append("g"),treeView.root.x0=treeView.viewerHeight/2,treeView.root.y0=0,treeView.update(treeView.root),treeView.centerNode(treeView.root)},click:function(e){d3.event.defaultPrevented||(project.toggleExpansion(e),treeView.update(e))},update:function(e){var t=0,r=[1],i=function(e,t){t.children&&t.children.length>0&&(r.length<=e+1&&r.push(0),r[e+1]+=t.children.length,t.children.forEach(function(t){i(e+1,t)}))};i(0,treeView.root);var n=d3.max(r)*treeView.vertical_spacing;treeView.tree=treeView.tree.size([n,treeView.viewerWidth]);var o=treeView.tree.nodes(treeView.root).reverse(),a=treeView.tree.links(o);o.forEach(function(e){e.y=e.depth*treeView.horizontal_spacing}),node=treeView.svgGroup.selectAll("g.node").data(o,function(e){return e.id||(e.id=++t)});var d=node.enter().append("g").call(dragListener).attr("class","node").attr("transform",function(t){return"translate("+e.y0+","+e.x0+")"}).on("click",treeView.click);d.append("circle").attr("class","nodeCircle").attr("r",0).style("fill",function(e){return project.isNodeCollapsed(e)?"lightsteelblue":"#fff"}),d.append("text").attr("x",function(e){return project.hasChildren(e)?-10:10}).attr("dy",".35em").attr("class","nodeText").attr("text-anchor",function(e){return project.hasChildren(e)?"end":"start"}).text(function(e){return e.name}).style("fill-opacity",0),d.append("circle").attr("class","ghostCircle").attr("r",30).attr("opacity",.2).style("fill","red").attr("pointer-events","mouseover").on("mouseover",function(e){treeView.overCircle(e)}).on("mouseout",function(e){treeView.outCircle(e)}),node.select("text").attr("x",function(e){return project.hasChildren(e)?-10:10}).attr("text-anchor",function(e){return project.hasChildren(e)?"end":"start"}).text(function(e){return e.name}),node.select("circle.nodeCircle").attr("r",function(e){return treeView.computeNodeSize(e)}).style("fill",function(e){return project.isNodeCollapsed(e)?"lightsteelblue":"#fff"});var l;l=treeView.direction===VERTICAL_VIEW?node.attr("transform",function(e){return"translate("+e.x+","+e.y+")"}):node.attr("transform",function(e){return"translate("+e.y+","+e.x+")"}),l.select("text").style("fill-opacity",1);var c=node.exit().attr("transform",function(t){return"translate("+e.y+","+e.x+")"}).remove();c.select("circle").attr("r",0),c.select("text").style("fill-opacity",0);var s=treeView.svgGroup.selectAll("path.link").data(a,function(e){return e.target.id});s.enter().insert("path","g").attr("class","link").attr("d",function(t){var r={x:e.x0,y:e.y0};return treeView.diagonal({source:r,target:r})}),s.attr("d",treeView.diagonal),s.exit().attr("d",function(t){var r={x:e.x,y:e.y};return treeView.diagonal({source:r,target:r})}).remove(),o.forEach(function(e){e.x0=e.x,e.y0=e.y})},dragstart:function(e){e!=treeView.root&&(treeView.dragStarted=!0,nodes=treeView.tree.nodes(e),d3.event.sourceEvent.stopPropagation())},dragend:function(e){e!=treeView.root&&(domNode=this,treeView.selectedNode&&(project.removeNode(treeView.draggingNode),treeView.selectedNode.children||(treeView.selectedNode.children=[]),treeView.selectedNode.children.push(treeView.draggingNode),project.expandNode(treeView.selectedNode)),treeView.selectedNode=null,d3.selectAll(".ghostCircle").attr("class","ghostCircle"),d3.select(domNode).attr("class","node"),d3.select(domNode).select(".ghostCircle").attr("pointer-events",""),treeView.updateTempConnector(),null!==treeView.draggingNode&&(treeView.update(treeView.root),treeView.draggingNode=null))},updateTempConnector:function(){var e=[];null!==treeView.draggingNode&&null!==treeView.selectedNode&&(e=[{source:{x:treeView.selectedNode.y0,y:treeView.selectedNode.x0},target:{x:treeView.draggingNode.y0,y:treeView.draggingNode.x0}}]);var t=treeView.svgGroup.selectAll(".templink").data(e);t.enter().append("path").attr("class","templink").attr("d",d3.svg.diagonal()).attr("pointer-events","none"),t.attr("d",d3.svg.diagonal()),t.exit().remove()},overCircle:function(e){treeView.selectedNode=e,treeView.updateTempConnector()},outCircle:function(e){treeView.selectedNode=null,treeView.updateTempConnector()},centerNode:function(e){scale=treeView.zoomListener.scale(),x=-e.y0,y=-e.x0,x=x*scale+treeView.viewerWidth/4,y=y*scale+treeView.viewerHeight/2,d3.select("g").attr("transform","translate("+x+","+y+")scale("+scale+")"),treeView.zoomListener.scale(scale),treeView.zoomListener.translate([x,y])},computeNodeSize:function(e){var t=MIN_NODE_SIZE;return t}};
var MIN_NODE_SIZE=5,MAX_NODE_SIZE=100,VERTICAL_VIEW=0,HORIZONTAL_VIEW=1,weightedTreeView={destroy:function(){$("#treeView").remove()},refresh:function(){weightedTreeView.update(weightedTreeView.root)},rotate:function(){weightedTreeView.direction===HORIZONTAL_VIEW?(weightedTreeView.direction=VERTICAL_VIEW,weightedTreeView.horizontal_spacing=100,weightedTreeView.vertical_spacing=60,weightedTreeView.diagonal=d3.svg.diagonal().projection(function(e){return[e.x,e.y]}),weightedTreeView.root.y0=weightedTreeView.viewerHeight/2,weightedTreeView.root.x0=0):(weightedTreeView.direction=HORIZONTAL_VIEW,weightedTreeView.horizontal_spacing=300,weightedTreeView.vertical_spacing=200,weightedTreeView.diagonal=d3.svg.diagonal().projection(function(e){return[e.y,e.x]}),weightedTreeView.root.x0=weightedTreeView.viewerHeight/2,weightedTreeView.root.y0=0),weightedTreeView.update(weightedTreeView.root)},init:function(){weightedTreeView.direction=HORIZONTAL_VIEW,weightedTreeView.selectedNode=null,weightedTreeView.draggingNode=null,weightedTreeView.duration=750,weightedTreeView.horizontal_spacing=300,weightedTreeView.vertical_spacing=200,weightedTreeView.maxLabelLength=0,project.traverse(project.getChildren,function(e){weightedTreeView.maxLabelLength=Math.max(e.name.length,weightedTreeView.maxLabelLength)}),weightedTreeView.viewerWidth=$("#tree-container").width(),weightedTreeView.viewerHeight=$("#tree-container").height(),weightedTreeView.tree=d3.layout.tree().size([weightedTreeView.viewerHeight,weightedTreeView.viewerWidth]),weightedTreeView.root=project.tree,weightedTreeView.dragStarted=null,weightedTreeView.diagonal=d3.svg.diagonal().projection(function(e){return[e.y,e.x]})},render:function(){function e(){weightedTreeView.svgGroup.attr("transform","translate("+d3.event.translate+")scale("+d3.event.scale+")")}function t(e,t){weightedTreeView.draggingNode=e,d3.select(t).select(".ghostCircle").attr("pointer-events","none"),d3.selectAll(".ghostCircle").attr("class","ghostCircle show"),d3.select(t).attr("class","node activeDrag"),weightedTreeView.svgGroup.selectAll("g.node").sort(function(e,t){return e.id!=weightedTreeView.draggingNode.id?1:-1}),nodes.length>1&&(links=weightedTreeView.tree.links(nodes),nodePaths=weightedTreeView.svgGroup.selectAll("path.link").data(links,function(e){return e.target.id}).remove(),nodesExit=weightedTreeView.svgGroup.selectAll("g.node").data(nodes,function(e){return e.id}).filter(function(e,t){return e.id!=weightedTreeView.draggingNode.id}).remove()),parentLink=weightedTreeView.tree.links(weightedTreeView.tree.nodes(weightedTreeView.draggingNode.parent)),weightedTreeView.svgGroup.selectAll("path.link").filter(function(e,t){return e.target.id==weightedTreeView.draggingNode.id}).remove(),weightedTreeView.dragStarted=null}function i(e){e!=weightedTreeView.root&&(weightedTreeView.dragStarted&&(domNode=this,t(e,domNode)),e.x0+=d3.event.dy,e.y0+=d3.event.dx,d3.select(this).attr("transform","translate("+e.y0+","+e.x0+")"),weightedTreeView.updateTempConnector())}weightedTreeView.destroy(),$("body").append('<div id="treeView"><div id="treeViewOptions"><div id="expanderContainer"></div></div><div id="tree-container"></div></div>'),expanderSelector.init(project.tree.maxDepth),$("#treeViewOptions").append('<a href="#" id="treeViewRotateButton" class="btn btn-default pull-right">Rotate View</a>'),$("#treeViewRotateButton").click(function(){weightedTreeView.rotate()}),weightedTreeView.init(),weightedTreeView.zoomListener=d3.behavior.zoom().scaleExtent([.1,3]).on("zoom",e);var r=d3.select("#tree-container").append("svg").attr("width",weightedTreeView.viewerWidth).attr("height",weightedTreeView.viewerHeight).attr("class","overlay").call(weightedTreeView.zoomListener);dragListener=d3.behavior.drag().on("dragstart",weightedTreeView.dragstart).on("drag",i).on("dragend",weightedTreeView.dragend),weightedTreeView.svgGroup=r.append("g"),weightedTreeView.root.x0=weightedTreeView.viewerHeight/2,weightedTreeView.root.y0=0,weightedTreeView.update(weightedTreeView.root),weightedTreeView.centerNode(weightedTreeView.root)},click:function(e){d3.event.defaultPrevented||(project.toggleExpansion(e),weightedTreeView.update(e))},update:function(e){var t=0,i=[1],r=function(e,t){t.children&&t.children.length>0&&(i.length<=e+1&&i.push(0),i[e+1]+=t.children.length,t.children.forEach(function(t){r(e+1,t)}))};r(0,weightedTreeView.root);var d=d3.max(i)*weightedTreeView.vertical_spacing;weightedTreeView.tree=weightedTreeView.tree.size([d,weightedTreeView.viewerWidth]);var n=weightedTreeView.tree.nodes(weightedTreeView.root).reverse(),o=weightedTreeView.tree.links(n);n.forEach(function(e){e.y=e.depth*weightedTreeView.horizontal_spacing}),node=weightedTreeView.svgGroup.selectAll("g.node").data(n,function(e){return e.id||(e.id=++t)});var a=node.enter().append("g").call(dragListener).attr("class","node").attr("transform",function(t){return"translate("+e.y0+","+e.x0+")"}).on("click",weightedTreeView.click);a.append("circle").attr("class","nodeCircle").attr("r",0).style("fill",function(e){return project.isNodeCollapsed(e)?"lightsteelblue":"#fff"}),a.append("text").attr("x",function(e){return project.hasChildren(e)?-10:10}).attr("dy",".35em").attr("class","nodeText").attr("text-anchor",function(e){return project.hasChildren(e)?"end":"start"}).text(function(e){return e.name}).style("fill-opacity",0),a.append("circle").attr("class","ghostCircle").attr("r",30).attr("opacity",.2).style("fill","red").attr("pointer-events","mouseover").on("mouseover",function(e){weightedTreeView.overCircle(e)}).on("mouseout",function(e){weightedTreeView.outCircle(e)}),node.select("text").attr("x",function(e){return project.hasChildren(e)?-10:10}).attr("text-anchor",function(e){return project.hasChildren(e)?"end":"start"}).text(function(e){return e.name}),node.select("circle.nodeCircle").attr("r",function(e){return weightedTreeView.computeNodeSize(e)}).style("fill",function(e){return project.isNodeCollapsed(e)?"lightsteelblue":"#fff"});var w;w=weightedTreeView.direction===VERTICAL_VIEW?node.attr("transform",function(e){return"translate("+e.x+","+e.y+")"}):node.attr("transform",function(e){return"translate("+e.y+","+e.x+")"}),w.select("text").style("fill-opacity",1);var g=node.exit().attr("transform",function(t){return"translate("+e.y+","+e.x+")"}).remove();g.select("circle").attr("r",0),g.select("text").style("fill-opacity",0);var l=weightedTreeView.svgGroup.selectAll("path.link").data(o,function(e){return e.target.id});l.enter().insert("path","g").attr("class","link").attr("d",function(t){var i={x:e.x0,y:e.y0};return weightedTreeView.diagonal({source:i,target:i})}),l.attr("d",weightedTreeView.diagonal),l.exit().attr("d",function(t){var i={x:e.x,y:e.y};return weightedTreeView.diagonal({source:i,target:i})}).remove(),n.forEach(function(e){e.x0=e.x,e.y0=e.y})},dragstart:function(e){e!=weightedTreeView.root&&(weightedTreeView.dragStarted=!0,nodes=weightedTreeView.tree.nodes(e),d3.event.sourceEvent.stopPropagation())},dragend:function(e){e!=weightedTreeView.root&&(domNode=this,weightedTreeView.selectedNode&&(project.removeNode(weightedTreeView.draggingNode),weightedTreeView.selectedNode.children||(weightedTreeView.selectedNode.children=[]),weightedTreeView.selectedNode.children.push(weightedTreeView.draggingNode),project.expandNode(weightedTreeView.selectedNode)),weightedTreeView.selectedNode=null,d3.selectAll(".ghostCircle").attr("class","ghostCircle"),d3.select(domNode).attr("class","node"),d3.select(domNode).select(".ghostCircle").attr("pointer-events",""),weightedTreeView.updateTempConnector(),null!==weightedTreeView.draggingNode&&(weightedTreeView.update(weightedTreeView.root),weightedTreeView.draggingNode=null))},updateTempConnector:function(){var e=[];null!==weightedTreeView.draggingNode&&null!==weightedTreeView.selectedNode&&(e=[{source:{x:weightedTreeView.selectedNode.y0,y:weightedTreeView.selectedNode.x0},target:{x:weightedTreeView.draggingNode.y0,y:weightedTreeView.draggingNode.x0}}]);var t=weightedTreeView.svgGroup.selectAll(".templink").data(e);t.enter().append("path").attr("class","templink").attr("d",d3.svg.diagonal()).attr("pointer-events","none"),t.attr("d",d3.svg.diagonal()),t.exit().remove()},overCircle:function(e){weightedTreeView.selectedNode=e,weightedTreeView.updateTempConnector()},outCircle:function(e){weightedTreeView.selectedNode=null,weightedTreeView.updateTempConnector()},centerNode:function(e){scale=weightedTreeView.zoomListener.scale(),x=-e.y0,y=-e.x0,x=x*scale+weightedTreeView.viewerWidth/4,y=y*scale+weightedTreeView.viewerHeight/2,d3.select("g").attr("transform","translate("+x+","+y+")scale("+scale+")"),weightedTreeView.zoomListener.scale(scale),weightedTreeView.zoomListener.translate([x,y])},computeNodeSize:function(e){var t=MIN_NODE_SIZE;return tree.field&&(e.values&&e.values[tree.field.name]&&(t=MAX_NODE_SIZE*Math.sqrt(e.values[tree.field.name]/tree.maxFieldValue)),MIN_NODE_SIZE>t&&(t=MIN_NODE_SIZE)),t}};
//# sourceMappingURL=data:application/json;base64,