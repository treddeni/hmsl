function aggregate_any(e,a){if(e.children&&0!==e.children.length){for(var l=0,n=0;n<e.children.length;n++)l+=aggregate_any(e.children[n],a);return e.values||(e.values={}),e.values[a]=l,document.getElementById(a+e.id).value=l,l}return e.values&&e.values[a]?parseFloat(e.values[a]):0}
var DOWN_ARROW_IMAGE_PATH="images/down-arrow.png",CHECK_MARK_IMAGE_PATH="images/checkmark.png",BLANK_MARK_IMAGE_PATH="images/blankmark.png";
function displayTreeView(t){function e(t,n,r){if(t){n(t);var a=r(t);if(a)for(var l=a.length,i=0;l>i;i++)e(a[i],n,r)}}function n(){A.sort(function(t,e){return e.name.toLowerCase()<t.name.toLowerCase()?1:-1})}function r(t,e){var n=m;panTimer&&(clearTimeout(panTimer),translateCoords=d3.transform(z.attr("transform")),"left"==e||"right"==e?(translateX="left"==e?translateCoords.translate[0]+n:translateCoords.translate[0]-n,translateY=translateCoords.translate[1]):("up"==e||"down"==e)&&(translateX=translateCoords.translate[0],translateY="up"==e?translateCoords.translate[1]+n:translateCoords.translate[1]-n),scaleX=translateCoords.scale[0],scaleY=translateCoords.scale[1],scale=X.scale(),z.transition().attr("transform","translate("+translateX+","+translateY+")scale("+scale+")"),d3.select(t).select("g.node").attr("transform","translate("+translateX+","+translateY+")"),X.scale(X.scale()),X.translate([translateX,translateY]),panTimer=setTimeout(function(){r(t,n,e)},50))}function a(){z.attr("transform","translate("+d3.event.translate+")scale("+d3.event.scale+")")}function l(t,e){p=t,d3.select(e).select(".ghostCircle").attr("pointer-events","none"),d3.selectAll(".ghostCircle").attr("class","ghostCircle show"),d3.select(e).attr("class","node activeDrag"),z.selectAll("g.node").sort(function(t,e){return t.id!=p.id?1:-1}),nodes.length>1&&(links=A.links(nodes),nodePaths=z.selectAll("path.link").data(links,function(t){return t.target.id}).remove(),nodesExit=z.selectAll("g.node").data(nodes,function(t){return t.id}).filter(function(t,e){return t.id==p.id?!1:!0}).remove()),parentLink=A.links(A.nodes(p.parent)),z.selectAll("path.link").filter(function(t,e){return t.target.id==p.id?!0:!1}).remove(),dragStarted=null}function i(){v=null,d3.selectAll(".ghostCircle").attr("class","ghostCircle"),d3.select(domNode).attr("class","node"),d3.select(domNode).select(".ghostCircle").attr("pointer-events",""),N(),null!==p&&(u(h),o(p),p=null)}function s(t){t._children&&(t.children=t._children,t.children.forEach(s),t._children=[])}function o(t){scale=X.scale(),x=-t.y0,y=-t.x0,x=x*scale+T/2,y=y*scale+w/2,d3.select("g").transition().duration(k).attr("transform","translate("+x+","+y+")scale("+scale+")"),X.scale(scale),X.translate([x,y])}function c(t){return t.children?(t._children=t.children,t.children=[]):t._children&&(t.children=t._children,t._children=[]),t}function d(t){d3.event.defaultPrevented||(t=c(t),u(t),o(t))}function u(t){var e=function(t,e){return t.values&&t.values[e]&&t.values[e]>5?t.values[e]:5},n=[1],r=function(t,e){e.children&&e.children.length>0&&(n.length<=t+1&&n.push(0),n[t+1]+=e.children.length,e.children.forEach(function(e){r(t+1,e)}))};r(0,h);var a=25*d3.max(n);A=A.size([a,T]);var l=A.nodes(h).reverse(),i=A.links(l);l.forEach(function(t){t.y=10*t.depth*g}),node=z.selectAll("g.node").data(l,function(t){return t.id||(t.id=++_)});var s=node.enter().append("g").call(dragListener).attr("class","node").attr("transform",function(e){return"translate("+t.y0+","+t.x0+")"}).on("click",d);s.append("circle").attr("class","nodeCircle").attr("r",0).style("fill",function(t){return t._children?"lightsteelblue":"#fff"}),s.append("text").attr("x",function(t){return t.children||t._children?-10:10}).attr("dy",".35em").attr("class","nodeText").attr("text-anchor",function(t){return t.children||t._children?"end":"start"}).text(function(t){return t.name}).style("fill-opacity",0),s.append("circle").attr("class","ghostCircle").attr("r",30).attr("opacity",.2).style("fill","red").attr("pointer-events","mouseover").on("mouseover",function(t){b(t)}).on("mouseout",function(t){L(t)}),node.select("text").attr("x",function(t){return t.children||t._children?-10:10}).attr("text-anchor",function(t){return t.children||t._children?"end":"start"}).text(function(t){return t.name}),node.select("circle.nodeCircle").attr("r",function(t){return e(t)}).style("fill",function(t){return t._children?"lightsteelblue":"#fff"});var o=node.transition().duration(k).attr("transform",function(t){return"translate("+t.y+","+t.x+")"});o.select("text").style("fill-opacity",1);var c=node.exit().transition().duration(k).attr("transform",function(e){return"translate("+t.y+","+t.x+")"}).remove();c.select("circle").attr("r",0),c.select("text").style("fill-opacity",0);var u=z.selectAll("path.link").data(i,function(t){return t.target.id});u.enter().insert("path","g").attr("class","link").attr("d",function(e){var n={x:t.x0,y:t.y0};return E({source:n,target:n})}),u.transition().duration(k).attr("d",E),u.exit().transition().duration(k).attr("d",function(e){var n={x:t.x,y:t.y};return E({source:n,target:n})}).remove(),l.forEach(function(t){t.x0=t.x,t.y0=t.y})}$("body").append('<div id="tree-container"></div>');var h,f=0,g=0,v=null,p=null,m=200,C=20,_=0,k=750,T=$("#tree-container").width(),w=$("#tree-container").height(),A=d3.layout.tree().size([w,T]),E=d3.svg.diagonal().projection(function(t){return[t.y,t.x]});e(t,function(t){f++,g=Math.max(t.name.length,g)},function(t){return t.children&&t.children.length>0?t.children:null}),n();var X=d3.behavior.zoom().scaleExtent([.1,3]).on("zoom",a),Y=d3.select("#tree-container").append("svg").attr("width",T).attr("height",w).attr("class","overlay").call(X);dragListener=d3.behavior.drag().on("dragstart",function(t){t!=h&&(dragStarted=!0,nodes=A.nodes(t),d3.event.sourceEvent.stopPropagation())}).on("drag",function(t){if(t!=h){if(dragStarted&&(domNode=this,l(t,domNode)),relCoords=d3.mouse($("svg").get(0)),relCoords[0]<C)panTimer=!0,r(this,"left");else if(relCoords[0]>$("svg").width()-C)panTimer=!0,r(this,"right");else if(relCoords[1]<C)panTimer=!0,r(this,"up");else if(relCoords[1]>$("svg").height()-C)panTimer=!0,r(this,"down");else try{clearTimeout(panTimer)}catch(e){}t.x0+=d3.event.dy,t.y0+=d3.event.dx;var n=d3.select(this);n.attr("transform","translate("+t.y0+","+t.x0+")"),N()}}).on("dragend",function(t){if(t!=h)if(domNode=this,v){var e=p.parent.children.indexOf(p);e>-1&&p.parent.children.splice(e,1),v.children||v._children?v.children?v.children.push(p):v._children.push(p):(v.children=[],v.children.push(p)),s(v),n(),i()}else i()});var b=function(t){v=t,N()},L=function(t){v=null,N()},N=function(){var t=[];null!==p&&null!==v&&(t=[{source:{x:v.y0,y:v.x0},target:{x:p.y0,y:p.x0}}]);var e=z.selectAll(".templink").data(t);e.enter().append("path").attr("class","templink").attr("d",d3.svg.diagonal()).attr("pointer-events","none"),e.attr("d",d3.svg.diagonal()),e.exit().remove()},z=Y.append("g");h=t,h.x0=w/2,h.y0=0,u(h),o(h)}
"use strict";var REDIPS=REDIPS||{};REDIPS.drag=function(){var e,o,t,n,r,d,l,i,a,s,c,f,p,g,u,v,y,m,h,w,E,b,D,I,S,R,P,x,N,T,C,B,j,k=null,L={width:0,height:0},M={width:null,height:null,container:[],obj:null},O={page:{x:0,y:0},div:{x:0,y:0},flag:{x:0,y:0}},Y=[],H=[],W=null,_=null,X={x:0,y:0},A={x:0,y:0,value:7,flag:!1},V=!1,z=!1,F=null,q=null,K=null,$=null,G=null,J=null,Q=!1,U=!1,Z={colorTd:"#FFCFAE",colorTr:"#9BB3DA"},ee={enable:!0,bound:25,speed:20},oe={borderDisabled:"dotted",opacityDisabled:"",rowEmptyColor:"white"},te={},ne={keyDiv:!1,keyRow:!1,sendBack:!1,drop:!1},re={cloned:function(){},clonedDropped:function(){},clonedEnd1:function(){},clonedEnd2:function(){},dropped:function(){},droppedBefore:function(){},finish:function(){},notCloned:function(){},notMoved:function(){},rowChanged:function(){},rowClicked:function(){},rowCloned:function(){},rowDropped:function(){},rowDroppedBefore:function(){},rowDroppedSource:function(){},rowMoved:function(){},rowNotCloned:function(){},rowNotMoved:function(){}};return e=function(){if(W=document.getElementById("redips-drag"),j=m(),!document.getElementById("redips_clone")){var e=document.createElement("div");e.id="redips_clone",e.style.width=e.style.height="1px",W.appendChild(e)}o("init",".redips-drag"),T=document.getElementById("treeTable"),T.redips={},c(),REDIPS.event.add(window,"resize",c),REDIPS.event.add(window,"scroll",y)},n=function(e){var o,t,n,l,i=e||window.event;if(i.cancelBubble=!0,i.stopPropagation&&i.stopPropagation(),V=i.shiftKey,window.getSelection)window.getSelection().removeAllRanges();else if(document.selection&&"Text"===document.selection.type)try{document.selection.empty()}catch(a){}return n=X.x=i.clientX,l=X.y=i.clientY,A.x=n,A.y=l,A.flag=!1,REDIPS.drag.objOld=U=Q||this,REDIPS.drag.obj=Q=this,z=Q.className.indexOf("redips-clone")>-1,REDIPS.drag.obj=Q=R(Q),y(),F=$=null,f(),K=q=F,J=G=$,REDIPS.drag.event.rowClicked(te.current),null!==F&&null!==$||(f(),K=q=F,J=G=$,null!==F&&null!==$)?(C=B=!1,REDIPS.event.add(document,"mousemove",d),REDIPS.event.add(document,"mouseup",r),null!==F&&(N=u(F)),t=D(T,"position"),"fixed"!==t&&(t=D(T.parentNode,"position")),o=v(Q,t),k=[l-o[0],o[1]-n,o[2]-l,n-o[3]],!1):!0},R=function(e){var o,t,n;return"DIV"===e.nodeName?(n=e,e=I("TR",e),void 0===e.redips&&(e.redips={}),e.redips.div=n,e):(t=e,o=document.createElement("table"),o.innerHTML='<tr id="'+t.id+'" class="'+t.classList+'">'+t.innerHTML+"</tr>",o.redips={},o.redips.sourceRow=t,E(t,o.rows[0]),document.getElementById("redips_clone").appendChild(o),o)},P=function(e){var o,t,n;n=function(e){var o;void 0!==e.redips&&e.redips.emptyRow?S(e,"empty",REDIPS.drag.style.rowEmptyColor):(o=I("TABLE",e),o.deleteRow(e.rowIndex))};var r=Q;e>T.rows.length-1&&(e=T.rows.length-1);var d=T.rows[e];t=r.getElementsByTagName("tr")[0],r.parentNode.removeChild(r),o=REDIPS.drag.event.rowDroppedBefore(T,r.redips.sourceRow.rowIndex),o!==!1&&(e<T.rows.length?d.parentNode.insertBefore(t,d.nextSibling):(d.parentNode.appendChild(t),d=T.rows[0]),B||n(r.redips.sourceRow),delete t.redips.emptyRow,REDIPS.drag.event.rowDropped(d))},r=function(e){var o,t,n,a,s,c,f=e||window.event;if(n=f.clientX,a=f.clientY,O.flag.x=O.flag.y=0,REDIPS.event.remove(document,"mousemove",d),REDIPS.event.remove(document,"mouseup",r),W.onselectstart=null,i(Q),M.width=document.documentElement.scrollWidth,M.height=document.documentElement.scrollHeight,O.flag.x=O.flag.y=0,null===F||null===$)REDIPS.drag.event.notMoved();else{if(REDIPS.drag.td.target=te.target=T.rows[F].cells[$],g(F,N),o=F,C)if(K===o){for(t=Q.getElementsByTagName("tr")[0],U.style.backgroundColor=t.style.backgroundColor,s=0;s<t.cells.length;s++)U.cells[s].style.backgroundColor=t.cells[s].style.backgroundColor;Q.parentNode.removeChild(Q),delete U.redips.emptyRow,B?REDIPS.drag.event.rowNotCloned():REDIPS.drag.event.rowDroppedSource(te.target)}else P(o);else REDIPS.drag.event.rowNotMoved();B||A.flag?B&&K===F&&J===$?(Q.parentNode.removeChild(Q),Y[U.id]-=1,REDIPS.drag.event.notCloned()):B&&REDIPS.drag.clone.drop===!1&&(n<T.redips.offset[3]||n>T.redips.offset[1]||a<T.redips.offset[0]||a>T.redips.offset[2])?(Q.parentNode.removeChild(Q),Y[U.id]-=1,REDIPS.drag.event.notCloned()):(c=REDIPS.drag.event.droppedBefore(te.target),l(c)):REDIPS.drag.event.notMoved(),y(),REDIPS.drag.event.finish()}q=G=null},l=function(e){var o,t=null;if(e!==!1){if(ne.sendBack===!0){o=te.target.getElementsByTagName("DIV");for(var n=0;n<o.length;n++)if(Q!==o[n]&&0===Q.id.indexOf(o[n].id)){t=o[n];break}if(t)return b(t,1),void Q.parentNode.removeChild(Q)}te.target.appendChild(Q),a(Q),REDIPS.drag.event.dropped(te.target),B&&(REDIPS.drag.event.clonedDropped(te.target),b(U,-1))}else B&&Q.parentNode&&Q.parentNode.removeChild(Q)},a=function(e,o){e.onmousedown=o===!1?null:n},i=function(e){e.style.top="",e.style.left="",e.style.position="",e.style.zIndex=""},d=function(e){var o,t,n,r,d,l,i,a=e||window.event,c=REDIPS.drag.scroll.bound;if(t=X.x=a.clientX,n=X.y=a.clientY,r=Math.abs(A.x-t),d=Math.abs(A.y-n),C||((z||REDIPS.drag.clone.keyRow===!0&&V)&&(B=!0),REDIPS.drag.objOld=U=Q,REDIPS.drag.obj=Q=R(Q),Q.style.zIndex=999,Q.style.position="fixed",y(),f(),B?REDIPS.drag.event.rowCloned():REDIPS.drag.event.rowMoved(),p(),t>L.width-k[1]&&(Q.style.left=L.width-(k[1]+k[3])+"px"),n>L.height-k[2]&&(Q.style.top=L.height-(k[0]+k[2])+"px")),C=!0,t>k[3]&&t<L.width-k[1]&&(Q.style.left=t-k[3]+"px"),n>k[0]&&n<L.height-k[2]&&(Q.style.top=n-k[0]+"px"),t<_[1]&&t>_[3]&&n<_[2]&&n>_[0]&&0===O.flag.x&&0===O.flag.y&&(H.containTable||t<H[3]||t>H[1]||n<H[0]||n>H[2])&&(f(),s()),REDIPS.drag.scroll.enable)for(O.page.x=c-(L.width/2>t?t-k[3]:L.width-t-k[1]),O.page.x>0?(O.page.x>c&&(O.page.x=c),i=0,O.page.x*=t<L.width/2?-1:1,O.page.x<0&&0>=i||O.page.x>0&&i>=M.width-L.width||0===O.flag.x++&&(REDIPS.event.remove(window,"scroll",y),h(window))):O.page.x=0,O.page.y=c-(L.height/2>n?n-k[0]:L.height-n-k[2]),O.page.y>0?(O.page.y>c&&(O.page.y=c),i=window.pageYOffset||document.documentElement.scrollTop,O.page.y*=n<L.height/2?-1:1,O.page.y<0&&0>=i||O.page.y>0&&i>=M.height-L.height||0===O.flag.y++&&(REDIPS.event.remove(window,"scroll",y),w(window))):O.page.y=0,l=0;l<M.container.length;l++){if(o=M.container[l],o.autoscroll&&t<o.offset[1]&&t>o.offset[3]&&n<o.offset[2]&&n>o.offset[0]){O.div.x=c-(o.midstX>t?t-k[3]-o.offset[3]:o.offset[1]-t-k[1]),O.div.x>0?(O.div.x>c&&(O.div.x=c),O.div.x*=t<o.midstX?-1:1,0===O.flag.x++&&(REDIPS.event.remove(o.div,"scroll",y),h(o.div))):O.div.x=0,O.div.y=c-(o.midstY>n?n-k[0]-o.offset[0]:o.offset[2]-n-k[2]),O.div.y>0?(O.div.y>c&&(O.div.y=c),O.div.y*=n<o.midstY?-1:1,0===O.flag.y++&&(REDIPS.event.remove(o.div,"scroll",y),w(o.div))):O.div.y=0;break}O.div.x=O.div.y=0}a.cancelBubble=!0,a.stopPropagation&&a.stopPropagation()},s=function(){(F!==q||$!==G)&&(null!==q&&null!==G&&(g(q,N),REDIPS.drag.td.previous=te.previous=T.rows[q].cells[G],REDIPS.drag.td.current=te.current=T.rows[F].cells[$],F!==q&&REDIPS.drag.event.rowChanged(te.current)),p())},c=function(){L.width=window.innerWidth,L.height=window.innerHeight,M.width=document.documentElement.scrollWidth,M.height=document.documentElement.scrollHeight,y()},f=function(){var e,o,t,n,r,d,l=[];if(e=function(){null!==q&&null!==G&&(F=q,$=G)},n=X.x,r=X.y,l[0]=T.redips.offset[0],l[1]=T.redips.offset[1],l[2]=T.redips.offset[2],l[3]=T.redips.offset[3],void 0!==T.sca&&(l[0]=l[0]>T.sca.offset[0]?l[0]:T.sca.offset[0],l[1]=l[1]<T.sca.offset[1]?l[1]:T.sca.offset[1],l[2]=l[2]<T.sca.offset[2]?l[2]:T.sca.offset[2],l[3]=l[3]>T.sca.offset[3]?l[3]:T.sca.offset[3]),l[3]<n&&n<l[1]&&l[0]<r&&r<l[2]){for(o=T.redips.row_offset,F=0;F<o.length-1;F++)if(void 0!==o[F]){if(H[0]=o[F][0],void 0!==o[F+1])H[2]=o[F+1][0];else for(d=F+2;d<o.length;d++)if(void 0!==o[d]){H[2]=o[d][0];break}if(r<=H[2])break}t=F,F===o.length-1&&(H[0]=o[F][0],H[2]=T.redips.offset[2]),$=0,0>F||0>$?e():F!==t&&(H[0]=o[F][0],H[2]=H[0]+T.rows[F].cells[$].offsetHeight,(r<H[0]||r>H[2])&&e())}},p=function(){null!==F&&null!==$&&(N=u(F),g(F),q=F,G=$)},g=function(e,o){var t,n;t=T.rows[e];for(var r=0;r<t.cells.length;r++)n=t.cells[r].style,n.backgroundColor=void 0===o?REDIPS.drag.hover.colorTr:o.color[r].toString(),void 0!==REDIPS.drag.hover.borderTr&&(void 0===o?K>F?n.borderTop=REDIPS.drag.hover.borderTr:n.borderBottom=REDIPS.drag.hover.borderTr:(n.borderTopWidth=o.top[r][0],n.borderTopStyle=o.top[r][1],n.borderTopColor=o.top[r][2],n.borderBottomWidth=o.bottom[r][0],n.borderBottomStyle=o.bottom[r][1],n.borderBottomColor=o.bottom[r][2]))},u=function(e){var o,t,n={color:[],top:[],right:[],bottom:[],left:[]},r=function(e,o){var t="border"+o+"Width",n="border"+o+"Style",r="border"+o+"Color";return[D(e,t),D(e,n),D(e,r)]};o=T.rows[e];for(var d=0;d<o.cells.length;d++)t=o.cells[d],n.color[d]=t.style.backgroundColor,void 0!==REDIPS.drag.hover.borderTr&&(n.top[d]=r(t,"Top"),n.bottom[d]=r(t,"Bottom"));return n},v=function(e,o,t){var n=0,r=0,d=e;if("fixed"!==o&&(n=0-j[0],r=0-j[1]),void 0===t||t===!0){do n+=e.offsetLeft-e.scrollLeft,r+=e.offsetTop-e.scrollTop,e=e.offsetParent;while(e&&"BODY"!==e.nodeName)}else do n+=e.offsetLeft,r+=e.offsetTop,e=e.offsetParent;while(e&&"BODY"!==e.nodeName);return[r,n+d.offsetWidth,r+d.offsetHeight,n]},y=function(){var e,o,t;j=m(),e=[],o=D(T,"position"),"fixed"!==o&&(o=D(T.parentNode,"position"));for(var n=T.rows.length-1;n>=0;n--)"none"!==T.rows[n].style.display&&(e[n]=v(T.rows[n],o));T.redips.offset=v(T,o),T.redips.row_offset=e,_=v(W);for(var n=0;n<M.container.length;n++)o=D(M.container[n].div,"position"),t=v(M.container[n].div,o,!1),M.container[n].offset=t,M.container[n].midstX=(t[1]+t[3])/2,M.container[n].midstY=(t[0]+t[2])/2},m=function(){var e=window.pageYOffset||document.documentElement.scrollTop,o=0;return[o,e]},h=function(e){var o,t,n,r,d,l=X.x,i=X.y;O.flag.x>0&&(y(),f(),l<_[1]&&l>_[3]&&i<_[2]&&i>_[0]&&s()),"object"==typeof e&&(M.obj=e),M.obj===window?(n=t=m()[0],r=M.width-L.width,d=O.page.x):(n=M.obj.scrollLeft,r=M.obj.scrollWidth-M.obj.clientWidth,d=O.div.x),O.flag.x>0&&(0>d&&n>0||d>0&&r>n)?(M.obj===window?(window.scrollBy(d,0),n=m()[0],o=parseInt(Q.style.left,10),isNaN(o)&&(o=0)):M.obj.scrollLeft+=d,setTimeout(h,REDIPS.drag.scroll.speed)):(REDIPS.event.add(M.obj,"scroll",y),O.flag.x=0,H=[0,0,0,0])},w=function(e){var o,t,n,r,d,l=X.x,i=X.y;O.flag.y>0&&(y(),f(),l<_[1]&&l>_[3]&&i<_[2]&&i>_[0]&&s()),"object"==typeof e&&(M.obj=e),M.obj===window?(n=t=m()[1],r=M.height-L.height,d=O.page.y):(n=M.obj.scrollTop,r=M.obj.scrollHeight-M.obj.clientHeight,d=O.div.y),O.flag.y>0&&(0>d&&n>0||d>0&&r>n)?(M.obj===window?(window.scrollBy(0,d),n=m()[1],o=parseInt(Q.style.top,10),isNaN(o)&&(o=0)):M.obj.scrollTop+=d,setTimeout(w,REDIPS.drag.scroll.speed)):(REDIPS.event.add(M.obj,"scroll",y),O.flag.y=0,H=[0,0,0,0])},E=function(e,o){var t,n=[];n[0]=function(e,o){e.redips&&(o.redips={},o.redips.enabled=e.redips.enabled,o.redips.container=e.redips.container,e.redips.enabled&&a(o))},n[1]=function(e,o){e.redips&&(o.redips={},o.redips.emptyRow=e.redips.emptyRow)},t=function(t){var r,d,l=["DIV","TR"];r=e.getElementsByTagName(l[t]),d=o.getElementsByTagName(l[t]);for(var i=0;i<d.length;i++)n[t](r[i],d[i])},"DIV"===e.nodeName?n[0](e,o):"TR"===e.nodeName&&n[1](e,o),t(0),t(1)},b=function(e,t){var n,r,d,l;l=e.className,n=l.match(/climit(\d)_(\d+)/),null!==n&&(r=parseInt(n[1],10),d=parseInt(n[2],10),0===d&&1===t&&(l+=" redips-clone",2===r&&o(!0,e)),d+=t,l=l.replace(/climit\d_\d+/g,"climit"+r+"_"+d),0>=d&&(l=l.replace("redips-clone",""),2===r?(o(!1,e),REDIPS.drag.event.clonedEnd2()):REDIPS.drag.event.clonedEnd1()),e.className=x(l))},o=function(e,o){var n=[];void 0===o?n=W.getElementsByTagName("div"):"string"==typeof o?n=document.querySelectorAll(o):"object"!=typeof o||"DIV"===o.nodeName&&-1!==o.className.indexOf("redips-drag")?n[0]=o:n=o.getElementsByTagName("div"),t(e,n)},t=function(e,o){var t,n,r,d,l,i,s,c,f,p,g,u=[],m=/\bredips-drag\b/i,h=/\bredips-noautoscroll\b/i;for(l=REDIPS.drag.style.opacityDisabled,e===!0||"init"===e?(d=REDIPS.drag.style.borderEnabled,i="move",f=!0):(d=REDIPS.drag.style.borderDisabled,i="auto",f=!1),t=0,n=0;t<o.length;t++)if(m.test(o[t].className))"init"===e||void 0===o[t].redips?(o[t].redips={},o[t].redips.container=W):e===!0&&"number"==typeof l?(o[t].style.opacity="",o[t].style.filter=""):e===!1&&"number"==typeof l&&(o[t].style.opacity=l/100,o[t].style.filter="alpha(opacity="+l+")"),a(o[t],f),o[t].style.borderStyle=d,o[t].style.cursor=i,o[t].redips.enabled=f;else if("init"===e&&(s=D(o[t],"overflow"),"visible"!==s)){for(REDIPS.event.add(o[t],"scroll",y),g=D(o[t],"position"),p=v(o[t],g,!1),c=!h.test(o[t].className),M.container[n]={div:o[t],offset:p,midstX:(p[1]+p[3])/2,midstY:(p[0]+p[2])/2,autoscroll:c},u=o[t].getElementsByTagName("table"),r=0;r<u.length;r++)u[r].sca=M.container[n];n++}},D=function(e,o){return e&&e.currentStyle?e.currentStyle[o]:e&&window.getComputedStyle?document.defaultView.getComputedStyle(e,null)[o]:void 0},I=function(e,o){for(o=o.parentNode;o&&o.nodeName!==e;)o=o.parentNode;return o},x=function(e){return void 0!==e&&(e=e.replace(/^\s+|\s+$/g,"").replace(/\s{2,}/g," ")),e},S=function(e,o,t){var n,r,d;if("string"==typeof e&&(e=document.getElementById(e),e=I("TABLE",e)),"TR"===e.nodeName)for(n=e.getElementsByTagName("td"),r=0;r<n.length;r++)if(n[r].style.backgroundColor=t?t:"","empty"===o)n[r].innerHTML="";else for(d=0;d<n[r].childNodes.length;d++)1===n[r].childNodes[d].nodeType&&(n[r].childNodes[d].style.opacity=o/100,n[r].childNodes[d].style.filter="alpha(opacity="+o+")");else e.style.opacity=o/100,e.style.filter="alpha(opacity="+o+")",e.style.backgroundColor=t?t:""},{obj:Q,objOld:U,td:te,hover:Z,scroll:ee,style:oe,clone:ne,init:e,enableDrag:o,enableDivs:t,rowOpacity:S,getScrollPosition:m,getStyle:D,findParent:I,event:re}}(),REDIPS.event||(REDIPS.event=function(){var e,o;return e=function(e,o,t){e.addEventListener?e.addEventListener(o,t,!1):e.attachEvent?e.attachEvent("on"+o,t):e["on"+o]=t},o=function(e,o,t){e.removeEventListener?e.removeEventListener(o,t,!1):e.detachEvent?e.detachEvent("on"+o,t):e["on"+o]=null},{add:e,remove:o}}());
"use strict";var redips={};redips.init=function(){var e=REDIPS.drag;e.init(),e.event.rowDropped=function(o){var n=parseInt(e.objOld.id.replace("rowid","")),t=parseInt(o.id.replace("rowid","")),r=findParentInTree(n).id;moveAssembly(n,t,r)},e.event.rowDroppedSource=function(){e.rowOpacity(e.objOld,100)},e.event.rowMoved=function(){e.rowOpacity(e.obj,85),e.rowOpacity(e.objOld,20,"White")},e.event.rowClicked=function(){},e.event.rowNotMoved=function(){},e.event.rowCloned=function(){},e.event.rowNotCloned=function(){},e.event.rowDeleted=function(){},e.event.rowUndeleted=function(){e.rowOpacity(e.objOld,100)}};
function initProjectActions(){$("#projectActionInput").keyup(function(e){e.keyCode==ENTER_KEY&&projectActionEnterPressed()})}var scrollBarWidth;$(document).ready(function(){scrollBarWidth=getScrollBarWidth(),document.onkeydown=checkKey,$.ajax({type:"GET",url:"api/projects"}).done(function(e){projects=e,$("#header").html(generateHeaderMarkup(projects.projects)),$("#editNewProjectNameInput").keyup(function(e){e.keyCode==ENTER_KEY&&createNewProject()})})});var getScrollBarWidth=function(){var e,t;return e=document.createElement("div"),e.innerHTML='<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>',e=e.firstChild,document.body.appendChild(e),t=e.offsetWidth-e.clientWidth,document.body.removeChild(e),t};
function checkKey(e){if(e=e||window.event,e.keyCode==KEY_UP_ARROW){e.preventDefault();var t=$(getAncestorTag(document.activeElement,"tr")).prev()[0];t&&$("#"+getNextElementID(t)).focus()}else if(e.keyCode==KEY_DOWN_ARROW){e.preventDefault();var n=$(getAncestorTag(document.activeElement,"tr")).next()[0];n&&$("#"+getNextElementID(n)).focus()}else e.keyCode==KEY_RIGHT_ARROW?(e.preventDefault(),$(getAncestorTag(document.activeElement,"td")).next().find("input").focus()):e.keyCode==KEY_LEFT_ARROW&&(e.preventDefault(),$(getAncestorTag(document.activeElement,"td")).prev().find("input").focus())}function getNextElementID(e){var t=document.activeElement.id;if(t.indexOf("nodeInput")>-1)return"nodeInput"+e.id.replace("rowid","");for(var n=document.activeElement.className.split(" "),r=0;r<n.length;r++){var a=n[r];if(a.indexOf("fieldInput")>-1&&"fieldInput"!=a){var c=a.replace("fieldInput","");return c+e.id.replace("datarowid","")}}}var KEY_UP_ARROW=38,KEY_DOWN_ARROW=40,KEY_LEFT_ARROW=37,KEY_RIGHT_ARROW=39;
function generateSpreadSheetMarkup(){return'<div id="spreadSheetView"><div id="project-action-container"></div><div id="fields-header-row"></div><div id="redips-drag"></div><div id="data-container" onscroll="handleDataScroll()"></div></div>'}function generateHeaderMarkup(e){for(var t='<select id="projectSelector" class="form-control" onchange="selectProject()"><option id="selectProjectOption" value="0">Select Project...</option>',i=0;i<e.length;i++)t+='<option value="'+e[i].id+'">'+e[i].name+"</option>";return t+='<option id="newProjectOption" value="-1">Create New Project...</option></select><input id="editNewProjectNameInput" class="form-control"></input><a href="#" id="save-database-button" class="btn btn-default" onclick="Project.saveToDatabase()">Save to Database</a><a href="#" id="switchViewButton" class="btn btn-default" onclick="Project.switchView()">Switch View</a>'}function generateProjectSelectorMarkup(){return'<table><tr id="headerRow"><tr><div id="project-select-container"><select id="projectActionSelector" class="form-control" onchange="handleProjectAction()"><option value="blank"></option><option value="addField">Add Field</option></select><input id="projectActionInput" class="form-control"></input></div></tr><table>'}function generateFieldsRowMarkup(){for(var e='<table id="fieldHeaderTable"><tr id="fieldHeaderRow">',t=0;t<tree.fields.length;t++)e+=getFieldHeaderMarkup(tree.fields[t].name,t);return e+="</tr></table>"}function generateTreeMarkup(){for(var e='<table id="treeTable">',t=0;t<tree.children.length;t++)e+=addRow(tree.children[t],0,"",0);return e+="</table>"}function addRow(e){var t="",i=10*(e.depth-1),n='<div class="redips-drag pull-right"><i class="glyphicon glyphicon-move"></i></div>',a='<a href="#" class="pull-right btn btn-danger btn-xs delete-button" onclick="deleteNode('+e.id+')"><i class="glyphicon glyphicon-remove"></i></a>',r='<a href="#"  class="pull-right btn btn-info btn-xs copy-button" onclick="copyNode('+e.id+')"><i class="glyphicon glyphicon-plus"></i></a>',d='<a id="expandID'+e.id+'" href="#" style="margin-left:'+i+'px" onclick="toggleExpandIcon('+e.id+')" class="btn btn-xs"><span id="icon'+e.id+'" class="glyphicon glyphicon-chevron-right"></span></a>',l='<a id="expandID'+e.id+'" href="#" style="margin-left:'+i+'px" onclick="toggleExpandIcon('+e.id+')" class="btn btn-xs"><span id="icon'+e.id+'" class="glyphicon glyphicon-chevron-down"></span></a>',o='<a id="expandID'+e.id+'" href="#" style="margin-left:'+i+'px" onclick="toggleExpandIcon('+e.id+')" class="btn btn-xs"><span id="icon'+e.id+'"></span></a>';if(t+='<tr id="rowid'+e.id+'" class="nodeRow"><td class="redips-rowhandler cell"><div class="node-container">',t+=a+r+n,e.children&&e.children.length>0?t+=l:e._children&&e._children.length>0?t+=d:(t+=o,i-=10),t+='<input id="nodeInput'+e.id+'" class="nodeTextInput" type="text" value="'+e.name+'" style="width:'+(DEFAULT_NODE_INPUT_WIDTH-i)+'px" oninput="updateNodeName(this)"/></div></td></tr>',e.children&&e.children.length>0)for(var s in e.children)t+=addRow(e.children[s]);return t}function generateDataMarkup(){for(var e='<table id="dataTable">',t=0;t<tree.children.length;t++)e+=addDataRow(tree.children[t]);return e+="</table>"}function addDataRow(e){for(var t='<tr id="datarowid'+e.id+'" class="dataRow">',i=0;i<tree.fields.length;i++){var n=tree.fields[i],a="";e.values&&e.values[n.name]&&(a=Field.formatValue(n,e.values[n.name])),t+=getFieldCellMarkup(n.name,e.id,a)}if(t+="</tr>",e.children&&e.children.length>0)for(var i=0;i<e.children.length;i++)t+=addDataRow(e.children[i]);return t}function addColumn(e){$("#fieldHeaderRow").append(getFieldHeaderMarkup(e,tree.fields.length)),$(".dataRow").each(function(t,i){$(i).append(getFieldCellMarkup(e,i.id.replace("datarowid","")))})}function getFieldHeaderMarkup(e,t){return'<td class="fieldHeaderCell"><div class="fieldHeaderContainer"><div class="moveColGrip"></div><div class="fieldNameInputContainer"><textarea id="colHeaderInput'+e+'" class="fieldNameInput">'+e+'</textarea></div><div class="fieldHeaderButton"><img src="images/down-arrow.png" onclick="showMenu(event, \''+e+'\');" style="cursor:pointer"/></div><div id="grip'+t+'" class="resizeColGrip" onmousedown="startResize(event, this)"></div></div></td>'}function getFieldCellMarkup(e,t,i){return'<td class="cell"><input class="fieldInput fieldInput'+e+'" type="text" id="'+e+t+'" value="'+i+'" oninput="updateFieldValue(\''+e+"', '"+t+"')\" onfocus=\"displayRawValue('"+e+"', '"+t+"')\"/></td>"}function getFieldMenuMarkup(e,t,i){var n=Project.getField(e),a=new Menu,r=new MenuItem("Number",Field.NUMBER,"datatype",n),d=new MenuItem("Format"),l=new MenuItem("Number",Field.NUMBER_FORMAT,"format",n);l.items.push(new MenuItem("0",0,"precision",n));for(var o="0.",s=1;11>s;s++)o+="0",l.items.push(new MenuItem(o,s,"precision",n));d.items.push(l);var c=new MenuItem("Percent",Field.PERCENT_FORMAT,"format",n);c.items.push(new MenuItem("0",0,"precision",n));for(var o="0.",s=1;11>s;s++)o+="0",c.items.push(new MenuItem(o+"%",s,"precision",n));d.items.push(c);var u=new MenuItem("Scientific",Field.SCIENTIFIC_FORMAT,"format",n);u.items.push(new MenuItem("0",0,"precision",n));for(var o="0.",s=1;11>s;s++)o+="0",u.items.push(new MenuItem(o+"e+0",s,"precision",n));d.items.push(u),r.items.push(d);var p=new MenuItem("Aggregation");p.items.push(new MenuItem("No Aggregation",Field.NO_AGGREGATION,"agg_type",n));for(var h=new MenuItem("Sum any defined children",Field.SUM_ANY_AGGREGATION,"agg_type",n),s=0;s<tree.fields.length;s++){var m=tree.fields[s];m.name!=n.name&&h.items.push(new MenuItem(m.name,m.name,"agg_qty_field",n))}p.items.push(h),r.items.push(p),a.items=[],a.items.push(r),a.items.push(new MenuItem("Text",Field.STRING,"datatype",n));var g='<div id="fieldMenu" style="left:'+t+"px;top:"+i+'px;">';return g+=generateMenuMarkup(a),g+="</div>"}function generateMenuMarkup(e){for(var t="<ul>",i=0;i<e.items.length;i++){var n=e.items[i];t+='<li onclick="Menu.handleClick('+n.id+');">';var a="uncheckedMenuItem";n.field&&n.checked&&(a="checkedMenuItem"),t+='<img id="menuItem'+n.id+'" src="'+CHECK_MARK_IMAGE_PATH+'" class="'+a+'"/>',t+=n.display,n.items&&n.items.length>0&&(t+='<div class="arrowRight"></div>'),n.items&&n.items.length>0&&(t+=generateMenuMarkup(n)),t+="</li>"}return t+"</ul>"}var DEFAULT_NODE_INPUT_WIDTH=390;
function displaySpreadSheet(){Project.cleanseTree(),$("body").append(generateSpreadSheetMarkup()),$("#project-action-container").html(generateProjectSelectorMarkup()),$("#fields-header-row").html(generateFieldsRowMarkup()),$("#fields-header-row").css("right",scrollBarWidth+"px"),$("#data-container").html(generateDataMarkup()),$("#redips-drag").html(generateTreeMarkup()),$("#redips-drag").css("bottom",scrollBarWidth+"px"),redips.init(),initProjectActions()}function projectActionEnterPressed(){if("addField"==$("#projectActionSelector").val()){var e=$("#projectActionInput").val();tree.fields.push(new Field(e)),addColumn(e),$("#projectActionInput").hide(),$("#projectActionSelector").val("blank")}}function createNewProject(){$("#selectProjectOption").remove();var e=$("#editNewProjectNameInput").val();$("#editNewProjectNameInput").hide();var t=projects.nextProjectID.toString(),r=document.createElement("option");r.text=e,r.value=t,$(r).insertBefore("#projectSelector option:nth-child("+$("#projectSelector").length+")"),$("#projectSelector").val(t),$.ajax({type:"POST",url:"/api/addProject?projectName="+e}),tree={projectID:t,projectName:e,name:e,version:1,nextNodeID:2,fields:[],children:[{id:1,name:e,children:[]}]},displaySpreadSheet(),Project.saveToDatabase()}function showMenu(e,t){0===$("#fieldMenu").length&&($(getFieldMenuMarkup(t,e.clientX,e.clientY)).appendTo("body"),$("#fieldMenu").mouseleave(function(){$("#fieldMenu").remove()}))}var handleProjectAction=function(){"addField"==$("#projectActionSelector").val()&&($("#projectActionInput").val("Type New Field Name and Press Enter to Create"),$("#projectActionInput").show().focus().select())};
var resizeColumnLeft=0,resizeField="0",startResize=function(e,i){$(document).bind("touchmove.resizeColGrip mousemove.resizeColGrip",resizeDrag).bind("touchend.resizeColGrip mouseup.resizeColGrip",resizeEnd),document.getElementById("resizeLine").style.visibility="visible",document.getElementById("resizeLine").style.left=e.pageX+"px",resizeColumnLeft=$(i.parentNode).position().left,resizeField=i.parentNode.id.replace("colHeader","")},resizeEnd=function(e){$(document).unbind("touchmove.resizeColGrip mousemove.resizeColGrip",resizeDrag).unbind("touchend.resizeColGrip mouseup.resizeColGrip",resizeEnd),document.getElementById("resizeLine").style.visibility="hidden";var i=e.pageX-resizeColumnLeft-GRIPS_WIDTH;i<MIN_COLUMN_WIDTH&&(i=MIN_COLUMN_WIDTH),document.getElementById("colHeaderInput"+resizeField).style.width=i+"px";for(var t=document.querySelectorAll(".fieldInput"+resizeField),r=0;r<t.length;r++)t[r].style.width=i+8+"px"},resizeDrag=function(e){e.pageX>resizeColumnLeft+MIN_COLUMN_WIDTH+GRIPS_WIDTH&&(document.getElementById("resizeLine").style.left=e.pageX+"px")};
function handleDataScroll(){$("#redips-drag").scrollTop($("#data-container").scrollTop()),$("#fields-header-row").scrollLeft($("#data-container").scrollLeft())}function printProject(){console.log(JSON.stringify(tree,null,"	"))}function displayRawValue(e,n){var i=Project.getField(e),r=findNodeInTree(parseInt(n));$("#"+e+n).val(r.values&&r.values[i.name]?r.values[i.name]:"")}function setDepths(e){for(var n in e.children)e.children[n].depth=e.depth+1,setDepths(e.children[n])}function isNodeChildless(e){return!(e.children&&0!==e.children.length||e._children&&0!==e._children.length)}function isNodeCollapsed(e){return e._children&&e._children.length>0}function isNodeExpanded(e){return e.children&&e.children.length>0}function visit(e,n,i,r){if(e){i(e,r);var d=n(e);for(var t in d)visit(d[t],n,i)}}function visitDescendants(e,n,i){if(e)for(var r in e.children)visit(e.children[r],n,i)}function toggleExpandIcon(e){var n=findNodeInTree(e);isNodeExpanded(n)?collapseNode(n):isNodeCollapsed(n)&&expandNode(n)}function collapseNode(e){visitDescendants(e,getChildren,function(e){$("#datarowid"+e.id).remove(),$("#rowid"+e.id).remove()}),e._children=e.children,e.children=[],$("#icon"+e.id).attr("class","glyphicon glyphicon-chevron-right")}function expandNode(e){e.children=e._children,e._children=[];for(var n,i=e.children.length-1;i>=0;i--)n=e.children[i],$(addDataRow(n)).insertAfter($("#datarowid"+e.id)),$(addRow(n,"","")).insertAfter($("#rowid"+e.id));$("#icon"+e.id).attr("class","glyphicon glyphicon-chevron-down")}function updateFieldValue(e,n){updateNodeValueInTree(n,e,$("#"+e+n).val());for(var i in tree.children)aggregate_any(tree.children[i],e)}function updateNodeValueInTree(e,n,i){var r=null;for(var d in tree.children)r=tree.children[d],r.id==e?(r.values||(r.values={}),r.values[n]=i):updateNodeValue(e,r,n,i)}function updateNodeValue(e,n,i,r){var d=null;if(n&&n.id==e)return n;if(n)for(var t in n.children)if(d=updateNodeValue(e,n.children[t],i,r))return d.values||(d.values={}),d.values[i]=r,d;return null}var projects=null,tree,ENTER_KEY=13,MIN_COLUMN_WIDTH=70,GRIPS_WIDTH=16,selectProject=function(){"newProjectOption"===$("#projectSelector").find(":selected").attr("id")?($("#editNewProjectNameInput").val("Type New Project Name and Press Enter to Create"),$("#editNewProjectNameInput").show().focus().select()):($("#projectSelector").val()>0&&$("#selectProjectOption").remove(),$.ajax({type:"GET",url:"api/tree?projectID="+$("#projectSelector").val()}).done(function(e){tree=e,displaySpreadSheet(),$("#tree-container").hide()}))},moveAssembly=function(e,n,i){var r=findNodeInTree(i),d=findNodeInTree(n),t=findNodeInTree(e);r?r.children.splice(r.children.indexOf(t),1):tree.children.splice(tree.children.indexOf(t),1),isNodeCollapsed(d)&&expandNode(d),$("#icon"+d.id).attr("class","glyphicon glyphicon-chevron-down"),isNodeChildless(r)&&$("#icon"+r.id).attr("class",""),d.children.push(t),setDepths(d),visit(t,getChildren,function(e){$("#rowid"+e.id).remove(),$("#datarowid"+e.id).remove()}),$(addRow(t)).insertAfter($("#rowid"+n)),$(addDataRow(t)).insertAfter($("#datarowid"+n)),visit(t,getChildren,function(e){REDIPS.drag.enableDivs("init",$("#rowid"+e.id).find("div"))})},findNodeInTree=function(e){for(var n in tree.children){var i=findNode(e,tree.children[n]);if(i)return i}},findNode=function(e,n){if(n.id===e)return n;for(var i in n.children){var r=findNode(e,n.children[i]);if(r)return r}},findParentInTree=function(e){for(var n in tree.children){var i=findParent(e,tree.children[n],null);if(i)return i}},findParent=function(e,n,i){if(n.id===e)return i;for(var r in n.children){var d=findParent(e,n.children[r],n);if(d)return d}},deleteNode=function(e){var n=findNodeInTree(e),i=findParentInTree(e);visit(n,getChildren,function(e){$("#rowid"+e.id).remove(),$("#datarowid"+e.id).remove()});for(var r in i.children)if(i.children[r].id==e){i.children.splice(r,1);break}isNodeChildless(i)&&$("#icon"+i.id).attr("class","")},copyNode=function(e){var n=findNodeInTree(e),i=findParentInTree(e),r=jQuery.extend(!0,{},n);assignNewNodeIDs(r),void 0===i?tree.children.splice(tree.children.indexOf(n),0,r):i.children.splice(i.children.indexOf(n),0,r),$(addRow(r)).insertBefore($("#rowid"+e)),$(addDataRow(r)).insertBefore($("#datarowid"+e)),visit(r,getChildren,function(e){REDIPS.drag.enableDivs("init",$("#rowid"+e.id).find("div"))})},assignNewNodeIDs=function(e){e.id=tree.nextNodeID++;for(var n in e.children)assignNewNodeIDs(e.children[n])},getAncestorTag=function(e,n){for(n=n.toLowerCase();e&&e.parentNode;)if(e=e.parentNode,e.tagName&&e.tagName.toLowerCase()==n)return e},getChildren=function(e){return e.children&&e.children.length>0?e.children:null},updateNodeName=function(e){var n=getAncestorTag(e,"tr"),i=parseInt(n.id.replace("rowid","")),r=findNodeInTree(i);r.name=e.value,$("#nodeInput"+i).attr("value",r.name)};
var Field=function(i){this.name=i,this.datatype=Field.NUMBER,this.format=Field.NUMBER_FORMAT,this.precision=2,this.agg_type=Field.NO_AGGREGATION,this.agg_qty_field=null};Field.NUMBER="0",Field.STRING="1",Field.CHOICE="2",Field.NO_AGGREGATION="0",Field.SUM_ANY_AGGREGATION="1",Field.NUMBER_FORMAT="0",Field.PERCENT_FORMAT="1",Field.SCIENTIFIC_FORMAT="2",Field.formatValue=function(i,e){if(i.datatype===Field.NUMBER){if(i.format===Field.NUMBER_FORMAT)return e.toFixed(i.precision);if(i.format===Field.PERCENT_FORMAT)return(100*e).toFixed(i.precision)+"%";if(i.format===Field.SCIENTIFIC_FORMAT)return Number(e).toExponential(i.precision)}else{if(i.datatype===Field.STRING)return e;i.datatype===Field.CHOICE}};
var Menu=function(){Menu.menu=this};Menu.menu,Menu.handleClick=function(e){var t=Menu.menu.getMenuItem(e,Menu.menu),n=Menu.menu.getMenuItemParent(e,Menu.menu);if(t.field){var u=Project.getField(t.field.name);u[t.varName]=t.value;for(var m=0;m<n.items.length;m++)$("#menuItem"+n.items[m].id).removeClass("checkedMenuItem").addClass("uncheckedMenuItem");$("#menuItem"+e).removeClass("uncheckedMenuItem").addClass("checkedMenuItem"),n===Menu.menu&&Project.updateFieldFormatting(u)}},Menu.prototype.getMenuItem=function(e,t){if(e===t.id)return t;if(t.items&&t.items.length>0)for(var n,u=0;u<t.items.length;u++)if(n=this.getMenuItem(e,t.items[u]))return n;return null},Menu.prototype.getMenuItemParent=function(e,t){if(t.items&&t.items.length>0)for(var n=0;n<t.items.length;n++){if(t.items[n].id===e)return t;var u=this.getMenuItemParent(e,t.items[n]);if(u)return u}return null};
var MenuItem=function(i,t,e,s){this.display=i,this.value=t,this.varName=e,this.field=s,this.items=[],this.id=MenuItem.id++,this.parent=-1,this.checked=s?s[e]===t:!1};MenuItem.id=0;
function Project(){}Project.getField=function(e){for(var t=0;t<tree.fields.length;t++){var r=tree.fields[t];if(r.name===e)return r}return null},Project.saveToDatabase=function(){$.ajax({type:"POST",url:"/api/tree",dataType:"json",data:{json:JSON.stringify(tree)}})},Project.updateFieldFormatting=function(e){$(".fieldInput"+e.name).each(function(t){var r=$(this).attr("id").replace(e.name,""),n=findNodeInTree(parseInt(r));if(n.values){var a=Number(n.values[e.name]);$(this).val(Field.formatValue(e,a))}})},Project.cleanseTree=function(){visit(tree,getChildren,function(e){e.children||(e.children=[]),delete e.parent})},Project.getTree=function(){return tree},Project.switchView=function(){$("#spreadSheetView").length?($("#spreadSheetView").remove(),displayTreeView(tree)):($("#tree-container").remove(),displaySpreadSheet())};
//# sourceMappingURL=data:application/json;base64,