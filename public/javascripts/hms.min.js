function aggregate_any(e,a){if(e.children&&0!==e.children.length){for(var l=0,n=0;n<e.children.length;n++)l+=aggregate_any(e.children[n],a);return e.values||(e.values={}),e.values[a]=l,document.getElementById(a+e.id).value=l,l}return e.values&&e.values[a]?parseFloat(e.values[a]):0}
"use strict";var REDIPS=REDIPS||{};REDIPS.drag=function(){var e,o,t,n,r,d,l,i,a,s,c,f,p,g,u,v,y,m,h,w,E,b,D,I,S,R,P,x,N,T,C,B,j,k=null,L={width:0,height:0},M={width:null,height:null,container:[],obj:null},O={page:{x:0,y:0},div:{x:0,y:0},flag:{x:0,y:0}},Y=[],H=[],W=null,_=null,X={x:0,y:0},A={x:0,y:0,value:7,flag:!1},V=!1,z=!1,F=null,q=null,K=null,$=null,G=null,J=null,Q=!1,U=!1,Z={colorTd:"#FFCFAE",colorTr:"#9BB3DA"},ee={enable:!0,bound:25,speed:20},oe={borderDisabled:"dotted",opacityDisabled:"",rowEmptyColor:"white"},te={},ne={keyDiv:!1,keyRow:!1,sendBack:!1,drop:!1},re={cloned:function(){},clonedDropped:function(){},clonedEnd1:function(){},clonedEnd2:function(){},dropped:function(){},droppedBefore:function(){},finish:function(){},notCloned:function(){},notMoved:function(){},rowChanged:function(){},rowClicked:function(){},rowCloned:function(){},rowDropped:function(){},rowDroppedBefore:function(){},rowDroppedSource:function(){},rowMoved:function(){},rowNotCloned:function(){},rowNotMoved:function(){}};return e=function(){if(W=document.getElementById("redips-drag"),j=m(),!document.getElementById("redips_clone")){var e=document.createElement("div");e.id="redips_clone",e.style.width=e.style.height="1px",W.appendChild(e)}o("init",".redips-drag"),T=document.getElementById("treeTable"),T.redips={},c(),REDIPS.event.add(window,"resize",c),REDIPS.event.add(window,"scroll",y)},n=function(e){var o,t,n,l,i=e||window.event;if(i.cancelBubble=!0,i.stopPropagation&&i.stopPropagation(),V=i.shiftKey,window.getSelection)window.getSelection().removeAllRanges();else if(document.selection&&"Text"===document.selection.type)try{document.selection.empty()}catch(a){}return n=X.x=i.clientX,l=X.y=i.clientY,A.x=n,A.y=l,A.flag=!1,REDIPS.drag.objOld=U=Q||this,REDIPS.drag.obj=Q=this,z=Q.className.indexOf("redips-clone")>-1,REDIPS.drag.obj=Q=R(Q),y(),F=$=null,f(),K=q=F,J=G=$,REDIPS.drag.event.rowClicked(te.current),null!==F&&null!==$||(f(),K=q=F,J=G=$,null!==F&&null!==$)?(C=B=!1,REDIPS.event.add(document,"mousemove",d),REDIPS.event.add(document,"mouseup",r),null!==F&&(N=u(F)),t=D(T,"position"),"fixed"!==t&&(t=D(T.parentNode,"position")),o=v(Q,t),k=[l-o[0],o[1]-n,o[2]-l,n-o[3]],!1):!0},R=function(e){var o,t,n;return"DIV"===e.nodeName?(n=e,e=I("TR",e),void 0===e.redips&&(e.redips={}),e.redips.div=n,e):(t=e,o=document.createElement("table"),o.innerHTML='<tr id="'+t.id+'" class="'+t.classList+'">'+t.innerHTML+"</tr>",o.redips={},o.redips.sourceRow=t,E(t,o.rows[0]),document.getElementById("redips_clone").appendChild(o),o)},P=function(e){var o,t,n;n=function(e){var o;void 0!==e.redips&&e.redips.emptyRow?S(e,"empty",REDIPS.drag.style.rowEmptyColor):(o=I("TABLE",e),o.deleteRow(e.rowIndex))};var r=Q;e>T.rows.length-1&&(e=T.rows.length-1);var d=T.rows[e];t=r.getElementsByTagName("tr")[0],r.parentNode.removeChild(r),o=REDIPS.drag.event.rowDroppedBefore(T,r.redips.sourceRow.rowIndex),o!==!1&&(e<T.rows.length?d.parentNode.insertBefore(t,d.nextSibling):(d.parentNode.appendChild(t),d=T.rows[0]),B||n(r.redips.sourceRow),delete t.redips.emptyRow,REDIPS.drag.event.rowDropped(d))},r=function(e){var o,t,n,a,s,c,f=e||window.event;if(n=f.clientX,a=f.clientY,O.flag.x=O.flag.y=0,REDIPS.event.remove(document,"mousemove",d),REDIPS.event.remove(document,"mouseup",r),W.onselectstart=null,i(Q),M.width=document.documentElement.scrollWidth,M.height=document.documentElement.scrollHeight,O.flag.x=O.flag.y=0,null===F||null===$)REDIPS.drag.event.notMoved();else{if(REDIPS.drag.td.target=te.target=T.rows[F].cells[$],g(F,N),o=F,C)if(K===o){for(t=Q.getElementsByTagName("tr")[0],U.style.backgroundColor=t.style.backgroundColor,s=0;s<t.cells.length;s++)U.cells[s].style.backgroundColor=t.cells[s].style.backgroundColor;Q.parentNode.removeChild(Q),delete U.redips.emptyRow,B?REDIPS.drag.event.rowNotCloned():REDIPS.drag.event.rowDroppedSource(te.target)}else P(o);else REDIPS.drag.event.rowNotMoved();B||A.flag?B&&K===F&&J===$?(Q.parentNode.removeChild(Q),Y[U.id]-=1,REDIPS.drag.event.notCloned()):B&&REDIPS.drag.clone.drop===!1&&(n<T.redips.offset[3]||n>T.redips.offset[1]||a<T.redips.offset[0]||a>T.redips.offset[2])?(Q.parentNode.removeChild(Q),Y[U.id]-=1,REDIPS.drag.event.notCloned()):(c=REDIPS.drag.event.droppedBefore(te.target),l(c)):REDIPS.drag.event.notMoved(),y(),REDIPS.drag.event.finish()}q=G=null},l=function(e){var o,t=null;if(e!==!1){if(ne.sendBack===!0){o=te.target.getElementsByTagName("DIV");for(var n=0;n<o.length;n++)if(Q!==o[n]&&0===Q.id.indexOf(o[n].id)){t=o[n];break}if(t)return b(t,1),void Q.parentNode.removeChild(Q)}te.target.appendChild(Q),a(Q),REDIPS.drag.event.dropped(te.target),B&&(REDIPS.drag.event.clonedDropped(te.target),b(U,-1))}else B&&Q.parentNode&&Q.parentNode.removeChild(Q)},a=function(e,o){e.onmousedown=o===!1?null:n},i=function(e){e.style.top="",e.style.left="",e.style.position="",e.style.zIndex=""},d=function(e){var o,t,n,r,d,l,i,a=e||window.event,c=REDIPS.drag.scroll.bound;if(t=X.x=a.clientX,n=X.y=a.clientY,r=Math.abs(A.x-t),d=Math.abs(A.y-n),C||((z||REDIPS.drag.clone.keyRow===!0&&V)&&(B=!0),REDIPS.drag.objOld=U=Q,REDIPS.drag.obj=Q=R(Q),Q.style.zIndex=999,Q.style.position="fixed",y(),f(),B?REDIPS.drag.event.rowCloned():REDIPS.drag.event.rowMoved(),p(),t>L.width-k[1]&&(Q.style.left=L.width-(k[1]+k[3])+"px"),n>L.height-k[2]&&(Q.style.top=L.height-(k[0]+k[2])+"px")),C=!0,t>k[3]&&t<L.width-k[1]&&(Q.style.left=t-k[3]+"px"),n>k[0]&&n<L.height-k[2]&&(Q.style.top=n-k[0]+"px"),t<_[1]&&t>_[3]&&n<_[2]&&n>_[0]&&0===O.flag.x&&0===O.flag.y&&(H.containTable||t<H[3]||t>H[1]||n<H[0]||n>H[2])&&(f(),s()),REDIPS.drag.scroll.enable)for(O.page.x=c-(L.width/2>t?t-k[3]:L.width-t-k[1]),O.page.x>0?(O.page.x>c&&(O.page.x=c),i=0,O.page.x*=t<L.width/2?-1:1,O.page.x<0&&0>=i||O.page.x>0&&i>=M.width-L.width||0===O.flag.x++&&(REDIPS.event.remove(window,"scroll",y),h(window))):O.page.x=0,O.page.y=c-(L.height/2>n?n-k[0]:L.height-n-k[2]),O.page.y>0?(O.page.y>c&&(O.page.y=c),i=window.pageYOffset||document.documentElement.scrollTop,O.page.y*=n<L.height/2?-1:1,O.page.y<0&&0>=i||O.page.y>0&&i>=M.height-L.height||0===O.flag.y++&&(REDIPS.event.remove(window,"scroll",y),w(window))):O.page.y=0,l=0;l<M.container.length;l++){if(o=M.container[l],o.autoscroll&&t<o.offset[1]&&t>o.offset[3]&&n<o.offset[2]&&n>o.offset[0]){O.div.x=c-(o.midstX>t?t-k[3]-o.offset[3]:o.offset[1]-t-k[1]),O.div.x>0?(O.div.x>c&&(O.div.x=c),O.div.x*=t<o.midstX?-1:1,0===O.flag.x++&&(REDIPS.event.remove(o.div,"scroll",y),h(o.div))):O.div.x=0,O.div.y=c-(o.midstY>n?n-k[0]-o.offset[0]:o.offset[2]-n-k[2]),O.div.y>0?(O.div.y>c&&(O.div.y=c),O.div.y*=n<o.midstY?-1:1,0===O.flag.y++&&(REDIPS.event.remove(o.div,"scroll",y),w(o.div))):O.div.y=0;break}O.div.x=O.div.y=0}a.cancelBubble=!0,a.stopPropagation&&a.stopPropagation()},s=function(){(F!==q||$!==G)&&(null!==q&&null!==G&&(g(q,N),REDIPS.drag.td.previous=te.previous=T.rows[q].cells[G],REDIPS.drag.td.current=te.current=T.rows[F].cells[$],F!==q&&REDIPS.drag.event.rowChanged(te.current)),p())},c=function(){L.width=window.innerWidth,L.height=window.innerHeight,M.width=document.documentElement.scrollWidth,M.height=document.documentElement.scrollHeight,y()},f=function(){var e,o,t,n,r,d,l=[];if(e=function(){null!==q&&null!==G&&(F=q,$=G)},n=X.x,r=X.y,l[0]=T.redips.offset[0],l[1]=T.redips.offset[1],l[2]=T.redips.offset[2],l[3]=T.redips.offset[3],void 0!==T.sca&&(l[0]=l[0]>T.sca.offset[0]?l[0]:T.sca.offset[0],l[1]=l[1]<T.sca.offset[1]?l[1]:T.sca.offset[1],l[2]=l[2]<T.sca.offset[2]?l[2]:T.sca.offset[2],l[3]=l[3]>T.sca.offset[3]?l[3]:T.sca.offset[3]),l[3]<n&&n<l[1]&&l[0]<r&&r<l[2]){for(o=T.redips.row_offset,F=0;F<o.length-1;F++)if(void 0!==o[F]){if(H[0]=o[F][0],void 0!==o[F+1])H[2]=o[F+1][0];else for(d=F+2;d<o.length;d++)if(void 0!==o[d]){H[2]=o[d][0];break}if(r<=H[2])break}t=F,F===o.length-1&&(H[0]=o[F][0],H[2]=T.redips.offset[2]),$=0,0>F||0>$?e():F!==t&&(H[0]=o[F][0],H[2]=H[0]+T.rows[F].cells[$].offsetHeight,(r<H[0]||r>H[2])&&e())}},p=function(){null!==F&&null!==$&&(N=u(F),g(F),q=F,G=$)},g=function(e,o){var t,n;t=T.rows[e];for(var r=0;r<t.cells.length;r++)n=t.cells[r].style,n.backgroundColor=void 0===o?REDIPS.drag.hover.colorTr:o.color[r].toString(),void 0!==REDIPS.drag.hover.borderTr&&(void 0===o?K>F?n.borderTop=REDIPS.drag.hover.borderTr:n.borderBottom=REDIPS.drag.hover.borderTr:(n.borderTopWidth=o.top[r][0],n.borderTopStyle=o.top[r][1],n.borderTopColor=o.top[r][2],n.borderBottomWidth=o.bottom[r][0],n.borderBottomStyle=o.bottom[r][1],n.borderBottomColor=o.bottom[r][2]))},u=function(e){var o,t,n={color:[],top:[],right:[],bottom:[],left:[]},r=function(e,o){var t="border"+o+"Width",n="border"+o+"Style",r="border"+o+"Color";return[D(e,t),D(e,n),D(e,r)]};o=T.rows[e];for(var d=0;d<o.cells.length;d++)t=o.cells[d],n.color[d]=t.style.backgroundColor,void 0!==REDIPS.drag.hover.borderTr&&(n.top[d]=r(t,"Top"),n.bottom[d]=r(t,"Bottom"));return n},v=function(e,o,t){var n=0,r=0,d=e;if("fixed"!==o&&(n=0-j[0],r=0-j[1]),void 0===t||t===!0){do n+=e.offsetLeft-e.scrollLeft,r+=e.offsetTop-e.scrollTop,e=e.offsetParent;while(e&&"BODY"!==e.nodeName)}else do n+=e.offsetLeft,r+=e.offsetTop,e=e.offsetParent;while(e&&"BODY"!==e.nodeName);return[r,n+d.offsetWidth,r+d.offsetHeight,n]},y=function(){var e,o,t;j=m(),e=[],o=D(T,"position"),"fixed"!==o&&(o=D(T.parentNode,"position"));for(var n=T.rows.length-1;n>=0;n--)"none"!==T.rows[n].style.display&&(e[n]=v(T.rows[n],o));T.redips.offset=v(T,o),T.redips.row_offset=e,_=v(W);for(var n=0;n<M.container.length;n++)o=D(M.container[n].div,"position"),t=v(M.container[n].div,o,!1),M.container[n].offset=t,M.container[n].midstX=(t[1]+t[3])/2,M.container[n].midstY=(t[0]+t[2])/2},m=function(){var e=window.pageYOffset||document.documentElement.scrollTop,o=0;return[o,e]},h=function(e){var o,t,n,r,d,l=X.x,i=X.y;O.flag.x>0&&(y(),f(),l<_[1]&&l>_[3]&&i<_[2]&&i>_[0]&&s()),"object"==typeof e&&(M.obj=e),M.obj===window?(n=t=m()[0],r=M.width-L.width,d=O.page.x):(n=M.obj.scrollLeft,r=M.obj.scrollWidth-M.obj.clientWidth,d=O.div.x),O.flag.x>0&&(0>d&&n>0||d>0&&r>n)?(M.obj===window?(window.scrollBy(d,0),n=m()[0],o=parseInt(Q.style.left,10),isNaN(o)&&(o=0)):M.obj.scrollLeft+=d,setTimeout(h,REDIPS.drag.scroll.speed)):(REDIPS.event.add(M.obj,"scroll",y),O.flag.x=0,H=[0,0,0,0])},w=function(e){var o,t,n,r,d,l=X.x,i=X.y;O.flag.y>0&&(y(),f(),l<_[1]&&l>_[3]&&i<_[2]&&i>_[0]&&s()),"object"==typeof e&&(M.obj=e),M.obj===window?(n=t=m()[1],r=M.height-L.height,d=O.page.y):(n=M.obj.scrollTop,r=M.obj.scrollHeight-M.obj.clientHeight,d=O.div.y),O.flag.y>0&&(0>d&&n>0||d>0&&r>n)?(M.obj===window?(window.scrollBy(0,d),n=m()[1],o=parseInt(Q.style.top,10),isNaN(o)&&(o=0)):M.obj.scrollTop+=d,setTimeout(w,REDIPS.drag.scroll.speed)):(REDIPS.event.add(M.obj,"scroll",y),O.flag.y=0,H=[0,0,0,0])},E=function(e,o){var t,n=[];n[0]=function(e,o){e.redips&&(o.redips={},o.redips.enabled=e.redips.enabled,o.redips.container=e.redips.container,e.redips.enabled&&a(o))},n[1]=function(e,o){e.redips&&(o.redips={},o.redips.emptyRow=e.redips.emptyRow)},t=function(t){var r,d,l=["DIV","TR"];r=e.getElementsByTagName(l[t]),d=o.getElementsByTagName(l[t]);for(var i=0;i<d.length;i++)n[t](r[i],d[i])},"DIV"===e.nodeName?n[0](e,o):"TR"===e.nodeName&&n[1](e,o),t(0),t(1)},b=function(e,t){var n,r,d,l;l=e.className,n=l.match(/climit(\d)_(\d+)/),null!==n&&(r=parseInt(n[1],10),d=parseInt(n[2],10),0===d&&1===t&&(l+=" redips-clone",2===r&&o(!0,e)),d+=t,l=l.replace(/climit\d_\d+/g,"climit"+r+"_"+d),0>=d&&(l=l.replace("redips-clone",""),2===r?(o(!1,e),REDIPS.drag.event.clonedEnd2()):REDIPS.drag.event.clonedEnd1()),e.className=x(l))},o=function(e,o){var n=[];void 0===o?n=W.getElementsByTagName("div"):"string"==typeof o?n=document.querySelectorAll(o):"object"!=typeof o||"DIV"===o.nodeName&&-1!==o.className.indexOf("redips-drag")?n[0]=o:n=o.getElementsByTagName("div"),t(e,n)},t=function(e,o){var t,n,r,d,l,i,s,c,f,p,g,u=[],m=/\bredips-drag\b/i,h=/\bredips-noautoscroll\b/i;for(l=REDIPS.drag.style.opacityDisabled,e===!0||"init"===e?(d=REDIPS.drag.style.borderEnabled,i="move",f=!0):(d=REDIPS.drag.style.borderDisabled,i="auto",f=!1),t=0,n=0;t<o.length;t++)if(m.test(o[t].className))"init"===e||void 0===o[t].redips?(o[t].redips={},o[t].redips.container=W):e===!0&&"number"==typeof l?(o[t].style.opacity="",o[t].style.filter=""):e===!1&&"number"==typeof l&&(o[t].style.opacity=l/100,o[t].style.filter="alpha(opacity="+l+")"),a(o[t],f),o[t].style.borderStyle=d,o[t].style.cursor=i,o[t].redips.enabled=f;else if("init"===e&&(s=D(o[t],"overflow"),"visible"!==s)){for(REDIPS.event.add(o[t],"scroll",y),g=D(o[t],"position"),p=v(o[t],g,!1),c=!h.test(o[t].className),M.container[n]={div:o[t],offset:p,midstX:(p[1]+p[3])/2,midstY:(p[0]+p[2])/2,autoscroll:c},u=o[t].getElementsByTagName("table"),r=0;r<u.length;r++)u[r].sca=M.container[n];n++}},D=function(e,o){return e&&e.currentStyle?e.currentStyle[o]:e&&window.getComputedStyle?document.defaultView.getComputedStyle(e,null)[o]:void 0},I=function(e,o){for(o=o.parentNode;o&&o.nodeName!==e;)o=o.parentNode;return o},x=function(e){return void 0!==e&&(e=e.replace(/^\s+|\s+$/g,"").replace(/\s{2,}/g," ")),e},S=function(e,o,t){var n,r,d;if("string"==typeof e&&(e=document.getElementById(e),e=I("TABLE",e)),"TR"===e.nodeName)for(n=e.getElementsByTagName("td"),r=0;r<n.length;r++)if(n[r].style.backgroundColor=t?t:"","empty"===o)n[r].innerHTML="";else for(d=0;d<n[r].childNodes.length;d++)1===n[r].childNodes[d].nodeType&&(n[r].childNodes[d].style.opacity=o/100,n[r].childNodes[d].style.filter="alpha(opacity="+o+")");else e.style.opacity=o/100,e.style.filter="alpha(opacity="+o+")",e.style.backgroundColor=t?t:""},{obj:Q,objOld:U,td:te,hover:Z,scroll:ee,style:oe,clone:ne,init:e,enableDrag:o,enableDivs:t,rowOpacity:S,getScrollPosition:m,getStyle:D,findParent:I,event:re}}(),REDIPS.event||(REDIPS.event=function(){var e,o;return e=function(e,o,t){e.addEventListener?e.addEventListener(o,t,!1):e.attachEvent?e.attachEvent("on"+o,t):e["on"+o]=t},o=function(e,o,t){e.removeEventListener?e.removeEventListener(o,t,!1):e.detachEvent?e.detachEvent("on"+o,t):e["on"+o]=null},{add:e,remove:o}}());
"use strict";var redips={};redips.init=function(){var e=REDIPS.drag;e.init(),e.event.rowDropped=function(o){var n=parseInt(e.objOld.id.replace("rowid","")),t=parseInt(o.id.replace("rowid",""));spreadSheet.moveNode(n,t)},e.event.rowDroppedSource=function(){e.rowOpacity(e.objOld,100)},e.event.rowMoved=function(){e.rowOpacity(e.obj,85),e.rowOpacity(e.objOld,20,"White")},e.event.rowClicked=function(){},e.event.rowNotMoved=function(){},e.event.rowCloned=function(){},e.event.rowNotCloned=function(){},e.event.rowDeleted=function(){},e.event.rowUndeleted=function(){e.rowOpacity(e.objOld,100)}};
var Field=function(i){this.name=i,this.datatype=Field.NUMBER,this.format=Field.NUMBER_FORMAT,this.precision=2,this.agg_type=Field.NO_AGGREGATION,this.agg_qty_field=null};Field.NUMBER="0",Field.STRING="1",Field.CHOICE="2",Field.NO_AGGREGATION="0",Field.SUM_ANY_AGGREGATION="1",Field.NUMBER_FORMAT="0",Field.PERCENT_FORMAT="1",Field.SCIENTIFIC_FORMAT="2",Field.formatValue=function(i,e){if(i.datatype===Field.NUMBER){if(e=Number(e),i.format===Field.NUMBER_FORMAT)return e.toFixed(i.precision);if(i.format===Field.PERCENT_FORMAT)return(100*e).toFixed(i.precision)+"%";if(i.format===Field.SCIENTIFIC_FORMAT)return e.toExponential(i.precision)}else{if(i.datatype===Field.STRING)return e;i.datatype===Field.CHOICE}};
var FieldMenu=function(e,i){FieldMenu.menu=this;var t=new FieldMenuItem("Number",Field.NUMBER,"datatype",e),n=new FieldMenuItem("Format"),m=new FieldMenuItem("Number",Field.NUMBER_FORMAT,"format",e);m.items.push(new FieldMenuItem("0",0,"precision",e));for(var u="0.",s=1;11>s;s++)u+="0",m.items.push(new FieldMenuItem(u,s,"precision",e));n.items.push(m);var r=new FieldMenuItem("Percent",Field.PERCENT_FORMAT,"format",e);r.items.push(new FieldMenuItem("0",0,"precision",e));for(var u="0.",s=1;11>s;s++)u+="0",r.items.push(new FieldMenuItem(u+"%",s,"precision",e));n.items.push(r);var d=new FieldMenuItem("Scientific",Field.SCIENTIFIC_FORMAT,"format",e);d.items.push(new FieldMenuItem("0",0,"precision",e));for(var u="0.",s=1;11>s;s++)u+="0",d.items.push(new FieldMenuItem(u+"e+0",s,"precision",e));n.items.push(d),t.items.push(n);var a=new FieldMenuItem("Aggregation");a.items.push(new FieldMenuItem("No Aggregation",Field.NO_AGGREGATION,"agg_type",e));var l=new FieldMenuItem("Sum any defined children",Field.SUM_ANY_AGGREGATION,"agg_type",e);for(var M in i){var F=i[M];F.name!=e.name&&l.items.push(new FieldMenuItem(F.name,F.name,"agg_qty_field",e))}a.items.push(l),t.items.push(a),this.items=[],this.items.push(t),this.items.push(new FieldMenuItem("Text",Field.STRING,"datatype",e))};FieldMenu.menu,FieldMenu.handleClick=function(e){var i=FieldMenu.menu.getMenuItem(e,FieldMenu.menu),t=FieldMenu.menu.getMenuItemParent(e,FieldMenu.menu);if(i.field){var n=project.getField(i.field.name);n[i.varName]=i.value;for(var m in t.items)$("#menuItem"+t.items[m].id).removeClass("checkedMenuItem").addClass("uncheckedMenuItem");$("#menuItem"+e).removeClass("uncheckedMenuItem").addClass("checkedMenuItem"),t===FieldMenu.menu&&spreadSheet.updateNumberFieldFormatting(n)}},FieldMenu.prototype.getMenuItem=function(e,i){if(e===i.id)return i;if(i.items&&i.items.length>0)for(var t,n=0;n<i.items.length;n++)if(t=this.getMenuItem(e,i.items[n]))return t},FieldMenu.prototype.getMenuItemParent=function(e,i){if(i.items&&i.items.length>0)for(var t=0;t<i.items.length;t++){if(i.items[t].id===e)return i;var n=this.getMenuItemParent(e,i.items[t]);if(n)return n}};
var FieldMenuItem=function(i,e,t,s){this.display=i,this.value=e,this.varName=t,this.field=s,this.items=[],this.id=FieldMenuItem.id++,this.parent=-1,this.checked=s?s[t]===e:!1};FieldMenuItem.id=0;
var resizeColumnLeft=0,resizeField="0",MIN_COLUMN_WIDTH=70,GRIPS_WIDTH=16,startResize=function(e,i){$(document).bind("touchmove.resizeColGrip mousemove.resizeColGrip",resizeDrag).bind("touchend.resizeColGrip mouseup.resizeColGrip",resizeEnd),document.getElementById("resizeLine").style.visibility="visible",document.getElementById("resizeLine").style.left=e.pageX+"px",resizeColumnLeft=$(i.parentNode).position().left,resizeField=i.parentNode.id.replace("colHeader","")},resizeEnd=function(e){$(document).unbind("touchmove.resizeColGrip mousemove.resizeColGrip",resizeDrag).unbind("touchend.resizeColGrip mouseup.resizeColGrip",resizeEnd),document.getElementById("resizeLine").style.visibility="hidden";var i=e.pageX-resizeColumnLeft-GRIPS_WIDTH;MIN_COLUMN_WIDTH>i&&(i=MIN_COLUMN_WIDTH),document.getElementById("colHeaderInput"+resizeField).style.width=i+"px";for(var t=document.querySelectorAll(".fieldInput"+resizeField),r=0;r<t.length;r++)t[r].style.width=i+8+"px"},resizeDrag=function(e){e.pageX>resizeColumnLeft+MIN_COLUMN_WIDTH+GRIPS_WIDTH&&(document.getElementById("resizeLine").style.left=e.pageX+"px")};
var fieldMenuController={displayFieldMenu:function(e,d,i){var l=project.getField(e),n=new FieldMenu(l,spreadSheet.fields);fieldMenuView.render(n,d,i)}};
$(document).ready(function(){scrollBarWidth=getScrollBarWidth(),hms.init()});var hms={init:function(){projects.init(function(e){headerView.render(e)})},openProject:function(e){projects.openProject(e,function(e){project.tree=e,spreadSheet.display()}),this.view&&this.view.destroy(),this.view=spreadSheetView},saveToDatabase:function(){project.saveToDatabase()},switchView:function(){this.view===spreadSheetView?(this.view.destroy(),this.view=treeView):this.view===treeView&&(this.view.destroy(),this.view=spreadSheetView,spreadSheet.display())},createNewProject:function(e){projects.createNewProject(e),this.view.destroy(),this.view=spreadSheetView,spreadSheet.display()},nextProjectID:function(){return projects.nextProjectID++}},scrollBarWidth,getScrollBarWidth=function(){var e,t;return e=document.createElement("div"),e.innerHTML='<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>',e=e.firstChild,document.body.appendChild(e),t=e.offsetWidth-e.clientWidth,document.body.removeChild(e),t};
var spreadSheet={display:function(){project.cleanseData(),spreadSheetView.render(project.tree)},fields:function(){return project.fields()},tree:function(){return project.tree},updateFieldValue:function(e,d){var r=project.findNode(d);r&&(r.values||(r.values={}),r.values[e]=spreadSheetView.getFieldValue(e,d)),project.tree.children.forEach(function(d){aggregate_any(d,e)})},rawValue:function(e,d){var r=project.findNode(parseInt(d));return r.values&&r.values[e]?r.values[e]:""},formattedValue:function(e,d){return d.values&&d.values[e.name]?Field.formatValue(e,d.values[e.name]):""},addField:function(e){project.addField(e),spreadSheetView.addField(e)},hasChildren:function(e){return!project.isNodeChildless(e)},childrenHidden:function(e){return project.isNodeCollapsed(e)},moveNode:function(e,d){var r=project.findNode(d),o=project.findNode(e);spreadSheet.removeNode(o),project.addNode(o,r),spreadSheet.addNode(o,r)},removeNode:function(e){var d=project.findParent(e.id);project.traverse(project.getChildren,spreadSheetView.removeNode,e),project.removeNode(e),spreadSheetView.redrawNodeContent(d)},deleteNode:function(e){var d=project.findNode(e);spreadSheet.removeNode(d)},addNode:function(e,d){project.isNodeCollapsed(d)&&spreadSheet.expandNode(d),spreadSheetView.redrawNodeContent(d),spreadSheetView.insertNodeAfter(e,d)},copyNode:function(e){var d=project.findNode(e),r=project.cloneNode(d);project.insertNode(r,d),spreadSheetView.insertNodeBefore(r,d)},expandNode:function(e){project.expandNode(e),spreadSheetView.expandNode(e),spreadSheetView.redrawNodeContent(e)},collapseNode:function(e){project.traverseDescendants(project.getChildren,spreadSheetView.removeNode,e),project.collapseNode(e),spreadSheetView.redrawNodeContent(e)},toggleNode:function(e){var d=project.findNode(e);project.isNodeExpanded(d)?spreadSheet.collapseNode(d):project.isNodeCollapsed(d)&&spreadSheet.expandNode(d)},updateNodeName:function(e,d){project.findNode(e).name=d},updateNumberFieldFormatting:function(e){project.traverse(project.getChildren,function(d){if(d.values){var r=Field.formatValue(e,Number(d.values[e.name]));spreadSheetView.updateFieldValue(e.name,d.id,r)}})},enableDragging:function(e){project.traverse(project.getChildren,spreadSheetView.enableDragging,e)}};
var project={saveToDatabase:function(){$.ajax({type:"POST",url:"/api/tree",dataType:"json",data:{json:JSON.stringify(this.tree)}})},fields:function(){return this.tree.fields},cleanseData:function(){this.traverse(project.getChildren,function(e){e.children||(e.children=[]),delete e.parent})},addField:function(e){this.tree.fields.push(new Field(e))},getField:function(e){for(var n in this.tree.fields){var i=this.tree.fields[n];if(i.name===e)return i}},removeNode:function(e){var n=this.findParent(e.id);n?n.children.splice(n.children.indexOf(e),1):this.tree.children.splice(this.tree.children.indexOf(e),1)},addNode:function(e,n){n.children.push(e),project.setDepths(n)},setDepths:function(e){e.children.forEach(function(n,i){n.depth=e.depth+1,project.setDepths(n)})},insertNode:function(e,n){var i=this.findParent(n.id);i?i.children.splice(i.children.indexOf(n),0,e):this.tree.children.splice(this.tree.children.indexOf(n),0,e)},cloneNode:function(e){var n=$.extend(!0,{},e);return this.traverse(this.getChildren,function(e){e.id=project.tree.nextNodeID++},n),n},expandNode:function(e){e.children=e._children,e._children=[]},collapseNode:function(e){e._children=e.children,e.children=[]},isNodeChildless:function(e){return!(e.children&&0!==e.children.length||e._children&&0!==e._children.length)},isNodeCollapsed:function(e){return e._children&&e._children.length>0},isNodeExpanded:function(e){return e.children&&e.children.length>0},findNode:function(e,n){if(n||(n=this.tree),n.id===e)return n;for(var i in n.children){var r=this.findNode(e,n.children[i]);if(r)return r}},findParent:function(e,n,i){if(n||(n=this.tree),n.id===e)return i;for(var r in n.children){var t=this.findParent(e,n.children[r],n);if(t)return t}},traverse:function(e,n,i){i||(i=project.tree),n(i);var r=e(i);for(var t in r)project.traverse(e,n,r[t])},traverseDescendants:function(e,n,i){i||(i=project.tree),i.children.forEach(function(i){project.traverse(e,n,i)})},getChildren:function(e){return e.children&&e.children.length>0?e.children:null}};
var projects={init:function(e){$.ajax({type:"GET",url:"api/projects"}).done(function(t){this.data=t,e(t.projects)})},createNewProject:function(e){$.ajax({type:"POST",url:"/api/addProject?projectName="+e}),project.tree={projectID:project.nextProjectID,projectName:e,name:e,version:1,nextNodeID:2,depth:0,fields:[],children:[{id:1,name:e,depth:1,children:[]}]},project.saveToDatabase()},openProject:function(e,t){$.ajax({type:"GET",url:"api/tree?projectID="+e}).done(function(e){t(e)})}};
var DOWN_ARROW_IMAGE_PATH="images/down-arrow.png",CHECK_MARK_IMAGE_PATH="images/checkmark.png",BLANK_MARK_IMAGE_PATH="images/blankmark.png",ENTER_KEY=13,KEY_UP_ARROW=38,KEY_DOWN_ARROW=40,KEY_LEFT_ARROW=37,KEY_RIGHT_ARROW=39,DEFAULT_NODE_INPUT_WIDTH=390;
function debug(){}debug.print=function(n){console.log(JSON.stringify(n,null,"	"))},debug.printTree=function(){console.log(JSON.stringify(project.tree,null,"	"))};
var fieldMenuView={render:function(e,i,d){var n='<div id="fieldMenu" style="left:'+(i-10)+"px;top:"+(d-10)+'px;">';n+=this.renderMenu(e),n+="</div>",$("body").append($(n))},renderMenu:function(e){var i="<ul>";return e.items.forEach(function(e){i+='<li onclick="FieldMenu.handleClick('+e.id+');">';var d="uncheckedFieldMenuItem";e.field&&e.checked&&(d="checkedFieldMenuItem"),i+='<img id="FieldMenuItem'+e.id+'" src="'+CHECK_MARK_IMAGE_PATH+'" class="'+d+'"/>',i+=e.display,e.items&&e.items.length>0&&(i+='<div class="arrowRight"></div>',i+=fieldMenuView.renderMenu(e)),i+="</li>"}),i+"</ul>"}};
var headerView={render:function(e){var t='<select id="projectSelector" class="form-control"><option id="selectProjectOption" value="0">Select Project...</option>';e.forEach(function(e){t+='<option value="'+e.id+'">'+e.name+"</option>"}),t+='<option id="newProjectOption" value="-1">Create New Project...</option></select><input id="editNewProjectNameInput" class="form-control"></input><a href="#" id="save-database-button" class="btn btn-default">Save to Database</a><a href="#" id="switchViewButton" class="btn btn-default">Switch View</a>',$("#header").html(t),$("#projectSelector").change(function(){headerView.selectProject($(this))}),$("#save-database-button").click(function(){hms.saveToDatabase()}),$("#switchViewButton").click(function(){hms.switchView()}),$("#editNewProjectNameInput").keyup(function(e){headerView.createNewProject(e)})},selectProject:function(e){"newProjectOption"===e.find(":selected").attr("id")?($("#editNewProjectNameInput").val("Type New Project Name and Press Enter to Create"),$("#editNewProjectNameInput").show().focus().select()):($("#selectProjectOption").remove(),hms.openProject(e.val()))},createNewProject:function(e){if(e.keyCode==ENTER_KEY){$("#selectProjectOption").remove();var t=$("#editNewProjectNameInput").val();$("#editNewProjectNameInput").hide();var o=hms.nextProjectID(),c=document.createElement("option");c.text=t,c.value=o.toString(),$(c).insertBefore("#projectSelector option:nth-child("+$("#projectSelector").length+")"),$("#projectSelector").val(o),hms.createNewProject(t)}}};
var projectAction={init:function(){$("#project-action-container").html(projectAction.markup()),$("#projectActionInput").keyup(function(t){t.keyCode==ENTER_KEY&&projectAction.enterPressed()}),$("#projectActionSelector").change(projectAction.handle)},handle:function(){"addField"==$("#projectActionSelector").val()&&($("#projectActionInput").val("Type New Field Name and Press Enter to Create"),$("#projectActionInput").show().focus().select())},enterPressed:function(){"addField"==$("#projectActionSelector").val()&&(spreadSheet.addField($("#projectActionInput").val()),$("#projectActionInput").hide(),$("#projectActionSelector").val("blank"))},markup:function(){return'<table><tr id="headerRow"><tr><div id="project-select-container"><select id="projectActionSelector" class="form-control"><option value="blank"></option><option value="addField">Add Field</option></select><input id="projectActionInput" class="form-control"></input></div></tr><table>'}};
var spreadSheetKeyHandler={checkKey:function(e){if(e=e||window.event,e.keyCode==KEY_UP_ARROW){e.preventDefault();var t=$(spreadSheetKeyHandler.findAncestor(document.activeElement,"tr")).prev()[0];t&&$("#"+spreadSheetKeyHandler.getNextElementID(t)).focus()}else if(e.keyCode==KEY_DOWN_ARROW){e.preventDefault();var n=$(spreadSheetKeyHandler.findAncestor(document.activeElement,"tr")).next()[0];n&&$("#"+spreadSheetKeyHandler.getNextElementID(n)).focus()}else e.keyCode==KEY_RIGHT_ARROW?(e.preventDefault(),$(spreadSheetKeyHandler.findAncestor(document.activeElement,"td")).next().find("input").focus()):e.keyCode==KEY_LEFT_ARROW&&(e.preventDefault(),$(spreadSheetKeyHandler.findAncestor(document.activeElement,"td")).prev().find("input").focus())},getNextElementID:function(e){var t=document.activeElement.id;if(t.indexOf("nodeInput")>-1)return"nodeInput"+e.id.replace("rowid","");for(var n=document.activeElement.className.split(" "),r=0;r<n.length;r++){var d=n[r];if(d.indexOf("fieldInput")>-1&&"fieldInput"!=d){var a=d.replace("fieldInput","");return a+e.id.replace("datarowid","")}}},findAncestor:function(e,t){for(t=t.toLowerCase();e&&e.parentNode;)if(e=e.parentNode,e.tagName&&e.tagName.toLowerCase()===t)return e}};
var spreadSheetView={render:function(){$(document).on("keydown",spreadSheetKeyHandler.checkKey),$("body").append(this.spreadSheetMarkup()),projectAction.init(),this.renderFieldsRow(),this.renderDataTable(),this.renderNodeColumn()},destroy:function(){$("#spreadSheetView").remove(),$(document).off("keydown")},spreadSheetMarkup:function(){return'<div id="spreadSheetView"><div id="project-action-container"></div><div id="fields-header-row"></div><div id="redips-drag"></div><div id="data-container"></div></div>'},renderFieldsRow:function(){$("#fields-header-row").html('<table id="fieldHeaderTable"><tr id="fieldHeaderRow"></tr></table>'),spreadSheet.fields().forEach(function(e){$("#fieldHeaderRow").append(spreadSheetView.fieldHeader(e.name)),$("#fieldMenuButton"+e.name).click(function(d){spreadSheetView.showFieldMenu(d,e.name)})}),$("#fields-header-row").css("right",scrollBarWidth+"px")},fieldHeader:function(e){return'<td class="fieldHeaderCell"><div class="fieldHeaderContainer"><div class="moveColGrip"></div><div class="fieldNameInputContainer"><textarea id="colHeaderInput'+e+'" class="fieldNameInput">'+e+'</textarea></div><div class="fieldHeaderButton"><img id="fieldMenuButton'+e+'" src="images/down-arrow.png"/></div><div id="grip'+e+'" class="resizeColGrip" onmousedown="startResize(event, this)"></div></div></td>'},showFieldMenu:function(e,d){0===$("#fieldMenu").length&&fieldMenuController.displayFieldMenu(d,e.clientX,e.clientY)},renderDataTable:function(){$("#data-container").append('<table id="dataTable"></table>'),spreadSheet.tree().children.forEach(function(e){$("#dataTable").append(spreadSheetView.dataRowsMarkup(e))}),$("#data-container").scroll(function(){$("#redips-drag").scrollTop($("#data-container").scrollTop()),$("#fields-header-row").scrollLeft($("#data-container").scrollLeft())})},dataRowsMarkup:function(e){var d='<tr id="datarowid'+e.id+'" class="dataRow">';return spreadSheet.fields().forEach(function(t){d+='<td class="cell"><input class="fieldInput fieldInput'+t.name+'" type="text" id="'+t.name+e.id+'" value="'+spreadSheet.formattedValue(t,e)+'" oninput="spreadSheet.updateFieldValue(\''+t.name+"',"+e.id+')" onfocus="$(this).val(spreadSheet.rawValue(\''+t.name+"',"+e.id+'))"></td>'}),e.children.forEach(function(e){d+=spreadSheetView.dataRowsMarkup(e)}),d+"</tr>"},renderDataCell:function(e,d,t,n){$(e).append(spreadSheetView.fieldCell(d,t,n)),$("#"+d+t).on("input",function(){spreadSheet.updateFieldValue(d,t)}),$("#"+d+t).focus(function(){$(this).val(spreadSheet.rawValue(d,t))})},fieldCell:function(e,d,t){return'<td class="cell"><input class="fieldInput fieldInput'+e+'" type="text" id="'+e+d+'" value="'+t+'"></td>'},nodeRowMarkup:function(e){var d='<tr id="rowid'+e.id+'" class="nodeRow"><td class="redips-rowhandler cell"><div id="nodeContent'+e.id+'" class="node-container">';return d+=spreadSheetView.deleteButton(e.id)+spreadSheetView.copyButton(e.id)+spreadSheetView.dragHandle,d+=spreadSheetView.nodeContent(e),e.children.forEach(function(e){d+=spreadSheetView.nodeRowMarkup(e)}),d+"</div></td></tr>"},nodeContent:function(e){var d,t=10*(e.depth-1),n=t;return spreadSheet.hasChildren(e)?d=spreadSheet.childrenHidden(e)?'<span class="glyphicon glyphicon-chevron-right"></span>':'<span class="glyphicon glyphicon-chevron-down"></span>':(d="<span></span>",t+=12,n-=10),spreadSheetView.expandIcon(e.id,t,d)+spreadSheetView.nodeInput(e,DEFAULT_NODE_INPUT_WIDTH-n)},renderNodeColumn:function(){$("#redips-drag").html('<table id="treeTable"></table>'),spreadSheet.tree().children.forEach(function(e){$("#treeTable").append(spreadSheetView.nodeRowMarkup(e))}),$("#redips-drag").css("bottom",scrollBarWidth+"px"),redips.init()},dragHandle:'<div class="redips-drag pull-right"><i class="glyphicon glyphicon-move"></i></div>',copyButton:function(e){return'<a href="#"  class="pull-right btn btn-info btn-xs copy-button" onclick="spreadSheet.copyNode('+e+')"><i class="glyphicon glyphicon-plus"></i></a>'},deleteButton:function(e){return'<a href="#" class="pull-right btn btn-danger btn-xs delete-button" onclick="spreadSheet.deleteNode('+e+')"><i class="glyphicon glyphicon-remove"></i></a>'},expandIcon:function(e,d,t){return'<a href="#" id="icon'+e+'" class="btn btn-xs" style="margin-left:'+d+'px" onclick="spreadSheet.toggleNode('+e+')">'+t+"</a>"},nodeInput:function(e,d){return'<input id="nodeInput'+e.id+'" class="nodeTextInput" style="width:'+d+'px" type="text" value="'+e.name+'" oninput="spreadSheetView.updateNodeName('+e.id+')"/>'},expandNode:function(e){for(var d,t=e.children.length-1;t>=0;t--)d=e.children[t],$(spreadSheetView.dataRowsMarkup(d)).insertAfter($("#datarowid"+e.id)),$(spreadSheetView.nodeRowMarkup(d)).insertAfter($("#rowid"+e.id));spreadSheetView.enableDragging(e)},redrawNodeContent:function(e){$("#icon"+e.id).remove(),$("#nodeInput"+e.id).remove(),$("#nodeContent"+e.id).append(spreadSheetView.nodeContent(e))},addField:function(e){$("#fieldHeaderRow").append(this.fieldHeaderMarkup(e,spreadSheet.fields().length)),$("#fieldMenuButton"+e).click(function(d){spreadSheetView.showFieldMenu(d,e)}),$(".dataRow").each(function(d,t){spreadSheetView.renderDataCell(t,e,parseInt(t.id.replace("datarowid","")),"")})},updateNodeName:function(e){var d=$("#nodeInput"+e).val();spreadSheet.updateNodeName(e,d),$("#nodeInput"+e).attr("value",d)},removeNode:function(e){$("#rowid"+e.id).remove(),$("#datarowid"+e.id).remove()},insertNodeBefore:function(e,d){$(spreadSheetView.nodeRowMarkup(e)).insertBefore($("#rowid"+d.id)),$(spreadSheetView.dataRowsMarkup(e)).insertBefore($("#datarowid"+d.id)),spreadSheetView.enableDragging(e)},insertNodeAfter:function(e,d){$(spreadSheetView.nodeRowMarkup(e)).insertAfter($("#rowid"+d.id)),$(spreadSheetView.dataRowsMarkup(e)).insertAfter($("#datarowid"+d.id)),spreadSheetView.enableDragging(e)},enableDragging:function(e){REDIPS.drag.enableDivs("init",$("#rowid"+e.id).find("div"))},getFieldValue:function(e,d){return $("#"+e+d).val()},updateFieldValue:function(e,d,t){$("#"+e+d).val(t)}};
function TreeView(){}var treeView={render:function(){},destroy:function(){$("#tree-container").remove()}};TreeView.display=function(t){function e(t,n,r){if(t){n(t);var a=r(t);if(a)for(var l=a.length,i=0;l>i;i++)e(a[i],n,r)}}function n(){A.sort(function(t,e){return e.name.toLowerCase()<t.name.toLowerCase()?1:-1})}function r(t,e){var n=m;panTimer&&(clearTimeout(panTimer),translateCoords=d3.transform(z.attr("transform")),"left"==e||"right"==e?(translateX="left"==e?translateCoords.translate[0]+n:translateCoords.translate[0]-n,translateY=translateCoords.translate[1]):("up"==e||"down"==e)&&(translateX=translateCoords.translate[0],translateY="up"==e?translateCoords.translate[1]+n:translateCoords.translate[1]-n),scaleX=translateCoords.scale[0],scaleY=translateCoords.scale[1],scale=X.scale(),z.transition().attr("transform","translate("+translateX+","+translateY+")scale("+scale+")"),d3.select(t).select("g.node").attr("transform","translate("+translateX+","+translateY+")"),X.scale(X.scale()),X.translate([translateX,translateY]),panTimer=setTimeout(function(){r(t,n,e)},50))}function a(){z.attr("transform","translate("+d3.event.translate+")scale("+d3.event.scale+")")}function l(t,e){p=t,d3.select(e).select(".ghostCircle").attr("pointer-events","none"),d3.selectAll(".ghostCircle").attr("class","ghostCircle show"),d3.select(e).attr("class","node activeDrag"),z.selectAll("g.node").sort(function(t,e){return t.id!=p.id?1:-1}),nodes.length>1&&(links=A.links(nodes),nodePaths=z.selectAll("path.link").data(links,function(t){return t.target.id}).remove(),nodesExit=z.selectAll("g.node").data(nodes,function(t){return t.id}).filter(function(t,e){return t.id==p.id?!1:!0}).remove()),parentLink=A.links(A.nodes(p.parent)),z.selectAll("path.link").filter(function(t,e){return t.target.id==p.id?!0:!1}).remove(),dragStarted=null}function i(){g=null,d3.selectAll(".ghostCircle").attr("class","ghostCircle"),d3.select(domNode).attr("class","node"),d3.select(domNode).select(".ghostCircle").attr("pointer-events",""),N(),null!==p&&(u(f),s(p),p=null)}function o(t){t._children&&(t.children=t._children,t.children.forEach(o),t._children=[])}function s(t){scale=X.scale(),x=-t.y0,y=-t.x0,x=x*scale+k/2,y=y*scale+w/2,d3.select("g").transition().duration(T).attr("transform","translate("+x+","+y+")scale("+scale+")"),X.scale(scale),X.translate([x,y])}function c(t){return t.children?(t._children=t.children,t.children=[]):t._children&&(t.children=t._children,t._children=[]),t}function d(t){d3.event.defaultPrevented||(t=c(t),u(t),s(t))}function u(t){var e=function(t,e){return t.values&&t.values[e]&&t.values[e]>5?t.values[e]:5},n=[1],r=function(t,e){e.children&&e.children.length>0&&(n.length<=t+1&&n.push(0),n[t+1]+=e.children.length,e.children.forEach(function(e){r(t+1,e)}))};r(0,f);var a=25*d3.max(n);A=A.size([a,k]);var l=A.nodes(f).reverse(),i=A.links(l);l.forEach(function(t){t.y=10*t.depth*v}),node=z.selectAll("g.node").data(l,function(t){return t.id||(t.id=++_)});var o=node.enter().append("g").call(dragListener).attr("class","node").attr("transform",function(e){return"translate("+t.y0+","+t.x0+")"}).on("click",d);o.append("circle").attr("class","nodeCircle").attr("r",0).style("fill",function(t){return t._children?"lightsteelblue":"#fff"}),o.append("text").attr("x",function(t){return t.children||t._children?-10:10}).attr("dy",".35em").attr("class","nodeText").attr("text-anchor",function(t){return t.children||t._children?"end":"start"}).text(function(t){return t.name}).style("fill-opacity",0),o.append("circle").attr("class","ghostCircle").attr("r",30).attr("opacity",.2).style("fill","red").attr("pointer-events","mouseover").on("mouseover",function(t){b(t)}).on("mouseout",function(t){L(t)}),node.select("text").attr("x",function(t){return t.children||t._children?-10:10}).attr("text-anchor",function(t){return t.children||t._children?"end":"start"}).text(function(t){return t.name}),node.select("circle.nodeCircle").attr("r",function(t){return e(t)}).style("fill",function(t){return t._children?"lightsteelblue":"#fff"});var s=node.transition().duration(T).attr("transform",function(t){return"translate("+t.y+","+t.x+")"});s.select("text").style("fill-opacity",1);var c=node.exit().transition().duration(T).attr("transform",function(e){return"translate("+t.y+","+t.x+")"}).remove();c.select("circle").attr("r",0),c.select("text").style("fill-opacity",0);var u=z.selectAll("path.link").data(i,function(t){return t.target.id});u.enter().insert("path","g").attr("class","link").attr("d",function(e){var n={x:t.x0,y:t.y0};return E({source:n,target:n})}),u.transition().duration(T).attr("d",E),u.exit().transition().duration(T).attr("d",function(e){var n={x:t.x,y:t.y};return E({source:n,target:n})}).remove(),l.forEach(function(t){t.x0=t.x,t.y0=t.y})}$("body").append('<div id="tree-container"></div>');var f,h=0,v=0,g=null,p=null,m=200,C=20,_=0,T=750,k=$("#tree-container").width(),w=$("#tree-container").height(),A=d3.layout.tree().size([w,k]),E=d3.svg.diagonal().projection(function(t){return[t.y,t.x]});e(t,function(t){h++,v=Math.max(t.name.length,v)},function(t){return t.children&&t.children.length>0?t.children:null}),n();var X=d3.behavior.zoom().scaleExtent([.1,3]).on("zoom",a),Y=d3.select("#tree-container").append("svg").attr("width",k).attr("height",w).attr("class","overlay").call(X);dragListener=d3.behavior.drag().on("dragstart",function(t){t!=f&&(dragStarted=!0,nodes=A.nodes(t),d3.event.sourceEvent.stopPropagation())}).on("drag",function(t){if(t!=f){if(dragStarted&&(domNode=this,l(t,domNode)),relCoords=d3.mouse($("svg").get(0)),relCoords[0]<C)panTimer=!0,r(this,"left");else if(relCoords[0]>$("svg").width()-C)panTimer=!0,r(this,"right");else if(relCoords[1]<C)panTimer=!0,r(this,"up");else if(relCoords[1]>$("svg").height()-C)panTimer=!0,r(this,"down");else try{clearTimeout(panTimer)}catch(e){}t.x0+=d3.event.dy,t.y0+=d3.event.dx;var n=d3.select(this);n.attr("transform","translate("+t.y0+","+t.x0+")"),N()}}).on("dragend",function(t){if(t!=f)if(domNode=this,g){var e=p.parent.children.indexOf(p);e>-1&&p.parent.children.splice(e,1),g.children||g._children?g.children?g.children.push(p):g._children.push(p):(g.children=[],g.children.push(p)),o(g),n(),i()}else i()});var b=function(t){g=t,N()},L=function(t){g=null,N()},N=function(){var t=[];null!==p&&null!==g&&(t=[{source:{x:g.y0,y:g.x0},target:{x:p.y0,y:p.x0}}]);var e=z.selectAll(".templink").data(t);e.enter().append("path").attr("class","templink").attr("d",d3.svg.diagonal()).attr("pointer-events","none"),e.attr("d",d3.svg.diagonal()),e.exit().remove()},z=Y.append("g");f=t,f.x0=w/2,f.y0=0,u(f),s(f)};
//# sourceMappingURL=data:application/json;base64,