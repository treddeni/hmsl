function aggregate_any(e,a){if(e.children&&0!==e.children.length){for(var l=0,n=0;n<e.children.length;n++)l+=aggregate_any(e.children[n],a);return e.values||(e.values={}),e.values[a]=l,document.getElementById(a+e.id).value=l,l}return e.values&&e.values[a]?parseFloat(e.values[a]):0}
var DOWN_ARROW_IMAGE_PATH="images/down-arrow.png",CHECK_MARK_IMAGE_PATH="images/checkmark.png",BLANK_MARK_IMAGE_PATH="images/blankmark.png",ENTER_KEY=13;
function Debug(){}Debug.print=function(n){console.log(JSON.stringify(n,null,"	"))},Debug.printTree=function(){console.log(JSON.stringify(Tree.getTree(),null,"	"))};
"use strict";var REDIPS=REDIPS||{};REDIPS.drag=function(){var e,o,t,n,r,d,l,i,a,s,c,f,p,g,u,v,y,m,h,w,E,b,D,I,S,R,P,x,N,T,C,B,j,k=null,L={width:0,height:0},M={width:null,height:null,container:[],obj:null},O={page:{x:0,y:0},div:{x:0,y:0},flag:{x:0,y:0}},Y=[],H=[],W=null,_=null,X={x:0,y:0},A={x:0,y:0,value:7,flag:!1},V=!1,z=!1,F=null,q=null,K=null,$=null,G=null,J=null,Q=!1,U=!1,Z={colorTd:"#FFCFAE",colorTr:"#9BB3DA"},ee={enable:!0,bound:25,speed:20},oe={borderDisabled:"dotted",opacityDisabled:"",rowEmptyColor:"white"},te={},ne={keyDiv:!1,keyRow:!1,sendBack:!1,drop:!1},re={cloned:function(){},clonedDropped:function(){},clonedEnd1:function(){},clonedEnd2:function(){},dropped:function(){},droppedBefore:function(){},finish:function(){},notCloned:function(){},notMoved:function(){},rowChanged:function(){},rowClicked:function(){},rowCloned:function(){},rowDropped:function(){},rowDroppedBefore:function(){},rowDroppedSource:function(){},rowMoved:function(){},rowNotCloned:function(){},rowNotMoved:function(){}};return e=function(){if(W=document.getElementById("redips-drag"),j=m(),!document.getElementById("redips_clone")){var e=document.createElement("div");e.id="redips_clone",e.style.width=e.style.height="1px",W.appendChild(e)}o("init",".redips-drag"),T=document.getElementById("treeTable"),T.redips={},c(),REDIPS.event.add(window,"resize",c),REDIPS.event.add(window,"scroll",y)},n=function(e){var o,t,n,l,i=e||window.event;if(i.cancelBubble=!0,i.stopPropagation&&i.stopPropagation(),V=i.shiftKey,window.getSelection)window.getSelection().removeAllRanges();else if(document.selection&&"Text"===document.selection.type)try{document.selection.empty()}catch(a){}return n=X.x=i.clientX,l=X.y=i.clientY,A.x=n,A.y=l,A.flag=!1,REDIPS.drag.objOld=U=Q||this,REDIPS.drag.obj=Q=this,z=Q.className.indexOf("redips-clone")>-1,REDIPS.drag.obj=Q=R(Q),y(),F=$=null,f(),K=q=F,J=G=$,REDIPS.drag.event.rowClicked(te.current),null!==F&&null!==$||(f(),K=q=F,J=G=$,null!==F&&null!==$)?(C=B=!1,REDIPS.event.add(document,"mousemove",d),REDIPS.event.add(document,"mouseup",r),null!==F&&(N=u(F)),t=D(T,"position"),"fixed"!==t&&(t=D(T.parentNode,"position")),o=v(Q,t),k=[l-o[0],o[1]-n,o[2]-l,n-o[3]],!1):!0},R=function(e){var o,t,n;return"DIV"===e.nodeName?(n=e,e=I("TR",e),void 0===e.redips&&(e.redips={}),e.redips.div=n,e):(t=e,o=document.createElement("table"),o.innerHTML='<tr id="'+t.id+'" class="'+t.classList+'">'+t.innerHTML+"</tr>",o.redips={},o.redips.sourceRow=t,E(t,o.rows[0]),document.getElementById("redips_clone").appendChild(o),o)},P=function(e){var o,t,n;n=function(e){var o;void 0!==e.redips&&e.redips.emptyRow?S(e,"empty",REDIPS.drag.style.rowEmptyColor):(o=I("TABLE",e),o.deleteRow(e.rowIndex))};var r=Q;e>T.rows.length-1&&(e=T.rows.length-1);var d=T.rows[e];t=r.getElementsByTagName("tr")[0],r.parentNode.removeChild(r),o=REDIPS.drag.event.rowDroppedBefore(T,r.redips.sourceRow.rowIndex),o!==!1&&(e<T.rows.length?d.parentNode.insertBefore(t,d.nextSibling):(d.parentNode.appendChild(t),d=T.rows[0]),B||n(r.redips.sourceRow),delete t.redips.emptyRow,REDIPS.drag.event.rowDropped(d))},r=function(e){var o,t,n,a,s,c,f=e||window.event;if(n=f.clientX,a=f.clientY,O.flag.x=O.flag.y=0,REDIPS.event.remove(document,"mousemove",d),REDIPS.event.remove(document,"mouseup",r),W.onselectstart=null,i(Q),M.width=document.documentElement.scrollWidth,M.height=document.documentElement.scrollHeight,O.flag.x=O.flag.y=0,null===F||null===$)REDIPS.drag.event.notMoved();else{if(REDIPS.drag.td.target=te.target=T.rows[F].cells[$],g(F,N),o=F,C)if(K===o){for(t=Q.getElementsByTagName("tr")[0],U.style.backgroundColor=t.style.backgroundColor,s=0;s<t.cells.length;s++)U.cells[s].style.backgroundColor=t.cells[s].style.backgroundColor;Q.parentNode.removeChild(Q),delete U.redips.emptyRow,B?REDIPS.drag.event.rowNotCloned():REDIPS.drag.event.rowDroppedSource(te.target)}else P(o);else REDIPS.drag.event.rowNotMoved();B||A.flag?B&&K===F&&J===$?(Q.parentNode.removeChild(Q),Y[U.id]-=1,REDIPS.drag.event.notCloned()):B&&REDIPS.drag.clone.drop===!1&&(n<T.redips.offset[3]||n>T.redips.offset[1]||a<T.redips.offset[0]||a>T.redips.offset[2])?(Q.parentNode.removeChild(Q),Y[U.id]-=1,REDIPS.drag.event.notCloned()):(c=REDIPS.drag.event.droppedBefore(te.target),l(c)):REDIPS.drag.event.notMoved(),y(),REDIPS.drag.event.finish()}q=G=null},l=function(e){var o,t=null;if(e!==!1){if(ne.sendBack===!0){o=te.target.getElementsByTagName("DIV");for(var n=0;n<o.length;n++)if(Q!==o[n]&&0===Q.id.indexOf(o[n].id)){t=o[n];break}if(t)return b(t,1),void Q.parentNode.removeChild(Q)}te.target.appendChild(Q),a(Q),REDIPS.drag.event.dropped(te.target),B&&(REDIPS.drag.event.clonedDropped(te.target),b(U,-1))}else B&&Q.parentNode&&Q.parentNode.removeChild(Q)},a=function(e,o){e.onmousedown=o===!1?null:n},i=function(e){e.style.top="",e.style.left="",e.style.position="",e.style.zIndex=""},d=function(e){var o,t,n,r,d,l,i,a=e||window.event,c=REDIPS.drag.scroll.bound;if(t=X.x=a.clientX,n=X.y=a.clientY,r=Math.abs(A.x-t),d=Math.abs(A.y-n),C||((z||REDIPS.drag.clone.keyRow===!0&&V)&&(B=!0),REDIPS.drag.objOld=U=Q,REDIPS.drag.obj=Q=R(Q),Q.style.zIndex=999,Q.style.position="fixed",y(),f(),B?REDIPS.drag.event.rowCloned():REDIPS.drag.event.rowMoved(),p(),t>L.width-k[1]&&(Q.style.left=L.width-(k[1]+k[3])+"px"),n>L.height-k[2]&&(Q.style.top=L.height-(k[0]+k[2])+"px")),C=!0,t>k[3]&&t<L.width-k[1]&&(Q.style.left=t-k[3]+"px"),n>k[0]&&n<L.height-k[2]&&(Q.style.top=n-k[0]+"px"),t<_[1]&&t>_[3]&&n<_[2]&&n>_[0]&&0===O.flag.x&&0===O.flag.y&&(H.containTable||t<H[3]||t>H[1]||n<H[0]||n>H[2])&&(f(),s()),REDIPS.drag.scroll.enable)for(O.page.x=c-(L.width/2>t?t-k[3]:L.width-t-k[1]),O.page.x>0?(O.page.x>c&&(O.page.x=c),i=0,O.page.x*=t<L.width/2?-1:1,O.page.x<0&&0>=i||O.page.x>0&&i>=M.width-L.width||0===O.flag.x++&&(REDIPS.event.remove(window,"scroll",y),h(window))):O.page.x=0,O.page.y=c-(L.height/2>n?n-k[0]:L.height-n-k[2]),O.page.y>0?(O.page.y>c&&(O.page.y=c),i=window.pageYOffset||document.documentElement.scrollTop,O.page.y*=n<L.height/2?-1:1,O.page.y<0&&0>=i||O.page.y>0&&i>=M.height-L.height||0===O.flag.y++&&(REDIPS.event.remove(window,"scroll",y),w(window))):O.page.y=0,l=0;l<M.container.length;l++){if(o=M.container[l],o.autoscroll&&t<o.offset[1]&&t>o.offset[3]&&n<o.offset[2]&&n>o.offset[0]){O.div.x=c-(o.midstX>t?t-k[3]-o.offset[3]:o.offset[1]-t-k[1]),O.div.x>0?(O.div.x>c&&(O.div.x=c),O.div.x*=t<o.midstX?-1:1,0===O.flag.x++&&(REDIPS.event.remove(o.div,"scroll",y),h(o.div))):O.div.x=0,O.div.y=c-(o.midstY>n?n-k[0]-o.offset[0]:o.offset[2]-n-k[2]),O.div.y>0?(O.div.y>c&&(O.div.y=c),O.div.y*=n<o.midstY?-1:1,0===O.flag.y++&&(REDIPS.event.remove(o.div,"scroll",y),w(o.div))):O.div.y=0;break}O.div.x=O.div.y=0}a.cancelBubble=!0,a.stopPropagation&&a.stopPropagation()},s=function(){(F!==q||$!==G)&&(null!==q&&null!==G&&(g(q,N),REDIPS.drag.td.previous=te.previous=T.rows[q].cells[G],REDIPS.drag.td.current=te.current=T.rows[F].cells[$],F!==q&&REDIPS.drag.event.rowChanged(te.current)),p())},c=function(){L.width=window.innerWidth,L.height=window.innerHeight,M.width=document.documentElement.scrollWidth,M.height=document.documentElement.scrollHeight,y()},f=function(){var e,o,t,n,r,d,l=[];if(e=function(){null!==q&&null!==G&&(F=q,$=G)},n=X.x,r=X.y,l[0]=T.redips.offset[0],l[1]=T.redips.offset[1],l[2]=T.redips.offset[2],l[3]=T.redips.offset[3],void 0!==T.sca&&(l[0]=l[0]>T.sca.offset[0]?l[0]:T.sca.offset[0],l[1]=l[1]<T.sca.offset[1]?l[1]:T.sca.offset[1],l[2]=l[2]<T.sca.offset[2]?l[2]:T.sca.offset[2],l[3]=l[3]>T.sca.offset[3]?l[3]:T.sca.offset[3]),l[3]<n&&n<l[1]&&l[0]<r&&r<l[2]){for(o=T.redips.row_offset,F=0;F<o.length-1;F++)if(void 0!==o[F]){if(H[0]=o[F][0],void 0!==o[F+1])H[2]=o[F+1][0];else for(d=F+2;d<o.length;d++)if(void 0!==o[d]){H[2]=o[d][0];break}if(r<=H[2])break}t=F,F===o.length-1&&(H[0]=o[F][0],H[2]=T.redips.offset[2]),$=0,0>F||0>$?e():F!==t&&(H[0]=o[F][0],H[2]=H[0]+T.rows[F].cells[$].offsetHeight,(r<H[0]||r>H[2])&&e())}},p=function(){null!==F&&null!==$&&(N=u(F),g(F),q=F,G=$)},g=function(e,o){var t,n;t=T.rows[e];for(var r=0;r<t.cells.length;r++)n=t.cells[r].style,n.backgroundColor=void 0===o?REDIPS.drag.hover.colorTr:o.color[r].toString(),void 0!==REDIPS.drag.hover.borderTr&&(void 0===o?K>F?n.borderTop=REDIPS.drag.hover.borderTr:n.borderBottom=REDIPS.drag.hover.borderTr:(n.borderTopWidth=o.top[r][0],n.borderTopStyle=o.top[r][1],n.borderTopColor=o.top[r][2],n.borderBottomWidth=o.bottom[r][0],n.borderBottomStyle=o.bottom[r][1],n.borderBottomColor=o.bottom[r][2]))},u=function(e){var o,t,n={color:[],top:[],right:[],bottom:[],left:[]},r=function(e,o){var t="border"+o+"Width",n="border"+o+"Style",r="border"+o+"Color";return[D(e,t),D(e,n),D(e,r)]};o=T.rows[e];for(var d=0;d<o.cells.length;d++)t=o.cells[d],n.color[d]=t.style.backgroundColor,void 0!==REDIPS.drag.hover.borderTr&&(n.top[d]=r(t,"Top"),n.bottom[d]=r(t,"Bottom"));return n},v=function(e,o,t){var n=0,r=0,d=e;if("fixed"!==o&&(n=0-j[0],r=0-j[1]),void 0===t||t===!0){do n+=e.offsetLeft-e.scrollLeft,r+=e.offsetTop-e.scrollTop,e=e.offsetParent;while(e&&"BODY"!==e.nodeName)}else do n+=e.offsetLeft,r+=e.offsetTop,e=e.offsetParent;while(e&&"BODY"!==e.nodeName);return[r,n+d.offsetWidth,r+d.offsetHeight,n]},y=function(){var e,o,t;j=m(),e=[],o=D(T,"position"),"fixed"!==o&&(o=D(T.parentNode,"position"));for(var n=T.rows.length-1;n>=0;n--)"none"!==T.rows[n].style.display&&(e[n]=v(T.rows[n],o));T.redips.offset=v(T,o),T.redips.row_offset=e,_=v(W);for(var n=0;n<M.container.length;n++)o=D(M.container[n].div,"position"),t=v(M.container[n].div,o,!1),M.container[n].offset=t,M.container[n].midstX=(t[1]+t[3])/2,M.container[n].midstY=(t[0]+t[2])/2},m=function(){var e=window.pageYOffset||document.documentElement.scrollTop,o=0;return[o,e]},h=function(e){var o,t,n,r,d,l=X.x,i=X.y;O.flag.x>0&&(y(),f(),l<_[1]&&l>_[3]&&i<_[2]&&i>_[0]&&s()),"object"==typeof e&&(M.obj=e),M.obj===window?(n=t=m()[0],r=M.width-L.width,d=O.page.x):(n=M.obj.scrollLeft,r=M.obj.scrollWidth-M.obj.clientWidth,d=O.div.x),O.flag.x>0&&(0>d&&n>0||d>0&&r>n)?(M.obj===window?(window.scrollBy(d,0),n=m()[0],o=parseInt(Q.style.left,10),isNaN(o)&&(o=0)):M.obj.scrollLeft+=d,setTimeout(h,REDIPS.drag.scroll.speed)):(REDIPS.event.add(M.obj,"scroll",y),O.flag.x=0,H=[0,0,0,0])},w=function(e){var o,t,n,r,d,l=X.x,i=X.y;O.flag.y>0&&(y(),f(),l<_[1]&&l>_[3]&&i<_[2]&&i>_[0]&&s()),"object"==typeof e&&(M.obj=e),M.obj===window?(n=t=m()[1],r=M.height-L.height,d=O.page.y):(n=M.obj.scrollTop,r=M.obj.scrollHeight-M.obj.clientHeight,d=O.div.y),O.flag.y>0&&(0>d&&n>0||d>0&&r>n)?(M.obj===window?(window.scrollBy(0,d),n=m()[1],o=parseInt(Q.style.top,10),isNaN(o)&&(o=0)):M.obj.scrollTop+=d,setTimeout(w,REDIPS.drag.scroll.speed)):(REDIPS.event.add(M.obj,"scroll",y),O.flag.y=0,H=[0,0,0,0])},E=function(e,o){var t,n=[];n[0]=function(e,o){e.redips&&(o.redips={},o.redips.enabled=e.redips.enabled,o.redips.container=e.redips.container,e.redips.enabled&&a(o))},n[1]=function(e,o){e.redips&&(o.redips={},o.redips.emptyRow=e.redips.emptyRow)},t=function(t){var r,d,l=["DIV","TR"];r=e.getElementsByTagName(l[t]),d=o.getElementsByTagName(l[t]);for(var i=0;i<d.length;i++)n[t](r[i],d[i])},"DIV"===e.nodeName?n[0](e,o):"TR"===e.nodeName&&n[1](e,o),t(0),t(1)},b=function(e,t){var n,r,d,l;l=e.className,n=l.match(/climit(\d)_(\d+)/),null!==n&&(r=parseInt(n[1],10),d=parseInt(n[2],10),0===d&&1===t&&(l+=" redips-clone",2===r&&o(!0,e)),d+=t,l=l.replace(/climit\d_\d+/g,"climit"+r+"_"+d),0>=d&&(l=l.replace("redips-clone",""),2===r?(o(!1,e),REDIPS.drag.event.clonedEnd2()):REDIPS.drag.event.clonedEnd1()),e.className=x(l))},o=function(e,o){var n=[];void 0===o?n=W.getElementsByTagName("div"):"string"==typeof o?n=document.querySelectorAll(o):"object"!=typeof o||"DIV"===o.nodeName&&-1!==o.className.indexOf("redips-drag")?n[0]=o:n=o.getElementsByTagName("div"),t(e,n)},t=function(e,o){var t,n,r,d,l,i,s,c,f,p,g,u=[],m=/\bredips-drag\b/i,h=/\bredips-noautoscroll\b/i;for(l=REDIPS.drag.style.opacityDisabled,e===!0||"init"===e?(d=REDIPS.drag.style.borderEnabled,i="move",f=!0):(d=REDIPS.drag.style.borderDisabled,i="auto",f=!1),t=0,n=0;t<o.length;t++)if(m.test(o[t].className))"init"===e||void 0===o[t].redips?(o[t].redips={},o[t].redips.container=W):e===!0&&"number"==typeof l?(o[t].style.opacity="",o[t].style.filter=""):e===!1&&"number"==typeof l&&(o[t].style.opacity=l/100,o[t].style.filter="alpha(opacity="+l+")"),a(o[t],f),o[t].style.borderStyle=d,o[t].style.cursor=i,o[t].redips.enabled=f;else if("init"===e&&(s=D(o[t],"overflow"),"visible"!==s)){for(REDIPS.event.add(o[t],"scroll",y),g=D(o[t],"position"),p=v(o[t],g,!1),c=!h.test(o[t].className),M.container[n]={div:o[t],offset:p,midstX:(p[1]+p[3])/2,midstY:(p[0]+p[2])/2,autoscroll:c},u=o[t].getElementsByTagName("table"),r=0;r<u.length;r++)u[r].sca=M.container[n];n++}},D=function(e,o){return e&&e.currentStyle?e.currentStyle[o]:e&&window.getComputedStyle?document.defaultView.getComputedStyle(e,null)[o]:void 0},I=function(e,o){for(o=o.parentNode;o&&o.nodeName!==e;)o=o.parentNode;return o},x=function(e){return void 0!==e&&(e=e.replace(/^\s+|\s+$/g,"").replace(/\s{2,}/g," ")),e},S=function(e,o,t){var n,r,d;if("string"==typeof e&&(e=document.getElementById(e),e=I("TABLE",e)),"TR"===e.nodeName)for(n=e.getElementsByTagName("td"),r=0;r<n.length;r++)if(n[r].style.backgroundColor=t?t:"","empty"===o)n[r].innerHTML="";else for(d=0;d<n[r].childNodes.length;d++)1===n[r].childNodes[d].nodeType&&(n[r].childNodes[d].style.opacity=o/100,n[r].childNodes[d].style.filter="alpha(opacity="+o+")");else e.style.opacity=o/100,e.style.filter="alpha(opacity="+o+")",e.style.backgroundColor=t?t:""},{obj:Q,objOld:U,td:te,hover:Z,scroll:ee,style:oe,clone:ne,init:e,enableDrag:o,enableDivs:t,rowOpacity:S,getScrollPosition:m,getStyle:D,findParent:I,event:re}}(),REDIPS.event||(REDIPS.event=function(){var e,o;return e=function(e,o,t){e.addEventListener?e.addEventListener(o,t,!1):e.attachEvent?e.attachEvent("on"+o,t):e["on"+o]=t},o=function(e,o,t){e.removeEventListener?e.removeEventListener(o,t,!1):e.detachEvent?e.detachEvent("on"+o,t):e["on"+o]=null},{add:e,remove:o}}());
"use strict";var redips={};redips.init=function(){var e=REDIPS.drag;e.init(),e.event.rowDropped=function(o){var n=parseInt(e.objOld.id.replace("rowid","")),t=parseInt(o.id.replace("rowid",""));SpreadSheetView.moveNode(n,t)},e.event.rowDroppedSource=function(){e.rowOpacity(e.objOld,100)},e.event.rowMoved=function(){e.rowOpacity(e.obj,85),e.rowOpacity(e.objOld,20,"White")},e.event.rowClicked=function(){},e.event.rowNotMoved=function(){},e.event.rowCloned=function(){},e.event.rowNotCloned=function(){},e.event.rowDeleted=function(){},e.event.rowUndeleted=function(){e.rowOpacity(e.objOld,100)}};
var Field=function(i){this.name=i,this.datatype=Field.NUMBER,this.format=Field.NUMBER_FORMAT,this.precision=2,this.agg_type=Field.NO_AGGREGATION,this.agg_qty_field=null};Field.NUMBER="0",Field.STRING="1",Field.CHOICE="2",Field.NO_AGGREGATION="0",Field.SUM_ANY_AGGREGATION="1",Field.NUMBER_FORMAT="0",Field.PERCENT_FORMAT="1",Field.SCIENTIFIC_FORMAT="2",Field.formatValue=function(i,e){if(i.datatype===Field.NUMBER){if(e=Number(e),i.format===Field.NUMBER_FORMAT)return e.toFixed(i.precision);if(i.format===Field.PERCENT_FORMAT)return(100*e).toFixed(i.precision)+"%";if(i.format===Field.SCIENTIFIC_FORMAT)return e.toExponential(i.precision)}else{if(i.datatype===Field.STRING)return e;i.datatype===Field.CHOICE}};
var scrollBarWidth;$(document).ready(function(){scrollBarWidth=getScrollBarWidth(),document.onkeydown=checkKey,$.ajax({type:"GET",url:"api/projects"}).done(function(e){Project.setProjects(e),$("#header").html(generateHeaderMarkup(Project.getProjects())),$("#editNewProjectNameInput").keyup(function(e){e.keyCode==ENTER_KEY&&Project.createNewProject()})})});var getScrollBarWidth=function(){var e,t;return e=document.createElement("div"),e.innerHTML='<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>',e=e.firstChild,document.body.appendChild(e),t=e.offsetWidth-e.clientWidth,document.body.removeChild(e),t};
function checkKey(e){if(e=e||window.event,e.keyCode==KEY_UP_ARROW){e.preventDefault();var t=$(getAncestorTag(document.activeElement,"tr")).prev()[0];t&&$("#"+getNextElementID(t)).focus()}else if(e.keyCode==KEY_DOWN_ARROW){e.preventDefault();var n=$(getAncestorTag(document.activeElement,"tr")).next()[0];n&&$("#"+getNextElementID(n)).focus()}else e.keyCode==KEY_RIGHT_ARROW?(e.preventDefault(),$(getAncestorTag(document.activeElement,"td")).next().find("input").focus()):e.keyCode==KEY_LEFT_ARROW&&(e.preventDefault(),$(getAncestorTag(document.activeElement,"td")).prev().find("input").focus())}function getNextElementID(e){var t=document.activeElement.id;if(t.indexOf("nodeInput")>-1)return"nodeInput"+e.id.replace("rowid","");for(var n=document.activeElement.className.split(" "),a=0;a<n.length;a++){var r=n[a];if(r.indexOf("fieldInput")>-1&&"fieldInput"!=r){var o=r.replace("fieldInput","");return o+e.id.replace("datarowid","")}}}var KEY_UP_ARROW=38,KEY_DOWN_ARROW=40,KEY_LEFT_ARROW=37,KEY_RIGHT_ARROW=39,getAncestorTag=function(e,t){for(t=t.toLowerCase();e&&e.parentNode;)if(e=e.parentNode,e.tagName&&e.tagName.toLowerCase()==t)return e};
function generateSpreadSheetMarkup(){return'<div id="spreadSheetView"><div id="project-action-container"></div><div id="fields-header-row"></div><div id="redips-drag"></div><div id="data-container" onscroll="SpreadSheetView.handleDataScroll()"></div></div>'}function generateHeaderMarkup(e){var t='<select id="projectSelector" class="form-control" onchange="Project.selectProject()"><option id="selectProjectOption" value="0">Select Project...</option>';for(var i in e)t+='<option value="'+e[i].id+'">'+e[i].name+"</option>";return t+='<option id="newProjectOption" value="-1">Create New Project...</option></select><input id="editNewProjectNameInput" class="form-control"></input><a href="#" id="save-database-button" class="btn btn-default" onclick="Project.saveToDatabase()">Save to Database</a><a href="#" id="switchViewButton" class="btn btn-default" onclick="Project.switchView()">Switch View</a>'}function generateProjectSelectorMarkup(){return'<table><tr id="headerRow"><tr><div id="project-select-container"><select id="projectActionSelector" class="form-control" onchange="ProjectAction.handle()"><option value="blank"></option><option value="addField">Add Field</option></select><input id="projectActionInput" class="form-control"></input></div></tr><table>'}function generateFieldsRowMarkup(e){var t='<table id="fieldHeaderTable"><tr id="fieldHeaderRow">';for(var i in e)t+=getFieldHeaderMarkup(e[i].name,i);return t+="</tr></table>"}function generateTreeMarkup(e){var t='<table id="treeTable">';for(var i in e.children)t+=addRow(e.children[i]);return t+="</table>"}function addRow(e){var t="",i='<div class="redips-drag pull-right"><i class="glyphicon glyphicon-move"></i></div>',n='<a href="#" class="pull-right btn btn-danger btn-xs delete-button" onclick="SpreadSheetView.deleteNode('+e.id+')"><i class="glyphicon glyphicon-remove"></i></a>',a='<a href="#"  class="pull-right btn btn-info btn-xs copy-button" onclick="SpreadSheetView.copyNode('+e.id+')"><i class="glyphicon glyphicon-plus"></i></a>';if(t+='<tr id="rowid'+e.id+'" class="nodeRow"><td class="redips-rowhandler cell"><div id="nodeContent'+e.id+'" class="node-container">',t+=n+a+i,t+=getNodeContentMarkup(e),e.children&&e.children.length>0)for(var r in e.children)t+=addRow(e.children[r]);return t+="</div></td></tr>"}function getNodeContentMarkup(e){var t="",i=10*(e.depth-1);return e.children&&e.children.length>0?t+='<a href="#" id="icon'+e.id+'" style="margin-left:'+i+'px" onclick="SpreadSheetView.toggleExpandIcon('+e.id+')" class="btn btn-xs"><span class="glyphicon glyphicon-chevron-down"></span></a>':e._children&&e._children.length>0?t+='<a href="#" id="icon'+e.id+'" style="margin-left:'+i+'px" onclick="SpreadSheetView.toggleExpandIcon('+e.id+')" class="btn btn-xs"><span class="glyphicon glyphicon-chevron-right"></span></a>':(t+='<a href="#" id="icon'+e.id+'" style="margin-left:'+(i+12)+'px" onclick="SpreadSheetView.toggleExpandIcon('+e.id+')" class="btn btn-xs"><span></span></a>',i-=10),t+='<input id="nodeInput'+e.id+'" class="nodeTextInput" type="text" value="'+e.name+'" style="width:'+(DEFAULT_NODE_INPUT_WIDTH-i)+'px" oninput="SpreadSheetView.updateNodeName('+e.id+')"/>'}function generateDataMarkup(e){var t='<table id="dataTable">';for(var i in e.children)t+=addDataRow(e.children[i],e.fields);return t+="</table>"}function addDataRow(e,t){var i='<tr id="datarowid'+e.id+'" class="dataRow">';for(var n in t){var a=t[n],r="";e.values&&e.values[a.name]&&(r=Field.formatValue(a,e.values[a.name])),i+=getFieldCellMarkup(a.name,e.id,r)}i+="</tr>";for(var n in e.children)i+=addDataRow(e.children[n],t);return i}function addColumn(e,t){$("#fieldHeaderRow").append(getFieldHeaderMarkup(e,t.length)),$(".dataRow").each(function(t,i){$(i).append(getFieldCellMarkup(e,i.id.replace("datarowid","")))})}function getFieldHeaderMarkup(e,t){return'<td class="fieldHeaderCell"><div class="fieldHeaderContainer"><div class="moveColGrip"></div><div class="fieldNameInputContainer"><textarea id="colHeaderInput'+e+'" class="fieldNameInput">'+e+'</textarea></div><div class="fieldHeaderButton"><img src="images/down-arrow.png" onclick="SpreadSheetView.showFieldMenu(event, \''+e+'\');" style="cursor:pointer"/></div><div id="grip'+t+'" class="resizeColGrip" onmousedown="startResize(event, this)"></div></div></td>'}function getFieldCellMarkup(e,t,i){return'<td class="cell"><input class="fieldInput fieldInput'+e+'" type="text" id="'+e+t+'" value="'+i+'" oninput="SpreadSheetView.updateFieldValue(\''+e+"', '"+t+"')\" onfocus=\"SpreadSheetView.displayRawValue('"+e+"', '"+t+"')\"/></td>"}function getFieldMenuMarkup(e,t,i,n){var a=Tree.getField(e),r=new Menu,d=new MenuItem("Number",Field.NUMBER,"datatype",a),l=new MenuItem("Format"),o=new MenuItem("Number",Field.NUMBER_FORMAT,"format",a);o.items.push(new MenuItem("0",0,"precision",a));for(var c="0.",s=1;11>s;s++)c+="0",o.items.push(new MenuItem(c,s,"precision",a));l.items.push(o);var p=new MenuItem("Percent",Field.PERCENT_FORMAT,"format",a);p.items.push(new MenuItem("0",0,"precision",a));for(var c="0.",s=1;11>s;s++)c+="0",p.items.push(new MenuItem(c+"%",s,"precision",a));l.items.push(p);var u=new MenuItem("Scientific",Field.SCIENTIFIC_FORMAT,"format",a);u.items.push(new MenuItem("0",0,"precision",a));for(var c="0.",s=1;11>s;s++)c+="0",u.items.push(new MenuItem(c+"e+0",s,"precision",a));l.items.push(u),d.items.push(l);var h=new MenuItem("Aggregation");h.items.push(new MenuItem("No Aggregation",Field.NO_AGGREGATION,"agg_type",a));var m=new MenuItem("Sum any defined children",Field.SUM_ANY_AGGREGATION,"agg_type",a);for(var v in n){var g=n[v];g.name!=a.name&&m.items.push(new MenuItem(g.name,g.name,"agg_qty_field",a))}h.items.push(m),d.items.push(h),r.items=[],r.items.push(d),r.items.push(new MenuItem("Text",Field.STRING,"datatype",a));var f='<div id="fieldMenu" style="left:'+t+"px;top:"+i+'px;">';return f+=generateMenuMarkup(r),f+="</div>"}function generateMenuMarkup(e){for(var t="<ul>",i=0;i<e.items.length;i++){var n=e.items[i];t+='<li onclick="Menu.handleClick('+n.id+');">';var a="uncheckedMenuItem";n.field&&n.checked&&(a="checkedMenuItem"),t+='<img id="menuItem'+n.id+'" src="'+CHECK_MARK_IMAGE_PATH+'" class="'+a+'"/>',t+=n.display,n.items&&n.items.length>0&&(t+='<div class="arrowRight"></div>'),n.items&&n.items.length>0&&(t+=generateMenuMarkup(n)),t+="</li>"}return t+"</ul>"}var DEFAULT_NODE_INPUT_WIDTH=390;
var Menu=function(){Menu.menu=this};Menu.menu,Menu.handleClick=function(e){var n=Menu.menu.getMenuItem(e,Menu.menu),t=Menu.menu.getMenuItemParent(e,Menu.menu);if(n.field){var u=Tree.getField(n.field.name);u[n.varName]=n.value;for(var m in t.items)$("#menuItem"+t.items[m].id).removeClass("checkedMenuItem").addClass("uncheckedMenuItem");$("#menuItem"+e).removeClass("uncheckedMenuItem").addClass("checkedMenuItem"),t===Menu.menu&&SpreadSheetView.updateFieldFormatting(u)}},Menu.prototype.getMenuItem=function(e,n){if(e===n.id)return n;if(n.items&&n.items.length>0)for(var t,u=0;u<n.items.length;u++)if(t=this.getMenuItem(e,n.items[u]))return t;return null},Menu.prototype.getMenuItemParent=function(e,n){if(n.items&&n.items.length>0)for(var t=0;t<n.items.length;t++){if(n.items[t].id===e)return n;var u=this.getMenuItemParent(e,n.items[t]);if(u)return u}return null};
var MenuItem=function(i,t,e,s){this.display=i,this.value=t,this.varName=e,this.field=s,this.items=[],this.id=MenuItem.id++,this.parent=-1,this.checked=s?s[e]===t:!1};MenuItem.id=0;
function Project(){}Project.projects=null,Project.getProjects=function(){return Project.projects.projects},Project.setProjects=function(e){Project.projects=e},Project.selectProject=function(){"newProjectOption"===$("#projectSelector").find(":selected").attr("id")?($("#editNewProjectNameInput").val("Type New Project Name and Press Enter to Create"),$("#editNewProjectNameInput").show().focus().select()):($("#projectSelector").val()>0&&$("#selectProjectOption").remove(),$.ajax({type:"GET",url:"api/tree?projectID="+$("#projectSelector").val()}).done(function(e){Tree.setTree(e),Project.showSpreadSheetView()}))},Project.saveToDatabase=function(){$.ajax({type:"POST",url:"/api/tree",dataType:"json",data:{json:JSON.stringify(Tree.getTree())}})},Project.createNewProject=function(){$("#selectProjectOption").remove();var e=$("#editNewProjectNameInput").val();$("#editNewProjectNameInput").hide();var t=Project.projects.nextProjectID++,r=document.createElement("option");r.text=e,r.value=t.toString(),$(r).insertBefore("#projectSelector option:nth-child("+$("#projectSelector").length+")"),$("#projectSelector").val(t),$.ajax({type:"POST",url:"/api/addProject?projectName="+e}),Tree.setTree({projectID:t,projectName:e,name:e,version:1,nextNodeID:2,depth:0,fields:[],children:[{id:1,name:e,depth:1,children:[]}]}),Project.saveToDatabase(),Project.showSpreadSheetView()},Project.cleanseTree=function(){Tree.traverse(Tree.getChildren,function(e){e.children||(e.children=[]),delete e.parent})},Project.switchView=function(){$("#spreadSheetView").length?Project.showTreeView():Project.showSpreadSheetView()},Project.showSpreadSheetView=function(){Project.removeAllViews(),SpreadSheetView.display()},Project.showTreeView=function(){Project.removeAllViews(),TreeView.display(Tree.getTree())},Project.removeAllViews=function(){$("#spreadSheetView").remove(),$("#tree-container").remove()};
function ProjectAction(){}ProjectAction.init=function(){$("#project-action-container").html(generateProjectSelectorMarkup()),$("#projectActionInput").keyup(function(e){e.keyCode==ENTER_KEY&&ProjectAction.EnterPressed()})},ProjectAction.handle=function(){"addField"==$("#projectActionSelector").val()&&($("#projectActionInput").val("Type New Field Name and Press Enter to Create"),$("#projectActionInput").show().focus().select())},ProjectAction.EnterPressed=function(){if("addField"==$("#projectActionSelector").val()){var e=$("#projectActionInput").val();Tree.getTree().fields.push(new Field(e)),addColumn(e,Tree.getTree().fields),$("#projectActionInput").hide(),$("#projectActionSelector").val("blank")}};
var resizeColumnLeft=0,resizeField="0",MIN_COLUMN_WIDTH=70,GRIPS_WIDTH=16,startResize=function(e,i){$(document).bind("touchmove.resizeColGrip mousemove.resizeColGrip",resizeDrag).bind("touchend.resizeColGrip mouseup.resizeColGrip",resizeEnd),document.getElementById("resizeLine").style.visibility="visible",document.getElementById("resizeLine").style.left=e.pageX+"px",resizeColumnLeft=$(i.parentNode).position().left,resizeField=i.parentNode.id.replace("colHeader","")},resizeEnd=function(e){$(document).unbind("touchmove.resizeColGrip mousemove.resizeColGrip",resizeDrag).unbind("touchend.resizeColGrip mouseup.resizeColGrip",resizeEnd),document.getElementById("resizeLine").style.visibility="hidden";var i=e.pageX-resizeColumnLeft-GRIPS_WIDTH;MIN_COLUMN_WIDTH>i&&(i=MIN_COLUMN_WIDTH),document.getElementById("colHeaderInput"+resizeField).style.width=i+"px";for(var t=document.querySelectorAll(".fieldInput"+resizeField),r=0;r<t.length;r++)t[r].style.width=i+8+"px"},resizeDrag=function(e){e.pageX>resizeColumnLeft+MIN_COLUMN_WIDTH+GRIPS_WIDTH&&(document.getElementById("resizeLine").style.left=e.pageX+"px")};
function SpreadSheetView(){}SpreadSheetView.display=function(){Project.cleanseTree(),$("body").append(generateSpreadSheetMarkup()),ProjectAction.init(),$("#fields-header-row").html(generateFieldsRowMarkup(Tree.getFields())),$("#fields-header-row").css("right",scrollBarWidth+"px"),$("#data-container").html(generateDataMarkup(Tree.getTree())),$("#redips-drag").html(generateTreeMarkup(Tree.getTree())),$("#redips-drag").css("bottom",scrollBarWidth+"px"),redips.init()},SpreadSheetView.showFieldMenu=function(e,d){0===$("#fieldMenu").length&&($(getFieldMenuMarkup(d,e.clientX,e.clientY,Tree.getTree().fields)).appendTo("body"),$("#fieldMenu").mouseleave(function(){$("#fieldMenu").remove()}))},SpreadSheetView.handleDataScroll=function(){$("#redips-drag").scrollTop($("#data-container").scrollTop()),$("#fields-header-row").scrollLeft($("#data-container").scrollLeft())},SpreadSheetView.displayRawValue=function(e,d){var r=Tree.getField(e),a=Tree.findNode(parseInt(d));$("#"+e+d).val(a.values&&a.values[r.name]?a.values[r.name]:"")},SpreadSheetView.moveNode=function(e,d){var r=Tree.findNode(d),a=Tree.findNode(e);SpreadSheetView.removeNode(a),Tree.addNode(a,r),SpreadSheetView.addNode(a,r)},SpreadSheetView.addNode=function(e,d){Tree.isNodeCollapsed(d)&&SpreadSheetView.expandNode(d),SpreadSheetView.redrawExpandIcon(d),$(addRow(e)).insertAfter($("#rowid"+d.id)),$(addDataRow(e,Tree.getTree().fields)).insertAfter($("#datarowid"+d.id)),SpreadSheetView.enableDragging(e)},SpreadSheetView.insertNode=function(e,d){$(addRow(e)).insertBefore($("#rowid"+d.id)),$(addDataRow(e,Tree.getTree().fields)).insertBefore($("#datarowid"+d.id)),SpreadSheetView.enableDragging(e)},SpreadSheetView.removeNode=function(e){Tree.traverse(Tree.getChildren,function(e){$("#rowid"+e.id).remove(),$("#datarowid"+e.id).remove()},e);var d=Tree.findParent(e.id);Tree.removeNode(e),SpreadSheetView.redrawExpandIcon(d)},SpreadSheetView.enableDragging=function(e){Tree.traverse(Tree.getChildren,function(e){REDIPS.drag.enableDivs("init",$("#rowid"+e.id).find("div"))},e)},SpreadSheetView.toggleExpandIcon=function(e){var d=Tree.findNode(e);Tree.isNodeExpanded(d)?SpreadSheetView.collapseNode(d):Tree.isNodeCollapsed(d)&&SpreadSheetView.expandNode(d)},SpreadSheetView.expandNode=function(e){Tree.expandNode(e);for(var d,r=e.children.length-1;r>=0;r--)d=e.children[r],$(addDataRow(d,Tree.getTree().fields)).insertAfter($("#datarowid"+e.id)),$(addRow(d,"","")).insertAfter($("#rowid"+e.id));SpreadSheetView.redrawExpandIcon(e),SpreadSheetView.enableDragging(e)},SpreadSheetView.collapseNode=function(e){Tree.traverseDescendants(Tree.getChildren,function(e){$("#datarowid"+e.id).remove(),$("#rowid"+e.id).remove()},e),Tree.collapseNode(e),SpreadSheetView.redrawExpandIcon(e)},SpreadSheetView.updateFieldFormatting=function(e){$(".fieldInput"+e.name).each(function(d){var r=$(this).attr("id").replace(e.name,""),a=Tree.findNode(parseInt(r));if(a.values){var i=Number(a.values[e.name]);$(this).val(Field.formatValue(e,i))}})},SpreadSheetView.copyNode=function(e){var d=Tree.findNode(e),r=Tree.cloneNode(d);Tree.insertNode(r,d),SpreadSheetView.insertNode(r,d)},SpreadSheetView.deleteNode=function(e){SpreadSheetView.removeNode(Tree.findNode(e))},SpreadSheetView.updateNodeName=function(e){var d=Tree.findNode(e);d.name=$("#nodeInput"+e).val(),$("#nodeInput"+e).attr("value",$("#nodeInput"+e).val())},SpreadSheetView.updateFieldValue=function(e,d){Tree.updateNodeValue(parseInt(d),e,$("#"+e+d).val());for(var r in Tree.getTree().children)aggregate_any(Tree.getTree().children[r],e)},SpreadSheetView.redrawExpandIcon=function(e){$("#icon"+e.id).remove(),$("#nodeInput"+e.id).remove(),$(getNodeContentMarkup(e)).insertAfter($("#nodeContent"+e.id))};
function Tree(){}Tree.tree=null,Tree.getTree=function(){return Tree.tree},Tree.setTree=function(e){Tree.tree=e},Tree.getFields=function(){return Tree.tree.fields},Tree.getField=function(e){for(var r in Tree.tree.fields){var n=Tree.tree.fields[r];if(n.name===e)return n}},Tree.removeNode=function(e){var r=Tree.findParent(e.id);r?r.children.splice(r.children.indexOf(e),1):Tree.tree.children.splice(Tree.tree.children.indexOf(e),1)},Tree.addNode=function(e,r){r.children.push(e),Tree.setDepths(r)},Tree.insertNode=function(e,r){var n=Tree.findParent(e.id);n?n.children.splice(n.children.indexOf(r),0,e):Tree.tree.children.splice(Tree.tree.children.indexOf(r),0,e)},Tree.cloneNode=function(e){var r=$.extend(!0,{},e);return Tree.assignNewNodeIDs(r),r},Tree.assignNewNodeIDs=function(e){e.id=Tree.tree.nextNodeID++;for(var r in e.children)Tree.assignNewNodeIDs(e.children[r])},Tree.expandNode=function(e){e.children=e._children,e._children=[]},Tree.collapseNode=function(e){e._children=e.children,e.children=[]},Tree.isNodeChildless=function(e){return!(e.children&&0!==e.children.length||e._children&&0!==e._children.length)},Tree.isNodeCollapsed=function(e){return e._children&&e._children.length>0},Tree.isNodeExpanded=function(e){return e.children&&e.children.length>0},Tree.setDepths=function(e){for(var r in e.children)e.children[r].depth=e.depth+1,Tree.setDepths(e.children[r])},Tree.findNode=function(e,r){if(r||(r=Tree.tree),r.id===e)return r;for(var n in r.children){var i=Tree.findNode(e,r.children[n]);if(i)return i}},Tree.findParent=function(e,r,n){if(r||(r=Tree.tree),r.id===e)return n;for(var i in r.children){var d=Tree.findParent(e,r.children[i],r);if(d)return d}},Tree.updateNodeValue=function(e,r,n){var i=Tree.findNode(e,Tree.tree);i&&(i.values||(i.values={}),i.values[r]=n)},Tree.traverse=function(e,r,n){n||(n=Tree.tree),r(n);var i=e(n);for(var d in i)Tree.traverse(e,r,i[d])},Tree.traverseDescendants=function(e,r,n){n||(n=Tree.tree);for(var i in n.children)Tree.traverse(e,r,n.children[i])},Tree.getChildren=function(e){return e.children&&e.children.length>0?e.children:null};
function TreeView(){}TreeView.display=function(t){function e(t,n,r){if(t){n(t);var a=r(t);if(a)for(var l=a.length,i=0;l>i;i++)e(a[i],n,r)}}function n(){A.sort(function(t,e){return e.name.toLowerCase()<t.name.toLowerCase()?1:-1})}function r(t,e){var n=m;panTimer&&(clearTimeout(panTimer),translateCoords=d3.transform(z.attr("transform")),"left"==e||"right"==e?(translateX="left"==e?translateCoords.translate[0]+n:translateCoords.translate[0]-n,translateY=translateCoords.translate[1]):("up"==e||"down"==e)&&(translateX=translateCoords.translate[0],translateY="up"==e?translateCoords.translate[1]+n:translateCoords.translate[1]-n),scaleX=translateCoords.scale[0],scaleY=translateCoords.scale[1],scale=X.scale(),z.transition().attr("transform","translate("+translateX+","+translateY+")scale("+scale+")"),d3.select(t).select("g.node").attr("transform","translate("+translateX+","+translateY+")"),X.scale(X.scale()),X.translate([translateX,translateY]),panTimer=setTimeout(function(){r(t,n,e)},50))}function a(){z.attr("transform","translate("+d3.event.translate+")scale("+d3.event.scale+")")}function l(t,e){p=t,d3.select(e).select(".ghostCircle").attr("pointer-events","none"),d3.selectAll(".ghostCircle").attr("class","ghostCircle show"),d3.select(e).attr("class","node activeDrag"),z.selectAll("g.node").sort(function(t,e){return t.id!=p.id?1:-1}),nodes.length>1&&(links=A.links(nodes),nodePaths=z.selectAll("path.link").data(links,function(t){return t.target.id}).remove(),nodesExit=z.selectAll("g.node").data(nodes,function(t){return t.id}).filter(function(t,e){return t.id==p.id?!1:!0}).remove()),parentLink=A.links(A.nodes(p.parent)),z.selectAll("path.link").filter(function(t,e){return t.target.id==p.id?!0:!1}).remove(),dragStarted=null}function i(){v=null,d3.selectAll(".ghostCircle").attr("class","ghostCircle"),d3.select(domNode).attr("class","node"),d3.select(domNode).select(".ghostCircle").attr("pointer-events",""),N(),null!==p&&(u(f),o(p),p=null)}function s(t){t._children&&(t.children=t._children,t.children.forEach(s),t._children=[])}function o(t){scale=X.scale(),x=-t.y0,y=-t.x0,x=x*scale+k/2,y=y*scale+w/2,d3.select("g").transition().duration(T).attr("transform","translate("+x+","+y+")scale("+scale+")"),X.scale(scale),X.translate([x,y])}function c(t){return t.children?(t._children=t.children,t.children=[]):t._children&&(t.children=t._children,t._children=[]),t}function d(t){d3.event.defaultPrevented||(t=c(t),u(t),o(t))}function u(t){var e=function(t,e){return t.values&&t.values[e]&&t.values[e]>5?t.values[e]:5},n=[1],r=function(t,e){e.children&&e.children.length>0&&(n.length<=t+1&&n.push(0),n[t+1]+=e.children.length,e.children.forEach(function(e){r(t+1,e)}))};r(0,f);var a=25*d3.max(n);A=A.size([a,k]);var l=A.nodes(f).reverse(),i=A.links(l);l.forEach(function(t){t.y=10*t.depth*g}),node=z.selectAll("g.node").data(l,function(t){return t.id||(t.id=++_)});var s=node.enter().append("g").call(dragListener).attr("class","node").attr("transform",function(e){return"translate("+t.y0+","+t.x0+")"}).on("click",d);s.append("circle").attr("class","nodeCircle").attr("r",0).style("fill",function(t){return t._children?"lightsteelblue":"#fff"}),s.append("text").attr("x",function(t){return t.children||t._children?-10:10}).attr("dy",".35em").attr("class","nodeText").attr("text-anchor",function(t){return t.children||t._children?"end":"start"}).text(function(t){return t.name}).style("fill-opacity",0),s.append("circle").attr("class","ghostCircle").attr("r",30).attr("opacity",.2).style("fill","red").attr("pointer-events","mouseover").on("mouseover",function(t){b(t)}).on("mouseout",function(t){L(t)}),node.select("text").attr("x",function(t){return t.children||t._children?-10:10}).attr("text-anchor",function(t){return t.children||t._children?"end":"start"}).text(function(t){return t.name}),node.select("circle.nodeCircle").attr("r",function(t){return e(t)}).style("fill",function(t){return t._children?"lightsteelblue":"#fff"});var o=node.transition().duration(T).attr("transform",function(t){return"translate("+t.y+","+t.x+")"});o.select("text").style("fill-opacity",1);var c=node.exit().transition().duration(T).attr("transform",function(e){return"translate("+t.y+","+t.x+")"}).remove();c.select("circle").attr("r",0),c.select("text").style("fill-opacity",0);var u=z.selectAll("path.link").data(i,function(t){return t.target.id});u.enter().insert("path","g").attr("class","link").attr("d",function(e){var n={x:t.x0,y:t.y0};return E({source:n,target:n})}),u.transition().duration(T).attr("d",E),u.exit().transition().duration(T).attr("d",function(e){var n={x:t.x,y:t.y};return E({source:n,target:n})}).remove(),l.forEach(function(t){t.x0=t.x,t.y0=t.y})}$("body").append('<div id="tree-container"></div>');var f,h=0,g=0,v=null,p=null,m=200,C=20,_=0,T=750,k=$("#tree-container").width(),w=$("#tree-container").height(),A=d3.layout.tree().size([w,k]),E=d3.svg.diagonal().projection(function(t){return[t.y,t.x]});e(t,function(t){h++,g=Math.max(t.name.length,g)},function(t){return t.children&&t.children.length>0?t.children:null}),n();var X=d3.behavior.zoom().scaleExtent([.1,3]).on("zoom",a),Y=d3.select("#tree-container").append("svg").attr("width",k).attr("height",w).attr("class","overlay").call(X);dragListener=d3.behavior.drag().on("dragstart",function(t){t!=f&&(dragStarted=!0,nodes=A.nodes(t),d3.event.sourceEvent.stopPropagation())}).on("drag",function(t){if(t!=f){if(dragStarted&&(domNode=this,l(t,domNode)),relCoords=d3.mouse($("svg").get(0)),relCoords[0]<C)panTimer=!0,r(this,"left");else if(relCoords[0]>$("svg").width()-C)panTimer=!0,r(this,"right");else if(relCoords[1]<C)panTimer=!0,r(this,"up");else if(relCoords[1]>$("svg").height()-C)panTimer=!0,r(this,"down");else try{clearTimeout(panTimer)}catch(e){}t.x0+=d3.event.dy,t.y0+=d3.event.dx;var n=d3.select(this);n.attr("transform","translate("+t.y0+","+t.x0+")"),N()}}).on("dragend",function(t){if(t!=f)if(domNode=this,v){var e=p.parent.children.indexOf(p);e>-1&&p.parent.children.splice(e,1),v.children||v._children?v.children?v.children.push(p):v._children.push(p):(v.children=[],v.children.push(p)),s(v),n(),i()}else i()});var b=function(t){v=t,N()},L=function(t){v=null,N()},N=function(){var t=[];null!==p&&null!==v&&(t=[{source:{x:v.y0,y:v.x0},target:{x:p.y0,y:p.x0}}]);var e=z.selectAll(".templink").data(t);e.enter().append("path").attr("class","templink").attr("d",d3.svg.diagonal()).attr("pointer-events","none"),e.attr("d",d3.svg.diagonal()),e.exit().remove()},z=Y.append("g");f=t,f.x0=w/2,f.y0=0,u(f),o(f)};
//# sourceMappingURL=data:application/json;base64,