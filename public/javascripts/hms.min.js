function aggregate_any(e,a){if(e.nodes&&0!==e.nodes.length){for(var n=0,l=0;l<e.nodes.length;l++)n+=aggregate_any(e.nodes[l],a);return e.values||(e.values={}),e.values[a]=n,document.getElementById(a+e.id).value=n,n}return e.values&&e.values[a]?parseFloat(e.values[a]):0}
var DOWN_ARROW_IMAGE_PATH="images/down-arrow.png",CHECK_MARK_IMAGE_PATH="images/checkmark.png",BLANK_MARK_IMAGE_PATH="images/blankmark.png";
function displayTreeView(t){function e(t,n,r){if(t){n(t);var a=r(t);if(a)for(var l=a.length,o=0;l>o;o++)e(a[o],n,r)}}function n(){A.sort(function(t,e){return e.name.toLowerCase()<t.name.toLowerCase()?1:-1})}function r(t,e){var n=m;panTimer&&(clearTimeout(panTimer),translateCoords=d3.transform(z.attr("transform")),"left"==e||"right"==e?(translateX="left"==e?translateCoords.translate[0]+n:translateCoords.translate[0]-n,translateY=translateCoords.translate[1]):("up"==e||"down"==e)&&(translateX=translateCoords.translate[0],translateY="up"==e?translateCoords.translate[1]+n:translateCoords.translate[1]-n),scaleX=translateCoords.scale[0],scaleY=translateCoords.scale[1],scale=N.scale(),z.transition().attr("transform","translate("+translateX+","+translateY+")scale("+scale+")"),d3.select(t).select("g.node").attr("transform","translate("+translateX+","+translateY+")"),N.scale(N.scale()),N.translate([translateX,translateY]),panTimer=setTimeout(function(){r(t,n,e)},50))}function a(){z.attr("transform","translate("+d3.event.translate+")scale("+d3.event.scale+")")}function l(t,e){v=t,d3.select(e).select(".ghostCircle").attr("pointer-events","none"),d3.selectAll(".ghostCircle").attr("class","ghostCircle show"),d3.select(e).attr("class","node activeDrag"),z.selectAll("g.node").sort(function(t,e){return t.id!=v.id?1:-1}),nodes.length>1&&(links=A.links(nodes),nodePaths=z.selectAll("path.link").data(links,function(t){return t.target.id}).remove(),nodesExit=z.selectAll("g.node").data(nodes,function(t){return t.id}).filter(function(t,e){return t.id==v.id?!1:!0}).remove()),parentLink=A.links(A.nodes(v.parent)),z.selectAll("path.link").filter(function(t,e){return t.target.id==v.id}).remove(),dragStarted=null}function o(){console.log(domNode),p=null,d3.selectAll(".ghostCircle").attr("class","ghostCircle"),d3.select(domNode).attr("class","node"),console.log(domNode),d3.select(domNode).select(".ghostCircle").attr("pointer-events",""),L(),null!==v&&(u(f),i(v),v=null)}function s(t){t._children&&(t.children=t._children,t.children.forEach(s),t._children=null)}function i(t){scale=N.scale(),x=-t.y0,y=-t.x0,x=x*scale+_/2,y=y*scale+w/2,d3.select("g").transition().duration(T).attr("transform","translate("+x+","+y+")scale("+scale+")"),N.scale(scale),N.translate([x,y])}function d(t){return t.children?(t._children=t.children,t.children=null):t._children&&(t.children=t._children,t._children=null),t}function c(t){d3.event.defaultPrevented||(t=d(t),u(t),i(t))}function u(t){var e=[1],n=function(t,r){r.nodes&&r.nodes.length>0&&(e.length<=t+1&&e.push(0),e[t+1]+=r.nodes.length,r.nodes.forEach(function(e){n(t+1,e)}))};n(0,f);var r=25*d3.max(e);A=A.size([r,_]);var a=A.nodes(f).reverse(),l=A.links(a);a.forEach(function(t){t.y=10*t.depth*g}),node=z.selectAll("g.node").data(a,function(t){return t.id||(t.id=++k)});var o=node.enter().append("g").call(dragListener).attr("class","node").attr("transform",function(e){return"translate("+t.y0+","+t.x0+")"}).on("click",c);o.append("circle").attr("class","nodeCircle").attr("r",0).style("fill",function(t){return t._children?"lightsteelblue":"#fff"}),o.append("text").attr("x",function(t){return t.children||t._children?-10:10}).attr("dy",".35em").attr("class","nodeText").attr("text-anchor",function(t){return t.children||t._children?"end":"start"}).text(function(t){return t.name}).style("fill-opacity",0),o.append("circle").attr("class","ghostCircle").attr("r",30).attr("opacity",.2).style("fill","red").attr("pointer-events","mouseover").on("mouseover",function(t){Y(t)}).on("mouseout",function(t){b(t)}),node.select("text").attr("x",function(t){return t.children||t._children?-10:10}).attr("text-anchor",function(t){return t.children||t._children?"end":"start"}).text(function(t){return t.name}),node.select("circle.nodeCircle").attr("r",4.5).style("fill",function(t){return t._children?"lightsteelblue":"#fff"});var s=node.transition().duration(T).attr("transform",function(t){return"translate("+t.y+","+t.x+")"});s.select("text").style("fill-opacity",1);var i=node.exit().transition().duration(T).attr("transform",function(e){return"translate("+t.y+","+t.x+")"}).remove();i.select("circle").attr("r",0),i.select("text").style("fill-opacity",0);var d=z.selectAll("path.link").data(l,function(t){return t.target.id});d.enter().insert("path","g").attr("class","link").attr("d",function(e){var n={x:t.x0,y:t.y0};return E({source:n,target:n})}),d.transition().duration(T).attr("d",E),d.exit().transition().duration(T).attr("d",function(e){var n={x:t.x,y:t.y};return E({source:n,target:n})}).remove(),a.forEach(function(t){t.x0=t.x,t.y0=t.y})}$("body").append('<div id="tree-container"></div>');var f,h=0,g=0,p=null,v=null,m=200,C=20,k=0,T=750,_=$("#tree-container").width(),w=$("#tree-container").height(),A=d3.layout.tree().size([w,_]);A.children(function(t){return t.nodes});var E=d3.svg.diagonal().projection(function(t){return[t.y,t.x]});e(t,function(t){h++,g=Math.max(t.name.length,g)},function(t){return t.nodes&&t.nodes.length>0?t.nodes:null}),n();var N=d3.behavior.zoom().scaleExtent([.1,3]).on("zoom",a),X=d3.select("#tree-container").append("svg").attr("width",_).attr("height",w).attr("class","overlay").call(N);dragListener=d3.behavior.drag().on("dragstart",function(t){console.log("dragstart"),t!=f&&(dragStarted=!0,nodes=A.nodes(t),d3.event.sourceEvent.stopPropagation())}).on("drag",function(t){if(t!=f){if(dragStarted&&(domNode=this,l(t,domNode)),relCoords=d3.mouse($("svg").get(0)),relCoords[0]<C)panTimer=!0,r(this,"left");else if(relCoords[0]>$("svg").width()-C)panTimer=!0,r(this,"right");else if(relCoords[1]<C)panTimer=!0,r(this,"up");else if(relCoords[1]>$("svg").height()-C)panTimer=!0,r(this,"down");else try{clearTimeout(panTimer)}catch(e){}t.x0+=d3.event.dy,t.y0+=d3.event.dx;var n=d3.select(this);n.attr("transform","translate("+t.y0+","+t.x0+")"),L()}}).on("dragend",function(t){if(console.log("dragend"),t!=f)if(domNode=this,p){var e=v.parent.children.indexOf(v);e>-1&&v.parent.children.splice(e,1),p.nodes.push(v),s(p),n(),o()}else o()});var Y=function(t){p=t,L()},b=function(t){p=null,L()},L=function(){var t=[];null!==v&&null!==p&&(t=[{source:{x:p.y0,y:p.x0},target:{x:v.y0,y:v.x0}}]);var e=z.selectAll(".templink").data(t);e.enter().append("path").attr("class","templink").attr("d",d3.svg.diagonal()).attr("pointer-events","none"),e.attr("d",d3.svg.diagonal()),e.exit().remove()},z=X.append("g");f=t,f.x0=w/2,f.y0=0,u(f),i(f)}
"use strict";var REDIPS=REDIPS||{};REDIPS.drag=function(){var e,o,t,n,r,d,l,i,a,s,c,f,p,g,u,v,y,m,h,w,E,b,D,I,S,R,P,x,N,T,C,B,j,k=null,L={width:0,height:0},M={width:null,height:null,container:[],obj:null},O={page:{x:0,y:0},div:{x:0,y:0},flag:{x:0,y:0}},Y=[],H=[],W=null,_=null,X={x:0,y:0},A={x:0,y:0,value:7,flag:!1},V=!1,z=!1,F=null,q=null,K=null,$=null,G=null,J=null,Q=!1,U=!1,Z={colorTd:"#FFCFAE",colorTr:"#9BB3DA"},ee={enable:!0,bound:25,speed:20},oe={borderDisabled:"dotted",opacityDisabled:"",rowEmptyColor:"white"},te={},ne={keyDiv:!1,keyRow:!1,sendBack:!1,drop:!1},re={cloned:function(){},clonedDropped:function(){},clonedEnd1:function(){},clonedEnd2:function(){},dropped:function(){},droppedBefore:function(){},finish:function(){},notCloned:function(){},notMoved:function(){},rowChanged:function(){},rowClicked:function(){},rowCloned:function(){},rowDropped:function(){},rowDroppedBefore:function(){},rowDroppedSource:function(){},rowMoved:function(){},rowNotCloned:function(){},rowNotMoved:function(){}};return e=function(){if(W=document.getElementById("redips-drag"),j=m(),!document.getElementById("redips_clone")){var e=document.createElement("div");e.id="redips_clone",e.style.width=e.style.height="1px",W.appendChild(e)}o("init",".redips-drag"),T=document.getElementById("treeTable"),T.redips={},c(),REDIPS.event.add(window,"resize",c),REDIPS.event.add(window,"scroll",y)},n=function(e){var o,t,n,l,i=e||window.event;if(i.cancelBubble=!0,i.stopPropagation&&i.stopPropagation(),V=i.shiftKey,window.getSelection)window.getSelection().removeAllRanges();else if(document.selection&&"Text"===document.selection.type)try{document.selection.empty()}catch(a){}return n=X.x=i.clientX,l=X.y=i.clientY,A.x=n,A.y=l,A.flag=!1,REDIPS.drag.objOld=U=Q||this,REDIPS.drag.obj=Q=this,z=Q.className.indexOf("redips-clone")>-1,REDIPS.drag.obj=Q=R(Q),y(),F=$=null,f(),K=q=F,J=G=$,REDIPS.drag.event.rowClicked(te.current),null!==F&&null!==$||(f(),K=q=F,J=G=$,null!==F&&null!==$)?(C=B=!1,REDIPS.event.add(document,"mousemove",d),REDIPS.event.add(document,"mouseup",r),null!==F&&(N=u(F)),t=D(T,"position"),"fixed"!==t&&(t=D(T.parentNode,"position")),o=v(Q,t),k=[l-o[0],o[1]-n,o[2]-l,n-o[3]],!1):!0},R=function(e){var o,t,n;return"DIV"===e.nodeName?(n=e,e=I("TR",e),void 0===e.redips&&(e.redips={}),e.redips.div=n,e):(t=e,o=document.createElement("table"),o.innerHTML='<tr id="'+t.id+'" class="'+t.classList+'">'+t.innerHTML+"</tr>",o.redips={},o.redips.sourceRow=t,E(t,o.rows[0]),document.getElementById("redips_clone").appendChild(o),o)},P=function(e){var o,t,n;n=function(e){var o;void 0!==e.redips&&e.redips.emptyRow?S(e,"empty",REDIPS.drag.style.rowEmptyColor):(o=I("TABLE",e),o.deleteRow(e.rowIndex))};var r=Q;e>T.rows.length-1&&(e=T.rows.length-1);var d=T.rows[e];t=r.getElementsByTagName("tr")[0],r.parentNode.removeChild(r),o=REDIPS.drag.event.rowDroppedBefore(T,r.redips.sourceRow.rowIndex),o!==!1&&(e<T.rows.length?d.parentNode.insertBefore(t,d.nextSibling):(d.parentNode.appendChild(t),d=T.rows[0]),B||n(r.redips.sourceRow),delete t.redips.emptyRow,REDIPS.drag.event.rowDropped(d))},r=function(e){var o,t,n,a,s,c,f=e||window.event;if(n=f.clientX,a=f.clientY,O.flag.x=O.flag.y=0,REDIPS.event.remove(document,"mousemove",d),REDIPS.event.remove(document,"mouseup",r),W.onselectstart=null,i(Q),M.width=document.documentElement.scrollWidth,M.height=document.documentElement.scrollHeight,O.flag.x=O.flag.y=0,null===F||null===$)REDIPS.drag.event.notMoved();else{if(REDIPS.drag.td.target=te.target=T.rows[F].cells[$],g(F,N),o=F,C)if(K===o){for(t=Q.getElementsByTagName("tr")[0],U.style.backgroundColor=t.style.backgroundColor,s=0;s<t.cells.length;s++)U.cells[s].style.backgroundColor=t.cells[s].style.backgroundColor;Q.parentNode.removeChild(Q),delete U.redips.emptyRow,B?REDIPS.drag.event.rowNotCloned():REDIPS.drag.event.rowDroppedSource(te.target)}else P(o);else REDIPS.drag.event.rowNotMoved();B||A.flag?B&&K===F&&J===$?(Q.parentNode.removeChild(Q),Y[U.id]-=1,REDIPS.drag.event.notCloned()):B&&REDIPS.drag.clone.drop===!1&&(n<T.redips.offset[3]||n>T.redips.offset[1]||a<T.redips.offset[0]||a>T.redips.offset[2])?(Q.parentNode.removeChild(Q),Y[U.id]-=1,REDIPS.drag.event.notCloned()):(c=REDIPS.drag.event.droppedBefore(te.target),l(c)):REDIPS.drag.event.notMoved(),y(),REDIPS.drag.event.finish()}q=G=null},l=function(e){var o,t=null;if(e!==!1){if(ne.sendBack===!0){o=te.target.getElementsByTagName("DIV");for(var n=0;n<o.length;n++)if(Q!==o[n]&&0===Q.id.indexOf(o[n].id)){t=o[n];break}if(t)return b(t,1),void Q.parentNode.removeChild(Q)}te.target.appendChild(Q),a(Q),REDIPS.drag.event.dropped(te.target),B&&(REDIPS.drag.event.clonedDropped(te.target),b(U,-1))}else B&&Q.parentNode&&Q.parentNode.removeChild(Q)},a=function(e,o){e.onmousedown=o===!1?null:n},i=function(e){e.style.top="",e.style.left="",e.style.position="",e.style.zIndex=""},d=function(e){var o,t,n,r,d,l,i,a=e||window.event,c=REDIPS.drag.scroll.bound;if(t=X.x=a.clientX,n=X.y=a.clientY,r=Math.abs(A.x-t),d=Math.abs(A.y-n),C||((z||REDIPS.drag.clone.keyRow===!0&&V)&&(B=!0),REDIPS.drag.objOld=U=Q,REDIPS.drag.obj=Q=R(Q),Q.style.zIndex=999,Q.style.position="fixed",y(),f(),B?REDIPS.drag.event.rowCloned():REDIPS.drag.event.rowMoved(),p(),t>L.width-k[1]&&(Q.style.left=L.width-(k[1]+k[3])+"px"),n>L.height-k[2]&&(Q.style.top=L.height-(k[0]+k[2])+"px")),C=!0,t>k[3]&&t<L.width-k[1]&&(Q.style.left=t-k[3]+"px"),n>k[0]&&n<L.height-k[2]&&(Q.style.top=n-k[0]+"px"),t<_[1]&&t>_[3]&&n<_[2]&&n>_[0]&&0===O.flag.x&&0===O.flag.y&&(H.containTable||t<H[3]||t>H[1]||n<H[0]||n>H[2])&&(f(),s()),REDIPS.drag.scroll.enable)for(O.page.x=c-(L.width/2>t?t-k[3]:L.width-t-k[1]),O.page.x>0?(O.page.x>c&&(O.page.x=c),i=0,O.page.x*=t<L.width/2?-1:1,O.page.x<0&&0>=i||O.page.x>0&&i>=M.width-L.width||0===O.flag.x++&&(REDIPS.event.remove(window,"scroll",y),h(window))):O.page.x=0,O.page.y=c-(L.height/2>n?n-k[0]:L.height-n-k[2]),O.page.y>0?(O.page.y>c&&(O.page.y=c),i=window.pageYOffset||document.documentElement.scrollTop,O.page.y*=n<L.height/2?-1:1,O.page.y<0&&0>=i||O.page.y>0&&i>=M.height-L.height||0===O.flag.y++&&(REDIPS.event.remove(window,"scroll",y),w(window))):O.page.y=0,l=0;l<M.container.length;l++){if(o=M.container[l],o.autoscroll&&t<o.offset[1]&&t>o.offset[3]&&n<o.offset[2]&&n>o.offset[0]){O.div.x=c-(o.midstX>t?t-k[3]-o.offset[3]:o.offset[1]-t-k[1]),O.div.x>0?(O.div.x>c&&(O.div.x=c),O.div.x*=t<o.midstX?-1:1,0===O.flag.x++&&(REDIPS.event.remove(o.div,"scroll",y),h(o.div))):O.div.x=0,O.div.y=c-(o.midstY>n?n-k[0]-o.offset[0]:o.offset[2]-n-k[2]),O.div.y>0?(O.div.y>c&&(O.div.y=c),O.div.y*=n<o.midstY?-1:1,0===O.flag.y++&&(REDIPS.event.remove(o.div,"scroll",y),w(o.div))):O.div.y=0;break}O.div.x=O.div.y=0}a.cancelBubble=!0,a.stopPropagation&&a.stopPropagation()},s=function(){(F!==q||$!==G)&&(null!==q&&null!==G&&(g(q,N),REDIPS.drag.td.previous=te.previous=T.rows[q].cells[G],REDIPS.drag.td.current=te.current=T.rows[F].cells[$],F!==q&&REDIPS.drag.event.rowChanged(te.current)),p())},c=function(){L.width=window.innerWidth,L.height=window.innerHeight,M.width=document.documentElement.scrollWidth,M.height=document.documentElement.scrollHeight,y()},f=function(){var e,o,t,n,r,d,l=[];if(e=function(){null!==q&&null!==G&&(F=q,$=G)},n=X.x,r=X.y,l[0]=T.redips.offset[0],l[1]=T.redips.offset[1],l[2]=T.redips.offset[2],l[3]=T.redips.offset[3],void 0!==T.sca&&(l[0]=l[0]>T.sca.offset[0]?l[0]:T.sca.offset[0],l[1]=l[1]<T.sca.offset[1]?l[1]:T.sca.offset[1],l[2]=l[2]<T.sca.offset[2]?l[2]:T.sca.offset[2],l[3]=l[3]>T.sca.offset[3]?l[3]:T.sca.offset[3]),l[3]<n&&n<l[1]&&l[0]<r&&r<l[2]){for(o=T.redips.row_offset,F=0;F<o.length-1;F++)if(void 0!==o[F]){if(H[0]=o[F][0],void 0!==o[F+1])H[2]=o[F+1][0];else for(d=F+2;d<o.length;d++)if(void 0!==o[d]){H[2]=o[d][0];break}if(r<=H[2])break}t=F,F===o.length-1&&(H[0]=o[F][0],H[2]=T.redips.offset[2]),$=0,0>F||0>$?e():F!==t&&(H[0]=o[F][0],H[2]=H[0]+T.rows[F].cells[$].offsetHeight,(r<H[0]||r>H[2])&&e())}},p=function(){null!==F&&null!==$&&(N=u(F),g(F),q=F,G=$)},g=function(e,o){var t,n;t=T.rows[e];for(var r=0;r<t.cells.length;r++)n=t.cells[r].style,n.backgroundColor=void 0===o?REDIPS.drag.hover.colorTr:o.color[r].toString(),void 0!==REDIPS.drag.hover.borderTr&&(void 0===o?K>F?n.borderTop=REDIPS.drag.hover.borderTr:n.borderBottom=REDIPS.drag.hover.borderTr:(n.borderTopWidth=o.top[r][0],n.borderTopStyle=o.top[r][1],n.borderTopColor=o.top[r][2],n.borderBottomWidth=o.bottom[r][0],n.borderBottomStyle=o.bottom[r][1],n.borderBottomColor=o.bottom[r][2]))},u=function(e){var o,t,n={color:[],top:[],right:[],bottom:[],left:[]},r=function(e,o){var t="border"+o+"Width",n="border"+o+"Style",r="border"+o+"Color";return[D(e,t),D(e,n),D(e,r)]};o=T.rows[e];for(var d=0;d<o.cells.length;d++)t=o.cells[d],n.color[d]=t.style.backgroundColor,void 0!==REDIPS.drag.hover.borderTr&&(n.top[d]=r(t,"Top"),n.bottom[d]=r(t,"Bottom"));return n},v=function(e,o,t){var n=0,r=0,d=e;if("fixed"!==o&&(n=0-j[0],r=0-j[1]),void 0===t||t===!0){do n+=e.offsetLeft-e.scrollLeft,r+=e.offsetTop-e.scrollTop,e=e.offsetParent;while(e&&"BODY"!==e.nodeName)}else do n+=e.offsetLeft,r+=e.offsetTop,e=e.offsetParent;while(e&&"BODY"!==e.nodeName);return[r,n+d.offsetWidth,r+d.offsetHeight,n]},y=function(){var e,o,t;j=m(),e=[],o=D(T,"position"),"fixed"!==o&&(o=D(T.parentNode,"position"));for(var n=T.rows.length-1;n>=0;n--)"none"!==T.rows[n].style.display&&(e[n]=v(T.rows[n],o));T.redips.offset=v(T,o),T.redips.row_offset=e,_=v(W);for(var n=0;n<M.container.length;n++)o=D(M.container[n].div,"position"),t=v(M.container[n].div,o,!1),M.container[n].offset=t,M.container[n].midstX=(t[1]+t[3])/2,M.container[n].midstY=(t[0]+t[2])/2},m=function(){var e=window.pageYOffset||document.documentElement.scrollTop,o=0;return[o,e]},h=function(e){var o,t,n,r,d,l=X.x,i=X.y;O.flag.x>0&&(y(),f(),l<_[1]&&l>_[3]&&i<_[2]&&i>_[0]&&s()),"object"==typeof e&&(M.obj=e),M.obj===window?(n=t=m()[0],r=M.width-L.width,d=O.page.x):(n=M.obj.scrollLeft,r=M.obj.scrollWidth-M.obj.clientWidth,d=O.div.x),O.flag.x>0&&(0>d&&n>0||d>0&&r>n)?(M.obj===window?(window.scrollBy(d,0),n=m()[0],o=parseInt(Q.style.left,10),isNaN(o)&&(o=0)):M.obj.scrollLeft+=d,setTimeout(h,REDIPS.drag.scroll.speed)):(REDIPS.event.add(M.obj,"scroll",y),O.flag.x=0,H=[0,0,0,0])},w=function(e){var o,t,n,r,d,l=X.x,i=X.y;O.flag.y>0&&(y(),f(),l<_[1]&&l>_[3]&&i<_[2]&&i>_[0]&&s()),"object"==typeof e&&(M.obj=e),M.obj===window?(n=t=m()[1],r=M.height-L.height,d=O.page.y):(n=M.obj.scrollTop,r=M.obj.scrollHeight-M.obj.clientHeight,d=O.div.y),O.flag.y>0&&(0>d&&n>0||d>0&&r>n)?(M.obj===window?(window.scrollBy(0,d),n=m()[1],o=parseInt(Q.style.top,10),isNaN(o)&&(o=0)):M.obj.scrollTop+=d,setTimeout(w,REDIPS.drag.scroll.speed)):(REDIPS.event.add(M.obj,"scroll",y),O.flag.y=0,H=[0,0,0,0])},E=function(e,o){var t,n=[];n[0]=function(e,o){e.redips&&(o.redips={},o.redips.enabled=e.redips.enabled,o.redips.container=e.redips.container,e.redips.enabled&&a(o))},n[1]=function(e,o){e.redips&&(o.redips={},o.redips.emptyRow=e.redips.emptyRow)},t=function(t){var r,d,l=["DIV","TR"];r=e.getElementsByTagName(l[t]),d=o.getElementsByTagName(l[t]);for(var i=0;i<d.length;i++)n[t](r[i],d[i])},"DIV"===e.nodeName?n[0](e,o):"TR"===e.nodeName&&n[1](e,o),t(0),t(1)},b=function(e,t){var n,r,d,l;l=e.className,n=l.match(/climit(\d)_(\d+)/),null!==n&&(r=parseInt(n[1],10),d=parseInt(n[2],10),0===d&&1===t&&(l+=" redips-clone",2===r&&o(!0,e)),d+=t,l=l.replace(/climit\d_\d+/g,"climit"+r+"_"+d),0>=d&&(l=l.replace("redips-clone",""),2===r?(o(!1,e),REDIPS.drag.event.clonedEnd2()):REDIPS.drag.event.clonedEnd1()),e.className=x(l))},o=function(e,o){var n=[];void 0===o?n=W.getElementsByTagName("div"):"string"==typeof o?n=document.querySelectorAll(o):"object"!=typeof o||"DIV"===o.nodeName&&-1!==o.className.indexOf("redips-drag")?n[0]=o:n=o.getElementsByTagName("div"),t(e,n)},t=function(e,o){var t,n,r,d,l,i,s,c,f,p,g,u=[],m=/\bredips-drag\b/i,h=/\bredips-noautoscroll\b/i;for(l=REDIPS.drag.style.opacityDisabled,e===!0||"init"===e?(d=REDIPS.drag.style.borderEnabled,i="move",f=!0):(d=REDIPS.drag.style.borderDisabled,i="auto",f=!1),t=0,n=0;t<o.length;t++)if(m.test(o[t].className))"init"===e||void 0===o[t].redips?(o[t].redips={},o[t].redips.container=W):e===!0&&"number"==typeof l?(o[t].style.opacity="",o[t].style.filter=""):e===!1&&"number"==typeof l&&(o[t].style.opacity=l/100,o[t].style.filter="alpha(opacity="+l+")"),a(o[t],f),o[t].style.borderStyle=d,o[t].style.cursor=i,o[t].redips.enabled=f;else if("init"===e&&(s=D(o[t],"overflow"),"visible"!==s)){for(REDIPS.event.add(o[t],"scroll",y),g=D(o[t],"position"),p=v(o[t],g,!1),c=!h.test(o[t].className),M.container[n]={div:o[t],offset:p,midstX:(p[1]+p[3])/2,midstY:(p[0]+p[2])/2,autoscroll:c},u=o[t].getElementsByTagName("table"),r=0;r<u.length;r++)u[r].sca=M.container[n];n++}},D=function(e,o){return e&&e.currentStyle?e.currentStyle[o]:e&&window.getComputedStyle?document.defaultView.getComputedStyle(e,null)[o]:void 0},I=function(e,o){for(o=o.parentNode;o&&o.nodeName!==e;)o=o.parentNode;return o},x=function(e){return void 0!==e&&(e=e.replace(/^\s+|\s+$/g,"").replace(/\s{2,}/g," ")),e},S=function(e,o,t){var n,r,d;if("string"==typeof e&&(e=document.getElementById(e),e=I("TABLE",e)),"TR"===e.nodeName)for(n=e.getElementsByTagName("td"),r=0;r<n.length;r++)if(n[r].style.backgroundColor=t?t:"","empty"===o)n[r].innerHTML="";else for(d=0;d<n[r].childNodes.length;d++)1===n[r].childNodes[d].nodeType&&(n[r].childNodes[d].style.opacity=o/100,n[r].childNodes[d].style.filter="alpha(opacity="+o+")");else e.style.opacity=o/100,e.style.filter="alpha(opacity="+o+")",e.style.backgroundColor=t?t:""},{obj:Q,objOld:U,td:te,hover:Z,scroll:ee,style:oe,clone:ne,init:e,enableDrag:o,enableDivs:t,rowOpacity:S,getScrollPosition:m,getStyle:D,findParent:I,event:re}}(),REDIPS.event||(REDIPS.event=function(){var e,o;return e=function(e,o,t){e.addEventListener?e.addEventListener(o,t,!1):e.attachEvent?e.attachEvent("on"+o,t):e["on"+o]=t},o=function(e,o,t){e.removeEventListener?e.removeEventListener(o,t,!1):e.detachEvent?e.detachEvent("on"+o,t):e["on"+o]=null},{add:e,remove:o}}());
"use strict";var redips={};redips.init=function(){var e=REDIPS.drag;e.init(),e.event.rowDropped=function(n){var t=parseInt(e.objOld.id.replace("rowid","")),o=document.getElementById(e.objOld.id),d=parseInt(n.id.replace("rowid","")),i=getParentID(o);moveAssembly(t,d,i,n),document.getElementById("expandID"+d).classList.remove("hide-expand"),document.getElementById("expandID"+d).classList.add("show-expand")},e.event.rowDroppedSource=function(){e.rowOpacity(e.objOld,100)},e.event.rowMoved=function(){e.rowOpacity(e.obj,85),e.rowOpacity(e.objOld,20,"White")},e.event.rowClicked=function(){},e.event.rowNotMoved=function(){},e.event.rowCloned=function(){},e.event.rowNotCloned=function(){},e.event.rowDeleted=function(){},e.event.rowUndeleted=function(){e.rowOpacity(e.objOld,100)}};
function initProjectActions(){$("#projectActionInput").keyup(function(e){e.keyCode==ENTER_KEY&&projectActionEnterPressed()})}var scrollBarWidth;$(document).ready(function(){scrollBarWidth=getScrollBarWidth(),document.onkeydown=checkKey,$.ajax({type:"GET",url:"api/projects"}).done(function(e){projects=e,$("#header").html(generateHeaderMarkup(projects.projects)),$("#editNewProjectNameInput").keyup(function(e){e.keyCode==ENTER_KEY&&createNewProject()})})});var getScrollBarWidth=function(){var e,t;return e=document.createElement("div"),e.innerHTML='<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>',e=e.firstChild,document.body.appendChild(e),t=e.offsetWidth-e.clientWidth,document.body.removeChild(e),t};
function checkKey(e){if(e=e||window.event,e.keyCode==KEY_UP_ARROW){e.preventDefault();var t=$(getAncestorTag(document.activeElement,"tr")).prev()[0];t&&$("#"+getNextElementID(t)).focus()}else if(e.keyCode==KEY_DOWN_ARROW){e.preventDefault();var n=$(getAncestorTag(document.activeElement,"tr")).next()[0];n&&$("#"+getNextElementID(n)).focus()}else e.keyCode==KEY_RIGHT_ARROW?(e.preventDefault(),$(getAncestorTag(document.activeElement,"td")).next().find("input").focus()):e.keyCode==KEY_LEFT_ARROW&&(e.preventDefault(),$(getAncestorTag(document.activeElement,"td")).prev().find("input").focus())}function getNextElementID(e){var t=document.activeElement.id;if(t.indexOf("nodeInput")>-1)return"nodeInput"+e.id.replace("rowid","");for(var n=document.activeElement.className.split(" "),r=0;r<n.length;r++){var a=n[r];if(a.indexOf("fieldInput")>-1&&"fieldInput"!=a){var c=a.replace("fieldInput","");return c+e.id.replace("datarowid","")}}}var KEY_UP_ARROW=38,KEY_DOWN_ARROW=40,KEY_LEFT_ARROW=37,KEY_RIGHT_ARROW=39;
function generateSpreadSheetMarkup(){return'<div id="spreadSheetView"><div id="project-action-container"></div><div id="fields-header-row"></div><div id="redips-drag"></div><div id="data-container" onscroll="handleDataScroll()"></div></div>'}function generateHeaderMarkup(e){for(var t='<select id="projectSelector" class="form-control" onchange="selectProject()"><option id="selectProjectOption" value="0">Select Project...</option>',n=0;n<e.length;n++)t+='<option value="'+e[n].id+'">'+e[n].name+"</option>";return t+='<option id="newProjectOption" value="-1">Create New Project...</option></select><input id="editNewProjectNameInput" class="form-control"></input><a href="#" id="save-database-button" class="btn btn-default" onclick="Project.saveToDatabase()">Save to Database</a><a href="#" id="switchViewButton" class="btn btn-default" onclick="Project.switchView()">Switch View</a>'}function generateProjectSelectorMarkup(){return'<table><tr id="headerRow"><tr><div id="project-select-container"><select id="projectActionSelector" class="form-control" onchange="handleProjectAction()"><option value="blank"></option><option value="addField">Add Field</option></select><input id="projectActionInput" class="form-control"></input></div></tr><table>'}function generateFieldsRowMarkup(){for(var e='<table id="fieldHeaderTable"><tr id="fieldHeaderRow">',t=0;t<tree.fields.length;t++)e+=getFieldHeaderMarkup(tree.fields[t].name,t);return e+="</tr></table>"}function generateTreeMarkup(){for(var e='<table id="treeTable">',t=0;t<tree.nodes.length;t++)e+=addRow(tree.nodes[t],0,"",0);return e+="</table>"}function addRow(e,t,n,i){var a="",d="nodeRow depth"+t+" expanded parent"+i+" "+n,r=e.id,o='<div class="redips-drag pull-right"><i class="glyphicon glyphicon-move"></i></div>',l='<a href="#" class="pull-right btn btn-danger btn-xs delete-button" onclick="deleteNode(this)"><i class="glyphicon glyphicon-remove"></i></a>',s='<a href="#"  class="pull-right btn btn-info btn-xs copy-button" onclick="copyNode(this)"><i class="glyphicon glyphicon-plus"></i></a>',c='<a id="expandID'+r+'" href="#" style="margin-left:'+10*t+'px" onclick="toggle(this)" class="btn btn-xs show-expand"><span id="icon'+r+'" class="glyphicon glyphicon-chevron-down iconp'+i+'"></span></a>',u='<a id="expandID'+r+'" href="#" style="margin-left:'+10*t+'px" onclick="toggle(this)" class="btn btn-xs hide-expand"><span id="icon'+r+'" class="glyphicon glyphicon-chevron-down iconp'+i+'"></span></a>';if(a+='<tr id="rowid'+r+'" class="'+d+'"><td class="redips-rowhandler cell"><div class="node-container">',a+=l+s+o,a+=e.nodes&&e.nodes.length>0?c:u,a+='<input id="nodeInput'+e.id+'" class="nodeTextInput" type="text" value="'+e.name+'" style="width:'+(DEFAULT_NODE_INPUT_WIDTH-10*t)+'px" oninput="updateNodeName(this)"/></div></td></tr>',e.nodes&&e.nodes.length>0)for(var p=0;p<e.nodes.length;p++)a+=addRow(e.nodes[p],t+1,n+" ancestor"+r,r);return a}function generateDataMarkup(){for(var e='<table id="dataTable">',t=0;t<tree.nodes.length;t++)e+=addDataRow(tree.nodes[t]);return e+="</table>"}function addDataRow(e){for(var t='<tr id="datarowid'+e.id+'" class="dataRow">',n=0;n<tree.fields.length;n++){var i=tree.fields[n],a="";e.values&&e.values[i.name]&&(a=Field.formatValue(i,e.values[i.name])),t+=getFieldCellMarkup(i.name,e.id,a)}if(t+="</tr>",e.nodes&&e.nodes.length>0)for(var n=0;n<e.nodes.length;n++)t+=addDataRow(e.nodes[n]);return t}function addColumn(e){$("#fieldHeaderRow").append(getFieldHeaderMarkup(e,tree.fields.length)),$(".dataRow").each(function(t,n){$(n).append(getFieldCellMarkup(e,n.id.replace("datarowid","")))})}function getFieldHeaderMarkup(e,t){return'<td class="fieldHeaderCell"><div class="fieldHeaderContainer"><div class="moveColGrip"></div><div class="fieldNameInputContainer"><textarea id="colHeaderInput'+e+'" class="fieldNameInput">'+e+'</textarea></div><div class="fieldHeaderButton"><img src="images/down-arrow.png" onclick="showMenu(event, \''+e+'\');" style="cursor:pointer"/></div><div id="grip'+t+'" class="resizeColGrip" onmousedown="startResize(event, this)"></div></div></td>'}function getFieldCellMarkup(e,t,n){return'<td class="cell"><input class="fieldInput fieldInput'+e+'" type="text" id="'+e+t+'" value="'+n+'" oninput="updateFieldValue(\''+e+"', '"+t+"')\" onfocus=\"displayRawValue('"+e+"', '"+t+"')\"/></td>"}function getAssemblyMarkup(e,t,n){var i=findNodeInTree(e),a=findParentInTree(e);return addRow(i,n,"ancestor"+a.id,a.id)}function getFieldMenuMarkup(e,t,n){var i=Project.getField(e),a=new Menu,d=new MenuItem("Number",Field.NUMBER,"datatype",i),r=new MenuItem("Format"),o=new MenuItem("Number",Field.NUMBER_FORMAT,"format",i);o.items.push(new MenuItem("0",0,"precision",i));for(var l="0.",s=1;11>s;s++)l+="0",o.items.push(new MenuItem(l,s,"precision",i));r.items.push(o);var c=new MenuItem("Percent",Field.PERCENT_FORMAT,"format",i);c.items.push(new MenuItem("0",0,"precision",i));for(var l="0.",s=1;11>s;s++)l+="0",c.items.push(new MenuItem(l+"%",s,"precision",i));r.items.push(c);var u=new MenuItem("Scientific",Field.SCIENTIFIC_FORMAT,"format",i);u.items.push(new MenuItem("0",0,"precision",i));for(var l="0.",s=1;11>s;s++)l+="0",u.items.push(new MenuItem(l+"e+0",s,"precision",i));r.items.push(u),d.items.push(r);var p=new MenuItem("Aggregation");p.items.push(new MenuItem("No Aggregation",Field.NO_AGGREGATION,"agg_type",i));for(var h=new MenuItem("Sum any defined children",Field.SUM_ANY_AGGREGATION,"agg_type",i),s=0;s<tree.fields.length;s++){var m=tree.fields[s];m.name!=i.name&&h.items.push(new MenuItem(m.name,m.name,"agg_qty_field",i))}p.items.push(h),d.items.push(p),a.items=[],a.items.push(d),a.items.push(new MenuItem("Text",Field.STRING,"datatype",i));var f='<div id="fieldMenu" style="left:'+t+"px;top:"+n+'px;">';return f+=generateMenuMarkup(a),f+="</div>"}function generateMenuMarkup(e){for(var t="<ul>",n=0;n<e.items.length;n++){var i=e.items[n];t+='<li onclick="Menu.handleClick('+i.id+');">';var a="uncheckedMenuItem";i.field&&i.checked&&(a="checkedMenuItem"),t+='<img id="menuItem'+i.id+'" src="'+CHECK_MARK_IMAGE_PATH+'" class="'+a+'"/>',t+=i.display,i.items&&i.items.length>0&&(t+='<div class="arrowRight"></div>'),i.items&&i.items.length>0&&(t+=generateMenuMarkup(i)),t+="</li>"}return t+"</ul>"}var DEFAULT_NODE_INPUT_WIDTH=400;
function displaySpreadSheet(){$("body").append(generateSpreadSheetMarkup()),$("#project-action-container").html(generateProjectSelectorMarkup()),$("#fields-header-row").html(generateFieldsRowMarkup()),$("#fields-header-row").css("right",scrollBarWidth+"px"),$("#data-container").html(generateDataMarkup()),$("#redips-drag").html(generateTreeMarkup()),$("#redips-drag").css("bottom",scrollBarWidth+"px"),redips.init(),initProjectActions()}function projectActionEnterPressed(){if("addField"==$("#projectActionSelector").val()){var e=$("#projectActionInput").val();tree.fields.push(new Field(e)),addColumn(e),$("#projectActionInput").hide(),$("#projectActionSelector").val("blank")}}function createNewProject(){$("#selectProjectOption").remove();var e=$("#editNewProjectNameInput").val();$("#editNewProjectNameInput").hide();var t=projects.nextProjectID.toString(),r=document.createElement("option");r.text=e,r.value=t,$(r).insertBefore("#projectSelector option:nth-child("+$("#projectSelector").length+")"),$("#projectSelector").val(t),$.ajax({type:"POST",url:"/api/addProject?projectName="+e}),tree={projectID:t,projectName:e,name:e,version:1,nextNodeID:2,fields:[],nodes:[{id:1,name:e,nodes:[]}]},displaySpreadSheet(),Project.saveToDatabase()}function showMenu(e,t){0===$("#fieldMenu").length&&($(getFieldMenuMarkup(t,e.clientX,e.clientY)).appendTo("body"),$("#fieldMenu").mouseleave(function(){$("#fieldMenu").remove()}))}var handleProjectAction=function(){"addField"==$("#projectActionSelector").val()&&($("#projectActionInput").val("Type New Field Name and Press Enter to Create"),$("#projectActionInput").show().focus().select())};
var resizeColumnLeft=0,resizeField="0",startResize=function(e,i){$(document).bind("touchmove.resizeColGrip mousemove.resizeColGrip",resizeDrag).bind("touchend.resizeColGrip mouseup.resizeColGrip",resizeEnd),document.getElementById("resizeLine").style.visibility="visible",document.getElementById("resizeLine").style.left=e.pageX+"px",resizeColumnLeft=$(i.parentNode).position().left,resizeField=i.parentNode.id.replace("colHeader","")},resizeEnd=function(e){$(document).unbind("touchmove.resizeColGrip mousemove.resizeColGrip",resizeDrag).unbind("touchend.resizeColGrip mouseup.resizeColGrip",resizeEnd),document.getElementById("resizeLine").style.visibility="hidden";var i=e.pageX-resizeColumnLeft-GRIPS_WIDTH;i<MIN_COLUMN_WIDTH&&(i=MIN_COLUMN_WIDTH),document.getElementById("colHeaderInput"+resizeField).style.width=i+"px";for(var t=document.querySelectorAll(".fieldInput"+resizeField),r=0;r<t.length;r++)t[r].style.width=i+8+"px"},resizeDrag=function(e){e.pageX>resizeColumnLeft+MIN_COLUMN_WIDTH+GRIPS_WIDTH&&(document.getElementById("resizeLine").style.left=e.pageX+"px")};
function handleDataScroll(){$("#redips-drag").scrollTop($("#data-container").scrollTop()),$("#fields-header-row").scrollLeft($("#data-container").scrollLeft())}function printProject(){console.log(JSON.stringify(tree,null,"	"))}function displayRawValue(e,n){var t=Project.getField(e),o=findNodeInTree(parseInt(n));o.values&&o.values[t.name]?(console.log(o.values[t.name]),$("#"+e+n).val(o.values[t.name])):$("#"+e+n).val("")}function toggle(e){var n=getAncestorTag(e,"tr"),t=parseInt(n.id.replace("rowid","")),o=document.getElementById("icon"+t);if(n.classList.contains("collapsed")){for(var r=document.querySelectorAll(".parent"+t),d=document.querySelectorAll(".iconp"+t),s=0;s<r.length;s++)r[s].style.display="",r[s].classList.add("collapsed");for(var s=0;s<d.length;s++)d[s].classList.contains("glyphicon-chevron-down")&&(d[s].classList.remove("glyphicon-chevron-down"),d[s].classList.add("glyphicon-chevron-right"));o.classList.remove("glyphicon-chevron-right"),o.classList.add("glyphicon-chevron-down"),n.classList.remove("collapsed"),n.classList.add("expanded")}else{for(var a=document.querySelectorAll(".ancestor"+t),s=0;s<a.length;s++)a[s].style.display="none";o.classList.remove("glyphicon-chevron-down"),o.classList.add("glyphicon-chevron-right"),n.classList.remove("expanded"),n.classList.add("collapsed")}}function updateFieldValue(e,n){updateNodeValueInTree(n,e,document.getElementById(e+n).value);for(var t=0;t<tree.nodes.length;t++)aggregate_any(tree.nodes[t],e)}function updateNodeValueInTree(e,n,t){for(var o=null,r=0;r<tree.nodes.length;r++)o=tree.nodes[r],o.id==e?(o.values||(o.values={}),o.values[n]=t):updateNodeValue(e,o,n,t)}function updateNodeValue(e,n,t,o){var r=null;if(n&&n.id==e)return n;if(n&&n.nodes&&n.nodes.length>0)for(var d=0;d<n.nodes.length;d++)if(r=updateNodeValue(e,n.nodes[d],t,o))return r.values||(r.values={}),r.values[t]=o,r;return null}var projects=null,tree,ENTER_KEY=13,MIN_COLUMN_WIDTH=70,GRIPS_WIDTH=16,selectProject=function(){var e=document.getElementById("projectSelector"),n=e.options[e.selectedIndex];"newProjectOption"===n.id?($("#editNewProjectNameInput").val("Type New Project Name and Press Enter to Create"),$("#editNewProjectNameInput").show().focus().select()):(e.value>0&&document.getElementById("selectProjectOption")&&$("#selectProjectOption").remove(),$.ajax({type:"GET",url:"api/tree?projectID="+e.value}).done(function(e){tree=e,displaySpreadSheet(),$("#tree-container").hide()}))},getDepth=function(e){for(var n=e.className.split(" "),t=0;t<n.length;t++){var o=n[t];if(o.indexOf("depth")>-1)return parseInt(o.replace("depth",""))}},getParentID=function(e){for(var n=e.className.split(" "),t=0;t<n.length;t++){var o=n[t];if(o.indexOf("parent")>-1)return parseInt(o.replace("parent",""))}},removeParent=function(e){for(var n=e.className.split(" "),t=0;t<n.length;t++){var o=n[t];o.indexOf("parent")>-1&&e.classList.remove(o)}},getAncestors=function(e){for(var n=[],t=e.className.split(" "),o=0;o<t.length;o++){var r=t[o];r.indexOf("ancestor")>-1&&n.push(r)}return n},removeAncestors=function(e){for(var n=e.className.split(" "),t=0;t<n.length;t++){var o=n[t];o.indexOf("ancestor")>-1&&e.classList.remove(o)}},addAncestors=function(e,n){for(var t=0;t<n.length;t++)e.classList.add(n[t])},setNewAncestors=function(e,n,t){removeParent(e),e.classList.add("parent"+t),removeAncestors(e),addAncestors(e,n)},moveAssembly=function(e,n,t,o){var r=findNodeInTree(t),d=findNodeInTree(n),s=findNodeInTree(e);if(r){if(r.nodes&&r.nodes.length>0)for(var a=0;a<r.nodes.length;a++)if(r.nodes[a].id===e){r.nodes.splice(a,1);break}}else for(var a=0;a<tree.nodes.length;a++)if(tree.nodes[a].id===e){tree.nodes.splice(a,1);break}d.nodes.push(s);var i=document.getElementById("rowid"+e),l=document.getElementById("datarowid"+e),c=document.getElementById("datarowid"+n),u=getAncestors(o);u.push("ancestor"+n),setNewAncestors(i,u,n);var f=getDepth(i),g=getDepth(o)+1;if(i.classList.remove("depth"+f),i.classList.add("depth"+g),document.getElementById("expandID"+e).style.marginLeft=10*g+"px",document.getElementById("nodeInput"+e).style.width=DEFAULT_NODE_INPUT_WIDTH-10*g+"px",$(l).remove(),$(l).insertAfter(c),s.nodes&&s.nodes.length>0)for(var a=s.nodes.length-1;a>=0;a--)moveNode(s.nodes[a],s.nodes[a].id,e,g+1,u)},moveNode=function(e,n,t,o,r){var d=document.getElementById("rowid"+n),s=document.getElementById("datarowid"+n),a=document.getElementById("rowid"+t),i=document.getElementById("datarowid"+t),l=getDepth(d),c=r.slice(0);if(c.push("ancestor"+t),setNewAncestors(d,c,t),d.classList.remove("depth"+l),d.classList.add("depth"+o),document.getElementById("expandID"+n).style.marginLeft=10*o+"px",$(d).remove(),$(d).insertAfter(a),$(s).remove(),$(s).insertAfter(i),e.nodes&&e.nodes.length>0)for(var u=e.nodes.length-1;u>=0;u--)moveNode(e.nodes[u],e.nodes[u].id,n,o+1,c)},findNodeInTree=function(e){if(tree.nodes&&tree.nodes.length>0)for(var n=0;n<tree.nodes.length;n++){var t=findNode(e,tree.nodes[n]);if(t)return t}},findNode=function(e,n){if(n.id===e)return n;if(n.nodes&&n.nodes.length>0)for(var t=0;t<n.nodes.length;t++){var o=findNode(e,n.nodes[t]);if(o)return o}},findParentInTree=function(e){if(tree.nodes&&tree.nodes.length>0)for(var n=0;n<tree.nodes.length;n++){var t=findParent(e,tree.nodes[n],null);if(t)return t}},findParent=function(e,n,t){if(n.id===e)return t;if(n.nodes&&n.nodes.length>0)for(var o=0;o<n.nodes.length;o++){var r=findParent(e,n.nodes[o],n);if(r)return r}},deleteNode=function(e){var n=getAncestorTag(e,"tr"),t=parseInt(n.id.replace("rowid","")),o=findNodeInTree(t),r=findParentInTree(t);removeNodeRow(o);for(var d=0;d<r.nodes.length;d++)if(r.nodes[d].id==t){r.nodes.splice(d,1);break}},removeNodeRow=function(e){var n=document.getElementById("rowid"+e.id);if($(n).remove(),e.nodes&&e.nodes.length>0)for(var t=0;t<e.nodes.length;t++)removeNodeRow(e.nodes[t])},copyNode=function(e){var n,t,o=getAncestorTag(e,"tr"),r=parseInt(o.id.replace("rowid","")),d=findNodeInTree(r),s=findParentInTree(r),a=jQuery.extend(!0,{},d);assignNewNodeIDs(a),void 0===s?(n=getNodeIndex(tree.nodes,d.id),tree.nodes.splice(n,0,a),t=addRow(a,0,"",0)):(n=getNodeIndex(s.nodes,d.id),s.nodes.splice(n,0,a),t=getAssemblyMarkup(a.id,d.id,getDepth(o))),$(t).insertBefore(o);var i=document.getElementById("rowid"+a.id);REDIPS.drag.enableDivs("init",i.getElementsByTagName("div"))},assignNewNodeIDs=function(e){if(e.id=tree.nextNodeID++,e.nodes&&e.nodes.length>0)for(var n=0;n<e.nodes.length;n++)assignNewNodeIDs(e.nodes[n])},getNodeIndex=function(e,n){var t=$.map(e,function(e,t){return e.id==n?t:void 0});return t[0]},getAncestorTag=function(e,n){for(n=n.toLowerCase();e&&e.parentNode;)if(e=e.parentNode,e.tagName&&e.tagName.toLowerCase()==n)return e},updateNodeName=function(e){var n=getAncestorTag(e,"tr"),t=parseInt(n.id.replace("rowid","")),o=findNodeInTree(t);o.name=e.value,$("#nodeInput"+t).attr("value",o.name)};
var Field=function(i){this.name=i,this.datatype=Field.NUMBER,this.format=Field.NUMBER_FORMAT,this.precision=2,this.agg_type=Field.NO_AGGREGATION,this.agg_qty_field=null};Field.NUMBER="0",Field.STRING="1",Field.CHOICE="2",Field.NO_AGGREGATION="0",Field.SUM_ANY_AGGREGATION="1",Field.NUMBER_FORMAT="0",Field.PERCENT_FORMAT="1",Field.SCIENTIFIC_FORMAT="2",Field.formatValue=function(i,e){if(i.datatype===Field.NUMBER){if(i.format===Field.NUMBER_FORMAT)return e.toFixed(i.precision);if(i.format===Field.PERCENT_FORMAT)return(100*e).toFixed(i.precision)+"%";if(i.format===Field.SCIENTIFIC_FORMAT)return Number(e).toExponential(i.precision)}else{if(i.datatype===Field.STRING)return e;i.datatype===Field.CHOICE}};
var Menu=function(){Menu.menu=this};Menu.menu,Menu.handleClick=function(e){var t=Menu.menu.getMenuItem(e,Menu.menu),n=Menu.menu.getMenuItemParent(e,Menu.menu);if(t.field){var u=Project.getField(t.field.name);u[t.varName]=t.value;for(var m=0;m<n.items.length;m++)$("#menuItem"+n.items[m].id).removeClass("checkedMenuItem").addClass("uncheckedMenuItem");$("#menuItem"+e).removeClass("uncheckedMenuItem").addClass("checkedMenuItem"),n===Menu.menu&&Project.updateFieldFormatting(u)}},Menu.prototype.getMenuItem=function(e,t){if(e===t.id)return t;if(t.items&&t.items.length>0)for(var n,u=0;u<t.items.length;u++)if(n=this.getMenuItem(e,t.items[u]))return n;return null},Menu.prototype.getMenuItemParent=function(e,t){if(t.items&&t.items.length>0)for(var n=0;n<t.items.length;n++){if(t.items[n].id===e)return t;var u=this.getMenuItemParent(e,t.items[n]);if(u)return u}return null};
var MenuItem=function(i,t,e,s){this.display=i,this.value=t,this.varName=e,this.field=s,this.items=[],this.id=MenuItem.id++,this.parent=-1,this.checked=s?s[e]===t:!1};MenuItem.id=0;
function Project(){}Project.getField=function(e){for(var t=0;t<tree.fields.length;t++){var r=tree.fields[t];if(r.name===e)return r}return null},Project.saveToDatabase=function(){$.ajax({type:"POST",url:"/api/tree",dataType:"json",data:{json:JSON.stringify(tree)}})},Project.updateFieldFormatting=function(e){$(".fieldInput"+e.name).each(function(t){var r=$(this).attr("id").replace(e.name,""),a=findNodeInTree(parseInt(r));if(a.values){var n=Number(a.values[e.name]);$(this).val(Field.formatValue(e,n))}})},Project.getTree=function(){return tree},Project.switchView=function(){$("#spreadSheetView").length?($("#spreadSheetView").remove(),displayTreeView(tree)):($("#tree-container").remove(),displaySpreadSheet())};
//# sourceMappingURL=data:application/json;base64,