function aggregate_any(e,a){if(e.children&&0!==e.children.length){for(var l=0,n=0;n<e.children.length;n++)l+=aggregate_any(e.children[n],a);return e.values||(e.values={}),e.values[a]=l,document.getElementById(a+e.id).value=l,l}return e.values&&e.values[a]?parseFloat(e.values[a]):0}
"use strict";var REDIPS=REDIPS||{};REDIPS.drag=function(){var e,o,t,n,r,d,l,i,a,s,c,f,p,g,u,v,y,m,h,w,E,b,D,I,S,R,P,x,N,T,C,B,j,k=null,L={width:0,height:0},M={width:null,height:null,container:[],obj:null},O={page:{x:0,y:0},div:{x:0,y:0},flag:{x:0,y:0}},Y=[],H=[],W=null,_=null,X={x:0,y:0},A={x:0,y:0,value:7,flag:!1},V=!1,z=!1,F=null,q=null,K=null,$=null,G=null,J=null,Q=!1,U=!1,Z={colorTd:"#FFCFAE",colorTr:"#9BB3DA"},ee={enable:!0,bound:25,speed:20},oe={borderDisabled:"dotted",opacityDisabled:"",rowEmptyColor:"white"},te={},ne={keyDiv:!1,keyRow:!1,sendBack:!1,drop:!1},re={cloned:function(){},clonedDropped:function(){},clonedEnd1:function(){},clonedEnd2:function(){},dropped:function(){},droppedBefore:function(){},finish:function(){},notCloned:function(){},notMoved:function(){},rowChanged:function(){},rowClicked:function(){},rowCloned:function(){},rowDropped:function(){},rowDroppedBefore:function(){},rowDroppedSource:function(){},rowMoved:function(){},rowNotCloned:function(){},rowNotMoved:function(){}};return e=function(){if(W=document.getElementById("redips-drag"),j=m(),!document.getElementById("redips_clone")){var e=document.createElement("div");e.id="redips_clone",e.style.width=e.style.height="1px",W.appendChild(e)}o("init",".redips-drag"),T=document.getElementById("treeTable"),T.redips={},c(),REDIPS.event.add(window,"resize",c),REDIPS.event.add(window,"scroll",y)},n=function(e){var o,t,n,l,i=e||window.event;if(i.cancelBubble=!0,i.stopPropagation&&i.stopPropagation(),V=i.shiftKey,window.getSelection)window.getSelection().removeAllRanges();else if(document.selection&&"Text"===document.selection.type)try{document.selection.empty()}catch(a){}return n=X.x=i.clientX,l=X.y=i.clientY,A.x=n,A.y=l,A.flag=!1,REDIPS.drag.objOld=U=Q||this,REDIPS.drag.obj=Q=this,z=Q.className.indexOf("redips-clone")>-1,REDIPS.drag.obj=Q=R(Q),y(),F=$=null,f(),K=q=F,J=G=$,REDIPS.drag.event.rowClicked(te.current),null!==F&&null!==$||(f(),K=q=F,J=G=$,null!==F&&null!==$)?(C=B=!1,REDIPS.event.add(document,"mousemove",d),REDIPS.event.add(document,"mouseup",r),null!==F&&(N=u(F)),t=D(T,"position"),"fixed"!==t&&(t=D(T.parentNode,"position")),o=v(Q,t),k=[l-o[0],o[1]-n,o[2]-l,n-o[3]],!1):!0},R=function(e){var o,t,n;return"DIV"===e.nodeName?(n=e,e=I("TR",e),void 0===e.redips&&(e.redips={}),e.redips.div=n,e):(t=e,o=document.createElement("table"),o.innerHTML='<tr id="'+t.id+'" class="'+t.classList+'">'+t.innerHTML+"</tr>",o.redips={},o.redips.sourceRow=t,E(t,o.rows[0]),document.getElementById("redips_clone").appendChild(o),o)},P=function(e){var o,t,n;n=function(e){var o;void 0!==e.redips&&e.redips.emptyRow?S(e,"empty",REDIPS.drag.style.rowEmptyColor):(o=I("TABLE",e),o.deleteRow(e.rowIndex))};var r=Q;e>T.rows.length-1&&(e=T.rows.length-1);var d=T.rows[e];t=r.getElementsByTagName("tr")[0],r.parentNode.removeChild(r),o=REDIPS.drag.event.rowDroppedBefore(T,r.redips.sourceRow.rowIndex),o!==!1&&(e<T.rows.length?d.parentNode.insertBefore(t,d.nextSibling):(d.parentNode.appendChild(t),d=T.rows[0]),B||n(r.redips.sourceRow),delete t.redips.emptyRow,REDIPS.drag.event.rowDropped(d))},r=function(e){var o,t,n,a,s,c,f=e||window.event;if(n=f.clientX,a=f.clientY,O.flag.x=O.flag.y=0,REDIPS.event.remove(document,"mousemove",d),REDIPS.event.remove(document,"mouseup",r),W.onselectstart=null,i(Q),M.width=document.documentElement.scrollWidth,M.height=document.documentElement.scrollHeight,O.flag.x=O.flag.y=0,null===F||null===$)REDIPS.drag.event.notMoved();else{if(REDIPS.drag.td.target=te.target=T.rows[F].cells[$],g(F,N),o=F,C)if(K===o){for(t=Q.getElementsByTagName("tr")[0],U.style.backgroundColor=t.style.backgroundColor,s=0;s<t.cells.length;s++)U.cells[s].style.backgroundColor=t.cells[s].style.backgroundColor;Q.parentNode.removeChild(Q),delete U.redips.emptyRow,B?REDIPS.drag.event.rowNotCloned():REDIPS.drag.event.rowDroppedSource(te.target)}else P(o);else REDIPS.drag.event.rowNotMoved();B||A.flag?B&&K===F&&J===$?(Q.parentNode.removeChild(Q),Y[U.id]-=1,REDIPS.drag.event.notCloned()):B&&REDIPS.drag.clone.drop===!1&&(n<T.redips.offset[3]||n>T.redips.offset[1]||a<T.redips.offset[0]||a>T.redips.offset[2])?(Q.parentNode.removeChild(Q),Y[U.id]-=1,REDIPS.drag.event.notCloned()):(c=REDIPS.drag.event.droppedBefore(te.target),l(c)):REDIPS.drag.event.notMoved(),y(),REDIPS.drag.event.finish()}q=G=null},l=function(e){var o,t=null;if(e!==!1){if(ne.sendBack===!0){o=te.target.getElementsByTagName("DIV");for(var n=0;n<o.length;n++)if(Q!==o[n]&&0===Q.id.indexOf(o[n].id)){t=o[n];break}if(t)return b(t,1),void Q.parentNode.removeChild(Q)}te.target.appendChild(Q),a(Q),REDIPS.drag.event.dropped(te.target),B&&(REDIPS.drag.event.clonedDropped(te.target),b(U,-1))}else B&&Q.parentNode&&Q.parentNode.removeChild(Q)},a=function(e,o){e.onmousedown=o===!1?null:n},i=function(e){e.style.top="",e.style.left="",e.style.position="",e.style.zIndex=""},d=function(e){var o,t,n,r,d,l,i,a=e||window.event,c=REDIPS.drag.scroll.bound;if(t=X.x=a.clientX,n=X.y=a.clientY,r=Math.abs(A.x-t),d=Math.abs(A.y-n),C||((z||REDIPS.drag.clone.keyRow===!0&&V)&&(B=!0),REDIPS.drag.objOld=U=Q,REDIPS.drag.obj=Q=R(Q),Q.style.zIndex=999,Q.style.position="fixed",y(),f(),B?REDIPS.drag.event.rowCloned():REDIPS.drag.event.rowMoved(),p(),t>L.width-k[1]&&(Q.style.left=L.width-(k[1]+k[3])+"px"),n>L.height-k[2]&&(Q.style.top=L.height-(k[0]+k[2])+"px")),C=!0,t>k[3]&&t<L.width-k[1]&&(Q.style.left=t-k[3]+"px"),n>k[0]&&n<L.height-k[2]&&(Q.style.top=n-k[0]+"px"),t<_[1]&&t>_[3]&&n<_[2]&&n>_[0]&&0===O.flag.x&&0===O.flag.y&&(H.containTable||t<H[3]||t>H[1]||n<H[0]||n>H[2])&&(f(),s()),REDIPS.drag.scroll.enable)for(O.page.x=c-(L.width/2>t?t-k[3]:L.width-t-k[1]),O.page.x>0?(O.page.x>c&&(O.page.x=c),i=0,O.page.x*=t<L.width/2?-1:1,O.page.x<0&&0>=i||O.page.x>0&&i>=M.width-L.width||0===O.flag.x++&&(REDIPS.event.remove(window,"scroll",y),h(window))):O.page.x=0,O.page.y=c-(L.height/2>n?n-k[0]:L.height-n-k[2]),O.page.y>0?(O.page.y>c&&(O.page.y=c),i=window.pageYOffset||document.documentElement.scrollTop,O.page.y*=n<L.height/2?-1:1,O.page.y<0&&0>=i||O.page.y>0&&i>=M.height-L.height||0===O.flag.y++&&(REDIPS.event.remove(window,"scroll",y),w(window))):O.page.y=0,l=0;l<M.container.length;l++){if(o=M.container[l],o.autoscroll&&t<o.offset[1]&&t>o.offset[3]&&n<o.offset[2]&&n>o.offset[0]){O.div.x=c-(o.midstX>t?t-k[3]-o.offset[3]:o.offset[1]-t-k[1]),O.div.x>0?(O.div.x>c&&(O.div.x=c),O.div.x*=t<o.midstX?-1:1,0===O.flag.x++&&(REDIPS.event.remove(o.div,"scroll",y),h(o.div))):O.div.x=0,O.div.y=c-(o.midstY>n?n-k[0]-o.offset[0]:o.offset[2]-n-k[2]),O.div.y>0?(O.div.y>c&&(O.div.y=c),O.div.y*=n<o.midstY?-1:1,0===O.flag.y++&&(REDIPS.event.remove(o.div,"scroll",y),w(o.div))):O.div.y=0;break}O.div.x=O.div.y=0}a.cancelBubble=!0,a.stopPropagation&&a.stopPropagation()},s=function(){(F!==q||$!==G)&&(null!==q&&null!==G&&(g(q,N),REDIPS.drag.td.previous=te.previous=T.rows[q].cells[G],REDIPS.drag.td.current=te.current=T.rows[F].cells[$],F!==q&&REDIPS.drag.event.rowChanged(te.current)),p())},c=function(){L.width=window.innerWidth,L.height=window.innerHeight,M.width=document.documentElement.scrollWidth,M.height=document.documentElement.scrollHeight,y()},f=function(){var e,o,t,n,r,d,l=[];if(e=function(){null!==q&&null!==G&&(F=q,$=G)},n=X.x,r=X.y,l[0]=T.redips.offset[0],l[1]=T.redips.offset[1],l[2]=T.redips.offset[2],l[3]=T.redips.offset[3],void 0!==T.sca&&(l[0]=l[0]>T.sca.offset[0]?l[0]:T.sca.offset[0],l[1]=l[1]<T.sca.offset[1]?l[1]:T.sca.offset[1],l[2]=l[2]<T.sca.offset[2]?l[2]:T.sca.offset[2],l[3]=l[3]>T.sca.offset[3]?l[3]:T.sca.offset[3]),l[3]<n&&n<l[1]&&l[0]<r&&r<l[2]){for(o=T.redips.row_offset,F=0;F<o.length-1;F++)if(void 0!==o[F]){if(H[0]=o[F][0],void 0!==o[F+1])H[2]=o[F+1][0];else for(d=F+2;d<o.length;d++)if(void 0!==o[d]){H[2]=o[d][0];break}if(r<=H[2])break}t=F,F===o.length-1&&(H[0]=o[F][0],H[2]=T.redips.offset[2]),$=0,0>F||0>$?e():F!==t&&(H[0]=o[F][0],H[2]=H[0]+T.rows[F].cells[$].offsetHeight,(r<H[0]||r>H[2])&&e())}},p=function(){null!==F&&null!==$&&(N=u(F),g(F),q=F,G=$)},g=function(e,o){var t,n;t=T.rows[e];for(var r=0;r<t.cells.length;r++)n=t.cells[r].style,n.backgroundColor=void 0===o?REDIPS.drag.hover.colorTr:o.color[r].toString(),void 0!==REDIPS.drag.hover.borderTr&&(void 0===o?K>F?n.borderTop=REDIPS.drag.hover.borderTr:n.borderBottom=REDIPS.drag.hover.borderTr:(n.borderTopWidth=o.top[r][0],n.borderTopStyle=o.top[r][1],n.borderTopColor=o.top[r][2],n.borderBottomWidth=o.bottom[r][0],n.borderBottomStyle=o.bottom[r][1],n.borderBottomColor=o.bottom[r][2]))},u=function(e){var o,t,n={color:[],top:[],right:[],bottom:[],left:[]},r=function(e,o){var t="border"+o+"Width",n="border"+o+"Style",r="border"+o+"Color";return[D(e,t),D(e,n),D(e,r)]};o=T.rows[e];for(var d=0;d<o.cells.length;d++)t=o.cells[d],n.color[d]=t.style.backgroundColor,void 0!==REDIPS.drag.hover.borderTr&&(n.top[d]=r(t,"Top"),n.bottom[d]=r(t,"Bottom"));return n},v=function(e,o,t){var n=0,r=0,d=e;if("fixed"!==o&&(n=0-j[0],r=0-j[1]),void 0===t||t===!0){do n+=e.offsetLeft-e.scrollLeft,r+=e.offsetTop-e.scrollTop,e=e.offsetParent;while(e&&"BODY"!==e.nodeName)}else do n+=e.offsetLeft,r+=e.offsetTop,e=e.offsetParent;while(e&&"BODY"!==e.nodeName);return[r,n+d.offsetWidth,r+d.offsetHeight,n]},y=function(){var e,o,t;j=m(),e=[],o=D(T,"position"),"fixed"!==o&&(o=D(T.parentNode,"position"));for(var n=T.rows.length-1;n>=0;n--)"none"!==T.rows[n].style.display&&(e[n]=v(T.rows[n],o));T.redips.offset=v(T,o),T.redips.row_offset=e,_=v(W);for(var n=0;n<M.container.length;n++)o=D(M.container[n].div,"position"),t=v(M.container[n].div,o,!1),M.container[n].offset=t,M.container[n].midstX=(t[1]+t[3])/2,M.container[n].midstY=(t[0]+t[2])/2},m=function(){var e=window.pageYOffset||document.documentElement.scrollTop,o=0;return[o,e]},h=function(e){var o,t,n,r,d,l=X.x,i=X.y;O.flag.x>0&&(y(),f(),l<_[1]&&l>_[3]&&i<_[2]&&i>_[0]&&s()),"object"==typeof e&&(M.obj=e),M.obj===window?(n=t=m()[0],r=M.width-L.width,d=O.page.x):(n=M.obj.scrollLeft,r=M.obj.scrollWidth-M.obj.clientWidth,d=O.div.x),O.flag.x>0&&(0>d&&n>0||d>0&&r>n)?(M.obj===window?(window.scrollBy(d,0),n=m()[0],o=parseInt(Q.style.left,10),isNaN(o)&&(o=0)):M.obj.scrollLeft+=d,setTimeout(h,REDIPS.drag.scroll.speed)):(REDIPS.event.add(M.obj,"scroll",y),O.flag.x=0,H=[0,0,0,0])},w=function(e){var o,t,n,r,d,l=X.x,i=X.y;O.flag.y>0&&(y(),f(),l<_[1]&&l>_[3]&&i<_[2]&&i>_[0]&&s()),"object"==typeof e&&(M.obj=e),M.obj===window?(n=t=m()[1],r=M.height-L.height,d=O.page.y):(n=M.obj.scrollTop,r=M.obj.scrollHeight-M.obj.clientHeight,d=O.div.y),O.flag.y>0&&(0>d&&n>0||d>0&&r>n)?(M.obj===window?(window.scrollBy(0,d),n=m()[1],o=parseInt(Q.style.top,10),isNaN(o)&&(o=0)):M.obj.scrollTop+=d,setTimeout(w,REDIPS.drag.scroll.speed)):(REDIPS.event.add(M.obj,"scroll",y),O.flag.y=0,H=[0,0,0,0])},E=function(e,o){var t,n=[];n[0]=function(e,o){e.redips&&(o.redips={},o.redips.enabled=e.redips.enabled,o.redips.container=e.redips.container,e.redips.enabled&&a(o))},n[1]=function(e,o){e.redips&&(o.redips={},o.redips.emptyRow=e.redips.emptyRow)},t=function(t){var r,d,l=["DIV","TR"];r=e.getElementsByTagName(l[t]),d=o.getElementsByTagName(l[t]);for(var i=0;i<d.length;i++)n[t](r[i],d[i])},"DIV"===e.nodeName?n[0](e,o):"TR"===e.nodeName&&n[1](e,o),t(0),t(1)},b=function(e,t){var n,r,d,l;l=e.className,n=l.match(/climit(\d)_(\d+)/),null!==n&&(r=parseInt(n[1],10),d=parseInt(n[2],10),0===d&&1===t&&(l+=" redips-clone",2===r&&o(!0,e)),d+=t,l=l.replace(/climit\d_\d+/g,"climit"+r+"_"+d),0>=d&&(l=l.replace("redips-clone",""),2===r?(o(!1,e),REDIPS.drag.event.clonedEnd2()):REDIPS.drag.event.clonedEnd1()),e.className=x(l))},o=function(e,o){var n=[];void 0===o?n=W.getElementsByTagName("div"):"string"==typeof o?n=document.querySelectorAll(o):"object"!=typeof o||"DIV"===o.nodeName&&-1!==o.className.indexOf("redips-drag")?n[0]=o:n=o.getElementsByTagName("div"),t(e,n)},t=function(e,o){var t,n,r,d,l,i,s,c,f,p,g,u=[],m=/\bredips-drag\b/i,h=/\bredips-noautoscroll\b/i;for(l=REDIPS.drag.style.opacityDisabled,e===!0||"init"===e?(d=REDIPS.drag.style.borderEnabled,i="move",f=!0):(d=REDIPS.drag.style.borderDisabled,i="auto",f=!1),t=0,n=0;t<o.length;t++)if(m.test(o[t].className))"init"===e||void 0===o[t].redips?(o[t].redips={},o[t].redips.container=W):e===!0&&"number"==typeof l?(o[t].style.opacity="",o[t].style.filter=""):e===!1&&"number"==typeof l&&(o[t].style.opacity=l/100,o[t].style.filter="alpha(opacity="+l+")"),a(o[t],f),o[t].style.borderStyle=d,o[t].style.cursor=i,o[t].redips.enabled=f;else if("init"===e&&(s=D(o[t],"overflow"),"visible"!==s)){for(REDIPS.event.add(o[t],"scroll",y),g=D(o[t],"position"),p=v(o[t],g,!1),c=!h.test(o[t].className),M.container[n]={div:o[t],offset:p,midstX:(p[1]+p[3])/2,midstY:(p[0]+p[2])/2,autoscroll:c},u=o[t].getElementsByTagName("table"),r=0;r<u.length;r++)u[r].sca=M.container[n];n++}},D=function(e,o){return e&&e.currentStyle?e.currentStyle[o]:e&&window.getComputedStyle?document.defaultView.getComputedStyle(e,null)[o]:void 0},I=function(e,o){for(o=o.parentNode;o&&o.nodeName!==e;)o=o.parentNode;return o},x=function(e){return void 0!==e&&(e=e.replace(/^\s+|\s+$/g,"").replace(/\s{2,}/g," ")),e},S=function(e,o,t){var n,r,d;if("string"==typeof e&&(e=document.getElementById(e),e=I("TABLE",e)),"TR"===e.nodeName)for(n=e.getElementsByTagName("td"),r=0;r<n.length;r++)if(n[r].style.backgroundColor=t?t:"","empty"===o)n[r].innerHTML="";else for(d=0;d<n[r].childNodes.length;d++)1===n[r].childNodes[d].nodeType&&(n[r].childNodes[d].style.opacity=o/100,n[r].childNodes[d].style.filter="alpha(opacity="+o+")");else e.style.opacity=o/100,e.style.filter="alpha(opacity="+o+")",e.style.backgroundColor=t?t:""},{obj:Q,objOld:U,td:te,hover:Z,scroll:ee,style:oe,clone:ne,init:e,enableDrag:o,enableDivs:t,rowOpacity:S,getScrollPosition:m,getStyle:D,findParent:I,event:re}}(),REDIPS.event||(REDIPS.event=function(){var e,o;return e=function(e,o,t){e.addEventListener?e.addEventListener(o,t,!1):e.attachEvent?e.attachEvent("on"+o,t):e["on"+o]=t},o=function(e,o,t){e.removeEventListener?e.removeEventListener(o,t,!1):e.detachEvent?e.detachEvent("on"+o,t):e["on"+o]=null},{add:e,remove:o}}());
"use strict";var redips={};redips.init=function(){var e=REDIPS.drag;e.init(),e.event.rowDropped=function(o){var n=parseInt(e.objOld.id.replace("rowid","")),t=parseInt(o.id.replace("rowid",""));spreadSheet.moveNode(n,t)},e.event.rowDroppedSource=function(){e.rowOpacity(e.objOld,100)},e.event.rowMoved=function(){e.rowOpacity(e.obj,85),e.rowOpacity(e.objOld,20,"White")},e.event.rowClicked=function(){},e.event.rowNotMoved=function(){},e.event.rowCloned=function(){},e.event.rowNotCloned=function(){},e.event.rowDeleted=function(){},e.event.rowUndeleted=function(){e.rowOpacity(e.objOld,100)}};
var resizeColumnLeft=0,resizeField="0",MIN_COLUMN_WIDTH=70,GRIPS_WIDTH=16,startResize=function(e,i){$(document).bind("touchmove.resizeColGrip mousemove.resizeColGrip",resizeDrag).bind("touchend.resizeColGrip mouseup.resizeColGrip",resizeEnd),document.getElementById("resizeLine").style.visibility="visible",document.getElementById("resizeLine").style.left=e.pageX+"px",resizeColumnLeft=$(i.parentNode).position().left,resizeField=i.parentNode.id.replace("colHeader","")},resizeEnd=function(e){$(document).unbind("touchmove.resizeColGrip mousemove.resizeColGrip",resizeDrag).unbind("touchend.resizeColGrip mouseup.resizeColGrip",resizeEnd),document.getElementById("resizeLine").style.visibility="hidden";var i=e.pageX-resizeColumnLeft-GRIPS_WIDTH;MIN_COLUMN_WIDTH>i&&(i=MIN_COLUMN_WIDTH),document.getElementById("colHeaderInput"+resizeField).style.width=i+"px";for(var t=document.querySelectorAll(".fieldInput"+resizeField),r=0;r<t.length;r++)t[r].style.width=i+8+"px"},resizeDrag=function(e){e.pageX>resizeColumnLeft+MIN_COLUMN_WIDTH+GRIPS_WIDTH&&(document.getElementById("resizeLine").style.left=e.pageX+"px")};

var fieldMenuController={displayFieldMenu:function(e,i,t){var n=project.getField(e);this.menu=new FieldMenu(n,spreadSheet.fields),fieldMenuView.render(this.menu,i,t)},handleClick:function(e){var i=this.menu.getMenuItem(e,this.menu),t=this.menu.getMenuItemParent(e,this.menu);if(i.field){var n=project.getField(i.field.name);n[i.varName]=i.value,fieldMenuView.setCheckmarks(e,t.items),t===this.menu&&spreadSheet.updateNumberFieldFormatting(n)}}};
$(document).ready(function(){scrollBarWidth=getScrollBarWidth(),hms.init()});var hms={init:function(){projects.init(function(e){headerView.render(e)})},openProject:function(e){projects.openProject(e,function(e){project.tree=e,hms.selectView(headerView.selectedView())})},saveToDatabase:function(){project.saveToDatabase()},selectView:function(e){project.tree&&(this.view&&this.view.destroy(),this.showView(e))},showView:function(e){switch(e){case SPREADSHEET_VIEW:this.view=spreadSheetView,spreadSheet.display();break;case TREE_VIEW:this.view=treeView,tree.displayTree();break;case WEIGHTED_TREE_VIEW:this.view=weightedTreeView,tree.displayWeightedTree();break;case CIRCLE_VIEW:this.view=circleView,circleView.display()}},createNewProject:function(e){projects.createNewProject(e),hms.selectView(headerView.selectedView())},nextProjectID:function(){return projects.nextProjectID++},expandToLevel:function(e){project.expandToLevel(project.tree,e),this.view===spreadSheetView?spreadSheet.display():this.view===treeView?treeView.refresh():this.view===weightedTreeView&&weightedTreeView.refresh()}},scrollBarWidth,getScrollBarWidth=function(){var e,t;return e=document.createElement("div"),e.innerHTML='<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>',e=e.firstChild,document.body.appendChild(e),t=e.offsetWidth-e.clientWidth,document.body.removeChild(e),t};
var spreadSheet={display:function(){project.cleanseData(),spreadSheetView.render(project.tree)},fields:function(){return project.fields()},tree:function(){return project.tree},updateFieldValue:function(e,d){var r=project.findNode(d);r&&(r.values||(r.values={}),r.values[e]=spreadSheetView.getFieldValue(e,d)),project.tree.children.forEach(function(d){aggregate_any(d,e)})},rawValue:function(e,d){var r=project.findNode(parseInt(d));return r.values&&r.values[e]?r.values[e]:""},formattedValue:function(e,d){return d.values&&d.values[e.name]?Field.formatValue(e,d.values[e.name]):""},addField:function(e){project.addField(e),spreadSheetView.addField(e)},hasChildren:function(e){return!project.isNodeChildless(e)},childrenHidden:function(e){return project.isNodeCollapsed(e)},moveNode:function(e,d){var r=project.findNode(d),t=project.findNode(e);spreadSheet.removeNode(t),project.addNode(t,r),spreadSheet.addNode(t,r)},removeNode:function(e){var d=project.findParent(e.id);project.traverse(project.getChildren,spreadSheetView.removeNode,e),project.removeNode(e),spreadSheetView.redrawNodeContent(d)},deleteNode:function(e){var d=project.findNode(e);spreadSheet.removeNode(d)},addNode:function(e,d){project.isNodeCollapsed(d)&&spreadSheet.expandNode(d),spreadSheetView.redrawNodeContent(d),spreadSheetView.insertNodeAfter(e,d),spreadSheetView.renderExpander()},copyNode:function(e){var d=project.findNode(e),r=project.cloneNode(d);project.insertNode(r,d),spreadSheetView.insertNodeBefore(r,d)},expandNode:function(e){project.expandNode(e),spreadSheetView.expandNode(e),spreadSheetView.redrawNodeContent(e)},collapseNode:function(e){project.traverseDescendants(project.getChildren,spreadSheetView.removeNode,e),project.collapseNode(e),spreadSheetView.redrawNodeContent(e)},toggleNode:function(e){var d=project.findNode(e);project.isNodeExpanded(d)?spreadSheet.collapseNode(d):project.isNodeCollapsed(d)&&spreadSheet.expandNode(d)},updateNodeName:function(e,d){project.findNode(e).name=d},updateNumberFieldFormatting:function(e){project.traverse(project.getChildren,function(d){if(d.values){var r=Field.formatValue(e,Number(d.values[e.name]));spreadSheetView.updateFieldValue(e.name,d.id,r)}})},enableDragging:function(e){project.traverse(project.getChildren,spreadSheetView.enableDragging,e)}};
var tree={displayTree:function(){this.data=project.tree,this.field=project.fields()[0],treeView.render()},displayWeightedTree:function(){this.data=project.tree,this.field=project.fields()[0],this.maxFieldValue=this.calcMaxFieldValue(),weightedTreeView.render()},calcMaxFieldValue:function(){var e=Number.NEGATIVE_INFINITY;return project.traverse(project.getChildren,function(t){if(t.values){var r=t.values[tree.field.name];r>e&&(e=r)}}),e}};
var Field=function(i){this.name=i,this.datatype=Field.NUMBER,this.format=Field.NUMBER_FORMAT,this.precision=2,this.agg_type=Field.NO_AGGREGATION,this.agg_qty_field=null};Field.NUMBER="0",Field.STRING="1",Field.CHOICE="2",Field.NO_AGGREGATION="0",Field.SUM_ANY_AGGREGATION="1",Field.NUMBER_FORMAT="0",Field.PERCENT_FORMAT="1",Field.SCIENTIFIC_FORMAT="2",Field.formatValue=function(i,e){if(i.datatype===Field.NUMBER){if(e=Number(e),i.format===Field.NUMBER_FORMAT)return e.toFixed(i.precision);if(i.format===Field.PERCENT_FORMAT)return(100*e).toFixed(i.precision)+"%";if(i.format===Field.SCIENTIFIC_FORMAT)return e.toExponential(i.precision)}else{if(i.datatype===Field.STRING)return e;i.datatype===Field.CHOICE}};
var FieldMenu=function(e,i){var t=new FieldMenuItem("Number",Field.NUMBER,"datatype",e),n=new FieldMenuItem("Format"),m=new FieldMenuItem("Number",Field.NUMBER_FORMAT,"format",e);m.items.push(new FieldMenuItem("0",0,"precision",e));for(var s="0.",u=1;11>u;u++)s+="0",m.items.push(new FieldMenuItem(s,u,"precision",e));n.items.push(m);var r=new FieldMenuItem("Percent",Field.PERCENT_FORMAT,"format",e);r.items.push(new FieldMenuItem("0%",0,"precision",e));for(var s="0.",u=1;11>u;u++)s+="0",r.items.push(new FieldMenuItem(s+"%",u,"precision",e));n.items.push(r);var a=new FieldMenuItem("Scientific",Field.SCIENTIFIC_FORMAT,"format",e);a.items.push(new FieldMenuItem("0e+0",0,"precision",e));for(var s="0.",u=1;11>u;u++)s+="0",a.items.push(new FieldMenuItem(s+"e+0",u,"precision",e));n.items.push(a),t.items.push(n);var d=new FieldMenuItem("Aggregation");d.items.push(new FieldMenuItem("No Aggregation",Field.NO_AGGREGATION,"agg_type",e));var l=new FieldMenuItem("Sum any defined children",Field.SUM_ANY_AGGREGATION,"agg_type",e);for(var F in i){var p=i[F];p.name!=e.name&&l.items.push(new FieldMenuItem(p.name,p.name,"agg_qty_field",e))}d.items.push(l),t.items.push(d),this.items=[],this.items.push(t),this.items.push(new FieldMenuItem("Text",Field.STRING,"datatype",e))};FieldMenu.prototype.getMenuItem=function(e,i){if(e===i.id)return i;if(i.items&&i.items.length>0)for(var t,n=0;n<i.items.length;n++)if(t=this.getMenuItem(e,i.items[n]))return t},FieldMenu.prototype.getMenuItemParent=function(e,i){if(i.items&&i.items.length>0)for(var t=0;t<i.items.length;t++){if(i.items[t].id===e)return i;var n=this.getMenuItemParent(e,i.items[t]);if(n)return n}};
var FieldMenuItem=function(i,e,t,s){this.display=i,this.value=e,this.varName=t,this.field=s,this.items=[],this.id=FieldMenuItem.id++,this.parent=-1,this.checked=s?s[t]===e:!1};FieldMenuItem.id=0;
var project={saveToDatabase:function(){this.cleanseData(),$.ajax({type:"POST",url:"/api/tree",dataType:"json",data:{json:JSON.stringify(this.tree)}})},fields:function(){return this.tree.fields},cleanseData:function(){this.traverse(project.getChildren,function(e){e.children||(e.children=[]),delete e.parent,delete e.x,delete e.x0,delete e.y,delete e.y0})},addField:function(e){this.tree.fields.push(new Field(e))},getField:function(e){for(var n in this.tree.fields){var r=this.tree.fields[n];if(r.name===e)return r}},removeNode:function(e){var n=this.findParent(e.id);n?n.children.splice(n.children.indexOf(e),1):this.tree.children.splice(this.tree.children.indexOf(e),1)},addNode:function(e,n){n.children.push(e),project.setDepths(n)},setDepths:function(e){e.children.forEach(function(n,r){n.depth=e.depth+1,n.depth>project.tree.maxDepth&&(project.tree.maxDepth=n.depth),project.setDepths(n)})},insertNode:function(e,n){var r=this.findParent(n.id);r?r.children.splice(r.children.indexOf(n),0,e):this.tree.children.splice(this.tree.children.indexOf(n),0,e)},cloneNode:function(e){var n=$.extend(!0,{},e);return this.traverse(this.getChildren,function(e){e.id=project.tree.nextNodeID++},n),n},expandNode:function(e){project.isNodeCollapsed(e)&&(e.children=e._children,e._children=[])},fullyExpandNode:function(e){project.expandNode(e),e.children.forEach(function(e){project.fullyExpandNode(e)})},expandToLevel:function(e,n){if(e.depth<n){project.expandNode(e);for(var r in e.children)project.expandToLevel(e.children[r],n)}else{project.collapseNode(e);for(var r in e._children)project.expandToLevel(e._children[r],n)}},collapseNode:function(e){project.isNodeExpanded(e)&&(e._children=e.children,e.children=[])},fullyCollapseNode:function(e){e.children&&(e._children=e.children,e._children.forEach(project.fullyCollapseNode),e.children=[])},toggleExpansion:function(e){e.children?(e._children=e.children,e.children=[]):e._children&&(e.children=e._children,e._children=[])},hasChildren:function(e){return e.children&&0===e.children.length||e._children&&0===e._children.length},isNodeChildless:function(e){return!(e.children&&0!==e.children.length||e._children&&0!==e._children.length)},isNodeCollapsed:function(e){return e._children&&e._children.length>0},isNodeExpanded:function(e){return e.children&&e.children.length>0},findNode:function(e,n){if(n||(n=this.tree),n.id===e)return n;for(var r in n.children){var i=this.findNode(e,n.children[r]);if(i)return i}},findParent:function(e,n,r){if(n||(n=this.tree),n.id===e)return r;for(var i in n.children){var t=this.findParent(e,n.children[i],n);if(t)return t}},traverse:function(e,n,r){r||(r=project.tree),n(r);var i=e(r);for(var t in i)project.traverse(e,n,i[t])},traverseDescendants:function(e,n,r){r||(r=project.tree),r.children.forEach(function(r){project.traverse(e,n,r)})},getChildren:function(e){return e.children&&e.children.length>0?e.children:null}};
var projects={init:function(e){$.ajax({type:"GET",url:"api/projects"}).done(function(t){this.data=t,e(t.projects)})},createNewProject:function(e){$.ajax({type:"POST",url:"/api/addProject?projectName="+e}),project.tree={projectID:project.nextProjectID,projectName:e,name:e,version:1,nextNodeID:3,depth:0,id:1,fields:[],children:[{id:2,name:e,depth:1,children:[]}]},project.saveToDatabase()},openProject:function(e,t){$.ajax({type:"GET",url:"api/tree?projectID="+e}).done(function(e){t(e)})}};
var DOWN_ARROW_IMAGE_PATH="images/down-arrow.png",CHECK_MARK_IMAGE_PATH="images/checkmark.png",BLANK_MARK_IMAGE_PATH="images/blankmark.png",ENTER_KEY=13,KEY_UP_ARROW=38,KEY_DOWN_ARROW=40,KEY_LEFT_ARROW=37,KEY_RIGHT_ARROW=39,DEFAULT_NODE_INPUT_WIDTH=390,SPREADSHEET_VIEW="0",TREE_VIEW="1",WEIGHTED_TREE_VIEW="2",CIRCLE_VIEW="3";
function debug(){}debug.print=function(n){console.log(JSON.stringify(n,null,"	"))},debug.printTree=function(){console.log(JSON.stringify(project.tree,null,"	"))};
var circleView={destroy:function(){$("#circleView").remove()},display:function(){function t(t){s=t;var l=d3.transition().duration(d3.event.altKey?7500:750).tween("zoom",function(t){var l=d3.interpolateZoom(n,[s.x,s.y,2*s.r+r]);return function(t){e(l(t))}});l.selectAll("text").filter(function(t){return t.parent===s||"inline"===this.style.display}).style("fill-opacity",function(t){return t.parent===s?1:0}).each("start",function(t){t.parent===s&&(this.style.display="inline")}).each("end",function(t){t.parent!==s&&(this.style.display="none")})}function e(t){var e=l/t[2];n=t,p.attr("transform",function(n){return"translate("+(n.x-t[0])*e+","+(n.y-t[1])*e+")"}),u.attr("r",function(t){return t.r*e})}$("body").append('<div id="circleView"></div>');var n,r=20,l=960,a=d3.scale.linear().domain([-1,5]).range(["hsl(152,80%,80%)","hsl(228,30%,40%)"]).interpolate(d3.interpolateHcl),i=d3.layout.pack().padding(2).size([l-r,l-r]).value(function(t){return Math.PI*t.values.A*t.values.A/4}),c=d3.select("#circleView").append("svg").attr("width",l).attr("height",l).append("g").attr("transform","translate("+l/2+","+l/2+")"),o=project.tree,s=o,d=i.nodes(o),u=c.selectAll("circle").data(d).enter().append("circle").attr("class",function(t){return t.parent?t.children?"node":"node node--leaf":"node node--root"}).style("fill",function(t){return t.children?a(t.depth):null}).on("click",function(e){s!==e&&(t(e),d3.event.stopPropagation())}),p=(c.selectAll("text").data(d).enter().append("text").attr("class","label").style("fill-opacity",function(t){return t.parent===o?1:0}).style("display",function(t){return t.parent===o?null:"none"}).text(function(t){return t.name}),c.selectAll("circle,text"));d3.select("body").style("background",a(-1)).on("click",function(){t(o)}),e([o.x,o.y,2*o.r+r]),d3.select(self.frameElement).style("height",l+"px")}};
var expanderSelector={init:function(e){$("#expanderContainer").html(expanderSelector.getMarkup(e)),$("#expanderSelector").change(expanderSelector.handle)},handle:function(){var e=parseInt($("#expanderSelector").val());e>0&&hms.expandToLevel(e)},getMarkup:function(e){for(var n='<div id="expanderSelectContainer"><select id="expanderSelector" class="form-control"><option value="0">Expand/Collapse to Level</option>',t=1;e+1>t;t++)n+='<option value="'+t+'">'+t+"</option>";return n+='</select><input id="projectActionInput" class="form-control"></input></div>'}};
var fieldMenuView={render:function(e,d,i){var n='<div id="fieldMenu" style="left:'+(d-10)+"px;top:"+(i-10)+'px;">';n+=this.renderMenu(e),n+="</div>",$("body").append($(n)),$("#fieldMenu").mouseleave(function(){$("#fieldMenu").remove()})},renderMenu:function(e){var d="<ul>";return e.items.forEach(function(e){d+='<li onclick="fieldMenuController.handleClick('+e.id+');">';var i="uncheckedFieldMenuItem";e.field&&e.checked&&(i="checkedFieldMenuItem"),d+='<img id="FieldMenuItem'+e.id+'" src="'+CHECK_MARK_IMAGE_PATH+'" class="'+i+'"/>',d+=e.display,e.items&&e.items.length>0&&(d+='<div class="arrowRight"></div>',d+=fieldMenuView.renderMenu(e)),d+="</li>"}),d+"</ul>"},setCheckmarks:function(e,d){d.forEach(function(e){$("#FieldMenuItem"+e.id).removeClass("checkedFieldMenuItem").addClass("uncheckedFieldMenuItem")}),$("#FieldMenuItem"+e).removeClass("uncheckedFieldMenuItem").addClass("checkedFieldMenuItem")}};
var headerView={render:function(e){var t='<select id="projectSelector" class="form-control"><option id="selectProjectOption" value="0">Select Project...</option>';e.forEach(function(e){t+='<option value="'+e.id+'">'+e.name+"</option>"}),t+='<option id="newProjectOption" value="-1">Create New Project...</option></select><input id="editNewProjectNameInput" class="form-control"></input><a href="#" id="save-database-button" class="btn btn-default">Save to Database</a>',t+='<select id="viewSelector" class="form-control"><option value="0">Spread Sheet</option><option value="1">Tree</option><option value="2">Weighted Tree</option><option value="3">Circle Packing</option></select>',$("#header").html(t),$("#projectSelector").change(function(){headerView.selectProject($(this))}),$("#save-database-button").click(function(){hms.saveToDatabase()}),$("#viewSelector").change(function(){hms.selectView($(this).val())}),$("#editNewProjectNameInput").keyup(function(e){headerView.createNewProject(e)})},selectedView:function(){return $("#viewSelector").val()},selectProject:function(e){"newProjectOption"===e.find(":selected").attr("id")?($("#editNewProjectNameInput").val("Type New Project Name and Press Enter to Create"),$("#editNewProjectNameInput").show().focus().select()):($("#selectProjectOption").remove(),hms.openProject(e.val()))},createNewProject:function(e){if(e.keyCode==ENTER_KEY){$("#selectProjectOption").remove();var t=$("#editNewProjectNameInput").val();$("#editNewProjectNameInput").hide();var o=hms.nextProjectID(),c=document.createElement("option");c.text=t,c.value=o.toString(),$(c).insertBefore("#projectSelector option:nth-child("+$("#projectSelector").length+")"),$("#projectSelector").val(o),hms.createNewProject(t)}}};
var projectAction={init:function(){$("#project-action-container").html(projectAction.markup()),$("#projectActionInput").keyup(function(t){t.keyCode==ENTER_KEY&&projectAction.enterPressed()}),$("#projectActionSelector").change(projectAction.handle)},handle:function(){"addField"==$("#projectActionSelector").val()&&($("#projectActionInput").val("Type New Field Name and Press Enter to Create"),$("#projectActionInput").show().focus().select())},enterPressed:function(){"addField"==$("#projectActionSelector").val()&&(spreadSheet.addField($("#projectActionInput").val()),$("#projectActionInput").hide(),$("#projectActionSelector").val("blank"))},markup:function(){return'<div id="projectActionSelectorContainer"><select id="projectActionSelector" class="form-control"><option value="blank"></option><option value="addField">Add Field</option></select><input id="projectActionInput" class="form-control"></input></div>'}};
var spreadSheetKeyHandler={checkKey:function(e){if(e=e||window.event,e.keyCode==KEY_UP_ARROW){e.preventDefault();var t=$(spreadSheetKeyHandler.findAncestor(document.activeElement,"tr")).prev()[0];t&&$("#"+spreadSheetKeyHandler.getNextElementID(t)).focus()}else if(e.keyCode==KEY_DOWN_ARROW){e.preventDefault();var n=$(spreadSheetKeyHandler.findAncestor(document.activeElement,"tr")).next()[0];n&&$("#"+spreadSheetKeyHandler.getNextElementID(n)).focus()}else e.keyCode==KEY_RIGHT_ARROW?(e.preventDefault(),$(spreadSheetKeyHandler.findAncestor(document.activeElement,"td")).next().find("input").focus()):e.keyCode==KEY_LEFT_ARROW&&(e.preventDefault(),$(spreadSheetKeyHandler.findAncestor(document.activeElement,"td")).prev().find("input").focus())},getNextElementID:function(e){var t=document.activeElement.id;if(t.indexOf("nodeInput")>-1)return"nodeInput"+e.id.replace("rowid","");for(var n=document.activeElement.className.split(" "),r=0;r<n.length;r++){var d=n[r];if(d.indexOf("fieldInput")>-1&&"fieldInput"!=d){var a=d.replace("fieldInput","");return a+e.id.replace("datarowid","")}}},findAncestor:function(e,t){for(t=t.toLowerCase();e&&e.parentNode;)if(e=e.parentNode,e.tagName&&e.tagName.toLowerCase()===t)return e}};
var spreadSheetView={render:function(){$(document).on("keydown",spreadSheetKeyHandler.checkKey),$("#spreadSheetView").remove(),$("body").append(this.spreadSheetMarkup()),projectAction.init(),this.renderExpander(),this.renderFieldsRow(),this.renderDataTable(),this.renderNodeColumn()},destroy:function(){$("#spreadSheetView").remove(),$(document).off("keydown")},spreadSheetMarkup:function(){return'<div id="spreadSheetView"><div id="spreadSheetViewActions"><div id="project-action-container"></div><div id="expanderContainer"></div></div><div id="fields-header-row"></div><div id="redips-drag"></div><div id="data-container"></div></div>'},renderExpander:function(){expanderSelector.init(spreadSheet.tree().maxDepth)},renderFieldsRow:function(){$("#fields-header-row").html('<table id="fieldHeaderTable"><tr id="fieldHeaderRow"></tr></table>'),spreadSheet.fields().forEach(function(e){$("#fieldHeaderRow").append(spreadSheetView.fieldHeader(e.name)),$("#fieldMenuButton"+e.name).click(function(d){spreadSheetView.showFieldMenu(d,e.name)})}),$("#fields-header-row").css("right",scrollBarWidth+"px")},fieldHeader:function(e){return'<td class="fieldHeaderCell"><div class="fieldHeaderContainer"><div class="moveColGrip"></div><div class="fieldNameInputContainer"><textarea id="colHeaderInput'+e+'" class="fieldNameInput">'+e+'</textarea></div><div class="fieldHeaderButton"><img id="fieldMenuButton'+e+'" src="images/down-arrow.png"/></div><div id="grip'+e+'" class="resizeColGrip" onmousedown="startResize(event, this)"></div></div></td>'},showFieldMenu:function(e,d){0===$("#fieldMenu").length&&fieldMenuController.displayFieldMenu(d,e.clientX,e.clientY)},renderDataTable:function(){$("#data-container").append('<table id="dataTable"></table>'),spreadSheet.tree().children.forEach(function(e){$("#dataTable").append(spreadSheetView.dataRowsMarkup(e))}),$("#data-container").scroll(function(){$("#redips-drag").scrollTop($("#data-container").scrollTop()),$("#fields-header-row").scrollLeft($("#data-container").scrollLeft())})},dataRowsMarkup:function(e){var d='<tr id="datarowid'+e.id+'" class="dataRow">';return spreadSheet.fields().forEach(function(t){d+='<td class="cell"><input class="fieldInput fieldInput'+t.name+'" type="text" id="'+t.name+e.id+'" value="'+spreadSheet.formattedValue(t,e)+'" oninput="spreadSheet.updateFieldValue(\''+t.name+"',"+e.id+')" onfocus="$(this).val(spreadSheet.rawValue(\''+t.name+"',"+e.id+'))"></td>'}),e.children.forEach(function(e){d+=spreadSheetView.dataRowsMarkup(e)}),d+"</tr>"},renderDataCell:function(e,d,t,n){$(e).append(spreadSheetView.fieldCell(d,t,n)),$("#"+d+t).on("input",function(){spreadSheet.updateFieldValue(d,t)}),$("#"+d+t).focus(function(){$(this).val(spreadSheet.rawValue(d,t))})},fieldCell:function(e,d,t){return'<td class="cell"><input class="fieldInput fieldInput'+e+'" type="text" id="'+e+d+'" value="'+t+'"></td>'},nodeRowMarkup:function(e){var d='<tr id="rowid'+e.id+'" class="nodeRow"><td class="redips-rowhandler cell"><div id="nodeContent'+e.id+'" class="node-container">';return d+=spreadSheetView.deleteButton(e.id)+spreadSheetView.copyButton(e.id)+spreadSheetView.dragHandle,d+=spreadSheetView.nodeContent(e),e.children.forEach(function(e){d+=spreadSheetView.nodeRowMarkup(e)}),d+"</div></td></tr>"},nodeContent:function(e){var d,t=10*(e.depth-1),n=t;return spreadSheet.hasChildren(e)?d=spreadSheet.childrenHidden(e)?'<span class="glyphicon glyphicon-chevron-right"></span>':'<span class="glyphicon glyphicon-chevron-down"></span>':(d="<span></span>",t+=12,n-=10),spreadSheetView.expandIcon(e.id,t,d)+spreadSheetView.nodeInput(e,DEFAULT_NODE_INPUT_WIDTH-n)},renderNodeColumn:function(){$("#redips-drag").html('<table id="treeTable"></table>'),spreadSheet.tree().children.forEach(function(e){$("#treeTable").append(spreadSheetView.nodeRowMarkup(e))}),$("#redips-drag").css("bottom",scrollBarWidth+"px"),redips.init()},dragHandle:'<div class="redips-drag pull-right"><i class="glyphicon glyphicon-move"></i></div>',copyButton:function(e){return'<a href="#"  class="pull-right btn btn-info btn-xs copy-button" onclick="spreadSheet.copyNode('+e+')"><i class="glyphicon glyphicon-plus"></i></a>'},deleteButton:function(e){return'<a href="#" class="pull-right btn btn-danger btn-xs delete-button" onclick="spreadSheet.deleteNode('+e+')"><i class="glyphicon glyphicon-remove"></i></a>'},expandIcon:function(e,d,t){return'<a href="#" id="icon'+e+'" class="btn btn-xs" style="margin-left:'+d+'px" onclick="spreadSheet.toggleNode('+e+')">'+t+"</a>"},nodeInput:function(e,d){return'<input id="nodeInput'+e.id+'" class="nodeTextInput" style="width:'+d+'px" type="text" value="'+e.name+'" oninput="spreadSheetView.updateNodeName('+e.id+')"/>'},expandNode:function(e){for(var d,t=e.children.length-1;t>=0;t--)d=e.children[t],$(spreadSheetView.dataRowsMarkup(d)).insertAfter($("#datarowid"+e.id)),$(spreadSheetView.nodeRowMarkup(d)).insertAfter($("#rowid"+e.id));spreadSheetView.enableDragging(e)},redrawNodeContent:function(e){$("#icon"+e.id).remove(),$("#nodeInput"+e.id).remove(),$("#nodeContent"+e.id).append(spreadSheetView.nodeContent(e))},addField:function(e){$("#fieldHeaderRow").append(spreadSheetView.fieldHeader(e)),$("#fieldMenuButton"+e).click(function(d){spreadSheetView.showFieldMenu(d,e)}),$(".dataRow").each(function(d,t){spreadSheetView.renderDataCell(t,e,parseInt(t.id.replace("datarowid","")),"")})},updateNodeName:function(e){var d=$("#nodeInput"+e).val();spreadSheet.updateNodeName(e,d),$("#nodeInput"+e).attr("value",d)},removeNode:function(e){$("#rowid"+e.id).remove(),$("#datarowid"+e.id).remove()},insertNodeBefore:function(e,d){$(spreadSheetView.nodeRowMarkup(e)).insertBefore($("#rowid"+d.id)),$(spreadSheetView.dataRowsMarkup(e)).insertBefore($("#datarowid"+d.id)),spreadSheetView.enableDragging(e)},insertNodeAfter:function(e,d){$(spreadSheetView.nodeRowMarkup(e)).insertAfter($("#rowid"+d.id)),$(spreadSheetView.dataRowsMarkup(e)).insertAfter($("#datarowid"+d.id)),spreadSheetView.enableDragging(e)},enableDragging:function(e){REDIPS.drag.enableDivs("init",$("#rowid"+e.id).find("div"))},getFieldValue:function(e,d){return $("#"+e+d).val()},updateFieldValue:function(e,d,t){$("#"+e+d).val(t)}};
var MIN_NODE_SIZE=5,MAX_NODE_SIZE=100,VERTICAL_VIEW=0,HORIZONTAL_VIEW=1,treeView={destroy:function(){$("#treeView").remove()},refresh:function(){treeView.update(treeView.root)},rotate:function(){treeView.direction===HORIZONTAL_VIEW?(treeView.direction=VERTICAL_VIEW,treeView.horizontal_spacing=100,treeView.vertical_spacing=60,treeView.diagonal=d3.svg.diagonal().projection(function(e){return[e.x,e.y]}),treeView.root.y0=treeView.viewerHeight/2,treeView.root.x0=0):(treeView.direction=HORIZONTAL_VIEW,treeView.horizontal_spacing=150,treeView.vertical_spacing=25,treeView.diagonal=d3.svg.diagonal().projection(function(e){return[e.y,e.x]}),treeView.root.x0=treeView.viewerHeight/2,treeView.root.y0=0),treeView.update(treeView.root)},init:function(){treeView.direction=HORIZONTAL_VIEW,treeView.selectedNode=null,treeView.draggingNode=null,treeView.duration=750,treeView.horizontal_spacing=150,treeView.vertical_spacing=25,treeView.maxLabelLength=0,project.traverse(project.getChildren,function(e){treeView.maxLabelLength=Math.max(e.name.length,treeView.maxLabelLength)}),treeView.viewerWidth=$("#tree-container").width(),treeView.viewerHeight=$("#tree-container").height(),treeView.tree=d3.layout.tree().size([treeView.viewerHeight,treeView.viewerWidth]),treeView.root=project.tree,treeView.dragStarted=null,treeView.diagonal=d3.svg.diagonal().projection(function(e){return[e.y,e.x]})},render:function(){function e(){treeView.svgGroup.attr("transform","translate("+d3.event.translate+")scale("+d3.event.scale+")")}function t(e,t){treeView.draggingNode=e,d3.select(t).select(".ghostCircle").attr("pointer-events","none"),d3.selectAll(".ghostCircle").attr("class","ghostCircle show"),d3.select(t).attr("class","node activeDrag"),treeView.svgGroup.selectAll("g.node").sort(function(e,t){return e.id!=treeView.draggingNode.id?1:-1}),nodes.length>1&&(links=treeView.tree.links(nodes),nodePaths=treeView.svgGroup.selectAll("path.link").data(links,function(e){return e.target.id}).remove(),nodesExit=treeView.svgGroup.selectAll("g.node").data(nodes,function(e){return e.id}).filter(function(e,t){return e.id!=treeView.draggingNode.id}).remove()),parentLink=treeView.tree.links(treeView.tree.nodes(treeView.draggingNode.parent)),treeView.svgGroup.selectAll("path.link").filter(function(e,t){return e.target.id==treeView.draggingNode.id}).remove(),treeView.dragStarted=null}function r(e){e!=treeView.root&&(treeView.dragStarted&&(domNode=this,t(e,domNode)),e.x0+=d3.event.dy,e.y0+=d3.event.dx,d3.select(this).attr("transform","translate("+e.y0+","+e.x0+")"),treeView.updateTempConnector())}treeView.destroy(),$("body").append('<div id="treeView"><div id="treeViewOptions"><div id="expanderContainer"></div></div><div id="tree-container"></div></div>'),expanderSelector.init(project.tree.maxDepth),$("#treeViewOptions").append('<a href="#" id="treeViewRotateButton" class="btn btn-default pull-right">Rotate View</a>'),$("#treeViewRotateButton").click(function(){treeView.rotate()}),treeView.init(),treeView.zoomListener=d3.behavior.zoom().scaleExtent([.1,3]).on("zoom",e);var i=d3.select("#tree-container").append("svg").attr("width",treeView.viewerWidth).attr("height",treeView.viewerHeight).attr("class","overlay").call(treeView.zoomListener);dragListener=d3.behavior.drag().on("dragstart",treeView.dragstart).on("drag",r).on("dragend",treeView.dragend),treeView.svgGroup=i.append("g"),treeView.root.x0=treeView.viewerHeight/2,treeView.root.y0=0,treeView.update(treeView.root),treeView.centerNode(treeView.root)},click:function(e){d3.event.defaultPrevented||(project.toggleExpansion(e),treeView.update(e))},update:function(e){var t=0,r=[1],i=function(e,t){t.children&&t.children.length>0&&(r.length<=e+1&&r.push(0),r[e+1]+=t.children.length,t.children.forEach(function(t){i(e+1,t)}))};i(0,treeView.root);var n=d3.max(r)*treeView.vertical_spacing;treeView.tree=treeView.tree.size([n,treeView.viewerWidth]);var o=treeView.tree.nodes(treeView.root).reverse(),a=treeView.tree.links(o);o.forEach(function(e){e.y=e.depth*treeView.horizontal_spacing}),node=treeView.svgGroup.selectAll("g.node").data(o,function(e){return e.id||(e.id=++t)});var d=node.enter().append("g").call(dragListener).attr("class","node").attr("transform",function(t){return"translate("+e.y0+","+e.x0+")"}).on("click",treeView.click);d.append("circle").attr("class","nodeCircle").attr("r",0).style("fill",function(e){return project.isNodeCollapsed(e)?"lightsteelblue":"#fff"}),d.append("text").attr("x",function(e){return project.hasChildren(e)?-10:10}).attr("dy",".35em").attr("class","nodeText").attr("text-anchor",function(e){return project.hasChildren(e)?"end":"start"}).text(function(e){return e.name}).style("fill-opacity",0),d.append("circle").attr("class","ghostCircle").attr("r",30).attr("opacity",.2).style("fill","red").attr("pointer-events","mouseover").on("mouseover",function(e){treeView.overCircle(e)}).on("mouseout",function(e){treeView.outCircle(e)}),node.select("text").attr("x",function(e){return project.hasChildren(e)?-10:10}).attr("text-anchor",function(e){return project.hasChildren(e)?"end":"start"}).text(function(e){return e.name}),node.select("circle.nodeCircle").attr("r",function(e){return treeView.computeNodeSize(e)}).style("fill",function(e){return project.isNodeCollapsed(e)?"lightsteelblue":"#fff"});var l;l=treeView.direction===VERTICAL_VIEW?node.attr("transform",function(e){return"translate("+e.x+","+e.y+")"}):node.attr("transform",function(e){return"translate("+e.y+","+e.x+")"}),l.select("text").style("fill-opacity",1);var c=node.exit().attr("transform",function(t){return"translate("+e.y+","+e.x+")"}).remove();c.select("circle").attr("r",0),c.select("text").style("fill-opacity",0);var s=treeView.svgGroup.selectAll("path.link").data(a,function(e){return e.target.id});s.enter().insert("path","g").attr("class","link").attr("d",function(t){var r={x:e.x0,y:e.y0};return treeView.diagonal({source:r,target:r})}),s.attr("d",treeView.diagonal),s.exit().attr("d",function(t){var r={x:e.x,y:e.y};return treeView.diagonal({source:r,target:r})}).remove(),o.forEach(function(e){e.x0=e.x,e.y0=e.y})},dragstart:function(e){e!=treeView.root&&(treeView.dragStarted=!0,nodes=treeView.tree.nodes(e),d3.event.sourceEvent.stopPropagation())},dragend:function(e){e!=treeView.root&&(domNode=this,treeView.selectedNode&&(project.removeNode(treeView.draggingNode),treeView.selectedNode.children||(treeView.selectedNode.children=[]),treeView.selectedNode.children.push(treeView.draggingNode),project.expandNode(treeView.selectedNode)),treeView.selectedNode=null,d3.selectAll(".ghostCircle").attr("class","ghostCircle"),d3.select(domNode).attr("class","node"),d3.select(domNode).select(".ghostCircle").attr("pointer-events",""),treeView.updateTempConnector(),null!==treeView.draggingNode&&(treeView.update(treeView.root),treeView.draggingNode=null))},updateTempConnector:function(){var e=[];null!==treeView.draggingNode&&null!==treeView.selectedNode&&(e=[{source:{x:treeView.selectedNode.y0,y:treeView.selectedNode.x0},target:{x:treeView.draggingNode.y0,y:treeView.draggingNode.x0}}]);var t=treeView.svgGroup.selectAll(".templink").data(e);t.enter().append("path").attr("class","templink").attr("d",d3.svg.diagonal()).attr("pointer-events","none"),t.attr("d",d3.svg.diagonal()),t.exit().remove()},overCircle:function(e){treeView.selectedNode=e,treeView.updateTempConnector()},outCircle:function(e){treeView.selectedNode=null,treeView.updateTempConnector()},centerNode:function(e){scale=treeView.zoomListener.scale(),x=-e.y0,y=-e.x0,x=x*scale+treeView.viewerWidth/4,y=y*scale+treeView.viewerHeight/2,d3.select("g").attr("transform","translate("+x+","+y+")scale("+scale+")"),treeView.zoomListener.scale(scale),treeView.zoomListener.translate([x,y])},computeNodeSize:function(e){var t=MIN_NODE_SIZE;return t}};
var MIN_NODE_SIZE=5,MAX_NODE_SIZE=100,VERTICAL_VIEW=0,HORIZONTAL_VIEW=1,weightedTreeView={destroy:function(){$("#treeView").remove()},refresh:function(){weightedTreeView.update(weightedTreeView.root)},rotate:function(){weightedTreeView.direction===HORIZONTAL_VIEW?(weightedTreeView.direction=VERTICAL_VIEW,weightedTreeView.horizontal_spacing=100,weightedTreeView.vertical_spacing=60,weightedTreeView.diagonal=d3.svg.diagonal().projection(function(e){return[e.x,e.y]}),weightedTreeView.root.y0=weightedTreeView.viewerHeight/2,weightedTreeView.root.x0=0):(weightedTreeView.direction=HORIZONTAL_VIEW,weightedTreeView.horizontal_spacing=300,weightedTreeView.vertical_spacing=200,weightedTreeView.diagonal=d3.svg.diagonal().projection(function(e){return[e.y,e.x]}),weightedTreeView.root.x0=weightedTreeView.viewerHeight/2,weightedTreeView.root.y0=0),weightedTreeView.update(weightedTreeView.root)},init:function(){weightedTreeView.direction=HORIZONTAL_VIEW,weightedTreeView.selectedNode=null,weightedTreeView.draggingNode=null,weightedTreeView.duration=750,weightedTreeView.horizontal_spacing=300,weightedTreeView.vertical_spacing=200,weightedTreeView.maxLabelLength=0,project.traverse(project.getChildren,function(e){weightedTreeView.maxLabelLength=Math.max(e.name.length,weightedTreeView.maxLabelLength)}),weightedTreeView.viewerWidth=$("#tree-container").width(),weightedTreeView.viewerHeight=$("#tree-container").height(),weightedTreeView.tree=d3.layout.tree().size([weightedTreeView.viewerHeight,weightedTreeView.viewerWidth]),weightedTreeView.root=project.tree,weightedTreeView.dragStarted=null,weightedTreeView.diagonal=d3.svg.diagonal().projection(function(e){return[e.y,e.x]})},render:function(){function e(){weightedTreeView.svgGroup.attr("transform","translate("+d3.event.translate+")scale("+d3.event.scale+")")}function t(e,t){weightedTreeView.draggingNode=e,d3.select(t).select(".ghostCircle").attr("pointer-events","none"),d3.selectAll(".ghostCircle").attr("class","ghostCircle show"),d3.select(t).attr("class","node activeDrag"),weightedTreeView.svgGroup.selectAll("g.node").sort(function(e,t){return e.id!=weightedTreeView.draggingNode.id?1:-1}),nodes.length>1&&(links=weightedTreeView.tree.links(nodes),nodePaths=weightedTreeView.svgGroup.selectAll("path.link").data(links,function(e){return e.target.id}).remove(),nodesExit=weightedTreeView.svgGroup.selectAll("g.node").data(nodes,function(e){return e.id}).filter(function(e,t){return e.id!=weightedTreeView.draggingNode.id}).remove()),parentLink=weightedTreeView.tree.links(weightedTreeView.tree.nodes(weightedTreeView.draggingNode.parent)),weightedTreeView.svgGroup.selectAll("path.link").filter(function(e,t){return e.target.id==weightedTreeView.draggingNode.id}).remove(),weightedTreeView.dragStarted=null}function i(e){e!=weightedTreeView.root&&(weightedTreeView.dragStarted&&(domNode=this,t(e,domNode)),e.x0+=d3.event.dy,e.y0+=d3.event.dx,d3.select(this).attr("transform","translate("+e.y0+","+e.x0+")"),weightedTreeView.updateTempConnector())}weightedTreeView.destroy(),$("body").append('<div id="treeView"><div id="treeViewOptions"><div id="expanderContainer"></div></div><div id="tree-container"></div></div>'),expanderSelector.init(project.tree.maxDepth),$("#treeViewOptions").append('<a href="#" id="treeViewRotateButton" class="btn btn-default pull-right">Rotate View</a>'),$("#treeViewRotateButton").click(function(){weightedTreeView.rotate()}),weightedTreeView.init(),weightedTreeView.zoomListener=d3.behavior.zoom().scaleExtent([.1,3]).on("zoom",e);var r=d3.select("#tree-container").append("svg").attr("width",weightedTreeView.viewerWidth).attr("height",weightedTreeView.viewerHeight).attr("class","overlay").call(weightedTreeView.zoomListener);dragListener=d3.behavior.drag().on("dragstart",weightedTreeView.dragstart).on("drag",i).on("dragend",weightedTreeView.dragend),weightedTreeView.svgGroup=r.append("g"),weightedTreeView.root.x0=weightedTreeView.viewerHeight/2,weightedTreeView.root.y0=0,weightedTreeView.update(weightedTreeView.root),weightedTreeView.centerNode(weightedTreeView.root)},click:function(e){d3.event.defaultPrevented||(project.toggleExpansion(e),weightedTreeView.update(e))},update:function(e){var t=0,i=[1],r=function(e,t){t.children&&t.children.length>0&&(i.length<=e+1&&i.push(0),i[e+1]+=t.children.length,t.children.forEach(function(t){r(e+1,t)}))};r(0,weightedTreeView.root);var d=d3.max(i)*weightedTreeView.vertical_spacing;weightedTreeView.tree=weightedTreeView.tree.size([d,weightedTreeView.viewerWidth]);var n=weightedTreeView.tree.nodes(weightedTreeView.root).reverse(),o=weightedTreeView.tree.links(n);n.forEach(function(e){e.y=e.depth*weightedTreeView.horizontal_spacing}),node=weightedTreeView.svgGroup.selectAll("g.node").data(n,function(e){return e.id||(e.id=++t)});var a=node.enter().append("g").call(dragListener).attr("class","node").attr("transform",function(t){return"translate("+e.y0+","+e.x0+")"}).on("click",weightedTreeView.click);a.append("circle").attr("class","nodeCircle").attr("r",0).style("fill",function(e){return project.isNodeCollapsed(e)?"lightsteelblue":"#fff"}),a.append("text").attr("x",function(e){return project.hasChildren(e)?-10:10}).attr("dy",".35em").attr("class","nodeText").attr("text-anchor",function(e){return project.hasChildren(e)?"end":"start"}).text(function(e){return e.name}).style("fill-opacity",0),a.append("circle").attr("class","ghostCircle").attr("r",30).attr("opacity",.2).style("fill","red").attr("pointer-events","mouseover").on("mouseover",function(e){weightedTreeView.overCircle(e)}).on("mouseout",function(e){weightedTreeView.outCircle(e)}),node.select("text").attr("x",function(e){return project.hasChildren(e)?-10:10}).attr("text-anchor",function(e){return project.hasChildren(e)?"end":"start"}).text(function(e){return e.name}),node.select("circle.nodeCircle").attr("r",function(e){return weightedTreeView.computeNodeSize(e)}).style("fill",function(e){return project.isNodeCollapsed(e)?"lightsteelblue":"#fff"});var w;w=weightedTreeView.direction===VERTICAL_VIEW?node.attr("transform",function(e){return"translate("+e.x+","+e.y+")"}):node.attr("transform",function(e){return"translate("+e.y+","+e.x+")"}),w.select("text").style("fill-opacity",1);var g=node.exit().attr("transform",function(t){return"translate("+e.y+","+e.x+")"}).remove();g.select("circle").attr("r",0),g.select("text").style("fill-opacity",0);var l=weightedTreeView.svgGroup.selectAll("path.link").data(o,function(e){return e.target.id});l.enter().insert("path","g").attr("class","link").attr("d",function(t){var i={x:e.x0,y:e.y0};return weightedTreeView.diagonal({source:i,target:i})}),l.attr("d",weightedTreeView.diagonal),l.exit().attr("d",function(t){var i={x:e.x,y:e.y};return weightedTreeView.diagonal({source:i,target:i})}).remove(),n.forEach(function(e){e.x0=e.x,e.y0=e.y})},dragstart:function(e){e!=weightedTreeView.root&&(weightedTreeView.dragStarted=!0,nodes=weightedTreeView.tree.nodes(e),d3.event.sourceEvent.stopPropagation())},dragend:function(e){e!=weightedTreeView.root&&(domNode=this,weightedTreeView.selectedNode&&(project.removeNode(weightedTreeView.draggingNode),weightedTreeView.selectedNode.children||(weightedTreeView.selectedNode.children=[]),weightedTreeView.selectedNode.children.push(weightedTreeView.draggingNode),project.expandNode(weightedTreeView.selectedNode)),weightedTreeView.selectedNode=null,d3.selectAll(".ghostCircle").attr("class","ghostCircle"),d3.select(domNode).attr("class","node"),d3.select(domNode).select(".ghostCircle").attr("pointer-events",""),weightedTreeView.updateTempConnector(),null!==weightedTreeView.draggingNode&&(weightedTreeView.update(weightedTreeView.root),weightedTreeView.draggingNode=null))},updateTempConnector:function(){var e=[];null!==weightedTreeView.draggingNode&&null!==weightedTreeView.selectedNode&&(e=[{source:{x:weightedTreeView.selectedNode.y0,y:weightedTreeView.selectedNode.x0},target:{x:weightedTreeView.draggingNode.y0,y:weightedTreeView.draggingNode.x0}}]);var t=weightedTreeView.svgGroup.selectAll(".templink").data(e);t.enter().append("path").attr("class","templink").attr("d",d3.svg.diagonal()).attr("pointer-events","none"),t.attr("d",d3.svg.diagonal()),t.exit().remove()},overCircle:function(e){weightedTreeView.selectedNode=e,weightedTreeView.updateTempConnector()},outCircle:function(e){weightedTreeView.selectedNode=null,weightedTreeView.updateTempConnector()},centerNode:function(e){scale=weightedTreeView.zoomListener.scale(),x=-e.y0,y=-e.x0,x=x*scale+weightedTreeView.viewerWidth/4,y=y*scale+weightedTreeView.viewerHeight/2,d3.select("g").attr("transform","translate("+x+","+y+")scale("+scale+")"),weightedTreeView.zoomListener.scale(scale),weightedTreeView.zoomListener.translate([x,y])},computeNodeSize:function(e){var t=MIN_NODE_SIZE;return tree.field&&(e.values&&e.values[tree.field.name]&&(t=MAX_NODE_SIZE*Math.sqrt(e.values[tree.field.name]/tree.maxFieldValue)),MIN_NODE_SIZE>t&&(t=MIN_NODE_SIZE)),t}};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFnZy5qcyIsImRyYWctbGliLmpzIiwiZHJhZy5qcyIsInJlc2l6ZS1jb2x1bW4uanMiLCJjb250cm9sbGVyL2V4cGFuZGVyLmpzIiwiY29udHJvbGxlci9maWVsZE1lbnVDb250cm9sbGVyLmpzIiwiY29udHJvbGxlci9obXMuanMiLCJjb250cm9sbGVyL3NwcmVhZFNoZWV0LmpzIiwiY29udHJvbGxlci90cmVlLmpzIiwibW9kZWwvRmllbGQuanMiLCJtb2RlbC9GaWVsZE1lbnUuanMiLCJtb2RlbC9GaWVsZE1lbnVJdGVtLmpzIiwibW9kZWwvcHJvamVjdC5qcyIsIm1vZGVsL3Byb2plY3RzLmpzIiwidXRpbC9jb25zdGFudHMuanMiLCJ1dGlsL2RlYnVnLmpzIiwidmlldy9jaXJjbGVWaWV3LmpzIiwidmlldy9leHBhbmRlclNlbGVjdG9yLmpzIiwidmlldy9maWVsZE1lbnVWaWV3LmpzIiwidmlldy9oZWFkZXJWaWV3LmpzIiwidmlldy9wcm9qZWN0QWN0aW9uLmpzIiwidmlldy9zcHJlYWRTaGVldEtleUhhbmRsZXIuanMiLCJ2aWV3L3NwcmVhZFNoZWV0Vmlldy5qcyIsInZpZXcvdHJlZVZpZXcuanMiLCJ2aWV3L3dlaWdodGVkVHJlZVZpZXcuanMiXSwibmFtZXMiOlsiYWdncmVnYXRlX2FueSIsIm5vZGUiLCJmaWVsZCIsImNoaWxkcmVuIiwibGVuZ3RoIiwiY2hpbGRyZW5TdW0iLCJpIiwidmFsdWVzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwidmFsdWUiLCJwYXJzZUZsb2F0IiwiUkVESVBTIiwiZHJhZyIsImluaXQiLCJlbmFibGVEcmFnIiwiZW5hYmxlRGl2cyIsImhhbmRsZXJPbk1vdXNlRG93biIsImhhbmRsZXJPbk1vdXNlVXAiLCJoYW5kbGVyT25Nb3VzZU1vdmUiLCJlbGVtZW50RHJvcCIsInJlc2V0U3R5bGVzIiwicmVnaXN0ZXJFdmVudHMiLCJjZWxsQ2hhbmdlZCIsImhhbmRsZXJPblJlc2l6ZSIsInNldFRhYmxlUm93Q29sdW1uIiwic2V0UG9zaXRpb24iLCJzZXRUZFN0eWxlIiwiZ2V0VGRTdHlsZSIsImJveE9mZnNldCIsImNhbGN1bGF0ZUNlbGxzIiwiZ2V0U2Nyb2xsUG9zaXRpb24iLCJhdXRvU2Nyb2xsWCIsImF1dG9TY3JvbGxZIiwiY29weVByb3BlcnRpZXMiLCJjbG9uZUxpbWl0IiwiZ2V0U3R5bGUiLCJmaW5kUGFyZW50Iiwicm93T3BhY2l0eSIsInJvd0Nsb25lIiwicm93RHJvcCIsIm5vcm1hbGl6ZSIsImJnU3R5bGVPbGQiLCJ0YWJsZSIsIm1vdmVkIiwiY2xvbmVkIiwid2luZG93U2Nyb2xsUG9zaXRpb24iLCJvYmpNYXJnaW4iLCJzY3JlZW4iLCJ3aWR0aCIsImhlaWdodCIsInNjcm9sbERhdGEiLCJjb250YWluZXIiLCJvYmoiLCJlZGdlIiwicGFnZSIsIngiLCJ5IiwiZGl2IiwiZmxhZyIsImNsb25lZElkIiwiY3VycmVudENlbGwiLCJkcmFnQ29udGFpbmVyIiwiZGl2Qm94IiwicG9pbnRlciIsInRocmVzaG9sZCIsInNoaWZ0S2V5IiwiY2xvbmVDbGFzcyIsInJvdyIsInJvd19vbGQiLCJyb3dfc291cmNlIiwiY2VsbCIsImNlbGxfb2xkIiwiY2VsbF9zb3VyY2UiLCJvYmpPbGQiLCJob3ZlciIsImNvbG9yVGQiLCJjb2xvclRyIiwic2Nyb2xsIiwiZW5hYmxlIiwiYm91bmQiLCJzcGVlZCIsInN0eWxlIiwiYm9yZGVyRGlzYWJsZWQiLCJvcGFjaXR5RGlzYWJsZWQiLCJyb3dFbXB0eUNvbG9yIiwidGQiLCJjbG9uZSIsImtleURpdiIsImtleVJvdyIsInNlbmRCYWNrIiwiZHJvcCIsImV2ZW50IiwiY2xvbmVkRHJvcHBlZCIsImNsb25lZEVuZDEiLCJjbG9uZWRFbmQyIiwiZHJvcHBlZCIsImRyb3BwZWRCZWZvcmUiLCJmaW5pc2giLCJub3RDbG9uZWQiLCJub3RNb3ZlZCIsInJvd0NoYW5nZWQiLCJyb3dDbGlja2VkIiwicm93Q2xvbmVkIiwicm93RHJvcHBlZCIsInJvd0Ryb3BwZWRCZWZvcmUiLCJyb3dEcm9wcGVkU291cmNlIiwicm93TW92ZWQiLCJyb3dOb3RDbG9uZWQiLCJyb3dOb3RNb3ZlZCIsInJlZGlwc0Nsb25lIiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwicmVkaXBzIiwiYWRkIiwid2luZG93IiwiZSIsIm9mZnNldCIsInBvc2l0aW9uIiwiWCIsIlkiLCJldnQiLCJjYW5jZWxCdWJibGUiLCJzdG9wUHJvcGFnYXRpb24iLCJnZXRTZWxlY3Rpb24iLCJyZW1vdmVBbGxSYW5nZXMiLCJzZWxlY3Rpb24iLCJ0eXBlIiwiZW1wdHkiLCJlcnJvciIsImNsaWVudFgiLCJjbGllbnRZIiwidGhpcyIsImNsYXNzTmFtZSIsImluZGV4T2YiLCJjdXJyZW50IiwicGFyZW50Tm9kZSIsImVsIiwidGFibGVNaW5pIiwicm93T2JqIiwibm9kZU5hbWUiLCJ1bmRlZmluZWQiLCJpbm5lckhUTUwiLCJjbGFzc0xpc3QiLCJzb3VyY2VSb3ciLCJyb3dzIiwicm93SWR4IiwidHJNaW5pIiwiZGVsZXRlVGFibGVSb3ciLCJ0YmwiLCJlbXB0eVJvdyIsImRlbGV0ZVJvdyIsInJvd0luZGV4IiwidGFibGVSb3ciLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwibmV4dFNpYmxpbmciLCJyX3JvdyIsIm10X3RyIiwicmVtb3ZlIiwib25zZWxlY3RzdGFydCIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbFdpZHRoIiwic2Nyb2xsSGVpZ2h0IiwidGFyZ2V0IiwiY2VsbHMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjbG9uZVNvdXJjZURpdiIsIm9ubW91c2Vkb3duIiwidG9wIiwibGVmdCIsInpJbmRleCIsInNjYSIsImRlbHRhWCIsImRlbHRhWSIsInNjcm9sbFBvc2l0aW9uIiwiTWF0aCIsImFicyIsImNvbnRhaW5UYWJsZSIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG9wIiwiYXV0b3Njcm9sbCIsIm1pZHN0WCIsIm1pZHN0WSIsInByZXZpb3VzIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwicm93X29mZnNldCIsInJvd19mb3VuZCIsInRvcyIsIm9mZnNldEhlaWdodCIsInJpIiwidCIsInRyIiwicyIsImNvbG9yIiwidG9TdHJpbmciLCJib3JkZXJUciIsImJvcmRlclRvcCIsImJvcmRlckJvdHRvbSIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyVG9wU3R5bGUiLCJib3JkZXJUb3BDb2xvciIsImJvcmRlckJvdHRvbVdpZHRoIiwiYm90dG9tIiwiYm9yZGVyQm90dG9tU3R5bGUiLCJib3JkZXJCb3R0b21Db2xvciIsImMiLCJyaWdodCIsImJvcmRlciIsIm5hbWUiLCJib3giLCJib3hfc2Nyb2xsIiwib0xlZnQiLCJvVG9wIiwiYm94T2xkIiwib2Zmc2V0TGVmdCIsInNjcm9sbExlZnQiLCJvZmZzZXRUb3AiLCJvZmZzZXRQYXJlbnQiLCJvZmZzZXRXaWR0aCIsImNiIiwiZGlzcGxheSIsInNjcm9sbFkiLCJzY3JvbGxYIiwic28iLCJwb3MiLCJvbGQiLCJtYXhzcCIsImVkZ2VDcm9zc2VkIiwiY2xpZW50V2lkdGgiLCJzY3JvbGxCeSIsInBhcnNlSW50IiwiaXNOYU4iLCJzZXRUaW1lb3V0IiwiY2xpZW50SGVpZ2h0Iiwic3JjIiwiY2xuIiwiY2hpbGRzIiwiY29weSIsImUxIiwiZTIiLCJlbmFibGVkIiwiZWwxIiwiZWwyIiwidG4iLCJtYXRjaEFycmF5IiwibGltaXRUeXBlIiwibGltaXQiLCJjbGFzc2VzIiwibWF0Y2giLCJyZXBsYWNlIiwiZW5hYmxlX2ZsYWciLCJxdWVyeVNlbGVjdG9yQWxsIiwiaiIsImsiLCJib3JkZXJTdHlsZSIsIm9wYWNpdHkiLCJjdXJzb3IiLCJvdmVyZmxvdyIsInRibHMiLCJyZWdleERyYWciLCJyZWdleE5vQXV0b3Njcm9sbCIsImJvcmRlckVuYWJsZWQiLCJ0ZXN0IiwiZmlsdGVyIiwic3R5bGVfbmFtZSIsImN1cnJlbnRTdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJkZWZhdWx0VmlldyIsInRhZ19uYW1lIiwic3RyIiwidGROb2RlTGlzdCIsImNoaWxkTm9kZXMiLCJub2RlVHlwZSIsImV2ZW50TmFtZSIsImhhbmRsZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJyZCIsIm5ld1BhcmVudFJvdyIsIm1vdmVkSUQiLCJuZXdQYXJlbnRJRCIsInNwcmVhZFNoZWV0IiwibW92ZU5vZGUiLCJyb3dEZWxldGVkIiwicm93VW5kZWxldGVkIiwicmVzaXplQ29sdW1uTGVmdCIsInJlc2l6ZUZpZWxkIiwiTUlOX0NPTFVNTl9XSURUSCIsIkdSSVBTX1dJRFRIIiwic3RhcnRSZXNpemUiLCJncmlwIiwiJCIsImJpbmQiLCJyZXNpemVEcmFnIiwicmVzaXplRW5kIiwidmlzaWJpbGl0eSIsInBhZ2VYIiwidW5iaW5kIiwibmV3V2lkdGgiLCJjb2x1bW5DZWxscyIsImZpZWxkTWVudUNvbnRyb2xsZXIiLCJkaXNwbGF5RmllbGRNZW51IiwiZmllbGROYW1lIiwicHJvamVjdCIsImdldEZpZWxkIiwibWVudSIsIkZpZWxkTWVudSIsImZpZWxkcyIsImZpZWxkTWVudVZpZXciLCJyZW5kZXIiLCJoYW5kbGVDbGljayIsIm1lbnVJdGVtSUQiLCJjbGlja2VkIiwiZ2V0TWVudUl0ZW0iLCJwYXJlbnQiLCJnZXRNZW51SXRlbVBhcmVudCIsInZhck5hbWUiLCJzZXRDaGVja21hcmtzIiwiaXRlbXMiLCJ1cGRhdGVOdW1iZXJGaWVsZEZvcm1hdHRpbmciLCJyZWFkeSIsInNjcm9sbEJhcldpZHRoIiwiZ2V0U2Nyb2xsQmFyV2lkdGgiLCJobXMiLCJwcm9qZWN0cyIsImhlYWRlclZpZXciLCJvcGVuUHJvamVjdCIsInByb2plY3RJRCIsInRyZWUiLCJzZWxlY3RWaWV3Iiwic2VsZWN0ZWRWaWV3Iiwic2F2ZVRvRGF0YWJhc2UiLCJ2aWV3SUQiLCJ2aWV3IiwiZGVzdHJveSIsInNob3dWaWV3IiwiU1BSRUFEU0hFRVRfVklFVyIsInNwcmVhZFNoZWV0VmlldyIsIlRSRUVfVklFVyIsInRyZWVWaWV3IiwiZGlzcGxheVRyZWUiLCJXRUlHSFRFRF9UUkVFX1ZJRVciLCJ3ZWlnaHRlZFRyZWVWaWV3IiwiZGlzcGxheVdlaWdodGVkVHJlZSIsIkNJUkNMRV9WSUVXIiwiY2lyY2xlVmlldyIsImNyZWF0ZU5ld1Byb2plY3QiLCJuZXdQcm9qZWN0TmFtZSIsIm5leHRQcm9qZWN0SUQiLCJleHBhbmRUb0xldmVsIiwibGV2ZWwiLCJyZWZyZXNoIiwiZmlyc3RDaGlsZCIsImJvZHkiLCJjbGVhbnNlRGF0YSIsInVwZGF0ZUZpZWxkVmFsdWUiLCJub2RlSUQiLCJmaW5kTm9kZSIsImdldEZpZWxkVmFsdWUiLCJmb3JFYWNoIiwiY2hpbGQiLCJyYXdWYWx1ZSIsImZvcm1hdHRlZFZhbHVlIiwiRmllbGQiLCJmb3JtYXRWYWx1ZSIsImFkZEZpZWxkIiwiaGFzQ2hpbGRyZW4iLCJpc05vZGVDaGlsZGxlc3MiLCJjaGlsZHJlbkhpZGRlbiIsImlzTm9kZUNvbGxhcHNlZCIsIm5ld1BhcmVudE5vZGUiLCJyZW1vdmVOb2RlIiwiYWRkTm9kZSIsInRyYXZlcnNlIiwiZ2V0Q2hpbGRyZW4iLCJyZWRyYXdOb2RlQ29udGVudCIsImRlbGV0ZU5vZGUiLCJleHBhbmROb2RlIiwiaW5zZXJ0Tm9kZUFmdGVyIiwicmVuZGVyRXhwYW5kZXIiLCJjb3B5Tm9kZSIsInNvdXJjZU5vZGUiLCJuZXdOb2RlIiwiY2xvbmVOb2RlIiwiaW5zZXJ0Tm9kZSIsImluc2VydE5vZGVCZWZvcmUiLCJjb2xsYXBzZU5vZGUiLCJ0cmF2ZXJzZURlc2NlbmRhbnRzIiwidG9nZ2xlTm9kZSIsImlzTm9kZUV4cGFuZGVkIiwidXBkYXRlTm9kZU5hbWUiLCJuZXdOYW1lIiwiTnVtYmVyIiwiZW5hYmxlRHJhZ2dpbmciLCJkYXRhIiwibWF4RmllbGRWYWx1ZSIsImNhbGNNYXhGaWVsZFZhbHVlIiwibWF4VmFsdWUiLCJORUdBVElWRV9JTkZJTklUWSIsImRhdGF0eXBlIiwiTlVNQkVSIiwiZm9ybWF0IiwiTlVNQkVSX0ZPUk1BVCIsInByZWNpc2lvbiIsImFnZ190eXBlIiwiTk9fQUdHUkVHQVRJT04iLCJhZ2dfcXR5X2ZpZWxkIiwiU1RSSU5HIiwiQ0hPSUNFIiwiU1VNX0FOWV9BR0dSRUdBVElPTiIsIlBFUkNFTlRfRk9STUFUIiwiU0NJRU5USUZJQ19GT1JNQVQiLCJ0b0ZpeGVkIiwidG9FeHBvbmVudGlhbCIsIm51bWJlckl0ZW0iLCJGaWVsZE1lbnVJdGVtIiwiZm9ybWF0SXRlbSIsIm51bWJlckZvcm1hdEl0ZW0iLCJwdXNoIiwiZGlzcGxheVN0cmluZyIsInBlcmNlbnRGb3JtYXRJdGVtIiwic2NpZW50aWZpY0Zvcm1hdEl0ZW0iLCJhZ2dyZWdhdGlvbkl0ZW0iLCJzdW1BbnlBZ2dJdGVtIiwiaW5kZXgiLCJmIiwicHJvdG90eXBlIiwibWVudUl0ZW0iLCJmb3VuZCIsImNoZWNrZWQiLCJhamF4IiwidXJsIiwiZGF0YVR5cGUiLCJqc29uIiwiSlNPTiIsInN0cmluZ2lmeSIsIngwIiwieTAiLCJzcGxpY2UiLCJzZXREZXB0aHMiLCJkZXB0aCIsIm1heERlcHRoIiwiZXh0ZW5kIiwibmV4dE5vZGVJRCIsIl9jaGlsZHJlbiIsImZ1bGx5RXhwYW5kTm9kZSIsImZ1bGx5Q29sbGFwc2VOb2RlIiwidG9nZ2xlRXhwYW5zaW9uIiwic2VhcmNoTm9kZSIsImZvdW5kTm9kZSIsImZvdW5kUGFyZW50IiwiY2hpbGRyZW5GbiIsInZpc2l0Rm4iLCJmaW5pc2hGbiIsImRvbmUiLCJwcm9qZWN0TmFtZSIsInZlcnNpb24iLCJET1dOX0FSUk9XX0lNQUdFX1BBVEgiLCJDSEVDS19NQVJLX0lNQUdFX1BBVEgiLCJCTEFOS19NQVJLX0lNQUdFX1BBVEgiLCJFTlRFUl9LRVkiLCJLRVlfVVBfQVJST1ciLCJLRVlfRE9XTl9BUlJPVyIsIktFWV9MRUZUX0FSUk9XIiwiS0VZX1JJR0hUX0FSUk9XIiwiREVGQVVMVF9OT0RFX0lOUFVUX1dJRFRIIiwiZGVidWciLCJwcmludCIsIm8iLCJjb25zb2xlIiwibG9nIiwicHJpbnRUcmVlIiwiem9vbSIsImQiLCJmb2N1cyIsInRyYW5zaXRpb24iLCJkMyIsImR1cmF0aW9uIiwiYWx0S2V5IiwidHdlZW4iLCJpbnRlcnBvbGF0ZVpvb20iLCJyIiwibWFyZ2luIiwiem9vbVRvIiwic2VsZWN0QWxsIiwiZWFjaCIsInYiLCJkaWFtZXRlciIsImF0dHIiLCJjaXJjbGUiLCJhcHBlbmQiLCJzY2FsZSIsImxpbmVhciIsImRvbWFpbiIsInJhbmdlIiwiaW50ZXJwb2xhdGUiLCJpbnRlcnBvbGF0ZUhjbCIsInBhY2siLCJsYXlvdXQiLCJwYWRkaW5nIiwic2l6ZSIsIlBJIiwic3ZnIiwic2VsZWN0Iiwicm9vdCIsIm5vZGVzIiwiZW50ZXIiLCJvbiIsInRleHQiLCJzZWxmIiwiZnJhbWVFbGVtZW50IiwiZXhwYW5kZXJTZWxlY3RvciIsIm51bUxldmVscyIsImh0bWwiLCJnZXRNYXJrdXAiLCJjaGFuZ2UiLCJoYW5kbGUiLCJ2YWwiLCJtYXJrdXAiLCJmaWVsZE1lbnUiLCJyZW5kZXJNZW51IiwibW91c2VsZWF2ZSIsImNoZWNrTWFya0NsYXNzIiwic2libGluZ3MiLCJzaWJsaW5nIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsInNlbGVjdFByb2plY3QiLCJjbGljayIsImtleXVwIiwicHJvamVjdFNlbGVjdG9yIiwiZmluZCIsInNob3ciLCJrZXlDb2RlIiwiaGlkZSIsIm5ld1Byb2plY3RJRCIsIm9wdGlvbiIsInByb2plY3RBY3Rpb24iLCJlbnRlclByZXNzZWQiLCJzcHJlYWRTaGVldEtleUhhbmRsZXIiLCJjaGVja0tleSIsInByZXZlbnREZWZhdWx0IiwicHJldlJvdyIsImZpbmRBbmNlc3RvciIsImFjdGl2ZUVsZW1lbnQiLCJwcmV2IiwiZ2V0TmV4dEVsZW1lbnRJRCIsIm5leHRSb3ciLCJuZXh0IiwibmV3Um93Iiwic3BsaXQiLCJ0YWdOYW1lIiwidG9Mb3dlckNhc2UiLCJzcHJlYWRTaGVldE1hcmt1cCIsInJlbmRlckZpZWxkc1JvdyIsInJlbmRlckRhdGFUYWJsZSIsInJlbmRlck5vZGVDb2x1bW4iLCJvZmYiLCJmaWVsZEhlYWRlciIsInNob3dGaWVsZE1lbnUiLCJjc3MiLCJkYXRhUm93c01hcmt1cCIsInJlbmRlckRhdGFDZWxsIiwiZmllbGRDZWxsIiwibm9kZVJvd01hcmt1cCIsImRlbGV0ZUJ1dHRvbiIsImNvcHlCdXR0b24iLCJkcmFnSGFuZGxlIiwibm9kZUNvbnRlbnQiLCJpY29uTWFya3VwIiwiZGVwdGhBZGp1c3RtZW50Iiwid2lkdGhBZGp1c3RtZW50IiwiZXhwYW5kSWNvbiIsIm5vZGVJbnB1dCIsImluc2VydEFmdGVyIiwiaXRlbSIsImluc2VydEJlZm9yZU5vZGUiLCJpbnNlcnRBZnRlck5vZGUiLCJNSU5fTk9ERV9TSVpFIiwiTUFYX05PREVfU0laRSIsIlZFUlRJQ0FMX1ZJRVciLCJIT1JJWk9OVEFMX1ZJRVciLCJ1cGRhdGUiLCJyb3RhdGUiLCJkaXJlY3Rpb24iLCJob3Jpem9udGFsX3NwYWNpbmciLCJ2ZXJ0aWNhbF9zcGFjaW5nIiwiZGlhZ29uYWwiLCJwcm9qZWN0aW9uIiwidmlld2VySGVpZ2h0Iiwic2VsZWN0ZWROb2RlIiwiZHJhZ2dpbmdOb2RlIiwibWF4TGFiZWxMZW5ndGgiLCJtYXgiLCJ2aWV3ZXJXaWR0aCIsImRyYWdTdGFydGVkIiwic3ZnR3JvdXAiLCJ0cmFuc2xhdGUiLCJpbml0aWF0ZURyYWciLCJkb21Ob2RlIiwic29ydCIsImEiLCJiIiwibGlua3MiLCJub2RlUGF0aHMiLCJub2Rlc0V4aXQiLCJwYXJlbnRMaW5rIiwiZHkiLCJkeCIsInVwZGF0ZVRlbXBDb25uZWN0b3IiLCJ6b29tTGlzdGVuZXIiLCJiZWhhdmlvciIsInNjYWxlRXh0ZW50IiwiYmFzZVN2ZyIsImNhbGwiLCJkcmFnTGlzdGVuZXIiLCJkcmFnc3RhcnQiLCJkcmFnZW5kIiwiY2VudGVyTm9kZSIsImRlZmF1bHRQcmV2ZW50ZWQiLCJzb3VyY2UiLCJsZXZlbFdpZHRoIiwiY2hpbGRDb3VudCIsIm4iLCJuZXdIZWlnaHQiLCJyZXZlcnNlIiwibm9kZUVudGVyIiwib3ZlckNpcmNsZSIsIm91dENpcmNsZSIsImNvbXB1dGVOb2RlU2l6ZSIsIm5vZGVVcGRhdGUiLCJub2RlRXhpdCIsImV4aXQiLCJsaW5rIiwiaW5zZXJ0Iiwic291cmNlRXZlbnQiLCJub2RlU2l6ZSIsInNxcnQiXSwibWFwcGluZ3MiOiJBQUFBLFFBQVNBLGVBQWNDLEVBQU1DLEdBRTNCLEdBQUlELEVBQUtFLFVBQXFDLElBQXpCRixFQUFLRSxTQUFTQyxPQVluQyxDQUdFLElBQUksR0FGQUMsR0FBYyxFQUVWQyxFQUFJLEVBQUdBLEVBQUlMLEVBQUtFLFNBQVNDLE9BQVFFLElBRXZDRCxHQUFlTCxjQUFjQyxFQUFLRSxTQUFTRyxHQUFJSixFQVdqRCxPQVJJRCxHQUFLTSxTQUVQTixFQUFLTSxXQUdQTixFQUFLTSxPQUFPTCxHQUFTRyxFQUNyQkcsU0FBU0MsZUFBZVAsRUFBUUQsRUFBS1MsSUFBSUMsTUFBUU4sRUFFMUNBLEVBMUJQLE1BQUlKLEdBQUtNLFFBQVdOLEVBQUtNLE9BQU9MLEdBTXZCVSxXQUFXWCxFQUFLTSxPQUFPTCxJQUp2QjtBQ0FiLFlBRUEsSUFBSVcsUUFBU0EsVUFHYkEsUUFBT0MsS0FBUSxXQUdiLEdBQUlDLEdBQ0ZDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBa0JBQyxFQUVBQyxFQUNBQyxFQUNBQyxFQVlBQyxFQS9CQUMsRUFBWSxLQUdaQyxHQUFVQyxNQUFPLEVBQUdDLE9BQVEsR0FHNUJDLEdBQWNGLE1BQVEsS0FDbEJDLE9BQVMsS0FDVEUsYUFDQUMsSUFBTSxNQUVWQyxHQUFRQyxNQUFPQyxFQUFHLEVBQUdDLEVBQUcsR0FDcEJDLEtBQU9GLEVBQUcsRUFBR0MsRUFBRyxHQUNoQkUsTUFBT0gs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Z3JlZ2F0ZV9hbnkobm9kZSwgZmllbGQpXHJcbntcclxuICBpZighbm9kZS5jaGlsZHJlbiB8fCBub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMClcclxuICB7XHJcbiAgICBpZighbm9kZS52YWx1ZXMgfHwgIW5vZGUudmFsdWVzW2ZpZWxkXSlcclxuICAgIHtcclxuICAgICAgcmV0dXJuIDAuMDtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgIHtcclxuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQobm9kZS52YWx1ZXNbZmllbGRdKTtcclxuICAgIH1cclxuICB9XHJcbiAgZWxzZVxyXG4gIHtcclxuICAgIHZhciBjaGlsZHJlblN1bSA9IDAuMDtcclxuXHJcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKylcclxuICAgIHtcclxuICAgICAgY2hpbGRyZW5TdW0gKz0gYWdncmVnYXRlX2FueShub2RlLmNoaWxkcmVuW2ldLCBmaWVsZCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYoIW5vZGUudmFsdWVzKVxyXG4gICAge1xyXG4gICAgICBub2RlLnZhbHVlcyA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIG5vZGUudmFsdWVzW2ZpZWxkXSA9IGNoaWxkcmVuU3VtOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZSB0aGUgbW9kZWxcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGZpZWxkICsgbm9kZS5pZCkudmFsdWUgPSBjaGlsZHJlblN1bTsgICAgICAgICAvL3VwZGF0ZSB0aGUgdmlld1xyXG5cclxuICAgIHJldHVybiBjaGlsZHJlblN1bTtcclxuICB9XHJcbn0iLCIvKlxyXG5Db3B5cmlnaHQgKGMpIDIwMDgtMjAxMSwgd3d3LnJlZGlwcy5uZXQgQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuQ29kZSBsaWNlbnNlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2U6IGh0dHA6Ly93d3cucmVkaXBzLm5ldC9saWNlbnNlL1xyXG5odHRwOi8vd3d3LnJlZGlwcy5uZXQvamF2YXNjcmlwdC9kcmFnLWFuZC1kcm9wLXRhYmxlLWNvbnRlbnQvXHJcbiovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBSRURJUFMgPSBSRURJUFMgfHwge307ICAgICAgLy9jcmVhdGUgUkVESVBTIG5hbWVzcGFjZSAoaWYgaXMgbm90IGFscmVhZHkgZGVmaW5lZCBpbiBhbm90aGVyIFJFRElQUyBwYWNrYWdlKVxyXG5cclxuLy9SRURJUFMuZHJhZyBpcyBhIEphdmFTY3JpcHQgZHJhZyBhbmQgZHJvcCBsaWJyYXJ5IGZvY3VzZWQgb24gZHJhZ2dpbmcgdGFibGUgY29udGVudCAoRElWIGVsZW1lbnRzKSBhbmQgdGFibGUgcm93cy5cclxuUkVESVBTLmRyYWcgPSAoZnVuY3Rpb24gKClcclxue1xyXG4gICAgLy8gbWV0aG9kc1xyXG4gIHZhciBpbml0LCAgICAgICAgICAgLy8gaW5pdGlhbGl6YXRpb25cclxuICAgIGVuYWJsZURyYWcsICAgICAgICAgLy8gbWV0aG9kIGF0dGFjaGVzIC8gZGV0YWNoZXMgb25tb3VzZWRvd24gYW5kIG9uc2Nyb2xsIGV2ZW50IGhhbmRsZXJzIGZvciBESVYgZWxlbWVudHNcclxuICAgIGVuYWJsZURpdnMsXHJcbiAgICBoYW5kbGVyT25Nb3VzZURvd24sICAgICAvLyBvbm1vdXNlZG93biBoYW5kbGVyXHJcbiAgICBoYW5kbGVyT25Nb3VzZVVwLCAgICAgLy8gb25tb3VzZXVwIGhhbmRsZXJcclxuICAgIGhhbmRsZXJPbk1vdXNlTW92ZSwgICAgIC8vIG9ubW91c2Vtb3ZlIGhhbmRsZXIgZm9yIHRoZSBkb2N1bWVudCBsZXZlbFxyXG4gICAgZWxlbWVudERyb3AsICAgICAgICAvLyBkcm9wIGVsZW1lbnQgdG8gdGhlIHRhYmxlIGNlbGxcclxuICAgIHJlc2V0U3R5bGVzLCAgICAgICAgLy8gcmVzZXQgb2JqZWN0IHN0eWxlcyBhZnRlciBlbGVtZW50IGlzIGRyb3BwZWRcclxuICAgIHJlZ2lzdGVyRXZlbnRzLCAgICAgICAvLyByZWdpc3RlciBldmVudCBsaXN0ZW5lcnMgZm9yIERJViBlbGVtZW50XHJcbiAgICBjZWxsQ2hhbmdlZCwgICAgICAgIC8vIHByaXZhdGUgbWV0aG9kIGNhbGxlZCBmcm9tIGhhbmRsZXJPbk1vdXNlTW92ZSgpLCBhdXRvU2Nyb2xsWCgpLCBhdXRvU2Nyb2xsWSgpXHJcbiAgICBoYW5kbGVyT25SZXNpemUsICAgICAgLy8gb25yZXNpemUgd2luZG93IGV2ZW50IGhhbmRsZXJcclxuICAgIHNldFRhYmxlUm93Q29sdW1uLCAgICAgIC8vIGZ1bmN0aW9uIHNldHMgY3VycmVudCB0YWJsZSwgcm93IGFuZCBjZWxsXHJcbiAgICBzZXRQb3NpdGlvbiwgICAgICAgIC8vIGZ1bmN0aW9uIHNldHMgY29sb3IgZm9yIHRoZSBjdXJyZW50IHRhYmxlIGNlbGwgYW5kIHJlbWVtYmVycyBwcmV2aW91cyBwb3NpdGlvbiBhbmQgY29sb3JcclxuICAgIHNldFRkU3R5bGUsICAgICAgICAgLy8gbWV0aG9kIHNldHMgYmFja2dyb3VuZCBjb2xvciBhbmQgYm9yZGVyIHN0eWxlcyBmb3IgVERcclxuICAgIGdldFRkU3R5bGUsICAgICAgICAgLy8gbWV0aG9kIHJldHVybnMgb2JqZWN0IGNvbnRhaW5pbmcgYmFja2dyb3VuZCBjb2xvciBhbmQgYm9yZGVyIHN0eWxlcyBmb3IgVERcclxuICAgIGJveE9mZnNldCwgICAgICAgICAgLy8gY2FsY3VsYXRlcyBvYmplY3QgKGJveCkgb2Zmc2V0ICh0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQpXHJcbiAgICBjYWxjdWxhdGVDZWxscywgICAgICAgLy8gY2FsY3VsYXRlcyB0YWJsZSBjb2x1bW5zIGFuZCByb3cgb2Zmc2V0cyAoY2VsbHMgZGltZW5zaW9ucylcclxuICAgIGdldFNjcm9sbFBvc2l0aW9uLCAgICAgIC8vIHJldHVybnMgc2Nyb2xsIHBvc2l0aW9ucyBpbiBhcnJheVxyXG4gICAgYXV0b1Njcm9sbFgsICAgICAgICAvLyBob3Jpem9udGFsIGF1dG8gc2Nyb2xsIGZ1bmN0aW9uXHJcbiAgICBhdXRvU2Nyb2xsWSwgICAgICAgIC8vIHZlcnRpY2FsIGF1dG8gc2Nyb2xsIGZ1bmN0aW9uXHJcbiAgICBjb3B5UHJvcGVydGllcywgICAgICAgLy8gbWV0aG9kIGNvcGllcyBjdXN0b20gcHJvcGVydGllcyBmcm9tIHNvdXJjZSBlbGVtZW50IHRvIHRoZSBjbG9uZWQgZWxlbWVudC5cclxuICAgIGNsb25lTGltaXQsICAgICAgICAgLy8gY2xvbmUgbGltaXQgKGFmdGVyIGNsb25pbmcgb2JqZWN0LCB0YWtlIGNhcmUgYWJvdXQgY2xpbWl0MV9YIG9yIGNsaW1pdDJfWCBjbGFzc25hbWVzKVxyXG4gICAgZ2V0U3R5bGUsICAgICAgICAgLy8gbWV0aG9kIHJldHVybnMgc3R5bGUgdmFsdWUgb2YgcmVxdWVzdGVkIG9iamVjdCBhbmQgc3R5bGUgbmFtZVxyXG4gICAgZmluZFBhcmVudCwgICAgICAgICAvLyBtZXRob2QgcmV0dXJucyBhIHJlZmVyZW5jZSBvZiB0aGUgcmVxdWlyZWQgcGFyZW50IGVsZW1lbnRcclxuICAgIHJvd09wYWNpdHksICAgICAgICAgLy8gbWV0aG9kIHNldHMgb3BhY2l0eSB0byB0YWJsZSByb3cgKGVsLCBvcGFjaXR5LCBjb2xvcilcclxuICAgIHJvd0Nsb25lLCAgICAgICAgIC8vIGNsb25lIHRhYmxlIHJvdyAtIGlucHV0IHBhcmFtZXRlciBpcyBESVYgd2l0aCBjbGFzcyBuYW1lIFwicmVkaXBzLXJvd1wiIC0+IERJViBjbGFzcz1cInJlZGlwcy1kcmFnIHJlZGlwcy1yb3dcIlxyXG4gICAgcm93RHJvcCwgICAgICAgICAgLy8gZnVuY3Rpb24gZHJvcHMgKGRlbGV0ZSBvbGQgJiBpbnNlcnQgbmV3KSB0YWJsZSByb3cgKGlucHV0IHBhcmFtZXRlcnMgYXJlIGN1cnJlbnQgdGFibGUgYW5kIHJvdylcclxuICAgIG5vcm1hbGl6ZSwgICAgICAgICAgLy8gcHJpdmF0ZSBtZXRob2QgcmV0dXJucyBub3JtYWxpemVkIHNwYWNlcyBmcm9tIGlucHV0IHN0cmluZ1xyXG5cclxuICAgIC8vIHByaXZhdGUgcGFyYW1ldGVyc1xyXG4gICAgb2JqTWFyZ2luID0gbnVsbCwgICAgIC8vIHNwYWNlIGZyb20gY2xpY2tlZCBwb2ludCB0byB0aGUgb2JqZWN0IGJvdW5kcyAodG9wLCByaWdodCwgYm90dG9tLCBsZWZ0KVxyXG5cclxuICAgIC8vIHdpbmRvdyB3aWR0aCBhbmQgaGVpZ2h0IChwYXJhbWV0ZXJzIGFyZSBzZXQgaW4gb25sb2FkIGFuZCBvbnJlc2l6ZSBldmVudCBoYW5kbGVyKSwganVzdCBmb3IgYSBub3RlOiB3aW5kb3cgYW5kIFdpbmRvdyBpcyByZXNlcnZlZCB3b3JkIGluIEpTIHNvIEkgbmFtZWQgdmFyaWFibGUgXCJzY3JlZW5cIilcclxuICAgIHNjcmVlbiA9IHt3aWR0aDogMCwgaGVpZ2h0OiAwfSxcclxuXHJcbiAgICAvLyBkZWZpbmUgc2Nyb2xsIG9iamVjdCB3aXRoIGNvbnRhaW5lZCBwcm9wZXJ0aWVzICh0aGlzIGlzIHByaXZhdGUgcHJvcGVydHkpXHJcbiAgICBzY3JvbGxEYXRhID0ge3dpZHRoIDogbnVsbCwgLy8gc2Nyb2xsIHdpZHRoIG9mIHRoZSB3aW5kb3cgKGl0IGlzIHVzdWFsbHkgZ3JlYXRlciB0aGVuIHdpbmRvdylcclxuICAgICAgICBoZWlnaHQgOiBudWxsLCAgICAvLyBzY3JvbGwgaGVpZ2h0IG9mIHRoZSB3aW5kb3cgKGl0IGlzIHVzdWFsbHkgZ3JlYXRlciB0aGVuIHdpbmRvdylcclxuICAgICAgICBjb250YWluZXIgOiBbXSwgICAvLyBzY3JvbGxhYmxlIGNvbnRhaW5lciBhcmVhcyAoY29udGFpbnMgYXV0b3Njcm9sbCBhcmVhcywgcmVmZXJlbmNlIHRvIHRoZSBjb250YWluZXIgYW5kIHNjcm9sbCBkaXJlY3Rpb24pXHJcbiAgICAgICAgb2JqIDogbnVsbH0sICAgIC8vIHNjcm9sbCBvYmplY3QgKG5lZWRlZCBpbiBhdXRvc2Nyb2xsIGZvciByZWN1cnNpdmUgY2FsbHMpXHJcblxyXG4gICAgZWRnZSA9IHtwYWdlOiB7eDogMCwgeTogMH0sIC8vIGF1dG9zY3JvbGwgYm91bmQgdmFsdWVzIGZvciBwYWdlIGFuZCBkaXYgYXMgc2Nyb2xsYWJsZSBjb250YWluZXJcclxuICAgICAgICBkaXY6ICB7eDogMCwgeTogMH0sIC8vIGNsb3NlciB0byB0aGUgZWRnZSwgZmFzdGVyIHNjcm9sbGluZ1xyXG4gICAgICAgIGZsYWc6IHt4OiAwLCB5OiAwfX0sLy8gZmxhZ3MgYXJlIG5lZWRlZCB0byBwcmV2ZW50IG11bHRpcGxlIGNhbGxzIG9mIGF1dG9TY3JvbGxYIGFuZCBhdXRvU2Nyb2xsWSBmcm9tIG9ubW91c2Vtb3ZlIGV2ZW50IGhhbmRsZXJcclxuXHJcbiAgICBiZ1N0eWxlT2xkLCAgICAgICAgIC8vIChvYmplY3QpIG9sZCB0ZCBzdHlsZXMgKGJhY2tncm91bmQgY29sb3IgYW5kIGJvcmRlciBzdHlsZXMpXHJcblxyXG4gICAgdGFibGUsICAgICAgICAvLyB0YWJsZSBvZmZzZXRzIGFuZCByb3cgb2Zmc2V0cyAoaW5pdGlhbGl6ZWQgaW4gb25sb2FkIGV2ZW50KVxyXG4gICAgbW92ZWQsICAgICAgICAgICAgLy8gKGJvb2xlYW4pIHRydWUgaWYgZWxlbWVudCBpcyBtb3ZlZFxyXG4gICAgY2xvbmVkLCAgICAgICAgICAgLy8gKGJvb2xlYW4pIHRydWUgaWYgZWxlbWVudCBpcyBjbG9uZWRcclxuICAgIGNsb25lZElkID0gW10sICAgICAgICAvLyBuZWVkZWQgZm9yIGluY3JlbWVudCBJRCBvZiBjbG9uZWQgZWxlbWVudHNcclxuICAgIGN1cnJlbnRDZWxsID0gW10sICAgICAvLyBjdXJyZW50IGNlbGwgYm91bmRzICh0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQpIGFuZCBcImNvbnRhaW5UYWJsZVwiIGZsYWcgZm9yIG5lc3RlZCB0YWJsZXNcclxuICAgIGRyYWdDb250YWluZXIgPSBudWxsLCAgIC8vIGRyYWcgY29udGFpbmVyIHJlZmVyZW5jZVxyXG4gICAgZGl2Qm94ID0gbnVsbCwgICAgICAgIC8vIGRpdiBkcmFnIGJveDogdG9wLCByaWdodCwgYm90dG9tIGFuZCBsZWZ0IG1hcmdpbiAoZGVjcmVhc2UgbnVtYmVyIGNhbGxzIG9mIHNldFRhYmxlUm93Q29sdW1uKVxyXG4gICAgcG9pbnRlciA9IHt4OiAwLCB5OiAwfSwgICAvLyBtb3VzZSBwb2ludGVyIHBvc2l0aW9uICh0aGlzIHByb3BlcnRpZXMgYXJlIHNldCBpbiBoYW5kbGVyT25Nb3VzZU1vdmUoKSAtIG5lZWRlZCBmb3IgYXV0b3Njcm9sbClcclxuICAgIHRocmVzaG9sZCA9IHt4OiAwLCAgICAgIC8vIGluaXRpYWwgeCwgeSBwb3NpdGlvbiBvZiBtb3VzZSBwb2ludGVyXHJcbiAgICAgICAgICB5OiAwLFxyXG4gICAgICAgICAgdmFsdWU6IDcsICAgLy8gdGhyZXNob2xkIGRpc3RhbmNlIHZhbHVlXHJcbiAgICAgICAgICBmbGFnOiBmYWxzZX0sIC8vIHRocmVzaG9sZCBmbGFnXHJcbiAgICBzaGlmdEtleSA9IGZhbHNlLCAgICAgLy8gKGJvb2xlYW4pIHRydWUgaWYgc2hpZnQga2V5IGlzIHByZXNzZWQgKHNldCBpbiBoYW5kbGVyX21vdXNlZG93bilcclxuICAgIGNsb25lQ2xhc3MgPSBmYWxzZSwgICAgIC8vIChib29sZWFuKSB0cnVlIGlmIGNsaWNrZWQgZWxlbWVudCBjb250YWlucyBjbG9uZSBpbiBjbGFzcyBuYW1lIChzZXQgaW4gaGFuZGxlcl9tb3VzZWRvd24pXHJcbiAgICB3aW5kb3dTY3JvbGxQb3NpdGlvbiwgICAvLyAoYXJyYXkpIHRvcCBhbmQgbGVmdCB3aW5kb3cgb2Zmc2V0IChzZXQgaW4gY2FsY3VsYXRlQ2VsbHMgYW5kIHVzZWQgaW4gYm94T2Zmc2V0KVxyXG5cclxuICAgIC8vIHNlbGVjdGVkLCBwcmV2aW91cyBhbmQgc291cmNlIHJvdyBhbmQgY2VsbCAocHJpdmF0ZSBwYXJhbWV0ZXJzIHRvbylcclxuICAgIHJvdyA9IG51bGwsXHJcbiAgICByb3dfb2xkID0gbnVsbCxcclxuICAgIHJvd19zb3VyY2UgPSBudWxsLFxyXG4gICAgY2VsbCA9IG51bGwsXHJcbiAgICBjZWxsX29sZCA9IG51bGwsXHJcbiAgICBjZWxsX3NvdXJjZSA9IG51bGwsXHJcblxyXG4gICAgLy8gdmFyaWFibGVzIGluIHRoZSBwcml2YXRlIHNjb3BlIHJldmVhbGVkIGFzIHB1YmxpYyAoc2VlIGluaXQoKSBtZXRob2QpXHJcbiAgICBvYmogPSBmYWxzZSwgICAgICAgIC8vIChvYmplY3QpIG1vdmVkIG9iamVjdFxyXG4gICAgb2JqT2xkID0gZmFsc2UsICAgICAgIC8vIChvYmplY3QpIHByZXZpb3VzbHkgbW92ZWQgb2JqZWN0IChiZWZvcmUgY2xpY2tlZCBvciBjbG9uZWQpXHJcbiAgICBob3ZlciA9IHtjb2xvclRkOiAnI0ZGQ0ZBRScsIGNvbG9yVHI6ICcjOUJCM0RBJ30sXHJcbiAgICBzY3JvbGwgPSB7ZW5hYmxlIDogdHJ1ZSwgIC8vIChib29sZWFuKSBlbmFibGUvZGlzYWJsZSBhdXRvc2Nyb2xsIGZ1bmN0aW9uIChkZWZhdWx0IGlzIHRydWUpXHJcbiAgICAgICAgYm91bmQgOiAyNSwgICAgIC8vIChpbnRlZ2VyKSBib3VuZCB3aWR0aCBmb3IgYXV0b3Njcm9sbFxyXG4gICAgICAgIHNwZWVkIDogMjB9LCAgICAvLyAoaW50ZWdlcikgc2Nyb2xsIHNwZWVkIGluIG1pbGxpc2Vjb25kc1xyXG4gICAgc3R5bGUgPSB7Ly9ib3JkZXJFbmFibGVkIDogJ3NvbGlkJywgLy8gKHN0cmluZykgYm9yZGVyIHN0eWxlIGZvciBlbmFibGVkIGVsZW1lbnRzXHJcbiAgICAgICAgYm9yZGVyRGlzYWJsZWQgOiAnZG90dGVkJywgIC8vIChzdHJpbmcpIGJvcmRlciBzdHlsZSBmb3IgZGlzYWJsZWQgZWxlbWVudHNcclxuICAgICAgICBvcGFjaXR5RGlzYWJsZWQgOiAnJywgICAvLyAoaW50ZWdlcikgc2V0IG9wYWNpdHkgZm9yIGRpc2FibGVkIGVsZW1lbnRzXHJcbiAgICAgICAgcm93RW1wdHlDb2xvciA6ICd3aGl0ZSd9LCAvLyAoc3RyaW5nKSBjb2xvciBvZiBlbXB0eSByb3dcclxuICAgIHRkID0ge30sICAgICAgICAgICAgLy8gKG9iamVjdCkgY29udGFpbnMgcmVmZXJlbmNlIHRvIHNvdXJjZSAoc2V0IGluIG9ubW91c2Vkb3duKSwgY3VycmVudCAoc2V0IGluIG9ubW91c2Vtb3ZlIGFuZCBhdXRvc2Nyb2xsKSwgcHJldmlvdXMgKHNldCBpbiBvbm1vdXNlbW92ZSBhbmQgYXV0b3Njcm9sbCkgYW5kIHRhcmdldCBjZWxsIChzZXQgaW4gb25tb3VzZXVwKVxyXG4gICAgY2xvbmUgPSB7a2V5RGl2IDogZmFsc2UsICAgIC8vIChib29sZWFuKSBpZiB0cnVlLCBlbGVtZW50cyBjb3VsZCBiZSBjbG9uZWQgd2l0aCBwcmVzc2VkIFNISUZUIGtleVxyXG4gICAgICAgIGtleVJvdyA6IGZhbHNlLCAgICAgLy8gKGJvb2xlYW4pIGlmIHRydWUsIHJvd3MgY291bGQgYmUgY2xvbmVkIHdpdGggcHJlc3NlZCBTSElGVCBrZXlcclxuICAgICAgICBzZW5kQmFjayA6IGZhbHNlLCAgIC8vIChib29sZWFuKSBpZiB0cnVlLCB0aGVuIGNsb25lZCBlbGVtZW50IGNhbiBiZSByZXR1cm5lZCB0byBpdHMgc291cmNlXHJcbiAgICAgICAgZHJvcCA6IGZhbHNlfSwgICAgICAvLyAoYm9vbGVhbikgaWYgdHJ1ZSwgdGhlbiBjbG9uZWQgZWxlbWVudCB3aWxsIGJlIGFsd2F5cyBkcm9wcGVkIHRvIHRoZSB0YWJsZSBubyBtYXR0ZXIgaWYgZHJvcHBlZCBvdXRzaWRlIG9mIHRoZSB0YWJsZVxyXG4gICAgXHJcbiAgICBldmVudCA9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKG9iamVjdCkgZXZlbnQgaGFuZGxlcnNcclxuICAgIHtcclxuICAgICAgY2xvbmVkIDogZnVuY3Rpb24gKCkge30sXHJcbiAgICAgIGNsb25lZERyb3BwZWQgOiBmdW5jdGlvbiAoKSB7fSxcclxuICAgICAgY2xvbmVkRW5kMSA6IGZ1bmN0aW9uICgpIHt9LFxyXG4gICAgICBjbG9uZWRFbmQyIDogZnVuY3Rpb24gKCkge30sXHJcbiAgICAgIGRyb3BwZWQgOiBmdW5jdGlvbiAoKSB7fSxcclxuICAgICAgZHJvcHBlZEJlZm9yZSA6IGZ1bmN0aW9uICgpIHt9LFxyXG4gICAgICBmaW5pc2ggOiBmdW5jdGlvbiAoKSB7fSxcclxuICAgICAgbm90Q2xvbmVkIDogZnVuY3Rpb24gKCkge30sXHJcbiAgICAgIG5vdE1vdmVkIDogZnVuY3Rpb24gKCkge30sXHJcbiAgICAgIHJvd0NoYW5nZWQgOiBmdW5jdGlvbiAoKSB7fSxcclxuICAgICAgcm93Q2xpY2tlZCA6IGZ1bmN0aW9uICgpIHt9LFxyXG4gICAgICByb3dDbG9uZWQgOiBmdW5jdGlvbiAoKSB7fSxcclxuICAgICAgcm93RHJvcHBlZCA6IGZ1bmN0aW9uICgpIHt9LFxyXG4gICAgICByb3dEcm9wcGVkQmVmb3JlIDogZnVuY3Rpb24gKCkge30sXHJcbiAgICAgIHJvd0Ryb3BwZWRTb3VyY2UgOiBmdW5jdGlvbiAoKSB7fSxcclxuICAgICAgcm93TW92ZWQgOiBmdW5jdGlvbiAoKSB7fSxcclxuICAgICAgcm93Tm90Q2xvbmVkIDogZnVuY3Rpb24gKCkge30sXHJcbiAgICAgIHJvd05vdE1vdmVkIDogZnVuY3Rpb24gKCkge31cclxuICAgIH07XHJcblxyXG5cclxuICAvKipcclxuICAgKiBEcmFnIGNvbnRhaW5lciBpbml0aWFsaXphdGlvbi4gSXQgc2hvdWxkIGJlIGNhbGxlZCBhdCBsZWFzdCBvbmNlIGFuZCBpdCdzIHBvc3NpYmxlIHRvIGNhbGwgYSBtZXRob2QgbWFueSB0aW1lcy4gRXZlcnkgcGFnZSBzaG91bGQgaGF2ZSBhdCBsZWFzdCBvbmUgZHJhZyBjb250YWluZXIuXHJcbiAgICogSWYgUkVESVBTLmRyYWcuaW5pdCgpIGlzIGNhbGxlZCB3aXRob3V0IGlucHV0IHBhcmFtZXRlciwgbGlicmFyeSB3aWxsIHNlYXJjaCBmb3IgZHJhZyBjb250YWluZXIgd2l0aCBpZD1cInJlZGlwcy1kcmFnXCIuXHJcbiAgICogT25seSB0YWJsZXMgaW5zaWRlIGRyYWcgY29udGFpbmVyIHdpbGwgYmUgc2Nhbm5lZC4gSXQgaXMgcG9zc2libGUgdG8gaGF2ZSBzZXZlcmFsIGRyYWcgY29udGFpbmVycyB0b3RhbHkgc2VwYXJhdGVkIChlbGVtZW50cyBmcm9tIG9uZSBjb250YWluZXIgd2lsbCBub3QgYmUgdmlzaWJsZSB0byBvdGhlciBkcmFnIGNvbnRhaW5lcnMpLlxyXG4gICAqIFwiaW5pdFwiIG1ldGhvZCBjYWxscyBlbmFibGVEcmFnLiBJZiB0YWJsZXMgYXJlIGdlbmVyYXRlZCBkeW5hbWljYWxseSB0aGVuIFJFRElQUy5pbml0KCkgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgdG8gc2V0IGN1c3RvbSBwcm9wZXJ0aWVzIHRvIHRhYmxlcyAodGFibGUgaW5pdGlhbGl6YXRpb24pLlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbZGNdIERyYWcgY29udGFpbmVyIElkIChkZWZhdWx0IGlzIFwicmVkaXBzLWRyYWdcIikuXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiAvLyBpbml0IGRyYWcgY29udGFpbmVyICh3aXRoIGRlZmF1bHQgaWQ9XCJyZWRpcHMtZHJhZ1wiKVxyXG4gICAqIFJFRElQUy5kcmFnLmluaXQoKTtcclxuICAgKlxyXG4gICAqIC8vIGluaXQgZHJhZyBjb250YWluZXIgd2l0aCBpZD1cIm15LWRyYWcxXCJcclxuICAgKiBSRURJUFMuZHJhZy5pbml0KCdteS1kcmFnMScpO1xyXG4gICAqL1xyXG4gIGluaXQgPSBmdW5jdGlvbiAoKVxyXG4gIHtcclxuICAgIGRyYWdDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVkaXBzLWRyYWcnKTsgICAgICAgICAgIC8vIHNldCByZWZlcmVuY2UgdG8gdGhlIGRyYWcgY29udGFpbmVyXHJcblxyXG4gICAgd2luZG93U2Nyb2xsUG9zaXRpb24gPSBnZXRTY3JvbGxQb3NpdGlvbigpOyAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGluaXRpYWwgd2luZG93IHNjcm9sbCBwb3NpdGlvblxyXG5cclxuICAgIC8vIGFwcGVuZCBESVYgaWQ9XCJyZWRpcHNfY2xvbmVcIiBpZiBESVYgZG9lc24ndCBleGlzdCAobmVlZGVkIGZvciBjbG9uaW5nIERJViBlbGVtZW50cylcclxuICAgIC8vIGlmIGF1dG9tYXRpYyBjcmVhdGlvbiBpc24ndCBwcmVjaXNlIGVub3VnaCwgdXNlciBjYW4gbWFudWFsbHkgY3JlYXRlIGFuZCBwbGFjZSBlbGVtZW50IHdpdGggaWQ9XCJyZWRpcHNfY2xvbmVcIiB0byBwcmV2ZW50IHdpbmRvdyBleHBhbmRpbmcgKHRoZW4gdGhpcyBjb2RlIHdpbGwgYmUgc2tpcHBlZClcclxuICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlZGlwc19jbG9uZScpKVxyXG4gICAge1xyXG4gICAgICB2YXIgcmVkaXBzQ2xvbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgcmVkaXBzQ2xvbmUuaWQgPSAncmVkaXBzX2Nsb25lJztcclxuICAgICAgcmVkaXBzQ2xvbmUuc3R5bGUud2lkdGggPSByZWRpcHNDbG9uZS5zdHlsZS5oZWlnaHQgPSAnMXB4JztcclxuICAgICAgZHJhZ0NvbnRhaW5lci5hcHBlbmRDaGlsZChyZWRpcHNDbG9uZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZW5hYmxlRHJhZygnaW5pdCcsICcucmVkaXBzLWRyYWcnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXR0YWNoIG9ubW91c2Vkb3duIGV2ZW50IGhhbmRsZXIgdG8gdGhlIERJViBlbGVtZW50cywgYXR0YWNoIG9uc2Nyb2xsPSdjYWxjdWxhdGVDZWxscycgZm9yIERJViBlbGVtZW50cyB3aXRoICdzY3JvbGwnIGluIGNsYXNzIG5hbWUgKHByZXBhcmUgc2Nyb2xsYWJsZSBjb250YWluZXIgYXJlYXMpXHJcbiAgICB0YWJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0cmVlVGFibGUnKTtcclxuICAgIHRhYmxlLnJlZGlwcyA9IHt9O1xyXG5cclxuICAgIGhhbmRsZXJPblJlc2l6ZSgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBpbml0aWFsIHdpbmRvdyB3aWR0aC9oZWlnaHQsIHNjcm9sbCB3aWR0aC9oZWlnaHQgYW5kIGRlZmluZSBvbnJlc2l6ZSBldmVudCBoYW5kbGVyLCBvbnJlc2l6ZSBldmVudCBoYW5kbGVyIGNhbGxzIGNhbGN1bGF0ZSBjb2x1bW5zXHJcbiAgICBSRURJUFMuZXZlbnQuYWRkKHdpbmRvdywgJ3Jlc2l6ZScsIGhhbmRsZXJPblJlc2l6ZSk7XHJcbiAgICBSRURJUFMuZXZlbnQuYWRkKHdpbmRvdywgJ3Njcm9sbCcsIGNhbGN1bGF0ZUNlbGxzKTsgICAgICAgICAgICAgICAvLyBhdHRhY2ggb25zY3JvbGwgZXZlbnQgdG8gdGhlIHdpbmRvdyAobmVlZGVkIGZvciByZWNhbGN1bGF0aW5nIHRhYmxlIGNlbGxzIHBvc2l0aW9ucylcclxuICB9O1xyXG5cclxuXHJcbiAgLy8gb25tb3VzZWRvd24gZXZlbnQgaGFuZGxlci4gIFRoaXMgZXZlbnQgaGFuZGxlciBpcyBhdHRhY2hlZCB0byBldmVyeSBESVYgZWxlbWVudCBpbiBkcmFnIGNvbnRhaW5lciAocGxlYXNlIHNlZSBcImVuYWJsZURyYWdcIikuXHJcbiAgaGFuZGxlck9uTW91c2VEb3duID0gZnVuY3Rpb24gKGUpXHJcbiAge1xyXG4gICAgdmFyIGV2dCA9IGUgfHwgd2luZG93LmV2ZW50OyAgICAgICAgICAvLyBkZWZpbmUgZXZlbnQgKGNyb3NzIGJyb3dzZXIpXHJcbiAgICB2YXIgb2Zmc2V0OyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9iamVjdCBvZmZzZXRcclxuICAgIHZhciBwb3NpdGlvbjsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcG9zaXRpb24gb2YgdGFibGUgb3IgY29udGFpbmVyIGJveCBvZiB0YWJsZSAoaWYgaGFzIHBvc2l0aW9uOmZpeGVkIHRoZW4gZXhjbHVkZSBzY3JvbGwgb2Zmc2V0KVxyXG4gICAgdmFyIFgsIFk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBYIGFuZCBZIHBvc2l0aW9uIG9mIG1vdXNlIHBvaW50ZXJcclxuXHJcbiAgICBldnQuY2FuY2VsQnViYmxlID0gdHJ1ZTsgICAgICAgICAgICAgIC8vIHN0b3AgZXZlbnQgcHJvcGFnYXRpb24gKG9ubHkgZmlyc3QgY2xpY2tlZCBlbGVtZW50IHdpbGwgcmVnaXN0ZXIgb25tb3VzZWRvd24gZXZlbnQpLCBuZWVkZWQgaW4gY2FzZSBvZiBwbGFjaW5nIHRhYmxlIGluc2lkZSBvZiA8ZGl2IGNsYXNzPVwicmVkaXBzLWRyYWdcIj4gKGFmdGVyIGVsZW1lbnQgd2FzIGRyb3BwZWQgdG8gdGhpcyB0YWJsZSBpdCBjb3VsZG4ndCBiZSBtb3ZlZCBvdXQgYW55IG1vcmUgLSB0YWJsZSBhbmQgZWxlbWVudCBtb3ZlZCB0b2dldGhlciBiZWNhdXNlIHRhYmxlIGNhcHR1cmVzIG1vdXNlZG93biBldmVudCBhbHNvIGluIGJ1YmJsaW5nIHByb2NlcylcclxuICAgIGlmIChldnQuc3RvcFByb3BhZ2F0aW9uKVxyXG4gICAge1xyXG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2hpZnRLZXkgPSBldnQuc2hpZnRLZXk7ICAgICAgICAgICAgICAvLyBzZXQgdHJ1ZSBvciBmYWxzZSBpZiBzaGlmdCBrZXkgaXMgcHJlc3NlZFxyXG5cclxuICAgIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRleHQgc2VsZWN0aW9uIChDaHJvbWUsIEZGLCBPcGVyYSwgU2FmYXJpKVxyXG4gICAge1xyXG4gICAgICB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24gJiYgZG9jdW1lbnQuc2VsZWN0aW9uLnR5cGUgPT09IFwiVGV4dFwiKSAgLy8gSUU4XHJcbiAgICB7XHJcbiAgICAgIHRyeSB7IGRvY3VtZW50LnNlbGVjdGlvbi5lbXB0eSgpOyB9IGNhdGNoIChlcnJvcikgeyB9ICAgICAgICAgICAgIC8vIGlnbm9yZSBlcnJvciB0byBhcyBhIHdvcmthcm91bmQgZm9yIGJ1ZyBpbiBJRThcclxuICAgIH1cclxuXHJcbiAgICBYID0gcG9pbnRlci54ID0gZXZ0LmNsaWVudFg7XHJcbiAgICBZID0gcG9pbnRlci55ID0gZXZ0LmNsaWVudFk7XHJcblxyXG4gICAgdGhyZXNob2xkLnggPSBYOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgaW5pdGlhbCB0aHJlc2hvbGQgcG9zaXRpb24gKG5lZWRlZCBmb3IgY2FsY3VsYXRpbmcgZGlzdGFuY2UpXHJcbiAgICB0aHJlc2hvbGQueSA9IFk7XHJcbiAgICB0aHJlc2hvbGQuZmxhZyA9IGZhbHNlO1xyXG5cclxuICAgIFJFRElQUy5kcmFnLm9iak9sZCA9IG9iak9sZCA9IG9iaiB8fCB0aGlzOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtZW1iZXIgcHJldmlvdXMgb2JqZWN0IGlmIGRlZmluZWQgb3Igc2V0IHRvIHRoZSBjbGlja2VkIG9iamVjdFxyXG4gICAgUkVESVBTLmRyYWcub2JqID0gb2JqID0gdGhpczsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgcmVmZXJlbmNlIHRvIHRoZSBjbGlja2VkIG9iamVjdFxyXG5cclxuICAgIGNsb25lQ2xhc3MgPSBvYmouY2xhc3NOYW1lLmluZGV4T2YoJ3JlZGlwcy1jbG9uZScpID4gLTE7ICAgICAgICAgICAgLy8gc2V0IHRydWUgb3IgZmFsc2UgaWYgY2xpY2tlZCBlbGVtZW50IGNvbnRhaW5zIFwicmVkaXBzLWNsb25lXCIgY2xhc3MgbmFtZSAobmVlZGVkIGZvciBjbG9uZSBlbGVtZW50IGFuZCBjbG9uZSB0YWJsZSByb3cpXHJcblxyXG4gICAgUkVESVBTLmRyYWcub2JqID0gb2JqID0gcm93Q2xvbmUob2JqKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBqdXN0IHJldHVybiByZWZlcmVuY2Ugb2YgdGhlIGN1cnJlbnQgcm93IChkbyBub3QgY2xvbmUpXHJcblxyXG4gICAgY2FsY3VsYXRlQ2VsbHMoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdXNlciBoYXMgdXNlZCBhIG1vdXNlIGV2ZW50IHRvIGluY3JlYXNlIHRoZSBkaW1lbnNpb25zIG9mIHRoZSB0YWJsZSAtIGNhbGwgY2FsY3VsYXRlQ2VsbHMoKVxyXG5cclxuICAgIHJvdyA9IGNlbGwgPSBudWxsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzZXQgcm93IGFuZCBjZWxsIGluZGV4ZXMgKG5lZWRlZCBpbiBjYXNlIG9mIGVuYWJsZSAvIGRpc2FibGUgdGFibGVzKVxyXG4gICAgc2V0VGFibGVSb3dDb2x1bW4oKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgY3VycmVudCB0YWJsZSwgcm93IGFuZCBjZWxsIGFuZCByZW1lbWJlciBzb3VyY2UgcG9zaXRpb24gKG9sZCBwb3NpdGlvbiBpcyBpbml0aWFsbHkgdGhlIHNhbWUgYXMgc291cmNlIHBvc2l0aW9uKVxyXG4gICAgcm93X3NvdXJjZSA9IHJvd19vbGQgPSByb3c7XHJcbiAgICBjZWxsX3NvdXJjZSA9IGNlbGxfb2xkID0gY2VsbDtcclxuXHJcbiAgICBSRURJUFMuZHJhZy5ldmVudC5yb3dDbGlja2VkKHRkLmN1cnJlbnQpO1xyXG5cclxuICAgIC8vIGlmIHN0YXJ0IHBvc2l0aW9uIGNhbm5vdCBiZSBkZWZpbmVkIHRoZW4gdXNlciBwcm9iYWJseSBjbGlja2VkIG9uIGVsZW1lbnQgdGhhdCBiZWxvbmdzIHRvIHRoZSBkaXNhYmxlZCB0YWJsZSAob3Igc29tZXRoaW5nIGVsc2UgaGFwcGVuZWQgdGhhdCB3YXMgbm90IHN1cHBvc2VkIHRvIGhhcHBlbiAtIGV2ZXJ5IGVsZW1lbnQgc2hvdWxkIGJlbG9uZyB0byB0aGUgdGFibGUpIHRoaXMgY29kZSBtdXN0IGdvIGFmdGVyIGV4ZWN1dGlvbiBvZiBldmVudCBoYW5kbGVyc1xyXG4gICAgaWYgKHJvdyA9PT0gbnVsbCB8fCBjZWxsID09PSBudWxsKVxyXG4gICAge1xyXG4gICAgICBzZXRUYWJsZVJvd0NvbHVtbigpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXJ1biBzZXRUYWJsZVJvd0NvbHVtbigpIGFnYWluIGJlY2F1c2Ugc29tZSBvZiB0YWJsZXMgbWlnaHQgYmUgZW5hYmxlZCBpbiBoYW5kbGVyIGV2ZW50cyBhYm92ZVxyXG4gICAgICByb3dfc291cmNlID0gcm93X29sZCA9IHJvdztcclxuICAgICAgY2VsbF9zb3VyY2UgPSBjZWxsX29sZCA9IGNlbGw7XHJcblxyXG4gICAgICBpZiAocm93ID09PSBudWxsIHx8IGNlbGwgPT09IG51bGwpICAvLyBubywgY2xpY2tlZCBlbGVtZW50IGlzIG9uIHRoZSBkaXNhYmxlZCB0YWJsZSAtIHNvcnJ5XHJcbiAgICAgIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG1vdmVkID0gY2xvbmVkID0gZmFsc2U7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzZXQgXCJtb3ZlZFwiIGZsYWcgKG5lZWRlZCBmb3IgY2xvbmUgb2JqZWN0IGluIGhhbmRsZXJPbk1vdXNlTW92ZSkgYW5kIFwiY2xvbmVkXCIgZmxhZ1xyXG5cclxuICAgIFJFRElQUy5ldmVudC5hZGQoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCBoYW5kbGVyT25Nb3VzZU1vdmUpOyAgICAgICAgLy8gYWN0aXZhdGUgb25tb3VzZW1vdmUgZXZlbnQgaGFuZGxlciBvbiBkb2N1bWVudCBvYmplY3RcclxuICAgIFJFRElQUy5ldmVudC5hZGQoZG9jdW1lbnQsICdtb3VzZXVwJywgaGFuZGxlck9uTW91c2VVcCk7ICAgICAgICAgICAgLy8gYWN0aXZhdGUgb25tb3VzZXVwIGV2ZW50IGhhbmRsZXIgb24gZG9jdW1lbnQgb2JqZWN0XHJcblxyXG4gICAgaWYgKHJvdyAhPT0gbnVsbCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1lbWJlciBiYWNrZ3JvdW5kIGNvbG9yIGlmIGlzIHBvc3NpYmxlXHJcbiAgICB7XHJcbiAgICAgIGJnU3R5bGVPbGQgPSBnZXRUZFN0eWxlKHJvdyk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zaXRpb24gPSBnZXRTdHlsZSh0YWJsZSwgJ3Bvc2l0aW9uJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgdGFibGUgQ1NTIHBvc2l0aW9uIChuZWVkZWQgZm9yIGV4Y2x1c2lvbiBcInNjcm9sbCBvZmZzZXRcIiBpZiB0YWJsZSBib3ggaGFzIHBvc2l0aW9uIGZpeGVkKVxyXG5cclxuICAgIGlmIChwb3NpdGlvbiAhPT0gJ2ZpeGVkJykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGFibGUgZG9lc24ndCBoYXZlIHN0eWxlIHBvc2l0aW9uOmZpeGVkIHRoZW4gdGFibGUgY29udGFpbmVyIHNob3VsZCBiZSB0ZXN0ZWRcclxuICAgIHtcclxuICAgICAgcG9zaXRpb24gPSBnZXRTdHlsZSh0YWJsZS5wYXJlbnROb2RlLCAncG9zaXRpb24nKTtcclxuICAgIH1cclxuXHJcbiAgICBvZmZzZXQgPSBib3hPZmZzZXQob2JqLCBwb3NpdGlvbik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVmaW5lIG9iamVjdCBvZmZzZXRcclxuICAgIG9iak1hcmdpbiA9IFtZIC0gb2Zmc2V0WzBdLCBvZmZzZXRbMV0gLSBYLCBvZmZzZXRbMl0gLSBZLCBYIC0gb2Zmc2V0WzNdXTsgICAvLyBjYWxjdWxhdGUgb2Zmc2V0IGZyb20gdGhlIGNsaWNrZWQgcG9pbnQgaW5zaWRlIGVsZW1lbnQgdG8gdGhlIHRvcCwgcmlnaHQsIGJvdHRvbSBhbmQgbGVmdCBzaWRlIG9mIHRoZSBlbGVtZW50XHJcblxyXG4gICAgcmV0dXJuIGZhbHNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRpc2FibGUgdGV4dCBzZWxlY3Rpb24gZm9yIG5vbiBJRSBicm93c2Vyc1xyXG4gIH07XHJcblxyXG5cclxuICAvKipcclxuICAgKiBNZXRob2RzIHJldHVybnMgcmVmZXJlbmNlIHRvIHRoZSB0YWJsZSByb3cgb3IgY2xvbmVzIHRhYmxlIHJvdy5cclxuICAgKiBJZiBjYWxsZWQgZnJvbSBoYW5kbGVyT25Nb3VzZURvd246XHJcbiAgICogPHVsPlxyXG4gICAqIDxsaT5pbnB1dCBwYXJhbWV0ZXIgaXMgRElWIGNsYXNzPVwicmVkaXBzLXJvd1wiPC9saT5cclxuICAgKiA8bGk+bWV0aG9kIHdpbGwgcmV0dXJuIHJlZmVyZW5jZSBvZiB0aGUgY3VycmVudCByb3c8L2xpPlxyXG4gICAqIDwvdWw+XHJcbiAgICogSWYgY2FsbGVkIGZyb20gaGFuZGxlck9uTW91c2VNb3ZlOlxyXG4gICAqIDx1bD5cclxuICAgKiA8bGk+aW5wdXQgcGFyYW1ldGVyIGlzIFRSIChjdXJyZW50IHJvdykgLSBwcmV2aW91c2x5IHJldHVybmVkIHdpdGggdGhpcyBmdW5jdGlvbjwvbGk+XHJcbiAgICogPGxpPm1ldGhvZCB3aWxsIGNsb25lIGN1cnJlbnQgcm93IGFuZCByZXR1cm4gcmVmZXJlbmNlIG9mIHRoZSBjbG9uZWQgcm93PC9saT5cclxuICAgKiA8L3VsPlxyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIERJViBjbGFzcz1cInJlZGlwcy1yb3dcIiBvciBUUiAoY3VycmVudCByb3cpXHJcbiAgICogQHJldHVybiB7SFRNTEVsZW1lbnR9IFJldHVybnMgcmVmZXJlbmNlIG9mIHRoZSBjdXJyZW50IHJvdyBvciBjbG9uZSBjdXJyZW50IHJvdyBhbmQgcmV0dXJuIHJlZmVyZW5jZSBvZiB0aGUgY2xvbmVkIHJvdy5cclxuICAgKi9cclxuICByb3dDbG9uZSA9IGZ1bmN0aW9uIChlbClcclxuICB7XHJcbiAgICB2YXIgdGFibGVNaW5pOyAgICAgIC8vIG9yaWdpbmFsIHRhYmxlIGlzIGNsb25lZCBhbmQgYWxsIHJvd3MgZXhjZXB0IHBpY2tlZCByb3cgYXJlIGRlbGV0ZWRcclxuICAgIHZhciByb3dPYmo7ICAgICAgICAgLy8gcmVmZXJlbmNlIHRvIHRoZSByb3cgb2JqZWN0XHJcbiAgICB2YXIgZGl2OyAgICAgICAgICAgIC8vIHJlZmVyZW5jZSB0byB0aGUgPERJViBjbGFzcz1cInJlZGlwcy1kcmFnIHJlZGlwcy1yb3dcIj4gZWxlbWVudFxyXG5cclxuICAgIGlmIChlbC5ub2RlTmFtZSA9PT0gJ0RJVicpICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDEpIHJvd0Nsb25lIGNhbGwgaW4gb25tb3VzZWRvd24gd2lsbCByZXR1cm4gcmVmZXJlbmNlIG9mIFRSIGVsZW1lbnQgKGlucHV0IHBhcmFtZXRlciBpcyBIVE1MRWxlbWVudCA8ZGl2IGNsYXNzPVwicmVkaXBzLWRyYWcgcmVkaXBzLXJvd1wiPilcclxuICAgIHtcclxuICAgICAgZGl2ID0gZWw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbWVtYmVyIHJlZmVyZW5jZSB0byB0aGUgPERJViBjbGFzcz1cInJlZGlwcy1kcmFnIHJlZGlwcy1yb3dcIj5cclxuICAgICAgZWwgPSBmaW5kUGFyZW50KCdUUicsIGVsKTsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpbmQgcGFyZW50IFRSIGVsZW1lbnRcclxuICAgICAgaWYgKGVsLnJlZGlwcyA9PT0gdW5kZWZpbmVkKSB7IGVsLnJlZGlwcyA9IHt9OyB9ICAgIC8vIGNyZWF0ZSBhIFwicHJvcGVydHkgb2JqZWN0XCIgaW4gd2hpY2ggYWxsIGN1c3RvbSBwcm9wZXJ0aWVzIHdpbGwgYmUgc2F2ZWQgKGl0IGlzIG9ubHkgb25lIHByb3BlcnR5IGZvciBub3cpXHJcbiAgICAgIGVsLnJlZGlwcy5kaXYgPSBkaXY7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzYXZlIHJlZmVyZW5jZSB0byB0aGUgRElWIGVsZW1lbnQgYXMgcmVkaXBzLmRpdiB0aGlzIHdpbGwgbW9zdGx5IGJlIHJlZmVyZW5jZWQgYXMgb2JqT2xkLnJlZGlwcy5kaXYgKGJlY2F1c2Ugb2JqT2xkIGluIHJvdyBkcmFnZ2luZyBjb250ZXh0IGlzIHJlZmVyZW5jZSB0byB0aGUgc291cmNlIHJvdylcclxuICAgICAgcmV0dXJuIGVsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiByZWZlcmVuY2UgdG8gdGhlIFRSIGVsZW1lbnRcclxuICAgIH1cclxuICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDIpIHJvd0Nsb25lIGNhbGwgaW4gb25tb3VzZW1vdmUgd2lsbCBjbG9uZSBjdXJyZW50IHJvdyAoZWwubm9kZU5hbWUgPT09ICdUUicpXHJcbiAgICB7XHJcbiAgICAgIHJvd09iaiA9IGVsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbWVtYmVyIHNvdXJjZSByb3dcclxuXHJcbiAgICAgIHRhYmxlTWluaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyk7XHJcbiAgICAgIHRhYmxlTWluaS5pbm5lckhUTUwgPSAnPHRyIGlkPVwiJyArIHJvd09iai5pZCArICdcIiBjbGFzcz1cIicgKyByb3dPYmouY2xhc3NMaXN0ICsgJ1wiPicgKyByb3dPYmouaW5uZXJIVE1MICsgJzwvdHI+JztcclxuICAgICAgLy90YWJsZU1pbmkuaW5uZXJIVE1MID0gZ2V0QXNzZW1ibHlNYXJrdXAocGFyc2VJbnQocm93T2JqLmlkLnJlcGxhY2UoJ3Jvd2lkJywgJycpKSk7ICAgLy9jYW4gYmUgdXNlZCB0byBzaG93IHRoZSBlbnRpcmUgYXNzZW1ibHkgd2hlbiBkcmFnZ2luZywgdGVuZHMgdG8gc2xvdyB0aGluZ3MgZG93biBhbmQgYmUgY3VtYmVyc29tZVxyXG5cclxuICAgICAgdGFibGVNaW5pLnJlZGlwcyA9IHt9OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBcInByb3BlcnR5IG9iamVjdFwiIGluIHdoaWNoIGFsbCBjdXN0b20gcHJvcGVydGllcyB3aWxsIGJlIHNhdmVkXHJcbiAgICAgIHRhYmxlTWluaS5yZWRpcHMuc291cmNlUm93ID0gcm93T2JqOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2F2ZSBzb3VyY2Ugcm93IHJlZmVyZW5jZSAobmVlZGVkIGZvciBzb3VyY2Ugcm93IGRlbGV0aW9uIGluIHJvd0Ryb3AgbWV0aG9kKVxyXG5cclxuICAgICAgY29weVByb3BlcnRpZXMocm93T2JqLCB0YWJsZU1pbmkucm93c1swXSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb3B5IGN1c3RvbSBwcm9wZXJ0aWVzIHRvIGFsbCBjaGlsZCBESVYgZWxlbWVudHMgYW5kIHNldCBvbm1vdXNlZG93bi9vbmRibGNsaWNrIGV2ZW50IGhhbmRsZXJzXHJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWRpcHNfY2xvbmUnKS5hcHBlbmRDaGlsZCh0YWJsZU1pbmkpOyAgICAgLy8gYXBwZW5kIGNsb25lZCBtaW5pIHRhYmxlIHRvIHRoZSBESVYgaWQ9XCJyZWRpcHNfY2xvbmVcIlxyXG5cclxuICAgICAgcmV0dXJuIHRhYmxlTWluaTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogTWV0aG9kIGRyb3BzIHRhYmxlIHJvdyB0byB0aGUgdGFyZ2V0IHJvdyBhbmQgY2FsbHMgdXNlciBldmVudCBoYW5kbGVycy4gU291cmNlIHJvdyBpcyBkZWxldGVkIGFuZCBjbG9uZWQgcm93IGlzIGluc2VydGVkIGF0IHRoZSBuZXcgcG9zaXRpb24uXHJcbiAgICogTWV0aG9kIHRha2VzIGNhcmUgYWJvdXQgdGhlIGxhc3Qgcm93IGluIHRoZSB0YWJsZSBvbmx5IGlmIHVzZXIgZHJhZ3MgZWxlbWVudC4gSW4gY2FzZSBvZiBtb3Zpbmcgcm93cyB3aXRoIG1vdmVPYmplY3QoKSwgY29udHJvbFxyXG4gICAqIGFuZCBsb2dpYyBmb3IgbGFzdCByb3cgaXMgdHVybmVkIG9mZi4gVGhpcyBtZXRob2QgaXMgY2FsbGVkIGZyb20gaGFuZGxlck9uTW91c2VVcCgpXHJcbiAgICogQHBhcmFtIHtJbnRlZ2VyfSB0YWJsZUlkeCBUYWJsZSBpbmRleC5cclxuICAgKiBAcGFyYW0ge0ludGVnZXJ9IHJvd0lkeCBSb3cgaW5kZXguXHJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gW3RhYmxlTWluaV0gUmVmZXJlbmNlIHRvIHRoZSBtaW5pIHRhYmxlICh0YWJsZSB0aGF0IGNvbnRhaW5zIG9ubHkgb25lIHJvdykuIFRoaXMgaXMgYWN0dWFsbHkgY2xvbmUgb2Ygc291cmNlIHJvdy5cclxuICAgKi9cclxuICByb3dEcm9wID0gZnVuY3Rpb24gKHJvd0lkeClcclxuICB7XHJcbiAgICB2YXIgZHJvcDsgICAgICAgICAgICAgICAvLyAoYm9vbGVhbikgaWYgZmFsc2UgdGhlbiBkcm9wcGluZyByb3cgd2lsbCBiZSBjYW5jZWxlZFxyXG4gICAgdmFyIHRyTWluaTsgICAgICAgICAgICAgLy8gcmVmZXJlbmNlIHRvIHRoZSBUUiBpbiBtaW5pIHRhYmxlXHJcbiAgICB2YXIgZGVsZXRlVGFibGVSb3c7ICAgICAvLyBkZWxldGUgcm93IChwcml2YXRlIG1ldGhvZClcclxuXHJcbiAgICBkZWxldGVUYWJsZVJvdyA9IGZ1bmN0aW9uIChlbCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSB0YWJsZSByb3cgLSBpbnB1dCBwYXJlbWV0ZXIgaXMgcm93IHJlZmVyZW5jZSAocHJpdmF0ZSBtZXRob2QpXHJcbiAgICB7XHJcbiAgICAgIHZhciB0Ymw7XHJcblxyXG4gICAgICBpZiAoZWwucmVkaXBzID09PSB1bmRlZmluZWQgfHwgIWVsLnJlZGlwcy5lbXB0eVJvdykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiByb3cgZG9lc24ndCBoYXZlIGN1c3RvbSBcInJlZGlwc1wiIHByb3BlcnR5IG9yIGlzIG5vdCBtYXJrZWQgYXMgZW1wdHksIHRoZW4gaXQgY2FuIGJlIGRlbGV0ZWRcclxuICAgICAge1xyXG4gICAgICAgIHRibCA9IGZpbmRQYXJlbnQoJ1RBQkxFJywgZWwpO1xyXG4gICAgICAgIHRibC5kZWxldGVSb3coZWwucm93SW5kZXgpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVsc2UsIHJvdyBpcyBtYXJrZWQgYXMgXCJlbXB0eVwiIGFuZCBpdCB3aWxsIGJlIG9ubHkgY29sb3JlZCAobm90IGRlbGV0ZWQpLCBjb250ZW50IG9mIHRhYmxlIGNlbGxzIHdpbGwgYmUgZGVsZXRlZCBhbmQgYmFja2dyb3VuZCBjb2xvciB3aWxsIGJlIHNldCB0byBkZWZhdWx0IGNvbG9yXHJcbiAgICAgIHtcclxuICAgICAgICByb3dPcGFjaXR5KGVsLCAnZW1wdHknLCBSRURJUFMuZHJhZy5zdHlsZS5yb3dFbXB0eUNvbG9yKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgdGFibGVNaW5pID0gb2JqOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnRseSBkcmFnZ2VkIHJvdyAtIG1pbmkgdGFibGVcclxuXHJcbiAgICBpZiAocm93SWR4ID4gdGFibGUucm93cy5sZW5ndGggLSAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHJvdyBpbmRleCBpcyBvdXQgb2YgYm91bmRzLCB0aGVuIHNldCBtYXggcm93IGluZGV4IChyb3cgd2lsbCBiZSBhcHBlbmRlZCB0byB0aGUgdGFibGUgYm90dG9tKVxyXG4gICAge1xyXG4gICAgICByb3dJZHggPSB0YWJsZS5yb3dzLmxlbmd0aCAtIDE7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHRhYmxlUm93ID0gdGFibGUucm93c1tyb3dJZHhdO1xyXG5cclxuICAgIHRyTWluaSA9IHRhYmxlTWluaS5nZXRFbGVtZW50c0J5VGFnTmFtZSgndHInKVswXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHJlZmVyZW5jZSB0byB0aGUgVFIgaW4gbWluaSB0YWJsZSAobWluaSB0YWJsZSBoYXMgb25seSBvbmUgcm93IC0gZmlyc3Qgcm93KVxyXG5cclxuICAgIHRhYmxlTWluaS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRhYmxlTWluaSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVzdHJveSBtaW5pIHRhYmxlIChub2RlIHN0aWxsIGV4aXN0cyBpbiBtZW1vcnkpXHJcblxyXG4gICAgZHJvcCA9IFJFRElQUy5kcmFnLmV2ZW50LnJvd0Ryb3BwZWRCZWZvcmUodGFibGUsIHRhYmxlTWluaS5yZWRpcHMuc291cmNlUm93LnJvd0luZGV4KTsgICAgICAvLyBjYWxsIGV2ZW50LnJvd0Ryb3BwZWRCZWZvcmUoKSAtIHRoaXMgaGFuZGxlciBjYW4gcmV0dXJuIFwiZmFsc2VcIiB2YWx1ZVxyXG5cclxuICAgIGlmIChkcm9wICE9PSBmYWxzZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgaGFuZGxlciByZXR1cm5lZCBmYWxzZSB0aGVuIHJvdyBkcm9wcGluZyB3aWxsIGJlIGNhbmNlbGVkXHJcbiAgICB7XHJcbiAgICAgIGlmIChyb3dJZHggPCB0YWJsZS5yb3dzLmxlbmd0aCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHJvdyBpcyBub3QgZHJvcHBlZCB0byB0aGUgbGFzdCByb3cgcG9zaXRpb25cclxuICAgICAge1xyXG4gICAgICAgIHRhYmxlUm93LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRyTWluaSwgdGFibGVSb3cubmV4dFNpYmxpbmcpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJvdyBpcyBkcm9wcGVkIHRvIHRoZSBsYXN0IHJvdyBwb3NpdGlvbiwgaXQncyBwb3NzaWJsZSB0byBzZXQgdGFyZ2V0IHJvdyBpbmRleCBncmVhdGVyIHRoZW4gbnVtYmVyIG9mIHJvd3MgLSBpbiB0aGlzIGNhc2Ugcm93IHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIHRhYmxlIGVuZFxyXG4gICAgICB7XHJcbiAgICAgICAgdGFibGVSb3cucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0ck1pbmkpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJvdyBzaG91bGQgYmUgYXBwZW5kZWRcclxuICAgICAgICB0YWJsZVJvdyA9IHRhYmxlLnJvd3NbMF07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHJlZmVyZW5jZSB0byB0aGUgdXBwZXIgcm93LCBhZnRlciByb3cgaXMgYXBwZW5kZWQsIHVwcGVyIHJvdyBzaG91bGQgYmUgdGVzdGVkIGlmIGNvbnRhaW5zIFwiZW1wdHlSb3dcIiBzZXQgdG8gdHJ1ZSwgdGhpcyBjb3VsZCBoYXBwZW4gaW4gY2FzZSB3aGVuIHJvdyBpcyBtb3ZlZCB0byB0aGUgdGFibGUgd2l0aCBvbmx5IG9uZSBlbXB0eSByb3dcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFjbG9uZWQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVsZXRlIHNvdXJjZSByb3cgaWYgcm93IGlzIG5vdCBjbG9uZWRcclxuICAgICAge1xyXG4gICAgICAgIGRlbGV0ZVRhYmxlUm93KHRhYmxlTWluaS5yZWRpcHMuc291cmNlUm93KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZGVsZXRlIHRyTWluaS5yZWRpcHMuZW1wdHlSb3c7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVsZXRlIGVtcHR5Um93IHByb3BlcnR5IGZyb20gaW5zZXJ0ZWQvYXBwZW5kZWQgcm93IGJlY2F1c2UgZW1wdHlSb3cgd2lsbCBiZSBzZXQgb24gbmV4dCBtb3ZlLCBjb3B5UHJvcGVydGllcygpIGluIHJvd0Nsb25lKCkgY29waWVkIGVtcHR5Um93IHByb3BlcnR5IHRvIHRoZSByb3cgaW4gdGFibGVNaW5pLCBvdGhlcndpc2Ugcm93IHdpbGwgYmUgb3ZlcndyaXR0ZW4gYW5kIHRoYXQgaXMgbm90IGdvb2RcclxuICAgICAgUkVESVBTLmRyYWcuZXZlbnQucm93RHJvcHBlZCh0YWJsZVJvdyk7ICAgICAgICAgLy8gY2FsbCByb3dEcm9wcGVkIGV2ZW50IGhhbmRsZXJcclxuICAgIH1cclxuICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXZlbnQucm93RHJvcHBlZEJlZm9yZSgpIHJldHVybmVkIFwiZmFsc2VcIiAoaXQncyB1cCB0byB1c2VyIHRvIHJldHVybiBzb3VyY2Ugcm93IG9wYWNpdHkgdG8gaXRzIG9yaWdpbmFsIHN0YXRlKVxyXG4gICAge1xyXG4gICAgICAvLyByb3dPcGFjaXR5KG9iak9sZCwgMTAwKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogb25tb3VzZXVwIGV2ZW50IGhhbmRsZXIuXHJcbiAgICogaGFuZGxlck9uTW91c2VVcCBpcyBhdHRhY2hlZCB0byB0aGUgRElWIGVsZW1lbnQgaW4gYSBtb21lbnQgd2hlbiBESVYgZWxlbWVudCBpcyBjbGlja2VkICh0aGlzIGhhcHBlbnMgaW4gaGFuZGxlck9uTW91c2VEb3duKS5cclxuICAgKiBUaGlzIGV2ZW50IGhhbmRsZXIgZGV0YWNoZXMgb25tb3VzZW1vdmUgYW5kIG9ubW91c2V1cCBldmVudCBoYW5kbGVycy5cclxuICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IGluZm9ybWF0aW9uLlxyXG4gICAqL1xyXG4gIGhhbmRsZXJPbk1vdXNlVXAgPSBmdW5jdGlvbiAoZSlcclxuICB7XHJcbiAgICB2YXIgZXZ0ID0gZSB8fCB3aW5kb3cuZXZlbnQ7ICAgIC8vIGRlZmluZSBldmVudCAoRkYgJiBJRSlcclxuICAgIHZhciByX3JvdzsgICAgICAgICAgICAgICAgICAgICAgLy8gbmVlZGVkIGZvciBtb2RlPVwicm93XCJcclxuICAgIHZhciBtdF90cjsgICAgICAgICAgICAgICAgICAgICAgLy8gbmVlZGVkIGZvciByZXR1cm5pbmcgY29sb3IgdG8gdGhlIHRhYmxlIGNlbGwgKG10X3RyIC0gXCJtaW5pIHRhYmxlXCIgXCJ0YWJsZV9yb3dcIilcclxuICAgIHZhciBYLCBZOyAgICAgICAgICAgICAgICAgICAgICAgLy8gWCBhbmQgWSBwb3NpdGlvbiBvZiBtb3VzZSBwb2ludGVyXHJcbiAgICB2YXIgaTsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVzZWQgaW4gbG9jYWwgbG9vcFxyXG4gICAgdmFyIGRyb3A7ICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBmYWxzZSB0aGVuIGRyb3BwZWQgRElWIGVsZW1lbnRcclxuXHJcbiAgICBYID0gZXZ0LmNsaWVudFg7XHJcbiAgICBZID0gZXZ0LmNsaWVudFk7XHJcblxyXG4gICAgZWRnZS5mbGFnLnggPSBlZGdlLmZsYWcueSA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHR1cm4gb2ZmIGF1dG9zY3JvbGwgXCJjdXJyZW50IGNlbGxcIiBoYW5kbGluZyAoaWYgdXNlciBtb3VzZXVwIGluIHRoZSBtaWRkbGUgb2YgYXV0b3Njcm9sbGluZylcclxuXHJcbiAgICBSRURJUFMuZXZlbnQucmVtb3ZlKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgaGFuZGxlck9uTW91c2VNb3ZlKTtcclxuICAgIFJFRElQUy5ldmVudC5yZW1vdmUoZG9jdW1lbnQsICdtb3VzZXVwJywgaGFuZGxlck9uTW91c2VVcCk7XHJcblxyXG4gICAgZHJhZ0NvbnRhaW5lci5vbnNlbGVjdHN0YXJ0ID0gbnVsbDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRldGFjaCBkcmFnQ29udGFpbmVyLm9uc2VsZWN0c3RhcnQgaGFuZGxlciB0byBlbmFibGUgc2VsZWN0IGZvciBJRTcvSUU4IGJyb3dzZXJcclxuXHJcbiAgICByZXNldFN0eWxlcyhvYmopOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzZXQgb2JqZWN0IHN0eWxlc1xyXG5cclxuICAgIHNjcm9sbERhdGEud2lkdGggID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFdpZHRoO1xyXG4gICAgc2Nyb2xsRGF0YS5oZWlnaHQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xyXG5cclxuICAgIGVkZ2UuZmxhZy54ID0gZWRnZS5mbGFnLnkgPSAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXNldCBhdXRvc2Nyb2xsIGZsYWdzXHJcblxyXG4gICAgaWYgKHJvdyA9PT0gbnVsbCB8fCBjZWxsID09PSBudWxsKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIERJViBlbGVtZW50IHdhcyBjbGlja2VkIGFuZCBsZWZ0IGJ1dHRvbiB3YXMgcmVsZWFzZWQsIGJ1dCBlbGVtZW50IGlzIHBsYWNlZCBpbnNpZGUgdW5tb3ZhYmxlIHRhYmxlIGNlbGxcclxuICAgIHtcclxuICAgICAgUkVESVBTLmRyYWcuZXZlbnQubm90TW92ZWQoKTtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgIHtcclxuICAgICAgUkVESVBTLmRyYWcudGQudGFyZ2V0ID0gdGQudGFyZ2V0ID0gdGFibGUucm93c1tyb3ddLmNlbGxzW2NlbGxdO1xyXG5cclxuICAgICAgc2V0VGRTdHlsZShyb3csIGJnU3R5bGVPbGQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgYmFja2dyb3VuZCBjb2xvciBmb3IgZGVzdGluYXRpb24gcm93XHJcblxyXG4gICAgICByX3JvdyA9IHJvdztcclxuXHJcbiAgICAgIGlmICghbW92ZWQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcm93IHdhcyBjbGlja2VkIGFuZCBtb3VzZSBidXR0b24gd2FzIHJlbGVhc2VkIHJpZ2h0IGF3YXkgKHJvdyB3YXMgbm90IG1vdmVkKVxyXG4gICAgICB7XHJcbiAgICAgICAgUkVESVBTLmRyYWcuZXZlbnQucm93Tm90TW92ZWQoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJvdyB3YXMgbW92ZWRcclxuICAgICAge1xyXG4gICAgICAgIGlmIChyb3dfc291cmNlID09PSByX3JvdykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCBkcm9wcGVkIHRvIHRoZSBzb3VyY2Ugcm93XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbXRfdHIgPSBvYmouZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RyJylbMF07ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlZmVyZW5jZSB0byB0aGUgVFIgaW4gbWluaSB0YWJsZSAobWluaSB0YWJsZSBoYXMgb25seSBvbmUgcm93KVxyXG5cclxuICAgICAgICAgIG9iak9sZC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBtdF90ci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I7ICAgICAgICAgICAvLyByZXR1cm4gY29sb3IgdG8gdGhlIHNvdXJjZSByb3cgZnJvbSB0aGUgcm93IG9mIGNsb25lZCBtaW5pIHRhYmxlLCBjb2xvciBvZiB0aGUgc291cmNlIHJvdyBjYW4gYmUgY2hhbmdlZCBpbiBldmVudC5yb3dNb3ZlZCgpICh3aGVuIHVzZXIgd2FudHMgdG8gbWFyayBzb3VyY2Ugcm93KVxyXG5cclxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtdF90ci5jZWxscy5sZW5ndGg7IGkrKykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gY29sb3IgdG8gdGhlIGVhY2ggdGFibGUgY2VsbFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBvYmpPbGQuY2VsbHNbaV0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gbXRfdHIuY2VsbHNbaV0uc3R5bGUuYmFja2dyb3VuZENvbG9yO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIG9iai5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9iaik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgY2xvbmVkIG1pbmkgdGFibGVcclxuICAgICAgICAgIGRlbGV0ZSBvYmpPbGQucmVkaXBzLmVtcHR5Um93OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWxldGUgZW1wdHlSb3cgcHJvcGVydHkgZnJvbSBzb3VyY2Ugcm93IGJlY2F1c2UgZW1wdHlSb3cgd2lsbCBiZSBzZXQgb24gbmV4dCBtb3ZlLCBvdGhlcndpc2Ugcm93IHdvdWxkIGJlIG92ZXJ3cml0dGVuIGFuZCB0aGF0J3Mgbm8gZ29vZFxyXG5cclxuICAgICAgICAgIGlmIChjbG9uZWQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiByb3cgd2FzIGNsb25lZCBhbmQgZHJvcHBlZCB0byB0aGUgc291cmNlIGxvY2F0aW9uIHRoZW4gY2FsbCByb3dOb3RDbG9uZWQgZXZlbnQgaGFuZGxlclxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBSRURJUFMuZHJhZy5ldmVudC5yb3dOb3RDbG9uZWQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIGV2ZW50LnJvd0Ryb3BwZWRTb3VyY2UoKSBldmVudCBoYW5kbGVyXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIFJFRElQUy5kcmFnLmV2ZW50LnJvd0Ryb3BwZWRTb3VyY2UodGQudGFyZ2V0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGRyb3BwZWQgdG8gdGhlIG5ldyByb3dcclxuICAgICAgICB7XHJcbiAgICAgICAgICByb3dEcm9wKHJfcm93KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmICghY2xvbmVkICYmICF0aHJlc2hvbGQuZmxhZykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2xpY2tlZCBlbGVtZW50IHdhcyBub3QgbW92ZWQgLSBESVYgZWxlbWVudCBkaWRuJ3QgY3Jvc3MgdGhyZXNob2xkIHZhbHVlLCBqdXN0IGNhbGwgZXZlbnQubm90TW92ZWQgZXZlbnQgaGFuZGxlclxyXG4gICAgICB7XHJcbiAgICAgICAgUkVESVBTLmRyYWcuZXZlbnQubm90TW92ZWQoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmIChjbG9uZWQgJiYgcm93X3NvdXJjZSA9PT0gcm93ICYmIGNlbGxfc291cmNlID09PSBjZWxsKSAgICAgICAgICAgIC8vIGRlbGV0ZSBjbG9uZWQgZWxlbWVudCBpZiBkcm9wcGVkIG9uIHRoZSBzdGFydCBwb3NpdGlvblxyXG4gICAgICB7XHJcbiAgICAgICAgb2JqLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob2JqKTtcclxuICAgICAgICBjbG9uZWRJZFtvYmpPbGQuaWRdIC09IDE7XHJcbiAgICAgICAgUkVESVBTLmRyYWcuZXZlbnQubm90Q2xvbmVkKCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoY2xvbmVkICYmIFJFRElQUy5kcmFnLmNsb25lLmRyb3AgPT09IGZhbHNlICYmIChYIDwgdGFibGUucmVkaXBzLm9mZnNldFszXSB8fCBYID4gdGFibGUucmVkaXBzLm9mZnNldFsxXSB8fCBZIDwgdGFibGUucmVkaXBzLm9mZnNldFswXSB8fCBZID4gdGFibGUucmVkaXBzLm9mZnNldFsyXSkpICAgIC8vIGRlbGV0ZSBjbG9uZWQgZWxlbWVudCBpZiBkcm9wcGVkIG91dHNpZGUgY3VycmVudCB0YWJsZSBhbmQgY2xvbmUuZHJvcCBpcyBzZXQgdG8gZmFsc2VcclxuICAgICAge1xyXG4gICAgICAgIG9iai5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9iaik7XHJcbiAgICAgICAgY2xvbmVkSWRbb2JqT2xkLmlkXSAtPSAxO1xyXG4gICAgICAgIFJFRElQUy5kcmFnLmV2ZW50Lm5vdENsb25lZCgpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWxzZSBjYWxsIGV2ZW50LmRyb3BwZWRCZWZvcmUoKSwgYXBwZW5kIG9iamVjdCB0byB0aGUgY2VsbCBhbmQgY2FsbCBldmVudC5kcm9wcGVkKClcclxuICAgICAge1xyXG4gICAgICAgIGRyb3AgPSBSRURJUFMuZHJhZy5ldmVudC5kcm9wcGVkQmVmb3JlKHRkLnRhcmdldCk7ICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGwgZXZlbnQuZHJvcHBlZEJlZm9yZSBldmVudCBoYW5kbGVyXHJcbiAgICAgICAgZWxlbWVudERyb3AoZHJvcCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHJvcCBlbGVtZW50IHRvIHRoZSB0YWJsZSBjZWxsIChvciBkZWxldGUgY2xvbmVkIGVsZW1lbnQgaWYgZHJvcD1cImZhbHNlXCIpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhbGN1bGF0ZUNlbGxzKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVjYWxjdWxhdGUgdGFibGUgY2VsbHMgYW5kIHNjcm9sbGVycyBiZWNhdXNlIGNlbGwgY29udGVudCBjb3VsZCBjaGFuZ2Ugcm93IGRpbWVuc2lvbnNcclxuICAgICAgUkVESVBTLmRyYWcuZXZlbnQuZmluaXNoKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIGxhc3QgZXZlbnQgaGFuZGxlclxyXG4gICAgfVxyXG5cclxuICAgIHJvd19vbGQgPSBjZWxsX29sZCA9IG51bGw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXNldCBvbGQgcG9zaXRpb25zXHJcbiAgfTtcclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIEVsZW1lbnQgZHJvcC4gVGhpcyBtZXRob2QgaXMgY2FsbGVkIGZyb20gaGFuZGxlck9uTW91c2VVcCBhbmQgYXBwZW5kcyBlbGVtZW50IHRvIHRoZSB0YXJnZXQgdGFibGUgY2VsbC5cclxuICAgKiBJZiBpbnB1dCBwYXJhbWV0ZXIgXCJkcm9wXCIgaXMgc2V0IHRvIFwiZmFsc2VcIiAodGhpcyBpcyBhY3R1YWxseSByZXR1cm4gdmFsdWUgZnJvbSBldmVudC5kcm9wcGVkQmVmb3JlKSB0aGVuIERJViBlbGVtZW50cyB3aWxsIG5vdCBiZSBkcm9wcGVkIChvbmx5IGNsb25lZCBlbGVtZW50IHdpbGwgYmUgZGVsZXRlZCkuXHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBbZHJvcF0gSWYgbm90IFwiZmFsc2VcIiB0aGVuIERJViBlbGVtZW50IHdpbGwgYmUgZHJvcHBlZCB0byB0aGUgY2VsbC5cclxuICAgKi9cclxuICBlbGVtZW50RHJvcCA9IGZ1bmN0aW9uIChkcm9wKSBcclxuICB7XHJcbiAgICB2YXIgY2xvbmVTb3VyY2VEaXYgPSBudWxsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjbG9uZSBzb3VyY2UgZWxlbWVudCAobmVlZGVkIGlmIGNsb25lLnNlbmRCYWNrIGlzIHNldCB0byB0cnVlKVxyXG4gICAgdmFyIGRpdjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm9kZUxpc3Qgb2YgRElWIGVsZW1lbnRzIGluIHRhcmdldCBjZWxsIChuZWVkZWQgaWYgY2xvbmUuc2VuZEJhY2sgaXMgc2V0IHRvIHRydWUpXHJcbiAgICBcclxuICAgIGlmIChkcm9wICE9PSBmYWxzZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGlucHV0IHBhcmFtZXRlciBpcyBub3QgXCJmYWxzZVwiIHRoZW4gRElWIGVsZW1lbnQgd2lsbCBiZSBkcm9wcGVkIHRvIHRoZSB0YWJsZSBjZWxsXHJcbiAgICB7XHJcbiAgICAgIGlmIChjbG9uZS5zZW5kQmFjayA9PT0gdHJ1ZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBjbG9uZS5zZW5kQmFjayBpcyBzZXQgdG8gdHJ1ZSB0aGVuIHRyeSB0byBmaW5kIHNvdXJjZSBlbGVtZW50IGluIHRhcmdldCBjZWxsXHJcbiAgICAgIHtcclxuICAgICAgICBkaXYgPSB0ZC50YXJnZXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ0RJVicpOyAgICAgICAgICAgICAgICAgIC8vIHNlYXJjaCBhbGwgRElWIGVsZW1lbnRzIGluIHRhcmdldCBjZWxsXHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXYubGVuZ3RoOyBpKyspICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggYWxsIERJViBlbGVtZW50cyBpbiB0YXJnZXQgY2VsbFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIC8vIGlmIERJViBpbiB0YXJnZXQgY2VsbCBpcyBzb3VyY2Ugb2YgZHJvcHBlZCBESVYgZWxlbWVudCAoZHJvcHBlZCBESVYgaWQgYW5kIGlkIG9mIERJViBpbiB0YXJnZXQgY2VsbCBoYXMgdGhlIHNhbWUgbmFtZSBiZWdpbm5pbmcgbGlrZSBcImQxMmMyXCIgYW5kIFwiZDEyXCIpXHJcbiAgICAgICAgICAvLyBvZiBjb3Vyc2UsIHRoZSBjYXNlIHdoZXJlIHNvdXJjZSBESVYgZWxlbWVudCBpcyBkcm9wcGVkIHRvIHRoZSBjZWxsIHdpdGggY2xvbmVkIERJViBlbGVtZW50IHNob3VsZCBiZSBleGNsdWRlZCAocG9zc2libGUgaW4gY2xpbWl0MSB0eXBlKVxyXG4gICAgICAgICAgaWYgKG9iaiAhPT0gZGl2W2ldICYmIG9iai5pZC5pbmRleE9mKGRpdltpXS5pZCkgPT09IDApIFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBjbG9uZVNvdXJjZURpdiA9IGRpdltpXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHJlZmVyZW5jZSB0byBjbG9uZVNvdXJjZURpdiBlbGVtZW50XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZiAoY2xvbmVTb3VyY2VEaXYpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGNsb25lIHNvdXJjZSBESVYgZWxlbWVudCBleGlzdHMgaW4gdGFyZ2V0IGNlbGxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBjbG9uZUxpbWl0KGNsb25lU291cmNlRGl2LCAxKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgY2xpbWl0IGNsYXNzIChpbmNyZW1lbnQgYnkgMSlcclxuICAgICAgICAgIG9iai5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9iaik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSBkcm9wcGVkIERJViBlbGVtZW50XHJcbiAgICAgICAgICByZXR1cm47ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gZnJvbSB0aGUgbWV0aG9kIChldmVyeXRoaW5nIGlzIGRvbmUpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB0ZC50YXJnZXQuYXBwZW5kQ2hpbGQob2JqKTtcclxuICAgICAgXHJcbiAgICAgIHJlZ2lzdGVyRXZlbnRzKG9iaik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVnaXN0ZXIgZXZlbnQgbGlzdGVuZXJzIChGSVggZm9yIFNhZmFyaSBNb2JpbGUpXHJcbiAgICAgIFJFRElQUy5kcmFnLmV2ZW50LmRyb3BwZWQodGQudGFyZ2V0KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbCBldmVudC5kcm9wcGVkIGJlY2F1c2UgY2xvbmVMaW1pdCBjb3VsZCBjYWxsIGV2ZW50LmNsb25lZEVuZDEgb3IgZXZlbnQuY2xvbmVkRW5kMlxyXG4gICAgICBcclxuICAgICAgaWYgKGNsb25lZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBvYmplY3QgaXMgY2xvbmVkXHJcbiAgICAgIHtcclxuICAgICAgICBSRURJUFMuZHJhZy5ldmVudC5jbG9uZWREcm9wcGVkKHRkLnRhcmdldCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIGNsb25lZERyb3BwZWQgZXZlbnQgaGFuZGxlclxyXG4gICAgICAgIGNsb25lTGltaXQob2JqT2xkLCAtMSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBjbGltaXQxX1ggb3IgY2xpbWl0Ml9YIGNsYXNzbmFtZVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChjbG9uZWQgJiYgb2JqLnBhcmVudE5vZGUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2xvbmVkIGVsZW1lbnQgc2hvdWxkIGJlIGRlbGV0ZWQgKGlmIG5vdCBhbHJlYWR5IGRlbGV0ZWQpXHJcbiAgICB7XHJcbiAgICAgIG9iai5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9iaik7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogUmVnaXN0ZXIgZXZlbnQgbGlzdGVuZXJzIGZvciBESVYgZWxlbWVudC5cclxuICAgKiBESVYgZWxlbWVudHMgc2hvdWxkIGhhdmUgb25seSBvbm1vdXNlZG93biAodXNpbmcgdHJhZGl0aW9uYWwgZXZlbnQgcmVnaXN0cmF0aW9uIG1vZGVsKS5cclxuICAgKiBJIGhhZCBhIHByb2JsZW0gd2l0aCBhZHZhbmNlZCBldmVudCByZWdpc3RyYXRpb24gbW9kZWwuXHJcbiAgICogSW4gY2FzZSBvZiB1c2luZyBhZHZhbmNlZCBtb2RlbCwgc2VsZWN0ZWQgdGV4dCBhbmQgZHJhZ2dlZCBESVYgZWxlbWVudCB3ZXJlIGluIGNvbGxpc2lvbi5cclxuICAgKiBJdCBsb29rcyBsaWtlIHNlbGVjdGVkIHRleHQgd2FzIGFibGUgdG8gZHJhZyBpbnN0ZWFkIG9mIERJViBlbGVtZW50LlxyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGRpdiBSZWdpc3RlciBldmVudCBsaXN0ZW5lcnMgZm9yIG9ubW91c2Vkb3duLCBvbnRvdWNoc3RhcnQgYW5kIG9uZGJsY2xpY2sgdG8gdGhlIERJViBlbGVtZW50LlxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2ZsYWddIElmIHNldCB0byBmYWxzZSB0aGVuIGV2ZW50IGxpc3RlbmVycyB3aWxsIGJlIGRlbGV0ZWQuXHJcbiAgICovXHJcbiAgcmVnaXN0ZXJFdmVudHMgPSBmdW5jdGlvbiAoZGl2LCBmbGFnKVxyXG4gIHtcclxuICAgIGlmIChmbGFnID09PSBmYWxzZSkgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgZmxhZyBpcyBzZSB0byBmYWxzZSwgdGhlbiByZW1vdmUgZXZlbnQgbGlzdGVuZXJzIG9uIERJViBlbGVtZW50XHJcbiAgICB7XHJcbiAgICAgIGRpdi5vbm1vdXNlZG93biA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICB7XHJcbiAgICAgIGRpdi5vbm1vdXNlZG93biA9IGhhbmRsZXJPbk1vdXNlRG93bjtcclxuICAgIH1cclxuICB9O1xyXG5cclxuXHJcbiAgcmVzZXRTdHlsZXMgPSBmdW5jdGlvbiAoZWwpICAgICAgICAgLy8gQWZ0ZXIgZWxlbWVudCBpcyBkcm9wcGVkLCBzdHlsZXMgbmVlZCB0byBiZSByZXNldC5cclxuICB7XHJcbiAgICBlbC5zdHlsZS50b3AgID0gJyc7XHJcbiAgICBlbC5zdHlsZS5sZWZ0ID0gJyc7XHJcbiAgICBlbC5zdHlsZS5wb3NpdGlvbiA9ICcnO1xyXG4gICAgZWwuc3R5bGUuekluZGV4ID0gJyc7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogb25tb3VzZW1vdmUgZXZlbnQgaGFuZGxlci5cclxuICAgKiBoYW5kbGVyT25Nb3VzZU1vdmUgaXMgYXR0YWNoZWQgdG8gZG9jdW1lbnQgbGV2ZWwgaW4gYSBtb21lbnQgd2hlbiBESVYgZWxlbWVudCBpcyBjbGlja2VkICh0aGlzIGhhcHBlbnMgaW4gaGFuZGxlck9uTW91c2VEb3duKS5cclxuICAgKiBoYW5kbGVyT25Nb3VzZVVwIGRldGFjaGVzIG9ubW91c2Vtb3ZlIGFuZCBvbm1vdXNldXAgZXZlbnQgaGFuZGxlcnMuXHJcbiAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBpbmZvcm1hdGlvbi5cclxuICAgKi9cclxuICBoYW5kbGVyT25Nb3VzZU1vdmUgPSBmdW5jdGlvbiAoZSlcclxuICB7XHJcbiAgICB2YXIgZXZ0ID0gZSB8fCB3aW5kb3cuZXZlbnQ7ICAgICAgICAgICAgLy8gZGVmaW5lIGV2ZW50IChGRiAmIElFKVxyXG4gICAgdmFyIGJvdW5kID0gUkVESVBTLmRyYWcuc2Nyb2xsLmJvdW5kOyAgIC8vIHJlYWQgXCJib3VuZFwiIHB1YmxpYyBwcm9wZXJ0eSAobWF5YmUgY29kZSB3aWxsIGJlIGZhc3RlciwgYW5kIGl0IHdpbGwgYmUgZWFzaWVyIHRvIHJlZmVyZW5jZSBpbiBvbm1vdXNlbW92ZSBoYW5kbGVyKVxyXG4gICAgdmFyIHNjYTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgc2Nyb2xsYWJsZSBjb250YWluZXIgYXJlYVxyXG4gICAgdmFyIFgsIFk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFggYW5kIFkgcG9zaXRpb24gb2YgbW91c2UgcG9pbnRlclxyXG4gICAgdmFyIGRlbHRhWCwgZGVsdGFZOyAgICAgICAgICAgICAgICAgICAgIC8vIGRlbHRhIGZyb20gaW5pdGlhbCBwb3NpdGlvblxyXG4gICAgdmFyIGk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5lZWRlZCBmb3IgbG9jYWwgbG9vcFxyXG4gICAgdmFyIHNjcm9sbFBvc2l0aW9uOyAgICAgICAgICAgICAgICAgICAgIC8vIHNjcm9sbCBwb3NpdGlvbiB2YXJpYWJsZSBuZWVkZWQgZm9yIGF1dG9zY3JvbGwgY2FsbFxyXG5cclxuICAgIFggPSBwb2ludGVyLnggPSBldnQuY2xpZW50WDtcclxuICAgIFkgPSBwb2ludGVyLnkgPSBldnQuY2xpZW50WTtcclxuXHJcbiAgICBkZWx0YVggPSBNYXRoLmFicyh0aHJlc2hvbGQueCAtIFgpOyAgICAgICAgIC8vIGNhbGN1bGF0ZSBkZWx0YSBmcm9tIGluaXRpYWwgcG9zaXRpb25cclxuICAgIGRlbHRhWSA9IE1hdGguYWJzKHRocmVzaG9sZC55IC0gWSk7XHJcblxyXG4gICAgaWYgKCFtb3ZlZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBcIm1vdmVkXCIgZmxhZyBpc24ndCBzZXQgKHRoaXMgaXMgdGhlIGZpcnN0IG1vbWVudCB3aGVuIG9iamVjdCBpcyBtb3ZlZClcclxuICAgIHtcclxuICAgICAgLy9yZW1lbWJlciByZWZlcmVuY2Ugb2YgdGhlIHNvdXJjZSByb3csIGNsb25lIHNvdXJjZSByb3cgYW5kIHNldCBvYmogYXMgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IHJvdyBzZXR0aW5ncyBvZiBcImNsb25lZFwiIGZsYWcgc2hvdWxkIGdvIGJlZm9yZSBjYWxsaW5nIHJvd0Nsb25lKCkgYmVjYXVzZSBcImNsb25lZFwiIGlzIG5lZWRlZCBpbiByb3dDbG9uZSgpIHRvIGN1dCBvdXQgXCJyZWRpcHMtY2xvbmVcIiBjbGFzcyBuYW1lIGZyb20gPGRpdiBjbGFzcz1cInJlZGlwcy1kcmFnIHJlZGlwcy1yb3cgcmVkaXBzLWNsb25lXCI+IGVsZW1lbnRzXHJcbiAgICAgIGlmIChjbG9uZUNsYXNzIHx8IChSRURJUFMuZHJhZy5jbG9uZS5rZXlSb3cgPT09IHRydWUgJiYgc2hpZnRLZXkpKVxyXG4gICAgICB7XHJcbiAgICAgICAgY2xvbmVkID0gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgUkVESVBTLmRyYWcub2JqT2xkID0gb2JqT2xkID0gb2JqOyAgICAgICAgLy8gcmVtZW1iZXIgcmVmZXJlbmNlIHRvIHRoZSBzb3VyY2Ugcm93XHJcbiAgICAgIFJFRElQUy5kcmFnLm9iaiA9IG9iaiA9IHJvd0Nsb25lKG9iaik7ICAgIC8vIGNsb25lIHNvdXJjZSByb3cgYW5kIHNldCBhcyBvYmpcclxuICAgICAgb2JqLnN0eWxlLnpJbmRleCA9IDk5OTsgICAgICAgICAgICAgICAgICAgLy8gc2V0IGhpZ2ggei1pbmRleCBmb3IgY2xvbmVkIG1pbmkgdGFibGVcclxuXHJcbiAgICAgIG9iai5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7ICAgICAgICAgICAgIC8vIHNldCBzdHlsZSB0byBmaXhlZCB0byBhbGxvdyBkcmFnZ2luZyBESVYgb2JqZWN0XHJcbiAgICAgIGNhbGN1bGF0ZUNlbGxzKCk7ICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIGNhbGN1bGF0ZSBjZWxscyBmb3IgY2FzZSB3aGVyZSBtb3ZlZCBlbGVtZW50IGNoYW5nZWQgY2VsbCBkaW1lbnNpb24sIHBsYWNlIDMgZWxlbWVudHMgaW4gdGhlIHNhbWUgY2VsbCBpbiBleGFtcGxlMDggYW5kIHRyeSB0byBtb3ZlIG9uZSBvdXQgb2YgdGhlIHRhYmxlIGNlbGxcclxuICAgICAgc2V0VGFibGVSb3dDb2x1bW4oKTsgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGN1cnJlbnQgdGFibGUsIHJvdyBhbmQgY29sdW1uXHJcblxyXG4gICAgICBpZiAoY2xvbmVkKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIGV2ZW50IGhhbmRsZXIgKHJvdyBjbG9uZWQvbW92ZWQpXHJcbiAgICAgIHtcclxuICAgICAgICBSRURJUFMuZHJhZy5ldmVudC5yb3dDbG9uZWQoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlXHJcbiAgICAgIHtcclxuICAgICAgICBSRURJUFMuZHJhZy5ldmVudC5yb3dNb3ZlZCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZXRQb3NpdGlvbigpOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGNvbG9yIGZvciB0aGUgY3VycmVudCB0YWJsZSBjZWxsIGFuZCByZW1lbWJlciBwcmV2aW91cyBwb3NpdGlvbiBhbmQgY29sb3IsIHNldFBvc2l0aW9uKCkgbXVzdCBnbyBhZnRlciBjYWxsaW5nIGV2ZW50Lm1vdmVkKCkgYW5kIGV2ZW50LnJvd01vdmVkKCkgaWYgdXNlciB3YW50cyB0byBjaGFuZ2UgY29sb3Igb2Ygc291cmNlIHJvd1xyXG5cclxuICAgICAgaWYgKFggPiBzY3JlZW4ud2lkdGggLSBvYmpNYXJnaW5bMV0pICAgIC8vIGlmIGVsZW1lbnQgaXMgZmFyIGF3YXkgb24gdGhlIHJpZ2h0IHNpZGUgb2YgcGFnZSwgc2V0IHBvc3NpYmxlIHJpZ2h0IHBvc2l0aW9uIChzY3JlZW4ud2lkdGggLSBvYmplY3Qgd2lkdGgpLCBvYmpNYXJnaW5bMV0gKyBvYmpNYXJnaW5bM10gPSBvYmplY3Qgd2lkdGhcclxuICAgICAge1xyXG4gICAgICAgIG9iai5zdHlsZS5sZWZ0ID0gKHNjcmVlbi53aWR0aCAtIChvYmpNYXJnaW5bMV0gKyAgb2JqTWFyZ2luWzNdKSkgKyAncHgnO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoWSA+IHNjcmVlbi5oZWlnaHQgLSBvYmpNYXJnaW5bMl0pICAgLy8gaWYgZWxlbWVudCBpcyBiZWxvdyBwYWdlIGJvdHRvbSwgc2V0IHBvc3NpYmxlIGxvd2VyIHBvc2l0aW9uIChzY3JlZW4ud2lkdGggLSBvYmplY3QgaGVpZ2h0KSwgb2JqTWFyZ2luWzBdICsgb2JqTWFyZ2luWzJdID0gb2JqZWN0IGhlaWdodFxyXG4gICAgICB7XHJcbiAgICAgICAgb2JqLnN0eWxlLnRvcCAgPSAoc2NyZWVuLmhlaWdodCAtIChvYmpNYXJnaW5bMF0gKyBvYmpNYXJnaW5bMl0pKSArICdweCc7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBtb3ZlZCA9IHRydWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgbW92ZWRfZmxhZ1xyXG5cclxuICAgIC8vIHNldCBsZWZ0IGFuZCB0b3Agc3R5bGVzIGZvciB0aGUgbW92ZWQgZWxlbWVudCBpZiBlbGVtZW50IGlzIGluc2lkZSB3aW5kb3csIHRoaXMgY29uZGl0aW9ucyB3aWxsIHN0b3AgZWxlbWVudCBvbiB3aW5kb3cgYm91bmRzXHJcbiAgICBpZiAoWCA+IG9iak1hcmdpblszXSAmJiBYIDwgc2NyZWVuLndpZHRoIC0gb2JqTWFyZ2luWzFdKVxyXG4gICAge1xyXG4gICAgICBvYmouc3R5bGUubGVmdCA9IChYIC0gb2JqTWFyZ2luWzNdKSArICdweCc7XHJcbiAgICB9XHJcbiAgICBpZiAoWSA+IG9iak1hcmdpblswXSAmJiBZIDwgc2NyZWVuLmhlaWdodCAtIG9iak1hcmdpblsyXSlcclxuICAgIHtcclxuICAgICAgb2JqLnN0eWxlLnRvcCAgPSAoWSAtIG9iak1hcmdpblswXSkgKyAncHgnO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHNldCBjdXJyZW50IHRhYmxlLCByb3cgYW5kIGNlbGwgKHRoaXMgY29uZGl0aW9uIHNob3VsZCBzcGFyZSBDUFUpOiAxKSBpZiBtb3VzZSBwb2ludGVyIGlzIGluc2lkZSBESVYgaWQ9XCJyZWRpcHMtZHJhZ1wiIDIpIGFuZCBhdXRvc2Nyb2xsIGlzIG5vdCB3b3JraW5nIDMpIGFuZCBjdXJyZW50IHRhYmxlIGNvbnRhaW5zIG5lc3RlZCB0YWJsZSBvciBjdXJzb3IgaXMgb3V0c2lkZSBvZiBjdXJyZW50IGNlbGxcclxuICAgIGlmIChYIDwgZGl2Qm94WzFdICYmIFggPiBkaXZCb3hbM10gJiYgWSA8IGRpdkJveFsyXSAmJiBZID4gZGl2Qm94WzBdICYmXHJcbiAgICAgIGVkZ2UuZmxhZy54ID09PSAwICYmIGVkZ2UuZmxhZy55ID09PSAwICYmXHJcbiAgICAgIChjdXJyZW50Q2VsbC5jb250YWluVGFibGUgfHwgKFggPCBjdXJyZW50Q2VsbFszXSB8fCBYID4gY3VycmVudENlbGxbMV0gfHwgWSA8IGN1cnJlbnRDZWxsWzBdIHx8IFkgPiBjdXJyZW50Q2VsbFsyXSkpKVxyXG4gICAge1xyXG4gICAgICBzZXRUYWJsZVJvd0NvbHVtbigpOyAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGN1cnJlbnQgdGFibGUgcm93IGFuZCB0YWJsZSBjZWxsXHJcbiAgICAgIGNlbGxDaGFuZ2VkKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBuZXcgbG9jYXRpb24gaXMgaW5zaWRlIHRhYmxlIGFuZCBuZXcgbG9jYXRpb24gaXMgZGlmZmVyZW50IHRoZW4gb2xkIGxvY2F0aW9uXHJcbiAgICB9XHJcblxyXG4gICAgLy8gaWYgYXV0b1Njcm9sbCBvcHRpb24gaXMgZW5hYmxlZCAoYnkgZGVmYXVsdCBpdCBpcyBidXQgaXQgY2FuIGJlIHR1cm5lZCBvZmYpXHJcbiAgICBpZiAoUkVESVBTLmRyYWcuc2Nyb2xsLmVuYWJsZSlcclxuICAgIHtcclxuICAgICAgZWRnZS5wYWdlLnggPSBib3VuZCAtIChzY3JlZW4ud2lkdGggLyAyICA+IFggPyBYIC0gb2JqTWFyZ2luWzNdIDogc2NyZWVuLndpZHRoIC0gWCAtIG9iak1hcmdpblsxXSk7ICAgICAgIC8vIGNhbGN1bGF0ZSBob3Jpem9udGFsbHkgY3Jvc3NlZCBwYWdlIGJvdW5kXHJcblxyXG4gICAgICBpZiAoZWRnZS5wYWdlLnggPiAwKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgZWxlbWVudCBjcm9zc2VzIHBhZ2UgYm91bmQgdGhlbiBzZXQgc2Nyb2xsIGRpcmVjdGlvbiBhbmQgY2FsbCBhdXRvIHNjcm9sbFxyXG4gICAgICB7XHJcbiAgICAgICAgaWYgKGVkZ2UucGFnZS54ID4gYm91bmQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbiBjYXNlIHdoZW4gb2JqZWN0IGlzIG9ubHkgaGFsZiB2aXNpYmxlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZWRnZS5wYWdlLnggPSBib3VuZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGdldCBob3Jpem9udGFsIHdpbmRvdyBzY3JvbGwgcG9zaXRpb25cclxuICAgICAgICAvL3Njcm9sbFBvc2l0aW9uID0gd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0O1xyXG4gICAgICAgIHNjcm9sbFBvc2l0aW9uID0gMDsgICAvL2Rpc2FibGluZyBiZWNhdXNlIHdlIHNob3VsZG4ndCBoYXZlIHRoZSB1c2VyIHNjcm9sbGluZyBob3Jpem9udGFsbHkgYW5kIHRoaXMgaW1wcm92ZXMgcGVyZm9ybWFuY2UgZm9yIGxhcmdlIHRyZWVzXHJcblxyXG4gICAgICAgIGVkZ2UucGFnZS54ICo9IFggPCBzY3JlZW4ud2lkdGggLyAyID8gLTEgOiAxOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHNjcm9sbCBkaXJlY3Rpb25cclxuXHJcbiAgICAgICAgLy8gaWYgcGFnZSBib3VuZCBpcyBjcm9zc2VkIGFuZCB0aGlzIHR3byBjYXNlcyBhcmVuJ3QgbWV0OiAxKSBzY3JvbGxiYXIgaXMgb24gdGhlIGxlZnQgYW5kIHVzZXIgd2FudHMgdG8gc2Nyb2xsIGxlZnQgMikgc2Nyb2xsYmFyIGlzIG9uIHRoZSByaWdodCBhbmQgdXNlciB3YW50cyB0byBzY3JvbGwgcmlnaHRcclxuICAgICAgICBpZiAoISgoZWRnZS5wYWdlLnggPCAwICYmIHNjcm9sbFBvc2l0aW9uIDw9IDApIHx8IChlZGdlLnBhZ2UueCA+IDAgJiYgc2Nyb2xsUG9zaXRpb24gPj0gKHNjcm9sbERhdGEud2lkdGggLSBzY3JlZW4ud2lkdGgpKSkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgaWYgKGVkZ2UuZmxhZy54KysgPT09IDApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmlyZSBhdXRvc2Nyb2xsIGZ1bmN0aW9uICh0aGlzIHNob3VsZCBoYXBwZW4gb25seSBvbmNlKVxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBSRURJUFMuZXZlbnQucmVtb3ZlKHdpbmRvdywgJ3Njcm9sbCcsIGNhbGN1bGF0ZUNlbGxzKTsgICAgLy8gcmVzZXQgb25zY3JvbGwgZXZlbnRcclxuICAgICAgICAgICAgYXV0b1Njcm9sbFgod2luZG93KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGwgd2luZG93IGF1dG9zY3JvbGxcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZVxyXG4gICAgICB7XHJcbiAgICAgICAgZWRnZS5wYWdlLnggPSAwO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBlZGdlLnBhZ2UueSA9IGJvdW5kIC0gKHNjcmVlbi5oZWlnaHQgLyAyID4gWSA/IFkgLSBvYmpNYXJnaW5bMF0gOiBzY3JlZW4uaGVpZ2h0IC0gWSAtIG9iak1hcmdpblsyXSk7ICAgICAgLy8gY2FsY3VsYXRlIHZlcnRpY2FsbHkgY3Jvc3NlZCBwYWdlIGJvdW5kXHJcbiAgICAgIFxyXG4gICAgICBpZiAoZWRnZS5wYWdlLnkgPiAwKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgZWxlbWVudCBjcm9zc2VzIHBhZ2UgYm91bmRcclxuICAgICAge1xyXG4gICAgICAgIGlmIChlZGdlLnBhZ2UueSA+IGJvdW5kKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IG1heCBjcm9zc2VkIGJvdW5kXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZWRnZS5wYWdlLnkgPSBib3VuZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgc2Nyb2xsUG9zaXRpb24gPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXQgdmVydGljYWwgd2luZG93IHNjcm9sbCBwb3NpdGlvblxyXG4gICAgICAgIGVkZ2UucGFnZS55ICo9IFkgPCBzY3JlZW4uaGVpZ2h0IC8gMiA/IC0xIDogMTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHNjcm9sbCBkaXJlY3Rpb25cclxuICAgICAgICBcclxuICAgICAgICBpZiAoISgoZWRnZS5wYWdlLnkgPCAwICYmIHNjcm9sbFBvc2l0aW9uIDw9IDApIHx8IChlZGdlLnBhZ2UueSA+IDAgJiYgc2Nyb2xsUG9zaXRpb24gPj0gKHNjcm9sbERhdGEuaGVpZ2h0IC0gc2NyZWVuLmhlaWdodCkpKSkgICAgLy8gaWYgcGFnZSBib3VuZCBpcyBjcm9zc2VkIGFuZCB0aGlzIHR3byBjYXNlcyBhcmVuJ3QgbWV0OiAxKSBzY3JvbGxiYXIgaXMgb24gdGhlIHBhZ2UgdG9wIGFuZCB1c2VyIHdhbnRzIHRvIHNjcm9sbCB1cCAyKSBzY3JvbGxiYXIgaXMgb24gdGhlIHBhZ2UgYm90dG9tIGFuZCB1c2VyIHdhbnRzIHRvIHNjcm9sbCBkb3duXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgaWYgKGVkZ2UuZmxhZy55KysgPT09IDApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmlyZSBhdXRvc2Nyb2xsICh0aGlzIHNob3VsZCBoYXBwZW4gb25seSBvbmNlKVxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBSRURJUFMuZXZlbnQucmVtb3ZlKHdpbmRvdywgJ3Njcm9sbCcsIGNhbGN1bGF0ZUNlbGxzKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzZXQgb25zY3JvbGwgZXZlbnRcclxuICAgICAgICAgICAgYXV0b1Njcm9sbFkod2luZG93KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGwgd2luZG93IGF1dG9zY3JvbGxcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBcclxuICAgICAge1xyXG4gICAgICAgIGVkZ2UucGFnZS55ID0gMDtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgZm9yIChpID0gMDsgaSA8IHNjcm9sbERhdGEuY29udGFpbmVyLmxlbmd0aDsgaSsrKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRlc3QgaWYgZHJhZ2dlZCBvYmplY3QgaXMgaW4gc2Nyb2xsYWJsZSBjb250YWluZXIsIHRoaXMgY29kZSB3aWxsIGJlIGV4ZWN1dGVkIG9ubHkgaWYgc2Nyb2xsYWJsZSBjb250YWluZXIgKERJViB3aXRoIG92ZXJmbG93IG90aGVyIHRoYW4gJ3Zpc2libGUpIGV4aXN0cyBvbiBwYWdlXHJcbiAgICAgIHtcclxuICAgICAgICBzY2EgPSBzY3JvbGxEYXRhLmNvbnRhaW5lcltpXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBjdXJyZW50IHNjcm9sbGFibGUgY29udGFpbmVyIGFyZWFcclxuICAgICAgICBcclxuICAgICAgICBpZiAoc2NhLmF1dG9zY3JvbGwgJiYgWCA8IHNjYS5vZmZzZXRbMV0gJiYgWCA+IHNjYS5vZmZzZXRbM10gJiYgWSA8IHNjYS5vZmZzZXRbMl0gJiYgWSA+IHNjYS5vZmZzZXRbMF0pIC8vIGlmIGRyYWdnZWQgb2JqZWN0IGlzIGluc2lkZSBzY3JvbGxhYmxlIGNvbnRhaW5lciBhbmQgc2Nyb2xsYWJsZSBjb250YWluZXIgaGFzIGVuYWJsZWQgYXV0b3Njcm9sbCBvcHRpb25cclxuICAgICAgICB7XHJcbiAgICAgICAgICBlZGdlLmRpdi54ID0gYm91bmQgLSAoc2NhLm1pZHN0WCAgPiBYID8gWCAtIG9iak1hcmdpblszXSAtIHNjYS5vZmZzZXRbM10gOiBzY2Eub2Zmc2V0WzFdIC0gWCAtIG9iak1hcmdpblsxXSk7ICAgLy8gY2FsY3VsYXRlIGhvcml6b250YWxseSBjcm9zc2VkIHBhZ2UgYm91bmRcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYgKGVkZ2UuZGl2LnggPiAwKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgZWxlbWVudCBjcm9zc2VzIHBhZ2UgYm91bmQgdGhlbiBzZXQgc2Nyb2xsIGRpcmVjdGlvbiBhbmQgY2FsbCBhdXRvIHNjcm9sbFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoZWRnZS5kaXYueCA+IGJvdW5kKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW4gY2FzZSB3aGVuIG9iamVjdCBpcyBvbmx5IGhhbGYgdmlzaWJsZSAocGFnZSBpcyBzY3JvbGxlZCBvbiB0aGF0IG9iamVjdClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGVkZ2UuZGl2LnggPSBib3VuZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZWRnZS5kaXYueCAqPSBYIDwgc2NhLm1pZHN0WCA/IC0xIDogMTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBzY3JvbGwgZGlyZWN0aW9uOiBuZWdhdGl2ZSAtIGxlZnQsIHBvc2l0aXZlIC0gcmlnaHRcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChlZGdlLmZsYWcueCsrID09PSAwKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgb25zY3JvbGwgZXZlbnQgaGFuZGxlciBhbmQgY2FsbCBhdXRvU2Nyb2xsWSBmdW5jdGlvbiBvbmx5IG9uY2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIFJFRElQUy5ldmVudC5yZW1vdmUoc2NhLmRpdiwgJ3Njcm9sbCcsIGNhbGN1bGF0ZUNlbGxzKTtcclxuICAgICAgICAgICAgICBhdXRvU2Nyb2xsWChzY2EuZGl2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgZWRnZS5kaXYueCA9IDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGVkZ2UuZGl2LnkgPSBib3VuZCAtIChzY2EubWlkc3RZICA+IFkgPyBZIC0gb2JqTWFyZ2luWzBdIC0gc2NhLm9mZnNldFswXSA6IHNjYS5vZmZzZXRbMl0gLSBZIC0gb2JqTWFyZ2luWzJdKTsgICAvLyBjYWxjdWxhdGUgdmVydGljYWxseSBjcm9zc2VkIHBhZ2UgYm91bmRcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYgKGVkZ2UuZGl2LnkgPiAwKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgZWxlbWVudCBjcm9zc2VzIHBhZ2UgYm91bmQgdGhlbiBzZXQgc2Nyb2xsIGRpcmVjdGlvbiBhbmQgY2FsbCBhdXRvIHNjcm9sbFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoZWRnZS5kaXYueSA+IGJvdW5kKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW4gY2FzZSB3aGVuIG9iamVjdCBpcyBvbmx5IGhhbGYgdmlzaWJsZSAocGFnZSBpcyBzY3JvbGxlZCBvbiB0aGF0IG9iamVjdClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGVkZ2UuZGl2LnkgPSBib3VuZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZWRnZS5kaXYueSAqPSBZIDwgc2NhLm1pZHN0WSA/IC0xIDogMTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBzY3JvbGwgZGlyZWN0aW9uOiBuZWdhdGl2ZSAtIHVwLCBwb3NpdGl2ZSAtIGRvd25cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChlZGdlLmZsYWcueSsrID09PSAwKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgb25zY3JvbGwgZXZlbnQgaGFuZGxlciBhbmQgY2FsbCBhdXRvU2Nyb2xsWSBmdW5jdGlvbiBvbmx5IG9uY2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIFJFRElQUy5ldmVudC5yZW1vdmUoc2NhLmRpdiwgJ3Njcm9sbCcsIGNhbGN1bGF0ZUNlbGxzKTtcclxuICAgICAgICAgICAgICBhdXRvU2Nyb2xsWShzY2EuZGl2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgZWRnZS5kaXYueSA9IDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGJyZWFrOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBicmVhayB0aGUgbG9vcCAoY2hlY2tpbmcgZm9yIG90aGVyIHNjcm9sbGFibGUgY29udGFpbmVycyBpcyBub3QgbmVlZGVkKVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2UgKEkgbWVhbiBkcmFnZ2VkIG9iamVjdCBpc24ndCBpbnNpZGUgYW55IG9mIHNjcm9sbGFibGUgY29udGFpbmVyKSByZXNldCBjcm9zc2VkIGVkZ2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICBlZGdlLmRpdi54ID0gZWRnZS5kaXYueSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIHN0b3AgYWxsIHByb3BhZ2F0aW9uIG9mIHRoZSBldmVudCBpbiB0aGUgYnViYmxpbmcgcGhhc2UuICAoc2F2ZSBzeXN0ZW0gcmVzb3VyY2VzIGJ5IHR1cm5pbmcgb2ZmIGV2ZW50IGJ1YmJsaW5nIC8gcHJvcGFnYXRpb24pXHJcbiAgICBldnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcclxuICAgIGlmIChldnQuc3RvcFByb3BhZ2F0aW9uKSBcclxuICAgIHtcclxuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCAoZnJvbSBoYW5kbGVyT25Nb3VzZU1vdmUsIGF1dG9TY3JvbGxYLCBhdXRvU2Nyb2xsWSkgaW4gY2FzZSBvZiBjaGFuZ2Ugb2YgY3VycmVudCB0YWJsZSBjZWxsLlxyXG4gIC8vIFdoZW4gY2hhbmdlIGhhcHBlbnMsIHRoZW4gcmV0dXJuIGJhY2tncm91bmQgY29sb3IgdG8gb2xkIHBvc2l0aW9uLCBoaWdobGlnaHQgbmV3IHBvc2l0aW9uLCBjYWxjdWxhdGUgY2VsbCBib3VuZGFyaWVzIGFuZCBjYWxsIGV2ZW50LmNoYW5nZWQuXHJcbiAgY2VsbENoYW5nZWQgPSBmdW5jdGlvbiAoKSBcclxuICB7XHJcbiAgICBpZiAoKHJvdyAhPT0gcm93X29sZCB8fCBjZWxsICE9PSBjZWxsX29sZCkpIFxyXG4gICAge1xyXG4gICAgICBpZiAocm93X29sZCAhPT0gbnVsbCAmJiBjZWxsX29sZCAhPT0gbnVsbCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgY2VsbCBiYWNrZ3JvdW5kIGNvbG9yIHRvIHRoZSBwcmV2aW91cyBjZWxsXHJcbiAgICAgIHtcclxuICAgICAgICBzZXRUZFN0eWxlKHJvd19vbGQsIGJnU3R5bGVPbGQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGJhY2tncm91bmQgY29sb3IgZm9yIHByZXZpb3VzIHRhYmxlIHJvd1xyXG4gICAgICAgIFJFRElQUy5kcmFnLnRkLnByZXZpb3VzID0gdGQucHJldmlvdXMgPSB0YWJsZS5yb3dzW3Jvd19vbGRdLmNlbGxzW2NlbGxfb2xkXTsgICAgICAvLyBkZWZpbmUgcHJldmlvdXMgdGFibGUgY2VsbFxyXG4gICAgICAgIFJFRElQUy5kcmFnLnRkLmN1cnJlbnQgPSB0ZC5jdXJyZW50ID0gdGFibGUucm93c1tyb3ddLmNlbGxzW2NlbGxdOyAgICAgICAgICAgICAgICAvLyBkZWZpbmUgY3VycmVudCB0YWJsZSBjZWxsXHJcblxyXG4gICAgICAgIGlmIChyb3cgIT09IHJvd19vbGQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgdGFibGUgb3Igcm93IHNob3VsZCBjaGFuZ2UgKGNoYW5naW5nIGNlbGwgaW4gdGhlIHNhbWUgcm93IHdpbGwgYmUgaWdub3JlZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICBSRURJUFMuZHJhZy5ldmVudC5yb3dDaGFuZ2VkKHRkLmN1cnJlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgc2V0UG9zaXRpb24oKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBJbiBpbml0aWFsaXphdGlvbiBwaGFzZSwgdGhpcyBtZXRob2QgaXMgYXR0YWNoZWQgYXMgb25yZXNpemUgZXZlbnQgaGFuZGxlciBmb3Igd2luZG93LiAgSXQgYWxzbyBjYWxjdWxhdGVzIHdpbmRvdyB3aWR0aCBhbmQgd2luZG93IGhlaWdodC4gUmVzdWx0IGlzIHNhdmVkIGluIHZhcmlhYmxlcyBzY3JlZW4ud2lkdGggYW5kIHNjcmVlbi5oZWlnaHQgdmlzaWJsZSBpbnNpZGUgUkVESVBTLmRyYWcgcHJpdmF0ZSBzY29wZS5cclxuICBoYW5kbGVyT25SZXNpemUgPSBmdW5jdGlvbiAoKSBcclxuICB7XHJcbiAgICBzY3JlZW4ud2lkdGggID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICBzY3JlZW4uaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgXHJcbiAgICBzY3JvbGxEYXRhLndpZHRoICA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aDsgICAgIC8vIHNldCBzY3JvbGwgc2l6ZSAob25yZXNpemUsIG9ubG9hZCBhbmQgb25tb3VzZXVwIGV2ZW50KVxyXG4gICAgc2Nyb2xsRGF0YS5oZWlnaHQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xyXG4gICAgXHJcbiAgICBjYWxjdWxhdGVDZWxscygpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBjb2x1bXMgYW5kIHJvd3Mgb2Zmc2V0IChjZWxscyBkaW1lbnNpb25zKVxyXG4gIH07XHJcblxyXG4gIC8vIE1ldGhvZCBzZXRzIGN1cnJlbnQgcm93IGFuZCBjZWxsLiAgQ3VycmVudCBjZWxsIHBvc2l0aW9uIGlzIGJhc2VkIG9uIHBvc2l0aW9uIG9mIG1vdXNlIHBvaW50ZXIgYW5kIGNhbGN1bGF0ZWQgZ3JpZCBvZiB0YWJsZXMgaW5zaWRlIGRyYWcgY29udGFpbmVyLlxyXG4gIC8vIFJvd3Mgd2l0aCBkaXNwbGF5PSdub25lJyBhcmUgbm90IGNvbnRhaW5lZCBpbiByb3dfb2Zmc2V0IGFycmF5IHNvIHJvdyBib3VuZHMgY2FsY3VsYXRpb24gc2hvdWxkIHRha2UgY2FyZSBhYm91dCBzcGFyc2UgYXJyYXlzIChzaW5jZSB2ZXJzaW9uIDQuMy42KS5cclxuICBzZXRUYWJsZVJvd0NvbHVtbiA9IGZ1bmN0aW9uICgpXHJcbiAge1xyXG4gICAgdmFyIHByZXZpb3VzOyAgICAgICAvLyBzZXQgcHJldmlvdXMgcG9zaXRpb24gKGN1cnJlbnQgY2VsbCB3aWxsIG5vdCBiZSBoaWdobGlnaHRlZClcclxuICAgIHZhciByb3dfb2Zmc2V0OyAgICAgLy8gcm93IG9mZnNldHMgZm9yIHRoZSBzZWxlY3RlZCB0YWJsZSAocm93IGJveCBib3VuZHMpXHJcbiAgICB2YXIgcm93X2ZvdW5kOyAgICAgIC8vIHJlbWVtYmVyIGZvdW5kIHJvd1xyXG4gICAgdmFyIHRvcyA9IFtdOyAgICAgICAvLyB0YWJsZSBvZmZzZXRcclxuICAgIHZhciBYLCBZOyAgICAgICAgICAgLy8gWCBhbmQgWSBwb3NpdGlvbiBvZiBtb3VzZSBwb2ludGVyXHJcbiAgICB2YXIgaTsgICAgICAgICAgICAgIC8vIHVzZWQgaW4gbG9jYWwgbG9vcFxyXG5cclxuICAgIHByZXZpb3VzID0gZnVuY3Rpb24gKCkgICAgLy8gc2V0IHByZXZpb3VzIHBvc2l0aW9uIChjdXJyZW50IGNlbGwgd2lsbCBub3QgYmUgaGlnaGxpZ2h0ZWQpXHJcbiAgICB7XHJcbiAgICAgIGlmIChyb3dfb2xkICE9PSBudWxsICYmIGNlbGxfb2xkICE9PSBudWxsKVxyXG4gICAgICB7XHJcbiAgICAgICAgcm93ID0gcm93X29sZDtcclxuICAgICAgICBjZWxsID0gY2VsbF9vbGQ7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgWCA9IHBvaW50ZXIueDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJlcGFyZSBYIGFuZCBZIHBvc2l0aW9uIG9mIG1vdXNlIHBvaW50ZXJcclxuICAgIFkgPSBwb2ludGVyLnk7XHJcblxyXG4gICAgdG9zWzBdID0gdGFibGUucmVkaXBzLm9mZnNldFswXTsgLy8gdG9wXHJcbiAgICB0b3NbMV0gPSB0YWJsZS5yZWRpcHMub2Zmc2V0WzFdOyAvLyByaWdodFxyXG4gICAgdG9zWzJdID0gdGFibGUucmVkaXBzLm9mZnNldFsyXTsgLy8gYm90dG9tXHJcbiAgICB0b3NbM10gPSB0YWJsZS5yZWRpcHMub2Zmc2V0WzNdOyAvLyBsZWZ0XHJcblxyXG4gICAgLy8gaWYgdGFibGUgYmVsb25ncyB0byB0aGUgc2Nyb2xsYWJsZSBjb250YWluZXIgdGhlbiBzZXQgc2Nyb2xsYWJsZSBjb250YWluZXIgb2Zmc2V0IGlmIG5lZWRlZCBpbiBjYXNlIHdoZW4gc29tZSBwYXJ0cyBvZiB0YWJsZSBhcmUgaGlkZGVuIChmb3IgZXhhbXBsZSB3aXRoIFwib3ZlcmZsb3c6IGF1dG9cIilcclxuICAgIGlmICh0YWJsZS5zY2EgIT09IHVuZGVmaW5lZClcclxuICAgIHtcclxuICAgICAgdG9zWzBdID0gdG9zWzBdID4gdGFibGUuc2NhLm9mZnNldFswXSA/IHRvc1swXSA6IHRhYmxlLnNjYS5vZmZzZXRbMF07IC8vIHRvcFxyXG4gICAgICB0b3NbMV0gPSB0b3NbMV0gPCB0YWJsZS5zY2Eub2Zmc2V0WzFdID8gdG9zWzFdIDogdGFibGUuc2NhLm9mZnNldFsxXTsgLy8gcmlnaHRcclxuICAgICAgdG9zWzJdID0gdG9zWzJdIDwgdGFibGUuc2NhLm9mZnNldFsyXSA/IHRvc1syXSA6IHRhYmxlLnNjYS5vZmZzZXRbMl07IC8vIGJvdHRvbVxyXG4gICAgICB0b3NbM10gPSB0b3NbM10gPiB0YWJsZS5zY2Eub2Zmc2V0WzNdID8gdG9zWzNdIDogdGFibGUuc2NhLm9mZnNldFszXTsgLy8gbGVmdFxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0b3NbM10gPCBYICYmIFggPCB0b3NbMV0gJiYgdG9zWzBdIDwgWSAmJiBZIDwgdG9zWzJdKSAgICAgICAgICAgICAgICAgLy8gbW91c2UgcG9pbnRlciBpcyBpbnNpZGUgdGFibGUgKG9yIHNjcm9sbGFibGUgY29udGFpbmVyKVxyXG4gICAge1xyXG4gICAgICByb3dfb2Zmc2V0ID0gdGFibGUucmVkaXBzLnJvd19vZmZzZXQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWZpbmUgcm93IG9mZnNldHMgZm9yIHRoZSBzZWxlY3RlZCB0YWJsZSAocm93IGJveCBib3VuZHMpXHJcblxyXG4gICAgICBmb3IgKHJvdyA9IDA7IHJvdyA8IHJvd19vZmZzZXQubGVuZ3RoIC0gMTsgcm93KyspICAgICAgICAgICAgICAgICAgICAgICAvLyBmaW5kIHRoZSBjdXJyZW50IHJvdyAobG9vcCBza2lwcyBoaWRkZW4gcm93cylcclxuICAgICAge1xyXG4gICAgICAgIGlmIChyb3dfb2Zmc2V0W3Jvd10gPT09IHVuZGVmaW5lZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiByb3cgZG9lc24ndCBleGlzdCAoaW4gY2FzZSBvZiBoaWRkZW4gcm93KSAtIHNraXAgaXRcclxuICAgICAgICB7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGN1cnJlbnRDZWxsWzBdID0gcm93X29mZnNldFtyb3ddWzBdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgdG9wIGFuZCBib3R0b20gY2VsbCBib3VuZHNcclxuXHJcbiAgICAgICAgaWYgKHJvd19vZmZzZXRbcm93ICsgMV0gIT09IHVuZGVmaW5lZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBib3R0b20gY2VsbCBib3VuZCAoaWYgaXMgcG9zc2libGUpIC0gaGlkZGVuIHJvdyBkb2Vzbid0IGV4aXN0XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgY3VycmVudENlbGxbMl0gPSByb3dfb2Zmc2V0W3JvdyArIDFdWzBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGlkZGVuIHJvdyAobGlrZSBzdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZm9yIChpID0gcm93ICsgMjsgaSA8IHJvd19vZmZzZXQubGVuZ3RoOyBpKyspICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWFyY2ggZm9yIG5leHQgdmlzaWJsZSByb3dcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHJvd19vZmZzZXRbaV0gIT09IHVuZGVmaW5lZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmlzaWJsZSByb3cgZm91bmRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGN1cnJlbnRDZWxsWzJdID0gcm93X29mZnNldFtpXVswXTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKFkgPD0gY3VycmVudENlbGxbMl0pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvcCBib3VuZCBvZiB0aGUgbmV4dCByb3dcclxuICAgICAgICB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJvd19mb3VuZCA9IHJvdzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbWVtYmVyIGZvdW5kIHJvd1xyXG5cclxuICAgICAgaWYgKHJvdyA9PT0gcm93X29mZnNldC5sZW5ndGggLSAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgbG9vcCBleGNlZWRzLCB0aGVuIHNldCBib3VuZHMgZm9yIHRoZSBsYXN0IHJvdyAob2Zmc2V0IGZvciB0aGUgbGFzdCByb3cgZG9lc24ndCB3b3JrIGluIElFOCwgc28gdXNlIHRhYmxlIGJvdW5kcylcclxuICAgICAge1xyXG4gICAgICAgIGN1cnJlbnRDZWxsWzBdID0gcm93X29mZnNldFtyb3ddWzBdO1xyXG4gICAgICAgIGN1cnJlbnRDZWxsWzJdID0gdGFibGUucmVkaXBzLm9mZnNldFsyXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY2VsbCA9IDA7XHJcblxyXG4gICAgICBpZiAocm93IDwgMCB8fCBjZWxsIDwgMCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgY2VsbCA8IDAgb3Igcm93IDwgMCB0aGVuIHVzZSBsYXN0IHBvc3NpYmxlIGxvY2F0aW9uXHJcbiAgICAgIHtcclxuICAgICAgICBwcmV2aW91cygpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKHJvdyAhPT0gcm93X2ZvdW5kKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50IGNlbGwgZm91bmQgYnV0IGlmIGN1cnJlbnQgcm93IGRpZmZlciBmcm9tIHByZXZpb3VzbHkgZm91bmQgcm93ICh0aGFua3MgdG9vIHdoaWxlIGxvb3Agd2l0aCByb3ctLSkgdGhlbiB0ZXN0IGlmIFkgaXMgaW5zaWRlIGN1cnJlbnQgY2VsbCwgKHRoaXMgc2hvdWxkIHByZXZlbnQgY2FzZSB3aGVyZSBURCBib3JkZXIgPiAxcHggYW5kIHVwcGVyIGNvbHNwYW5lZCByb3cgbGlrZSBpbiBleGFtcGxlMTUpIGxvZ2ljIHdpbGwgZW5kIGluIHVwcGVyIGNvbHNwYW5lZCByb3cgd2hpbGUgY3VycmVudCByb3cgd2lsbCBub3QgbW92ZSAtIGFuZCB0aGF0IHdhcyB3cm9uZ1xyXG4gICAgICB7XHJcblxyXG4gICAgICAgIGN1cnJlbnRDZWxsWzBdID0gcm93X29mZnNldFtyb3ddWzBdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVjYWxjdWxhdGUgdG9wIGFuZCBib3R0b20gcm93IG9mZnNldCAoYWdhaW4pXHJcbiAgICAgICAgY3VycmVudENlbGxbMl0gPSBjdXJyZW50Q2VsbFswXSArIHRhYmxlLnJvd3Nbcm93XS5jZWxsc1tjZWxsXS5vZmZzZXRIZWlnaHQ7XHJcblxyXG4gICAgICAgIGlmIChZIDwgY3VycmVudENlbGxbMF0gfHwgWSA+IGN1cnJlbnRDZWxsWzJdKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgWSBpcyBvdXRzaWRlIG9mIHRoZSBjdXJyZW50IHJvdywgcmV0dXJuIHByZXZpb3VzIGxvY2F0aW9uXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJldmlvdXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBNZXRob2Qgc2V0cyBiYWNrZ3JvdW5kIGNvbG9yIGZvciB0aGUgY3VycmVudCB0YWJsZSBjZWxsIGFuZCByZW1lbWJlcnMgcHJldmlvdXMgcG9zaXRpb24gYW5kIGJhY2tncm91bmQgY29sb3IuICBJdCBpcyBjYWxsZWQgZnJvbSBoYW5kbGVyT25Nb3VzZU1vdmUgYW5kIGNlbGxDaGFuZ2VkLlxyXG4gIHNldFBvc2l0aW9uID0gZnVuY3Rpb24gKClcclxuICB7XHJcbiAgICBpZiAocm93ICE9PSBudWxsICYmIGNlbGwgIT09IG51bGwpICAgICAgLy8gaW4gY2FzZSBpZiBvcmRpbmFyeSBlbGVtZW50IGlzIHBsYWNlZCBpbnNpZGUgJ2RlbnknIHRhYmxlIGNlbGxcclxuICAgIHtcclxuICAgICAgYmdTdHlsZU9sZCA9IGdldFRkU3R5bGUocm93KTsgICAgICAgICAvLyByZW1lbWJlciBiYWNrZ3JvdW5kIGNvbG9yIGJlZm9yZSBzZXR0aW5nIHRoZSBuZXcgYmFja2dyb3VuZCBjb2xvclxyXG4gICAgICBzZXRUZFN0eWxlKHJvdyk7ICAgICAgICAgICAgICAgICAgICAgIC8vIGhpZ2hsaWdodCBjdXJyZW50IFREIC8gVFIgKGNvbG9ycyBhbmQgc3R5bGVzIGFyZSByZWFkIGZyb20gcHVibGljIHByb3BlcnR5IFwiaG92ZXJcIlxyXG4gICAgICByb3dfb2xkID0gcm93OyAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbWVtYmVyIGN1cnJlbnQgcG9zaXRpb24gKGZvciByb3cgYW5kIGNlbGwpXHJcbiAgICAgIGNlbGxfb2xkID0gY2VsbDtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBNZXRob2Qgc2V0cyB0YWJsZSBjZWxsKHMpIGJhY2tncm91bmQgc3R5bGVzIChiYWNrZ3JvdW5kIGNvbG9ycyBhbmQgYm9yZGVyIHN0eWxlcykuXHJcbiAgICogSWYgdGRTdHlsZSBpcyB1bmRlZmluZWQgdGhlbiBjdXJyZW50IHRkL3RyIHdpbGwgYmUgaGlnaGxpZ2h0ZWQgZnJvbSBwdWJsaWMgcHJvcGVydHkgaG92ZXIuY29sb3JfdGQsIGhvdmVyLmNvbG9yX3RyIC4uLlxyXG4gICAqIEBwYXJhbSB7SW50ZWdlcn0gcmkgUm93IGluZGV4LlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0IE9iamVjdCBjb250YWlucyBiYWNrZ3JvdW5kIGNvbG9yIGFuZCBib3JkZXIgc3R5bGVzIChcInRcIiBpcyBURCBzdHlsZSBvYmplY3QgaXMgcHJlcGFyZWQgaW4gZ2V0VGRTdHlsZSBtZXRob2QpLlxyXG4gICAqL1xyXG4gIHNldFRkU3R5bGUgPSBmdW5jdGlvbiAocmksIHQpIFxyXG4gIHtcclxuICAgIHZhciB0ciwgczsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZWZlcmVuY2UgdG8gdGhlIHRhYmxlIHJvdyBhbmQgdGQuc3R5bGVcclxuXHJcbiAgICB0ciA9IHRhYmxlLnJvd3NbcmldOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCB0YWJsZSByb3dcclxuICAgIFxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ci5jZWxscy5sZW5ndGg7IGkrKykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBjb2xvcnMgdG8gdGFibGUgY2VsbHMgKHJlc3BlY3RpdmVseSkgb3IgZmlyc3QgY29sb3IgdG8gYWxsIGNlbGxzIChpbiBjYXNlIG9mIHNldHRpbmdzIGhvdmVyIHRvIHRoZSByb3cpXHJcbiAgICB7XHJcbiAgICAgIHMgPSB0ci5jZWxsc1tpXS5zdHlsZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHJlZmVyZW5jZSB0byBjdXJyZW50IFREIHN0eWxlXHJcbiAgICAgIHMuYmFja2dyb3VuZENvbG9yID0gKHQgPT09IHVuZGVmaW5lZCkgPyBSRURJUFMuZHJhZy5ob3Zlci5jb2xvclRyIDogdC5jb2xvcltpXS50b1N0cmluZygpOyAgLy8gVFIgYmFja2dyb3VuZCBjb2xvciAtIHRkU3R5bGUgaXMgdW5kZWZpbmVkIHRoZW4gaGlnaGxpZ2h0IFREIG90aGVyd2lzZSByZXR1cm4gcHJldmlvdXMgYmFja2dyb3VuZCBjb2xvclxyXG4gICAgICBcclxuICAgICAgaWYgKFJFRElQUy5kcmFnLmhvdmVyLmJvcmRlclRyICE9PSB1bmRlZmluZWQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUUiBib3JkZXIgLSBpZiBob3Zlci5ib3JkZXJUZCBpcyBzZXQgdGhlbiB0YWtlIGNhcmUgb2YgYm9yZGVyIHN0eWxlXHJcbiAgICAgIHtcclxuICAgICAgICBpZiAodCA9PT0gdW5kZWZpbmVkKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgYm9yZGVyIChoaWdobGlnaHQpIC0gc291cmNlIHJvdyB3aWxsIG5vdCBoYXZlIGFueSBib3JkZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICBpZiAocm93IDwgcm93X3NvdXJjZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgcm93IGlzIG1vdmVkIGFib3ZlIHNvdXJjZSByb3cgaW4gY3VycmVudCB0YWJsZVxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBzLmJvcmRlclRvcCA9IFJFRElQUy5kcmFnLmhvdmVyLmJvcmRlclRyO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHJvdyBpcyBtb3ZlZCBiZWxvdyBzb3VyY2Ugcm93IGluIGN1cnJlbnQgdGFibGVcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgcy5ib3JkZXJCb3R0b20gPSBSRURJUFMuZHJhZy5ob3Zlci5ib3JkZXJUcjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIHByZXZpb3VzIHN0YXRlIGJvcmRlclRvcCBhbmQgYm9yZGVyQm90dG9tIChleGl0IGZyb20gVEQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcy5ib3JkZXJUb3BXaWR0aCA9IHQudG9wW2ldWzBdO1xyXG4gICAgICAgICAgcy5ib3JkZXJUb3BTdHlsZSA9IHQudG9wW2ldWzFdO1xyXG4gICAgICAgICAgcy5ib3JkZXJUb3BDb2xvciA9IHQudG9wW2ldWzJdO1xyXG4gICAgICAgICAgcy5ib3JkZXJCb3R0b21XaWR0aCA9IHQuYm90dG9tW2ldWzBdO1xyXG4gICAgICAgICAgcy5ib3JkZXJCb3R0b21TdHlsZSA9IHQuYm90dG9tW2ldWzFdO1xyXG4gICAgICAgICAgcy5ib3JkZXJCb3R0b21Db2xvciA9IHQuYm90dG9tW2ldWzJdO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG5cclxuICAvLyBNZXRob2QgcmV0dXJucyBiYWNrZ3JvdW5kIGFuZCBib3JkZXIgc3R5bGVzIGFzIG9iamVjdCBmb3IgdGhlIGlucHV0IHBhcmFtZXRlciByb3cgaW5kZXggKHJpKS4gIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgYmFja2dyb3VuZCBjb2xvciBhbmQgYm9yZGVyIHN0eWxlcyAoZm9yIHRoZSByb3cpLlxyXG4gIGdldFRkU3R5bGUgPSBmdW5jdGlvbiAocmkpIFxyXG4gIHtcclxuICAgIHZhciB0ciwgYzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZWZlcmVuY2UgdG8gdGhlIHRhYmxlIHJvdyBhbmQgdGQgcmVmZXJlbmNlICAgXHJcbiAgICB2YXIgdCA9IHtjb2xvcjogW10sIHRvcDogW10sIHJpZ2h0OiBbXSwgYm90dG9tOiBbXSwgbGVmdDogW119OyAgICAgICAgLy8gZGVmaW5lIFREIHN0eWxlIG9iamVjdCB3aXRoIGJhY2tncm91bmQgY29sb3IgYW5kIGJvcmRlciBzdHlsZXM6IHRvcCwgcmlnaHQsIGJvdHRvbSBhbmQgbGVmdFxyXG4gICAgICBcclxuICAgIHZhciBib3JkZXIgPSBmdW5jdGlvbiAoYywgbmFtZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcml2YXRlIG1ldGhvZCBnZXRzIGJvcmRlciBzdHlsZXM6IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdFxyXG4gICAge1xyXG4gICAgICB2YXIgd2lkdGggPSAnYm9yZGVyJyArIG5hbWUgKyAnV2lkdGgnLCBzdHlsZSA9ICdib3JkZXInICsgbmFtZSArICdTdHlsZScsIGNvbG9yID0gJ2JvcmRlcicgKyBuYW1lICsgJ0NvbG9yJztcclxuICAgICAgcmV0dXJuIFtnZXRTdHlsZShjLCB3aWR0aCksIGdldFN0eWxlKGMsIHN0eWxlKSwgZ2V0U3R5bGUoYywgY29sb3IpXTtcclxuICAgIH07XHJcblxyXG4gICAgdHIgPSB0YWJsZS5yb3dzW3JpXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgdGFibGUgcm93XHJcbiAgICBcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHIuY2VsbHMubGVuZ3RoOyBpKyspICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1lbWJlciBzdHlsZXMgZm9yIGVhY2ggdGFibGUgY2VsbFxyXG4gICAge1xyXG4gICAgICBjID0gdHIuY2VsbHNbaV07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBURCByZWZlcmVuY2VcclxuICAgICAgdC5jb2xvcltpXSA9IGMuc3R5bGUuYmFja2dyb3VuZENvbG9yOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1lbWJlciBiYWNrZ3JvdW5kIGNvbG9yXHJcbiAgICAgIFxyXG4gICAgICBpZiAoUkVESVBTLmRyYWcuaG92ZXIuYm9yZGVyVHIgIT09IHVuZGVmaW5lZCkgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbWVtYmVyIHRvcCBhbmQgYm90dG9tIFREIGJvcmRlciBzdHlsZXMgaWYgaG92ZXIuYm9yZGVyVHIgcHJvcGVydHkgaXMgc2V0XHJcbiAgICAgIHtcclxuICAgICAgICB0LnRvcFtpXSA9IGJvcmRlcihjLCAnVG9wJyk7XHJcbiAgICAgICAgdC5ib3R0b21baV0gPSBib3JkZXIoYywgJ0JvdHRvbScpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHQ7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogTWV0aG9kIHJldHVybnMgYXJyYXkgb2YgZWxlbWVudCBib3VuZHMgKG9mZnNldCkgdG9wLCByaWdodCwgYm90dG9tIGFuZCBsZWZ0IChuZWVkZWQgZm9yIHRhYmxlIGdyaWQgY2FsY3VsYXRpb24pLlxyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGJveCBIVE1MRWxlbWVudCBmb3IgYm94IG1ldHJpY3MuXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IFtwb3NpdGlvbl0gSFRNTEVsZW1lbnQgXCJwb3NpdGlvblwiIHN0eWxlLiBFbGVtZW50cyB3aXRoIHN0eWxlIFwiZml4ZWRcIiB3aWxsIG5vdCBoYXZlIGluY2x1ZGVkIHBhZ2Ugc2Nyb2xsIG9mZnNldC5cclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtib3hfc2Nyb2xsXSBJZiBzZXQgdG8gXCJmYWxzZVwiIHRoZW4gZWxlbWVudCBzY3JvbGwgb2Zmc2V0IHdpbGwgbm90IGJlIGluY2x1ZGVkIGluIGNhbGN1bGF0aW9uIChkZWZhdWx0IGlzIFwidHJ1ZVwiKS5cclxuICAgKiBAcmV0dXJuIHtBcnJheX0gQm94IG9mZnNldCBhcnJheTogWyB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQgXVxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogLy8gY2FsY3VsYXRlIGJveCBvZmZzZXQgZm9yIHRoZSBkaXYgaWQ9XCJyZWRpcHMtZHJhZ1wiXHJcbiAgICogZGl2Ym94ID0gYm94T2Zmc2V0KGRyYWdDb250YWluZXIpO1xyXG4gICAqIEBleGFtcGxlXHJcbiAgICogLy8gaW5jbHVkZSBzY3JvbGwgcG9zaXRpb24gaW4gb2Zmc2V0XHJcbiAgICogb2Zmc2V0ID0gYm94T2Zmc2V0KHJvd09iaiwgJ2ZpeGVkJyk7XHJcbiAgICogQGV4YW1wbGVcclxuICAgKiAvLyBnZXQgRElWIG9mZnNldCB3aXRoIG9yIHdpdGhvdXQgXCJwYWdlIHNjcm9sbFwiIGFuZCBleGNsdWRlZCBlbGVtZW50IHNjcm9sbCBvZmZzZXRcclxuICAgKiBjYiA9IGJveE9mZnNldChkaXYsIHBvc2l0aW9uLCBmYWxzZSk7XHJcbiAgICovXHJcbiAgYm94T2Zmc2V0ID0gZnVuY3Rpb24gKGJveCwgcG9zaXRpb24sIGJveF9zY3JvbGwpXHJcbiAge1xyXG4gICAgdmFyIG9MZWZ0ID0gMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWZpbmUgb2Zmc2V0IGxlZnQgKHRha2UgY2FyZSBvZiBob3Jpem9udGFsIHNjcm9sbCBwb3NpdGlvbilcclxuICAgIHZhciBvVG9wICA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVmaW5lIG9mZnNldCB0b3AgKHRha2UgY2FyZSBvZCB2ZXJ0aWNhbCBzY3JvbGwgcG9zaXRpb24pXHJcbiAgICB2YXIgYm94T2xkID0gYm94OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbWVtYmVyIGJveCBvYmplY3RcclxuXHJcbiAgICBpZiAocG9zaXRpb24gIT09ICdmaXhlZCcpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRhYmxlX3Bvc2l0aW9uIGlzIHVuZGVmaW5lZCwgJycgb3IgJ3BhZ2Vfc2Nyb2xsJyB0aGVuIGluY2x1ZGUgcGFnZSBzY3JvbGwgb2Zmc2V0LCB3aW5kb3dTY3JvbGxQb3NpdGlvbiBpcyBzZXQgaW4gY2FsY3VsYXRlQ2VsbHMoKSwgY2FsY3VsYXRlQ2VsbHMoKSBpcyBjYWxsZWQgb24gd2luZG93IHNjcm9sbCBldmVudFxyXG4gICAge1xyXG4gICAgICBvTGVmdCA9IDAgLSB3aW5kb3dTY3JvbGxQb3NpdGlvblswXTsgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWZpbmUgb2Zmc2V0IGxlZnQgKHRha2UgY2FyZSBvZiBob3Jpem9udGFsIHNjcm9sbCBwb3NpdGlvbilcclxuICAgICAgb1RvcCAgPSAwIC0gd2luZG93U2Nyb2xsUG9zaXRpb25bMV07ICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVmaW5lIG9mZnNldCB0b3AgKHRha2UgY2FyZSBvZCB2ZXJ0aWNhbCBzY3JvbGwgcG9zaXRpb24pXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGJveF9zY3JvbGwgPT09IHVuZGVmaW5lZCB8fCBib3hfc2Nyb2xsID09PSB0cnVlKSAgICAgICAgICAvLyBjbGltYiB1cCB0aHJvdWdoIERPTSBoaWVyYXJjaHkgKGdldFNjcm9sbFBvc2l0aW9uKCkgdGFrZXMgY2FyZSBhYm91dCBwYWdlIHNjcm9sbCBwb3NpdGlvbnMpXHJcbiAgICB7XHJcbiAgICAgIGRvXHJcbiAgICAgIHtcclxuICAgICAgICBvTGVmdCArPSBib3gub2Zmc2V0TGVmdCAtIGJveC5zY3JvbGxMZWZ0O1xyXG4gICAgICAgIG9Ub3AgKz0gYm94Lm9mZnNldFRvcCAtIGJveC5zY3JvbGxUb3A7XHJcbiAgICAgICAgYm94ID0gYm94Lm9mZnNldFBhcmVudDtcclxuICAgICAgfVxyXG4gICAgICB3aGlsZSAoYm94ICYmIGJveC5ub2RlTmFtZSAhPT0gJ0JPRFknKTtcclxuICAgIH1cclxuICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2xpbWIgdXAgdG8gdGhlIEJPRFkgZWxlbWVudCBidXQgd2l0aG91dCBzY3JvbGwgcG9zaXRpb25zXHJcbiAgICB7XHJcbiAgICAgIGRvXHJcbiAgICAgIHtcclxuICAgICAgICBvTGVmdCArPSBib3gub2Zmc2V0TGVmdDtcclxuICAgICAgICBvVG9wICs9IGJveC5vZmZzZXRUb3A7XHJcbiAgICAgICAgYm94ID0gYm94Lm9mZnNldFBhcmVudDtcclxuICAgICAgfVxyXG4gICAgICB3aGlsZSAoYm94ICYmIGJveC5ub2RlTmFtZSAhPT0gJ0JPRFknKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAgICAgICAgdG9wICAgICAgICAgICAgICAgICByaWdodCwgICAgICAgICAgICAgICAgICAgICBib3R0b20gICAgICAgICAgIGxlZnRcclxuICAgIHJldHVybiBbIG9Ub3AsIG9MZWZ0ICsgYm94T2xkLm9mZnNldFdpZHRoLCBvVG9wICsgYm94T2xkLm9mZnNldEhlaWdodCwgb0xlZnQgXTtcclxuICB9O1xyXG5cclxuICAvLyBNZXRob2QgaXMgY2FsbGVkIGluIGV2ZXJ5IHBvc3NpYmxlIGNhc2Ugd2hlbiBwb3NpdGlvbiBvciBzaXplIG9mIHRhYmxlIGdyaWQgY291bGQgY2hhbmdlIGxpa2U6IHBhZ2Ugc2Nyb2xsaW5nLCBlbGVtZW50IGRyb3BwZWQgdG8gdGhlIHRhYmxlIGNlbGwsIGVsZW1lbnQgc3RhcnQgZHJhZ2dpbmcgYW5kIHNvIG9uLlxyXG4gIC8vIEl0IGNhbGN1bGF0ZXMgdGFibGUgcm93IG9mZnNldHMgKHRhYmxlIGdyaWQpIGFuZCBzYXZlcyB0byB0aGUgXCJ0YWJsZXNcIiBhcnJheS5cclxuICAvLyBUYWJsZSByb3dzIHdpdGggc3R5bGUgZGlzcGxheT0nbm9uZScgYXJlIHNraXBwZWQuXHJcbiAgY2FsY3VsYXRlQ2VsbHMgPSBmdW5jdGlvbiAoKSBcclxuICB7XHJcbiAgICB2YXIgcm93X29mZnNldDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJvdyBib3hcclxuICAgIHZhciBwb3NpdGlvbjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgZWxlbWVudCAodGFibGUgb3IgdGFibGUgY29udGFpbmVyKSBoYXMgcG9zaXRpb246Zml4ZWQgdGhlbiBcInBhZ2Ugc2Nyb2xsXCIgb2Zmc2V0IHNob3VsZCBub3QgYmUgYWRkZWRcclxuICAgIHZhciBjYjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYm94IG9mZnNldCBmb3IgY29udGFpbmVyIGJveCAoY2IpXHJcblxyXG4gICAgd2luZG93U2Nyb2xsUG9zaXRpb24gPSBnZXRTY3JvbGxQb3NpdGlvbigpOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGVDZWxscygpIGlzIGNhbGxlZCBvbiB3aW5kb3cgc2Nyb2xsIGV2ZW50IHNvIGhlcmUgaXMgcGVyZmVjdCBwbGFjZSB0byByZWZyZXNoIHdpbmRvdyBzY3JvbGwgcG9zaXRpb25cclxuICAgIHJvd19vZmZzZXQgPSBbXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZSByb3dfb2Zmc2V0IGFycmF5XHJcbiAgICBcclxuICAgIHBvc2l0aW9uID0gZ2V0U3R5bGUodGFibGUsICdwb3NpdGlvbicpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHRhYmxlIHN0eWxlIHBvc2l0aW9uICh0byBleGNsdWRlIFwicGFnZSBzY3JvbGxcIiBvZmZzZXQgZnJvbSBjYWxjdWxhdGlvbiBpZiBuZWVkZWQpXHJcbiAgICBcclxuICAgIGlmIChwb3NpdGlvbiAhPT0gJ2ZpeGVkJykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGFibGUgZG9lc24ndCBoYXZlIHN0eWxlIHBvc2l0aW9uOmZpeGVkIHRoZW4gdGFibGUgY29udGFpbmVyIHNob3VsZCBiZSB0ZXN0ZWRcclxuICAgIHtcclxuICAgICAgcG9zaXRpb24gPSBnZXRTdHlsZSh0YWJsZS5wYXJlbnROb2RlLCAncG9zaXRpb24nKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZm9yICh2YXIgaSA9IHRhYmxlLnJvd3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pICAgICAgICAgICAgICAgICAgICAvLyBiYWNrd2FyZCBsb29wIGhhcyBiZXR0ZXIgcGVyZm9tYW5jZVxyXG4gICAge1xyXG4gICAgICBpZiAodGFibGUucm93c1tpXS5zdHlsZS5kaXNwbGF5ICE9PSAnbm9uZScpICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgcm93cyB0byB0aGUgb2Zmc2V0IGFycmF5IGlmIHJvdyBpcyBub3QgaGlkZGVuXHJcbiAgICAgIHtcclxuICAgICAgICByb3dfb2Zmc2V0W2ldID0gYm94T2Zmc2V0KHRhYmxlLnJvd3NbaV0sIHBvc2l0aW9uKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0YWJsZS5yZWRpcHMub2Zmc2V0ID0gYm94T2Zmc2V0KHRhYmxlLCBwb3NpdGlvbik7ICAgICAgICAgICAgICAgICAgIC8vIHNhdmUgdGFibGUgaW5mb3JtYXRpb25zICh0YWJsZSBvZmZzZXQgYW5kIHJvdyBvZmZzZXRzKVxyXG4gICAgdGFibGUucmVkaXBzLnJvd19vZmZzZXQgPSByb3dfb2Zmc2V0O1xyXG5cclxuICAgIGRpdkJveCA9IGJveE9mZnNldChkcmFnQ29udGFpbmVyKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIGJveCBvZmZzZXQgZm9yIHRoZSBkaXYgaWQ9cmVkaXBzLWRyYWdcclxuICAgIFxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY3JvbGxEYXRhLmNvbnRhaW5lci5sZW5ndGg7IGkrKykgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHNjcm9sbGFibGUgY29udGFpbmVyIGFyZWFzIGlmIG5lZWRlZFxyXG4gICAge1xyXG4gICAgICBwb3NpdGlvbiA9IGdldFN0eWxlKHNjcm9sbERhdGEuY29udGFpbmVyW2ldLmRpdiwgJ3Bvc2l0aW9uJyk7ICAgICAvLyBzZXQgY29udGFpbmVyIGJveCBzdHlsZSBwb3NpdGlvbiAodG8gZXhjbHVkZSBwYWdlIHNjcm9sbCBvZmZzZXQgZnJvbSBjYWxjdWxhdGlvbiBpZiBuZWVkZWQpXHJcbiAgICAgIGNiID0gYm94T2Zmc2V0KHNjcm9sbERhdGEuY29udGFpbmVyW2ldLmRpdiwgcG9zaXRpb24sIGZhbHNlKTsgICAgIC8vIGdldCBESVYgY29udGFpbmVyIG9mZnNldCB3aXRoIG9yIHdpdGhvdXQgXCJwYWdlIHNjcm9sbFwiIGFuZCBleGNsdWRlZCBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIGNvbnRlbnRcclxuICAgICAgXHJcbiAgICAgIHNjcm9sbERhdGEuY29udGFpbmVyW2ldLm9mZnNldCA9IGNiOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByZXBhcmUgc2Nyb2xsYWJsZSBjb250YWluZXIgYXJlYXNcclxuICAgICAgc2Nyb2xsRGF0YS5jb250YWluZXJbaV0ubWlkc3RYID0gKGNiWzFdICsgY2JbM10pIC8gMjtcclxuICAgICAgc2Nyb2xsRGF0YS5jb250YWluZXJbaV0ubWlkc3RZID0gKGNiWzBdICsgY2JbMl0pIC8gMjtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBNZXRob2QgcmV0dXJucyBjdXJyZW50IHBhZ2Ugc2Nyb2xsIHZhbHVlcyBhcyBhcnJheSAoWCBhbmQgWSBheGlzKS5cclxuICBnZXRTY3JvbGxQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIFxyXG4gIHtcclxuICAgIHZhciBzY3JvbGxZID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XHJcbiAgICAvL3ZhciBzY3JvbGxYID0gd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0O1xyXG4gICAgdmFyIHNjcm9sbFggPSAwO1xyXG5cclxuICAgIHJldHVybiBbIHNjcm9sbFgsIHNjcm9sbFkgXTtcclxuICB9O1xyXG5cclxuICAvLyBIb3Jpem9udGFsIGF1dG8gc2Nyb2xsIG1ldGhvZC4gIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHNvIFdpbmRvdyBvciBESVYgZWxlbWVudCAoc28gLSBzY3JvbGwgb2JqZWN0KS5cclxuICBhdXRvU2Nyb2xsWCA9IGZ1bmN0aW9uIChzbykgXHJcbiAge1xyXG4gICAgdmFyIHBvcywgICAgICAvLyBsZWZ0IHN0eWxlIHBvc2l0aW9uXHJcbiAgICAgIG9sZCwgICAgICAvLyBvbGQgd2luZG93IHNjcm9sbCBwb3NpdGlvbiAobmVlZGVkIGZvciB3aW5kb3cgc2Nyb2xsaW5nKVxyXG4gICAgICBzY3JvbGxQb3NpdGlvbiwgLy8gZGVmaW5lIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uXHJcbiAgICAgIG1heHNwLCAgICAgIC8vIG1heGltdW0gc2Nyb2xsIHBvc2l0aW9uXHJcbiAgICAgIGVkZ2VDcm9zc2VkLCAgLy8gY3Jvc3NlZCBlZGdlIGZvciB3aW5kb3cgYW5kIHNjcm9sbGFibGUgY29udGFpbmVyXHJcbiAgICAgIFggPSBwb2ludGVyLngsICAvLyBkZWZpbmUgcG9pbnRlciBYIHBvc2l0aW9uXHJcbiAgICAgIFkgPSBwb2ludGVyLnk7ICAvLyBkZWZpbmUgcG9pbnRlciBZIHBvc2l0aW9uXHJcbiAgICAvLyBpZiBtb3VzZXVwIHRoZW4gc3RvcCBoYW5kbGluZyBcImN1cnJlbnQgY2VsbFwiXHJcbiAgICBpZiAoZWRnZS5mbGFnLnggPiAwKSB7XHJcbiAgICAgIC8vIGNhbGN1bGF0ZSBjZWxsIChhdXRvc2Nyb2xsIGlzIHdvcmtpbmcpXHJcbiAgICAgIGNhbGN1bGF0ZUNlbGxzKCk7XHJcbiAgICAgIC8vIHNldCBjdXJyZW50IHRhYmxlIHJvdyBhbmQgdGFibGUgY2VsbFxyXG4gICAgICBzZXRUYWJsZVJvd0NvbHVtbigpO1xyXG4gICAgICAvLyBzZXQgY3VycmVudCB0YWJsZSwgcm93IGFuZCBjZWxsIGlmIG1vdXNlIHBvaW50ZXIgaXMgaW5zaWRlIERJViBpZD1cInJlZGlwcy1kcmFnXCJcclxuICAgICAgaWYgKFggPCBkaXZCb3hbMV0gJiYgWCA+IGRpdkJveFszXSAmJiBZIDwgZGl2Qm94WzJdICYmIFkgPiBkaXZCb3hbMF0pIHtcclxuICAgICAgICBjZWxsQ2hhbmdlZCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBzYXZlIHNjcm9sbCBvYmplY3QgdG8gdGhlIGdsb2JhbCB2YXJpYWJsZSBmb3IgdGhlIGZpcnN0IGNhbGwgZnJvbSBoYW5kbGVyT25Nb3VzZU1vdmVcclxuICAgIC8vIHJlY3Vyc2l2ZSBjYWxscyB3aWxsIG5vdCBlbnRlciB0aGlzIGNvZGUgYW5kIHJlZmVyZW5jZSB0byB0aGUgc2Nyb2xsRGF0YS5vYmogd2lsbCBiZSBwcmVzZXJ2ZWRcclxuICAgIGlmICh0eXBlb2Yoc28pID09PSAnb2JqZWN0Jykge1xyXG4gICAgICBzY3JvbGxEYXRhLm9iaiA9IHNvO1xyXG4gICAgfVxyXG4gICAgLy8gd2luZG93IGF1dG9zY3JvbGwgKGRlZmluZSBjdXJyZW50LCBvbGQgYW5kIG1heGltdW0gc2Nyb2xsIHBvc2l0aW9uKVxyXG4gICAgaWYgKHNjcm9sbERhdGEub2JqID09PSB3aW5kb3cpIHtcclxuICAgICAgc2Nyb2xsUG9zaXRpb24gPSBvbGQgPSBnZXRTY3JvbGxQb3NpdGlvbigpWzBdO1xyXG4gICAgICBtYXhzcCA9IHNjcm9sbERhdGEud2lkdGggLSBzY3JlZW4ud2lkdGg7XHJcbiAgICAgIGVkZ2VDcm9zc2VkID0gZWRnZS5wYWdlLng7XHJcbiAgICB9XHJcbiAgICAvLyBzY3JvbGxhYmxlIGNvbnRhaW5lciAoZGVmaW5lIGN1cnJlbnQgYW5kIG1heGltdW0gc2Nyb2xsIHBvc2l0aW9uKVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHNjcm9sbFBvc2l0aW9uID0gc2Nyb2xsRGF0YS5vYmouc2Nyb2xsTGVmdDtcclxuICAgICAgbWF4c3AgPSBzY3JvbGxEYXRhLm9iai5zY3JvbGxXaWR0aCAtIHNjcm9sbERhdGEub2JqLmNsaWVudFdpZHRoO1xyXG4gICAgICBlZGdlQ3Jvc3NlZCA9IGVkZ2UuZGl2Lng7XHJcbiAgICB9XHJcbiAgICAvLyBpZiBzY3JvbGxpbmcgaXMgcG9zc2libGVcclxuICAgIGlmIChlZGdlLmZsYWcueCA+IDAgJiYgKChlZGdlQ3Jvc3NlZCA8IDAgJiYgc2Nyb2xsUG9zaXRpb24gPiAwKSB8fCAoZWRnZUNyb3NzZWQgPiAwICYmIHNjcm9sbFBvc2l0aW9uIDwgbWF4c3ApKSkge1xyXG4gICAgICAvLyBpZiBvYmplY3QgaXMgd2luZG93XHJcbiAgICAgIGlmIChzY3JvbGxEYXRhLm9iaiA9PT0gd2luZG93KSB7XHJcbiAgICAgICAgLy8gc2Nyb2xsIHdpbmRvd1xyXG4gICAgICAgIHdpbmRvdy5zY3JvbGxCeShlZGdlQ3Jvc3NlZCwgMCk7XHJcbiAgICAgICAgLy8gZ2V0IG5ldyB3aW5kb3cgc2Nyb2xsIHBvc2l0aW9uIChhZnRlciBzY3JvbGxpbmcpXHJcbiAgICAgICAgLy8gYmVjYXVzZSBhdCBwYWdlIHRvcCBvciBib3R0b20gZWRnZVkgY2FuIGJlIGJpZ2dlciB0aGVuIHRoZSByZXN0IG9mIHNjcm9sbGluZyBhcmVhXHJcbiAgICAgICAgLy8gaXQgd2lsbCBiZSBuaWNlIHRvIGtub3cgaG93IG11Y2ggd2FzIHdpbmRvdyBzY3JvbGxlZCBhZnRlciBzY3JvbGxCeSBjb21tYW5kXHJcbiAgICAgICAgc2Nyb2xsUG9zaXRpb24gPSBnZXRTY3JvbGxQb3NpdGlvbigpWzBdO1xyXG4gICAgICAgIC8vIGdldCBjdXJyZW50IG9iamVjdCB0b3Agc3R5bGVcclxuICAgICAgICBwb3MgPSBwYXJzZUludChvYmouc3R5bGUubGVmdCwgMTApO1xyXG4gICAgICAgIGlmIChpc05hTihwb3MpKSB7XHJcbiAgICAgICAgICBwb3MgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAvLyBvciBzY3JvbGxhYmxlIGNvbnRhaW5lclxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBzY3JvbGxEYXRhLm9iai5zY3JvbGxMZWZ0ICs9IGVkZ2VDcm9zc2VkO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIHJlY3Vyc2l2ZSBhdXRvc2Nyb2xsIGNhbGxcclxuICAgICAgc2V0VGltZW91dChhdXRvU2Nyb2xsWCwgUkVESVBTLmRyYWcuc2Nyb2xsLnNwZWVkKTtcclxuICAgIH1cclxuICAgIC8vIGF1dG9zY3JvbGwgaXMgZW5kZWQ6IGVsZW1lbnQgaXMgb3V0IG9mIHRoZSBwYWdlIGVkZ2Ugb3IgbWF4aW11bSBwb3NpdGlvbiBpcyByZWFjaGVkIChsZWZ0IG9yIHJpZ2h0KVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIC8vIHJldHVybiBvbnNjcm9sbCBldmVudCBoYW5kbGVyICh0byB3aW5kb3cgb3IgZGl2IGVsZW1lbnQpXHJcbiAgICAgIFJFRElQUy5ldmVudC5hZGQoc2Nyb2xsRGF0YS5vYmosICdzY3JvbGwnLCBjYWxjdWxhdGVDZWxscyk7XHJcbiAgICAgIC8vIHJlc2V0IGF1dG8gc2Nyb2xsIGZsYWcgWFxyXG4gICAgICBlZGdlLmZsYWcueCA9IDA7XHJcbiAgICAgIC8vIHJlc2V0IGN1cnJlbnQgY2VsbCBwb3NpdGlvblxyXG4gICAgICBjdXJyZW50Q2VsbCA9IFswLCAwLCAwLCAwXTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBWZXJ0aWNhbCBhdXRvIHNjcm9sbCBtZXRob2QuICBAcGFyYW0ge0hUTUxFbGVtZW50fSBzbyBXaW5kb3cgb3IgRElWIGVsZW1lbnQgKHNvIC0gc2Nyb2xsIG9iamVjdCkuXHJcbiAgYXV0b1Njcm9sbFkgPSBmdW5jdGlvbiAoc28pIFxyXG4gIHtcclxuICAgIHZhciBwb3MsICAgICAgLy8gdG9wIHN0eWxlIHBvc2l0aW9uXHJcbiAgICAgIG9sZCwgICAgICAvLyBvbGQgd2luZG93IHNjcm9sbCBwb3NpdGlvbiAobmVlZGVkIGZvciB3aW5kb3cgc2Nyb2xsaW5nKVxyXG4gICAgICBzY3JvbGxQb3NpdGlvbiwgLy8gZGVmaW5lIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uXHJcbiAgICAgIG1heHNwLCAgICAgIC8vIG1heGltdW0gc2Nyb2xsIHBvc2l0aW9uXHJcbiAgICAgIGVkZ2VDcm9zc2VkLCAgLy8gY3Jvc3NlZCBlZGdlIGZvciB3aW5kb3cgYW5kIHNjcm9sbGFibGUgY29udGFpbmVyXHJcbiAgICAgIFggPSBwb2ludGVyLngsICAvLyBkZWZpbmUgcG9pbnRlciBYIHBvc2l0aW9uXHJcbiAgICAgIFkgPSBwb2ludGVyLnk7ICAvLyBkZWZpbmUgcG9pbnRlciBZIHBvc2l0aW9uXHJcbiAgICBcclxuICAgIGlmIChlZGdlLmZsYWcueSA+IDApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgbW91c2V1cCB0aGVuIHN0b3AgaGFuZGxpbmcgXCJjdXJyZW50IGNlbGxcIlxyXG4gICAge1xyXG4gICAgICBjYWxjdWxhdGVDZWxscygpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgY2VsbCAoYXV0b3Njcm9sbCBpcyB3b3JraW5nKVxyXG4gICAgICBzZXRUYWJsZVJvd0NvbHVtbigpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgY3VycmVudCB0YWJsZSByb3cgYW5kIHRhYmxlIGNlbGxcclxuICAgICAgXHJcbiAgICAgIGlmIChYIDwgZGl2Qm94WzFdICYmIFggPiBkaXZCb3hbM10gJiYgWSA8IGRpdkJveFsyXSAmJiBZID4gZGl2Qm94WzBdKSAgIC8vIHNldCBjdXJyZW50IHRhYmxlLCByb3cgYW5kIGNlbGwgaWYgbW91c2UgcG9pbnRlciBpcyBpbnNpZGUgRElWIGlkPVwicmVkaXBzLWRyYWdcIlxyXG4gICAgICB7XHJcbiAgICAgICAgY2VsbENoYW5nZWQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBzYXZlIHNjcm9sbCBvYmplY3QgdG8gdGhlIGdsb2JhbCB2YXJpYWJsZSBmb3IgdGhlIGZpcnN0IGNhbGwgZnJvbSBoYW5kbGVyT25Nb3VzZU1vdmUsIHJlY3Vyc2l2ZSBjYWxscyB3aWxsIG5vdCBlbnRlciB0aGlzIGNvZGUgYW5kIHJlZmVyZW5jZSB0byB0aGUgc2Nyb2xsRGF0YS5vYmogd2lsbCBiZSBwcmVzZXJ2ZWRcclxuICAgIGlmICh0eXBlb2Yoc28pID09PSAnb2JqZWN0JykgXHJcbiAgICB7XHJcbiAgICAgIHNjcm9sbERhdGEub2JqID0gc287XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmIChzY3JvbGxEYXRhLm9iaiA9PT0gd2luZG93KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2luZG93IGF1dG9zY3JvbGwgKGRlZmluZSBjdXJyZW50LCBvbGQgYW5kIG1heGltdW0gc2Nyb2xsIHBvc2l0aW9uKVxyXG4gICAge1xyXG4gICAgICBzY3JvbGxQb3NpdGlvbiA9IG9sZCA9IGdldFNjcm9sbFBvc2l0aW9uKClbMV07XHJcbiAgICAgIG1heHNwID0gc2Nyb2xsRGF0YS5oZWlnaHQgLSBzY3JlZW4uaGVpZ2h0O1xyXG4gICAgICBlZGdlQ3Jvc3NlZCA9IGVkZ2UucGFnZS55O1xyXG4gICAgfVxyXG4gICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzY3JvbGxhYmxlIGNvbnRhaW5lciAoZGVmaW5lIGN1cnJlbnQgYW5kIG1heGltdW0gc2Nyb2xsIHBvc2l0aW9uKVxyXG4gICAge1xyXG4gICAgICBzY3JvbGxQb3NpdGlvbiA9IHNjcm9sbERhdGEub2JqLnNjcm9sbFRvcDtcclxuICAgICAgbWF4c3AgPSBzY3JvbGxEYXRhLm9iai5zY3JvbGxIZWlnaHQgLSBzY3JvbGxEYXRhLm9iai5jbGllbnRIZWlnaHQ7XHJcbiAgICAgIGVkZ2VDcm9zc2VkID0gZWRnZS5kaXYueTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gaWYgc2Nyb2xsaW5nIGlzIHBvc3NpYmxlXHJcbiAgICBpZiAoZWRnZS5mbGFnLnkgPiAwICYmICgoZWRnZUNyb3NzZWQgPCAwICYmIHNjcm9sbFBvc2l0aW9uID4gMCkgfHwgKGVkZ2VDcm9zc2VkID4gMCAmJiBzY3JvbGxQb3NpdGlvbiA8IG1heHNwKSkpIFxyXG4gICAge1xyXG4gICAgICBpZiAoc2Nyb2xsRGF0YS5vYmogPT09IHdpbmRvdykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBvYmplY3QgaXMgd2luZG93XHJcbiAgICAgIHtcclxuICAgICAgICB3aW5kb3cuc2Nyb2xsQnkoMCwgZWRnZUNyb3NzZWQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2Nyb2xsIHdpbmRvd1xyXG4gICAgICAgIHNjcm9sbFBvc2l0aW9uID0gZ2V0U2Nyb2xsUG9zaXRpb24oKVsxXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXQgbmV3IHdpbmRvdyBzY3JvbGwgcG9zaXRpb24gKGFmdGVyIHNjcm9sbGluZyksIGJlY2F1c2UgYXQgcGFnZSB0b3Agb3IgYm90dG9tIGVkZ2VZIGNhbiBiZSBiaWdnZXIgdGhlbiB0aGUgcmVzdCBvZiBzY3JvbGxpbmcgYXJlYSwgaXQgd2lsbCBiZSBuaWNlIHRvIGtub3cgaG93IG11Y2ggd2FzIHdpbmRvdyBzY3JvbGxlZCBhZnRlciBzY3JvbGxCeSBjb21tYW5kXHJcbiAgICAgICAgcG9zID0gcGFyc2VJbnQob2JqLnN0eWxlLnRvcCwgMTApOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdldCBjdXJyZW50IG9iamVjdCB0b3Agc3R5bGVcclxuICAgICAgICBcclxuICAgICAgICBpZiAoaXNOYU4ocG9zKSkgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcG9zID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3Igc2Nyb2xsYWJsZSBjb250YWluZXJcclxuICAgICAge1xyXG4gICAgICAgIHNjcm9sbERhdGEub2JqLnNjcm9sbFRvcCArPSBlZGdlQ3Jvc3NlZDtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgc2V0VGltZW91dChhdXRvU2Nyb2xsWSwgUkVESVBTLmRyYWcuc2Nyb2xsLnNwZWVkKTsgICAgICAgICAgICAgICAgICAgICAgLy8gcmVjdXJzaXZlIGF1dG9zY3JvbGwgY2FsbFxyXG4gICAgfVxyXG4gICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhdXRvc2Nyb2xsIGlzIGVuZGVkOiBlbGVtZW50IGlzIG91dCBvZiB0aGUgcGFnZSBlZGdlIG9yIG1heGltdW0gcG9zaXRpb24gaXMgcmVhY2hlZCAodG9wIG9yIGJvdHRvbSlcclxuICAgIHtcclxuICAgICAgUkVESVBTLmV2ZW50LmFkZChzY3JvbGxEYXRhLm9iaiwgJ3Njcm9sbCcsIGNhbGN1bGF0ZUNlbGxzKTsgICAgICAgICAgICAgLy8gcmV0dXJuIG9uc2Nyb2xsIGV2ZW50IGhhbmRsZXIgKHRvIHdpbmRvdyBvciBkaXYgZWxlbWVudClcclxuICAgICAgZWRnZS5mbGFnLnkgPSAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzZXQgYXV0byBzY3JvbGwgZmxhZyBZXHJcbiAgICAgIGN1cnJlbnRDZWxsID0gWzAsIDAsIDAsIDBdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlc2V0IGN1cnJlbnQgY2VsbCBwb3NpdGlvblxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIE1ldGhvZCBjb3BpZXMgY3VzdG9tIHByb3BlcnRpZXMgZnJvbSBzb3VyY2UgZWxlbWVudCB0byB0aGUgY2xvbmVkIGVsZW1lbnQgYW5kIHNldHMgZXZlbnQgaGFuZGxlcnMgKG9ubW91c2Vkb3duIGFuZCBvbmRibGNsaWNrKS5cclxuICAgKiBUaGlzIGFjdGlvbiB3aWxsIGJlIHRha2VuIG9uIERJViBlbGVtZW50IGl0c2VsZiBhbmQgYWxsIGNoaWxkIERJViBlbGVtZW50cy5cclxuICAgKiBOZWVkZWQgaW4gY2FzZSB3aGVuIERJViBlbGVtZW50IGlzIGNsb25lZCBvciBST1cgaXMgY2xvbmVkIChmb3IgZHJhZ2dpbmcgbW9kZT1cInJvd1wiKS5cclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBzcmMgU291cmNlIGVsZW1lbnQgKERJViBvciBUUiBlbGVtZW50KS5cclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjbG4gQ2xvbmVkIGVsZW1lbnQgKERJViBvciBUUiBlbGVtZW50KS5cclxuICAgKi9cclxuICBjb3B5UHJvcGVydGllcyA9IGZ1bmN0aW9uIChzcmMsIGNsbikgXHJcbiAge1xyXG4gICAgdmFyIGNvcHkgPSBbXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvcHkgbWV0aG9kXHJcbiAgICB2YXIgY2hpbGRzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29weSBwcm9wZXJ0aWVzIGZvciBjaGlsZCBlbGVtZW50cyAodGhpcyBtZXRob2QgY2FsbHMgXCJjb3B5XCIgbWV0aG9kKVxyXG4gICAgXHJcbiAgICBjb3B5WzBdID0gZnVuY3Rpb24gKGUxLCBlMikgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVmaW5lIGNvcHkgbWV0aG9kIGZvciBESVYgZWxlbWVudHMgKGUxIHNvdXJjZSBlbGVtZW50LCBlMiBjbG9uZWQgZWxlbWVudCksIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDA5NDgxMS9qYXZhc2NyaXB0LWNsb25lbm9kZS1hbmQtcHJvcGVydGllc1xyXG4gICAge1xyXG4gICAgICBpZiAoZTEucmVkaXBzKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHJlZGlwcyBwcm9wZXJ0eSBleGlzdHMgaW4gc291cmNlIGVsZW1lbnQsIGNvcHkgY3VzdG9tIHByb3BlcnRpZXMgKHJlZGlwcy5lbmFibGVkLCAgcmVkaXBzLmNvbnRhaW5lciAuLi4pXHJcbiAgICAgIHtcclxuICAgICAgICBlMi5yZWRpcHMgPSB7fTtcclxuICAgICAgICBlMi5yZWRpcHMuZW5hYmxlZCA9IGUxLnJlZGlwcy5lbmFibGVkO1xyXG4gICAgICAgIGUyLnJlZGlwcy5jb250YWluZXIgPSBlMS5yZWRpcHMuY29udGFpbmVyO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChlMS5yZWRpcHMuZW5hYmxlZCkgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBvbm1vdXNlZG93biBldmVudCBoYW5kbGVyIGlmIHNvdXJjZSBlbGVtZW50IGlzIGVuYWJsZWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICByZWdpc3RlckV2ZW50cyhlMik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBjb3B5WzFdID0gZnVuY3Rpb24gKGUxLCBlMikgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVmaW5lIGNvcHkgbWV0aG9kIGZvciBUUiBlbGVtZW50cyBcclxuICAgIHtcclxuICAgICAgaWYgKGUxLnJlZGlwcykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiByZWRpcHMgcHJvcGVydHkgZXhpc3RzIGluIHNvdXJjZSBlbGVtZW50LCBjb3B5IGN1c3RvbSBwcm9wZXJ0aWVzIChyZWRpcHMuZW1wdHlSb3cgLi4uKVxyXG4gICAgICB7XHJcbiAgICAgICAgZTIucmVkaXBzID0ge307XHJcbiAgICAgICAgZTIucmVkaXBzLmVtcHR5Um93ID0gZTEucmVkaXBzLmVtcHR5Um93O1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBjaGlsZHMgPSBmdW5jdGlvbiAoZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVmaW5lIG1ldGhvZCB0byBjb3B5IHByb3BlcnRpZXMgZm9yIGNoaWxkIGVsZW1lbnRzIChpbnB1dCBwYXJhbWV0ZXIgaXMgZWxlbWVudCBpbmRleCAwIC0gRElWLCAxIC0gVFIpXHJcbiAgICB7XHJcbiAgICAgIHZhciBlbDEsIGVsMjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29sbGVjdGlvbiBvZiBESVYvVFIgZWxlbWVudHMgaW4gc291cmNlIGFuZCBjbG9uZWQgZWxlbWVudFxyXG4gICAgICB2YXIgdG4gPSBbJ0RJVicsICdUUiddOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRhZyBuYW1lXHJcbiAgICAgIFxyXG4gICAgICBlbDEgPSBzcmMuZ2V0RWxlbWVudHNCeVRhZ05hbWUodG5bZV0pOyAgICAgICAgICAgIC8vIGNvbGxlY3QgY2hpbGQgRElWL1RSIGVsZW1lbnRzIGZyb20gdGhlIHNvdXJjZSBlbGVtZW50IChwb3NzaWJsZSBpZiBkaXYgZWxlbWVudCBjb250YWlucyB0YWJsZSlcclxuICAgICAgZWwyID0gY2xuLmdldEVsZW1lbnRzQnlUYWdOYW1lKHRuW2VdKTsgICAgICAgICAgICAvLyBjb2xsZWN0IGNoaWxkIERJVi9UUiBlbGVtZW50cyBmcm9tIGNsb25lZCBlbGVtZW50XHJcbiAgICAgIFxyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsMi5sZW5ndGg7IGkrKykgICAgICAgICAgICAgIC8vIGNvcHkgY3VzdG9tIHByb3BlcnRpZXMgKHJlZGlwcy5lbmFibGVkLCAgcmVkaXBzLmNvbnRhaW5lciAuLi4pIGFuZCBzZXQgZXZlbnQgaGFuZGxlcnMgdG8gY2hpbGQgRElWIGVsZW1lbnRzXHJcbiAgICAgIHtcclxuICAgICAgICBjb3B5W2VdKGVsMVtpXSwgZWwyW2ldKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgaWYgKHNyYy5ub2RlTmFtZSA9PT0gJ0RJVicpICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHNvdXJjZSBlbGVtZW50IGlzIERJViBlbGVtZW50IHRoZW4gY29weSBjdXN0b20gcHJvcGVydGllcyBmb3IgRElWIGVsZW1lbnRcclxuICAgIHtcclxuICAgICAgY29weVswXShzcmMsIGNsbik7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChzcmMubm9kZU5hbWUgPT09ICdUUicpICAgICAgICAgICAgICAgICAgICAgLy8gaWYgc291cmNlIGVsZW1lbnQgaXMgVFIgZWxlbWVudCB0aGVuIGNvcHkgY3VzdG9tIHByb3BlcnRpZXMgZm9yIFRSIGVsZW1lbnRcclxuICAgIHtcclxuICAgICAgY29weVsxXShzcmMsIGNsbik7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNoaWxkcygwKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb3B5IHByb3BlcnRpZXMgZm9yIERJViBjaGlsZCBlbGVtZW50c1xyXG4gICAgY2hpbGRzKDEpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvcHkgcHJvcGVydGllcyBmb3IgVFIgY2hpbGQgZWxlbWVudHNcclxuICB9O1xyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogTWV0aG9kIHVwZGF0ZXMgY2xpbWl0MV9YIG9yIGNsaW1pdDJfWCBjbGFzcyBuYW1lIChYIGRlZmluZXMgY2xvbmluZyBsaW1pdCkuXHJcbiAgICogPHVsPlxyXG4gICAqIDxsaT5jbGltaXQxX1ggLSBhZnRlciBjbG9uaW5nIFggZWxlbWVudHMsIGxhc3QgZWxlbWVudCB3aWxsIGJlIG5vcm1hbCBkcmFnLWFibGUgZWxlbWVudDwvbGk+XHJcbiAgICogPGxpPmNsaW1pdDJfWCAtIGFmdGVyIGNsb25pbmcgWCBlbGVtZW50cywgbGFzdCBlbGVtZW50IHdpbGwgc3RheSB1bm1vdmFibGU8L2xpPlxyXG4gICAqIDwvdWw+XHJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgRWxlbWVudCBvbiB3aGljaCBjbmFtZSBjbGFzcyBzaG91bGQgYmUgdXBkYXRlZC5cclxuICAgKiBAcGFyYW0ge0ludGVnZXJ9IHZhbHVlIEluY3JlbWVudCBvciBkZWNyZW1lbnQgY2xpbWl0IHZhbHVlLlxyXG4gICAqL1xyXG4gIGNsb25lTGltaXQgPSBmdW5jdGlvbiAoZWwsIHZhbHVlKSBcclxuICB7XHJcbiAgICB2YXIgbWF0Y2hBcnJheTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaCBhcnJheVxyXG4gICAgdmFyIGxpbWl0VHlwZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGltaXQgdHlwZSAoMSAtIGNsb25lIGJlY29tZXMgXCJub3JtYWxcIiBkcmFnIGVsZW1lbnQgYXQgbGFzdDsgMiAtIGNsb25lIGVsZW1lbnQgc3RheXMgaW1tb3ZhYmxlKVxyXG4gICAgdmFyIGxpbWl0OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGltaXQgbnVtYmVyXHJcbiAgICB2YXIgY2xhc3NlczsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjbGFzcyBuYW1lcyBvZiBjbG9uZSBlbGVtZW50XHJcbiAgICBcclxuICAgIGNsYXNzZXMgPSBlbC5jbGFzc05hbWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlYWQgY2xhc3MgbmFtZSBmcm9tIGVsZW1lbnRcclxuICAgIG1hdGNoQXJyYXkgPSBjbGFzc2VzLm1hdGNoKC9jbGltaXQoXFxkKV8oXFxkKykvKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWF0Y2ggY2xpbWl0IGNsYXNzIG5hbWVcclxuICAgIFxyXG4gICAgaWYgKG1hdGNoQXJyYXkgIT09IG51bGwpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgRElWIGNsYXNzIGNvbnRhaW5zIGNsaW1pdFxyXG4gICAge1xyXG4gICAgICBsaW1pdFR5cGUgPSBwYXJzZUludChtYXRjaEFycmF5WzFdLCAxMCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJlcGFyZSBsaW1pdFR5cGUgKDEgb3IgMikgYW5kIGxpbWl0XHJcbiAgICAgIGxpbWl0ID0gcGFyc2VJbnQobWF0Y2hBcnJheVsyXSwgMTApO1xyXG4gICAgICBcclxuICAgICAgaWYgKGxpbWl0ID09PSAwICYmIHZhbHVlID09PSAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGN1cnJlbnQgbGltaXQgaXMgMCBhbmQgc2hvdWxkIGJlIHNldCB0byAxIHRoZW4gcmV0dXJuIFwiY2xvbmluZ1wiIHRvIHRoZSBESVYgZWxlbWVudFxyXG4gICAgICB7XHJcbiAgICAgICAgY2xhc3NlcyArPSAnIHJlZGlwcy1jbG9uZSc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgXCJyZWRpcHMtY2xvbmVcIiBjbGFzcyB0byBjbGFzcyBhdHRyaWJ1dGVcclxuICAgICAgICBcclxuICAgICAgICBpZiAobGltaXRUeXBlID09PSAyKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVuYWJsZSBESVYgZWxlbWVudCBmb3IgY2xpbWl0MiB0eXBlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZW5hYmxlRHJhZyh0cnVlLCBlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBsaW1pdCArPSB2YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIGxpbWl0IHZhbHVlXHJcbiAgICAgIGNsYXNzZXMgPSBjbGFzc2VzLnJlcGxhY2UoL2NsaW1pdFxcZF9cXGQrL2csICdjbGltaXQnICsgbGltaXRUeXBlICsgJ18nICsgbGltaXQpOyAgICAgICAgIC8vIHVwZGF0ZSBjbGltaXQgY2xhc3MgbmFtZSB3aXRoIG5ldyBsaW1pdCB2YWx1ZVxyXG4gICAgICBcclxuICAgICAgaWYgKGxpbWl0IDw9IDApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRlc3QgaWYgbGltaXQgZHJvcHMgdG8gemVyb1xyXG4gICAgICB7XHJcbiAgICAgICAgY2xhc3NlcyA9IGNsYXNzZXMucmVwbGFjZSgncmVkaXBzLWNsb25lJywgJycpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBubyBtb3JlIGNsb25pbmcsIGN1dCBvdXQgXCJyZWRpcHMtY2xvbmVcIiBmcm9tIGNsYXNzIG5hbWVcclxuICAgICAgICBcclxuICAgICAgICBpZiAobGltaXRUeXBlID09PSAyKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGxpbWl0IHR5cGUgaXMgMiB0aGVuIGRpc2FibGUgY2xvbmUgZWxlbWVudCAoaXQgd2lsbCBzdGF5IGluIGNlbGwpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZW5hYmxlRHJhZyhmYWxzZSwgZWwpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGlzYWJsZSBzb3VyY2UgRElWIGVsZW1lbnRcclxuICAgICAgICAgIFJFRElQUy5kcmFnLmV2ZW50LmNsb25lZEVuZDIoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGwgZXZlbnQuY2xvbmVkRW5kMiBoYW5kbGVyXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgUkVESVBTLmRyYWcuZXZlbnQuY2xvbmVkRW5kMSgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbCBldmVudC5jbG9uZWRFbmQxIGhhbmRsZXJcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGVsLmNsYXNzTmFtZSA9IG5vcm1hbGl6ZShjbGFzc2VzKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBub3JtYWxpemUgc3BhY2VzIGFuZCByZXR1cm4gY2xhc3NlcyB0byB0aGUgY2xvbmUgb2JqZWN0XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogTWV0aG9kIGF0dGFjaGVzIC8gZGV0YWNoZXMgb25tb3VzZWRvd24sIG9udG91Y2hzdGFydCBhbmQgb25kYmxjbGljayBldmVudHMgdG8gRElWIGVsZW1lbnRzIGFuZCBhdHRhY2hlcyBvbnNjcm9sbCBldmVudCB0byB0aGUgc2Nyb2xsIGNvbnRhaW5lcnMgaW4gaW5pdGlhbGl6YXRpb24gcGhhc2UuXHJcbiAgICogSXQgYWxzbyBjYW4gYmUgdXNlZCBmb3IgZWxlbWVudCBpbml0aWFsaXphdGlvbiBhZnRlciBESVYgZWxlbWVudCB3YXMgbWFudWFsbHkgYWRkZWQgdG8gdGhlIHRhYmxlLlxyXG4gICAqIElmIGNsYXNzIGF0dHJpYnV0ZSBvZiBESVYgY29udGFpbmVyIGNvbnRhaW5zIFwicmVkaXBzLW5vYXV0b3Njcm9sbFwiIGNsYXNzIG5hbWUgdGhlbiBhdXRvU2Nyb2xsIG9wdGlvbiB3aWxsIGJlIGRpc2FibGVkLlxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbnxTdHJpbmd9IGVuYWJsZV9mbGFnIEVuYWJsZSAvIGRpc2FibGUgZWxlbWVudCAob3IgZWxlbWVudCBzdWJ0cmVlIGxpa2UgdGFibGUsIGRyYWdnaW5nIGNvbnRhaW5lciAuLi4pLlxyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8U3RyaW5nfSBbZWxdIEhUTUwgbm9kZSBvciBDU1Mgc2VsZWN0b3IgdG8gZW5hYmxlIC8gZGlzYWJsZS4gUGFyYW1ldGVyIGRlZmluZXMgZWxlbWVudCByZWZlcmVuY2Ugb3IgQ1NTIHNlbGVjdG9yIG9mIERJViBlbGVtZW50cyB0byBlbmFibGUgLyBkaXNhYmxlLlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogLy8gZW5hYmxlIGVsZW1lbnQgd2l0aCBpZD1cImlkMTIzXCIgKGVsZW1lbnQgaWQgc2hvdWxkIGJlIGEgc3RyaW5nIGFjY29yZGluZyB0byBET00gZG9jcylcclxuICAgKiByZC5lbmFibGVEcmFnKHRydWUsICcjaWQxMjMnKTtcclxuICAgKlxyXG4gICAqIC8vIG9yIGluaXQgbWFudWFsbHkgYWRkZWQgZWxlbWVudCB3aXRoIGtub3duIGlkXHJcbiAgICogUkVESVBTLmRyYWcuZW5hYmxlRHJhZyh0cnVlLCAnI2lkMjM0Jyk7XHJcbiAgICpcclxuICAgKiAvLyBkaXNhYmxlIGFsbCBESVYgZWxlbWVudHMgaW4gZHJhZzEgc3VidHJlZVxyXG4gICAqIHJkLmVuYWJsZURyYWcoZmFsc2UsICcjZHJhZzEgZGl2JylcclxuICAgKlxyXG4gICAqIC8vIGluaXQgRElWIGVsZW1lbnRzIGluIGRyYWdnaW5nIGFyZWEgKGluY2x1ZGluZyBuZXdseSBhZGRlZCBESVYgZWxlbWVudClcclxuICAgKiAvLyBESVYgaW5pdGlhbGl6YXRpb24gd2lsbCB3b3JrIGlmIHRhYmxlIG5vZGUgc3RheXMgaW50YWN0ICh0YWJsZSBpcyBub3QgZ2VuZXJhdGVkIGR5bmFtaWNhbGx5KVxyXG4gICAqIFJFRElQUy5kcmFnLmVuYWJsZURyYWcoJ2luaXQnKTtcclxuICAgKlxyXG4gICAqIC8vIGluaXQgYWRkZWQgZWxlbWVudCB3aXRoIHJlZmVyZW5jZSBteUVsZW1lbnRcclxuICAgKiBSRURJUFMuZHJhZy5lbmFibGVEcmFnKHRydWUsIG15RWxlbWVudCk7XHJcbiAgICpcclxuICAgKiAvLyBkaXNhYmxlIGFsbCBESVYgZWxlbWVudHMgd2l0aGluIFREICh0ZCBpcyByZWZlcmVuY2UgdG8gVEQgbm9kZSlcclxuICAgKiBSRURJUFMuZHJhZy5lbmFibGVEcmFnKGZhbHNlLCB0ZCk7XHJcbiAgICovXHJcbiAgZW5hYmxlRHJhZyA9IGZ1bmN0aW9uIChlbmFibGVfZmxhZywgZWwpIFxyXG4gIHtcclxuICAgIHZhciBkaXYgPSBbXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb2xsZWN0aW9uIG9mIGRpdiBlbGVtZW50cyBjb250YWluZWQgaW4gdGFibGVzIG9yIG9uZSBkaXYgZWxlbWVudFxyXG4gICAgXHJcbiAgICBpZiAoZWwgPT09IHVuZGVmaW5lZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29sbGVjdCBESVYgZWxlbWVudHMgaW5zaWRlIGN1cnJlbnQgZHJhZyBhcmVhIChkcmFnIGVsZW1lbnRzIGFuZCBzY3JvbGwgY29udGFpbmVycykgZS5nLiBlbmFibGVEcmFnKHRydWUpXHJcbiAgICB7XHJcbiAgICAgIGRpdiA9IGRyYWdDb250YWluZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RpdicpO1xyXG4gICAgfSAgICBcclxuICAgIGVsc2UgaWYgKHR5cGVvZihlbCkgPT09ICdzdHJpbmcnKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcImVsXCIgaXMgc3RyaW5nIChDU1Mgc2VsZWN0b3IpIC0gaXQgY2FuIGNvbGxlY3Qgb25lIERJViBlbGVtZW50IChsaWtlIFwiI2QxMlwiKSBvciBtYW55IERJViBlbGVtZW50cyAobGlrZSBcIiNkcmFnMSBkaXZcIilcclxuICAgIHtcclxuICAgICAgZGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YoZWwpID09PSAnb2JqZWN0JyAmJiAoZWwubm9kZU5hbWUgIT09ICdESVYnIHx8IGVsLmNsYXNzTmFtZS5pbmRleE9mKCdyZWRpcHMtZHJhZycpID09PSAtMSkpICAgICAgLy8gXCJlbFwiIGlzIG5vZGUgcmVmZXJlbmNlIHRvIGVsZW1lbnQgdGhhdCBpcyBub3QgRElWIGNsYXNzPVwicmVkaXBzLWRyYWdcIlxyXG4gICAge1xyXG4gICAgICBkaXYgPSBlbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGl2Jyk7XHJcbiAgICB9XHJcbiAgICBlbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm9uZSBvZiBhYm92ZSwgZWwgaXMgRElWIGNsYXNzPVwicmVkaXBzLWRyYWdcIiwgc28gcHJlcGFyZSBhcnJheSB3aXRoIG9uZSBESVYgZWxlbWVudFxyXG4gICAge1xyXG4gICAgICBkaXZbMF0gPSBlbDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZW5hYmxlRGl2cyhlbmFibGVfZmxhZywgZGl2KTtcclxuICB9O1xyXG4gIFxyXG4gIFxyXG4gIGVuYWJsZURpdnMgPSBmdW5jdGlvbihlbmFibGVfZmxhZywgZGl2KVxyXG4gIHtcclxuICAgICB2YXIgaSwgaiwgaywgICAgLy8gbG9jYWwgdmFyaWFibGVzIHVzZWQgaW4gbG9vcFxyXG4gICAgICB0YmxzID0gW10sICAgIC8vIGNvbGxlY3Rpb24gb2YgdGFibGVzIGluc2lkZSBzY3JvbGxhYmxlIGNvbnRhaW5lclxyXG4gICAgICBib3JkZXJTdHlsZSwgIC8vIGJvcmRlciBzdHlsZSAoc29saWQgb3IgZG90dGVkKVxyXG4gICAgICBvcGFjaXR5LCAgICAvLyAoaW50ZWdlcikgc2V0IG9wYWNpdHkgZm9yIGVuYWJsZWQgLyBkaXNhYmxlZCBlbGVtZW50c1xyXG4gICAgICBjdXJzb3IsICAgICAvLyBjdXJzb3Igc3R5bGUgKG1vdmUgb3IgYXV0bylcclxuICAgICAgb3ZlcmZsb3csICAgLy8gY3NzIHZhbHVlIG9mIG92ZXJmbG93IHByb3BlcnR5XHJcbiAgICAgIGF1dG9zY3JvbGwsICAgLy8gYm9vbGVhbiAtIGlmIHNjcm9sbGFibGUgY29udGFpbmVyIHdpbGwgaGF2ZSBhdXRvc2Nyb2xsIG9wdGlvbiAoZGVmYXVsdCBpcyB0cnVlKVxyXG4gICAgICBlbmFibGVkLCAgICAvLyBlbmFibGVkIHByb3BlcnR5ICh0cnVlIG9yIGZhbHNlKVxyXG4gICAgICBjYiwgICAgICAgLy8gYm94IG9mZnNldCBmb3IgY29udGFpbmVyIGJveCAoY2IpXHJcbiAgICAgIHBvc2l0aW9uLCAgIC8vIGlmIHRhYmxlIGNvbnRhaW5lciBoYXMgcG9zaXRpb246Zml4ZWQgdGhlbiBcInBhZ2Ugc2Nyb2xsXCIgb2Zmc2V0IHNob3VsZCBub3QgYmUgYWRkZWRcclxuICAgICAgcmVnZXhEcmFnID0gL1xcYnJlZGlwcy1kcmFnXFxiL2ksIC8vIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBzZWFyY2ggXCJyZWRpcHMtZHJhZ1wiIGNsYXNzIG5hbWVcclxuICAgICAgcmVnZXhOb0F1dG9zY3JvbGwgPSAvXFxicmVkaXBzLW5vYXV0b3Njcm9sbFxcYi9pOyAvLyByZWd1bGFyIGV4cHJlc3Npb24gdG8gc2VhcmNoIFwicmVkaXBzLW5vYXV0b3Njcm9sbFwiIGNsYXNzIG5hbWUgICBcclxuXHJcbiAgICBvcGFjaXR5ID0gUkVESVBTLmRyYWcuc3R5bGUub3BhY2l0eURpc2FibGVkOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IG9wYWNpdHkgZm9yIGRpc2FibGVkIGVsZW1lbnRzIGZyb20gcHVibGljIHByb3BlcnR5IFwib3BhY2l0eURpc2FibGVkXCJcclxuICAgIFxyXG4gICAgaWYgKGVuYWJsZV9mbGFnID09PSB0cnVlIHx8IGVuYWJsZV9mbGFnID09PSAnaW5pdCcpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBzdHlsZXMgZm9yIGVuYWJsZWQgRElWIGVsZW1lbnRcclxuICAgIHtcclxuICAgICAgYm9yZGVyU3R5bGUgPSBSRURJUFMuZHJhZy5zdHlsZS5ib3JkZXJFbmFibGVkO1xyXG4gICAgICBjdXJzb3IgPSAnbW92ZSc7XHJcbiAgICAgIGVuYWJsZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVsc2Ugc2V0IHN0eWxlcyBmb3IgZGlzYWJsZWQgRElWIGVsZW1lbnRcclxuICAgIHtcclxuICAgICAgYm9yZGVyU3R5bGUgPSBSRURJUFMuZHJhZy5zdHlsZS5ib3JkZXJEaXNhYmxlZDtcclxuICAgICAgY3Vyc29yID0gJ2F1dG8nO1xyXG4gICAgICBlbmFibGVkID0gZmFsc2U7XHJcbiAgICB9ICAgIFxyXG4gICAgXHJcbiAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IGRpdi5sZW5ndGg7IGkrKykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWFpbiBsb29wIHRoYXQgZ29lcyB0aHJvdWdoIGFsbCBESVYgZWxlbWVudHNcclxuICAgIHsgICAgXHJcbiAgICAgIGlmIChyZWdleERyYWcudGVzdChkaXZbaV0uY2xhc3NOYW1lKSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgRElWIGVsZW1lbnQgY29udGFpbnMgXCJyZWRpcHMtZHJhZ1wiIGNsYXNzIG5hbWVcclxuICAgICAge1xyXG4gICAgICAgIGlmIChlbmFibGVfZmxhZyA9PT0gJ2luaXQnIHx8IGRpdltpXS5yZWRpcHMgPT09IHVuZGVmaW5lZCkgICAgICAgICAgICAgICAgICAgIC8vIGFkZCByZWZlcmVuY2UgdG8gdGhlIERJViBjb250YWluZXIgKGluaXRpYWxpemF0aW9uIG9yIG5ld2x5IGFkZGVkIGVsZW1lbnQgdG8gdGhlIHRhYmxlKSB0aGlzIHByb3BlcnR5IHNob3VsZCBub3QgYmUgY2hhbmdlZCBpbiBsYXRlciBlbGVtZW50IGVuYWJsZS9kaXNhYmxlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZGl2W2ldLnJlZGlwcyA9IHt9OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIFwicHJvcGVydHkgb2JqZWN0XCIgaW4gd2hpY2ggYWxsIGN1c3RvbSBwcm9wZXJ0aWVzIHdpbGwgYmUgc2F2ZWRcclxuICAgICAgICAgIGRpdltpXS5yZWRpcHMuY29udGFpbmVyID0gZHJhZ0NvbnRhaW5lcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZW5hYmxlX2ZsYWcgPT09IHRydWUgJiYgdHlwZW9mKG9wYWNpdHkpID09PSAnbnVtYmVyJykgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIG9wYWNpdHkgbWFza1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIGRpdltpXS5zdHlsZS5vcGFjaXR5ID0gJyc7XHJcbiAgICAgICAgICBkaXZbaV0uc3R5bGUuZmlsdGVyID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGVuYWJsZV9mbGFnID09PSBmYWxzZSAmJiB0eXBlb2Yob3BhY2l0eSkgPT09ICdudW1iZXInKSAgICAgICAgICAgICAgIC8vIHNldCBvcGFjaXR5IGZvciBkaXNhYmxlZCBlbGVtZW50c1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIGRpdltpXS5zdHlsZS5vcGFjaXR5ID0gb3BhY2l0eSAvIDEwMDtcclxuICAgICAgICAgIGRpdltpXS5zdHlsZS5maWx0ZXIgPSAnYWxwaGEob3BhY2l0eT0nICsgb3BhY2l0eSArICcpJztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmVnaXN0ZXJFdmVudHMoZGl2W2ldLCBlbmFibGVkKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVnaXN0ZXIgZXZlbnQgbGlzdGVuZXIgZm9yIERJViBlbGVtZW50XHJcbiAgICAgICAgXHJcbiAgICAgICAgZGl2W2ldLnN0eWxlLmJvcmRlclN0eWxlID0gYm9yZGVyU3R5bGU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHN0eWxlcyBmb3IgRElWIGVsZW1lbnRcclxuICAgICAgICBkaXZbaV0uc3R5bGUuY3Vyc29yID0gY3Vyc29yO1xyXG4gICAgICAgIGRpdltpXS5yZWRpcHMuZW5hYmxlZCA9IGVuYWJsZWQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCBlbmFibGVkIHByb3BlcnR5IHRvIHRoZSBESVYgZWxlbWVudCAodHJ1ZSBvciBmYWxzZSlcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmIChlbmFibGVfZmxhZyA9PT0gJ2luaXQnKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF0dGFjaCBvbnNjcm9sbCBldmVudCB0byB0aGUgRElWIGVsZW1lbnQgaW4gaW5pdCBwaGFzZSBvbmx5IGlmIERJViBlbGVtZW50IGhhcyBvdmVyZmxvdyBvdGhlciB0aGFuIGRlZmF1bHQgdmFsdWUgJ3Zpc2libGUnIGFuZCB0aGF0IG1lYW5zIHNjcm9sbGFibGUgRElWIGNvbnRhaW5lclxyXG4gICAgICB7XHJcbiAgICAgICAgb3ZlcmZsb3cgPSBnZXRTdHlsZShkaXZbaV0sICdvdmVyZmxvdycpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXNrIGZvciBvdmVyZmxvdyBzdHlsZVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChvdmVyZmxvdyAhPT0gJ3Zpc2libGUnKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIERJViBpcyBzY3JvbGxhYmxlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgUkVESVBTLmV2ZW50LmFkZChkaXZbaV0sICdzY3JvbGwnLCBjYWxjdWxhdGVDZWxscyk7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlZmluZSBvbnNjcm9sbCBldmVudCBoYW5kbGVyIGZvciBzY3JvbGxhYmxlIGNvbnRhaW5lclxyXG4gICAgICAgICAgcG9zaXRpb24gPSBnZXRTdHlsZShkaXZbaV0sICdwb3NpdGlvbicpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBjb250YWluZXIgYm94IHN0eWxlIHBvc2l0aW9uICh0byBleGNsdWRlIHBhZ2Ugc2Nyb2xsIG9mZnNldCBmcm9tIGNhbGN1bGF0aW9uIGlmIG5lZWRlZClcclxuICAgICAgICAgIGNiID0gYm94T2Zmc2V0KGRpdltpXSwgcG9zaXRpb24sIGZhbHNlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXQgRElWIGNvbnRhaW5lciBvZmZzZXQgd2l0aCBvciB3aXRob3V0IFwicGFnZSBzY3JvbGxcIiBhbmQgZXhjbHVkZWQgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSBjb250ZW50XHJcbiAgICAgICAgICBhdXRvc2Nyb2xsID0gIXJlZ2V4Tm9BdXRvc2Nyb2xsLnRlc3QoZGl2W2ldLmNsYXNzTmFtZSk7ICAgICAgICAgICAgICAgICAgICAgLy8gc2VhcmNoIGZvciByZWRpcHMtbm9hdXRvc2Nyb2xsIG9wdGlvblxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBzY3JvbGxEYXRhLmNvbnRhaW5lcltqXSA9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJlcGFyZSBzY3JvbGxhYmxlIGNvbnRhaW5lciBhcmVhc1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBkaXYgOiBkaXZbaV0sICAgICAgICAgICAgICAgICAvLyByZWZlcmVuY2UgdG8gdGhlIHNjcm9sbGFibGUgY29udGFpbmVyXHJcbiAgICAgICAgICAgIG9mZnNldCA6IGNiLCAgICAgICAgICAgICAgICAgIC8vIGJveCBvZmZzZXQgb2YgdGhlIHNjcm9sbGFibGUgY29udGFpbmVyXHJcbiAgICAgICAgICAgIG1pZHN0WCA6IChjYlsxXSArIGNiWzNdKSAvIDIsIC8vIG1pZGRsZSBYXHJcbiAgICAgICAgICAgIG1pZHN0WSA6IChjYlswXSArIGNiWzJdKSAvIDIsIC8vIG1pZGRsZSBZXHJcbiAgICAgICAgICAgIGF1dG9zY3JvbGwgOiBhdXRvc2Nyb2xsICAgICAgIC8vIGF1dG9zY3JvbGwgZW5hYmxlZCBvciBkaXNhYmxlZCAodHJ1ZSBvciBmYWxzZSlcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHRibHMgPSBkaXZbaV0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RhYmxlJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWFyY2ggZm9yIHRhYmxlcyBpbnNpZGUgc2Nyb2xsYWJsZSBjb250YWluZXJcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgZm9yIChrID0gMDsgayA8IHRibHMubGVuZ3RoOyBrKyspICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvb3AgZ29lcyB0aHJvdWdoIGZvdW5kIHRhYmxlcyBpbnNpZGUgc2Nyb2xsYWJsZSBhcmVhXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHRibHNba10uc2NhID0gc2Nyb2xsRGF0YS5jb250YWluZXJbal07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIGEgcmVmZXJlbmNlIHRvIHRoZSBjb3JyZXNwb25kaW5nIHNjcm9sbGFibGUgYXJlYVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBqKys7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5jcmVhc2Ugc2Nyb2xsYWJsZSBjb250YWluZXIgY291bnRlclxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSAgIFxyXG4gIH07XHJcblxyXG4gIC8vTWV0aG9kIHJldHVybnMgc3R5bGUgdmFsdWUgZm9yIHJlcXVlc3RlZCBIVE1MIGVsZW1lbnQgYW5kIHN0eWxlIG5hbWUuXHJcbiAgZ2V0U3R5bGUgPSBmdW5jdGlvbiAoZWwsIHN0eWxlX25hbWUpIFxyXG4gIHtcclxuICAgIGlmIChlbCAmJiBlbC5jdXJyZW50U3R5bGUpIFxyXG4gICAge1xyXG4gICAgICByZXR1cm4gZWwuY3VycmVudFN0eWxlW3N0eWxlX25hbWVdO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZWwgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUpIFxyXG4gICAge1xyXG4gICAgICByZXR1cm4gZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbClbc3R5bGVfbmFtZV07XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gZmluZCB0aGUgZmlyc3QgcGFyZW50IGVsZW1lbnQgb2YgZWwgd2l0aCB0aGUgdGFnIG5hbWUgdGFnX25hbWUgXHJcbiAgZmluZFBhcmVudCA9IGZ1bmN0aW9uICh0YWdfbmFtZSwgZWwpIFxyXG4gIHtcclxuICAgIGVsID0gZWwucGFyZW50Tm9kZTsgICAgICAgICAgICAgICAgIC8vIHNldCBcImVsXCIgdG8gdGhlIG5leHQgbm9kZSAodG8gcHJldmVudCBmaW5kaW5nIG5vZGUgaXRzZWxmKVxyXG4gICAgXHJcbiAgICB3aGlsZSAoZWwpICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdGFydCBsb29wXHJcbiAgICB7XHJcbiAgICAgIGlmIChlbC5ub2RlTmFtZSA9PT0gdGFnX25hbWUpICAgICAvLyBub2RlIGlzIGZvdW5kXHJcbiAgICAgIHtcclxuICAgICAgICAgIGJyZWFrOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vZGUgaXMgZm91bmQgYW5kIGxvb3AgY2FuIGJlIGVuZGVkXHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGVsID0gZWwucGFyZW50Tm9kZTsgICAgICAgICAgICAgICAvLyBtb3ZlIG9uIHRvIHRoZSBwYXJlbnQgbm9kZVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gZWw7XHJcbiAgfTtcclxuXHJcbiAgLy9GdW5jdGlvbiByZXR1cm5zIGEgc3RyaW5nIGluIHdoaWNoIGFsbCBvZiB0aGUgcHJlY2VkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZSBzcGFjZSBoYXMgYmVlbiByZW1vdmVkLCBhbmQgaW4gd2hpY2ggYWxsIGludGVybmFsIHNlcXVlbmNlcyBvZiB3aGl0ZSBpcyByZXBsYWNlZCB3aXRoIG9uZSB3aGl0ZSBzcGFjZS5cclxuICBub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyKSBcclxuICB7XHJcbiAgICBpZiAoc3RyICE9PSB1bmRlZmluZWQpIFxyXG4gICAge1xyXG4gICAgICBzdHIgPSBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpLnJlcGxhY2UoL1xcc3syLH0vZywgJyAnKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHN0cjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIG5vcm1hbGl6ZWQgc3RyaW5nICh3aXRob3V0IHByZWNlZGluZyBhbmQgdHJhaWxpbmcgc3BhY2VzKVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIE1ldGhvZCBzZXRzIG9wYWNpdHkgdG8gdGFibGUgcm93IG9yIGRlbGV0ZXMgcm93IGNvbnRlbnQuXHJcbiAgICogSW5wdXQgcGFyYW1ldGVyIFwiZWxcIiBpcyByZWZlcmVuY2UgdG8gdGhlIHRhYmxlIHJvdyBvciByZWZlcmVuY2UgdG8gdGhlIGNsb25lZCBtaW5pIHRhYmxlICh3aGVuIHJvdyBpcyBtb3ZlZCkuXHJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxTdHJpbmd9IGVsIElkIG9mIHJvdyBoYW5kbGVyIChkaXYgY2xhc3M9XCJyZWRpcHMtZHJhZyByZWRpcHMtcm93XCIpIG9yIHJlZmVyZW5jZSB0byBlbGVtZW50IChzb3VyY2Ugcm93IG9yIG1pbmkgdGFibGUpLlxyXG4gICAqIEBwYXJhbSB7SW50ZWdlcnxTdHJpbmd9IG9wYWNpdHkgT3BhY2l0eSBsZXZlbCAoZnJvbSAwIHRvIDEwMCkgb3IgXCJlbXB0eVwiICh0aGVuIGNvbnRlbnQgb2YgdGFibGUgY2VsbHMgaW4gcm93IHdpbGwgYmUgZGVsZXRlZCAtIGluIHRoYXQgY2FzZSBmaXJzdCBwYXJhbWV0ZXIgc2hvdWxkIGJlIFRSKS5cclxuICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbG9yXSBCYWNrZ3JvdW5kIGNvbG9yLlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogLy8gc2V0IHJlZmVyZW5jZSB0byB0aGUgUkVESVBTLmRyYWcgbGlicmFyeVxyXG4gICAqIHJkID0gUkVESVBTLmRyYWc7XHJcbiAgICpcclxuICAgKiAvLyBtYWtlIHJvdyBzZW1pLXRyYW5zcGFyZW50XHJcbiAgICogcmQucm93T3BhY2l0eShyb3dPYmosIDUwKTtcclxuICAgKlxyXG4gICAqIC8vIHNldCByb3cgYXMgZW1wdHkgYW5kIHdoaXRlIChjb250ZW50IGluIHRhYmxlIGNlbGxzIHdpbGwgYmUgZGVsZXRlZClcclxuICAgKiByZC5yb3dPcGFjaXR5KHJvd09iaiwgJ2VtcHR5JywgJ1doaXRlJyk7XHJcbiAgICovXHJcbiAgcm93T3BhY2l0eSA9IGZ1bmN0aW9uIChlbCwgb3BhY2l0eSwgY29sb3IpIFxyXG4gIHtcclxuICAgIHZhciB0ZE5vZGVMaXN0OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGFibGUgY2VsbHNcclxuICAgIHZhciBpLCBqOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbG9vcCB2YXJpYWJsZXNcclxuICAgIFxyXG4gICAgaWYgKHR5cGVvZihlbCkgPT09ICdzdHJpbmcnKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBpbnB1dCBwYXJhbWV0ZXIgaXMgc3RyaW5nICh0aGlzIHNob3VsZCBiZSBlbGVtZW50IGlkKSwgdGhlbiBzZXQgZWxlbWVudCByZWZlcmVuY2VcclxuICAgIHtcclxuICAgICAgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbCk7XHJcbiAgICAgIGVsID0gZmluZFBhcmVudCgnVEFCTEUnLCBlbCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVsIGNvdWxkIGJlIHJlZmVyZW5jZSBvZiB0aGUgRElWIGNsYXNzPVwicmVkaXBzLWRyYWcgcmVkaXBzLXJvd1wiIChyb3cgaGFuZGxlcilcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKGVsLm5vZGVOYW1lID09PSAnVFInKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBlbCBpcyBUUiwgdGhlbiBzZXQgYmFja2dyb3VuZCBjb2xvciB0byBlYWNoIGNlbGwgKGlmIG5lZWRlZCkgYW5kIGFwcGx5IG9wYWNpdHlcclxuICAgIHtcclxuICAgICAgdGROb2RlTGlzdCA9IGVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0ZCcpOyAgICAgICAgICAgICAgICAgLy8gY29sbGVjdCB0YWJsZSBjZWxsIGZyb20gdGhlIHJvd1xyXG4gICAgICBcclxuICAgICAgZm9yIChpID0gMDsgaSA8IHRkTm9kZUxpc3QubGVuZ3RoOyBpKyspICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IG9wYWNpdHkgZm9yIERJViBlbGVtZW50XHJcbiAgICAgIHtcclxuICAgICAgICB0ZE5vZGVMaXN0W2ldLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yID8gY29sb3IgOiAnJzsgLy8gc2V0IGJhY2tncm91bmQgY29sb3IgdG8gdGFibGUgY2VsbCBpZiBuZWVkZWRcclxuICAgICAgICBcclxuICAgICAgICBpZiAob3BhY2l0eSA9PT0gJ2VtcHR5JykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgb3BhY2l0eSBpcyBzZXQgdG8gXCJlbXB0eVwiIHRoZW4gZGVsZXRlIGNlbGwgY29udGVudFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHRkTm9kZUxpc3RbaV0uaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2Ugc2V0IG9wYWNpdHkgdG8gZXZlcnkgY2hpbGQgbm9kZSBpbiB0YWJsZSBjZWxsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IHRkTm9kZUxpc3RbaV0uY2hpbGROb2Rlcy5sZW5ndGg7IGorKykgICAvLyBsb29wIHRocm91Z2ggY2hpbGQgbm9kZXMgb2YgZXZlcnkgdGFibGUgY2VsbFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBhcHBseSBzdHlsZXMgb25seSB0byBFbGVtZW50IG5vZGVzIChub3QgdGV4dCBub2RlcywgYXR0cmlidXRlcyAuLi4pLCBodHRwOi8vY29kZS5zdGVwaGVubW9ybGV5Lm9yZy9qYXZhc2NyaXB0L2RvbS1ub2RldHlwZS1jb25zdGFudHMvXHJcbiAgICAgICAgICAgIGlmICh0ZE5vZGVMaXN0W2ldLmNoaWxkTm9kZXNbal0ubm9kZVR5cGUgPT09IDEpIFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgdGROb2RlTGlzdFtpXS5jaGlsZE5vZGVzW2pdLnN0eWxlLm9wYWNpdHkgPSBvcGFjaXR5IC8gMTAwO1xyXG4gICAgICAgICAgICAgIHRkTm9kZUxpc3RbaV0uY2hpbGROb2Rlc1tqXS5zdHlsZS5maWx0ZXIgPSAnYWxwaGEob3BhY2l0eT0nICsgb3BhY2l0eSArICcpJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHJvdyBpcyBtb3ZlZCB0aGVuIFJFRElQUy5kcmFnIHdpbGwgY3JlYXRlIG1pbmkgdGFibGUgd2l0aCBvbmUgcm93LCBhbGwgYnJvd3NlcnMgKElFOCwgT3BlcmExMSwgRkYzLjYsIENocm9tZTEwKSBjYW4gc2V0IG9wYWNpdHkgdG8gdGhlIHRhYmxlXHJcbiAgICB7XHJcbiAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSBvcGFjaXR5IC8gMTAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBvcGFjaXR5IGZvciBGRiwgQ2hyb21lLCBPcGVyYVxyXG4gICAgICBlbC5zdHlsZS5maWx0ZXIgPSAnYWxwaGEob3BhY2l0eT0nICsgb3BhY2l0eSArICcpJzsgICAgICAgICAvLyBzZXQgb3BhY2l0eSBmb3IgSUVcclxuICAgICAgZWwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3IgPyBjb2xvciA6ICcnOyAgICAgICAgICAgICAgLy8gc2V0IGJhY2tncm91bmQgY29sb3JcclxuICAgIH1cclxuICB9O1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLyogcHVibGljIHByb3BlcnRpZXMgKi9cclxuICAgIG9iaiA6IG9iaiwgICAgICAgICAgICAgICAgICAvL1R5cGU6IEhUTUxFbGVtZW50IC0gQ3VycmVudGx5IG1vdmVkIERJViBlbGVtZW50LiBSZWZlcmVuY2UgdG8gdGhlIFJFRElQUy5kcmFnLm9iaiAoZHJhZ2dlZCBESVYgZWxlbWVudCkgaXMgdmlzaWJsZSBhbmQgY2FuIGJlIHVzZWQgaW4gYXBwcm9wcmlhdGUgZXZlbnQgaGFuZGxlcnMuXHJcbiAgICBvYmpPbGQgIDogb2JqT2xkLCAgICAgICAgICAgLy9UeXBlOiBIVE1MRWxlbWVudCAtIFByZXZpb3VzbHkgbW92ZWQgRElWIGVsZW1lbnQgKGJlZm9yZSBjbGlja2VkIG9yIGNsb25lZCkuIEluIGNhc2Ugd2hlbiBESVYgZWxlbWVudCBpcyBjbG9uZWQsIG9iaiBpcyByZWZlcmVuY2Ugb2YgY3VycmVudCAoY2xvbmVkKSBESVYgZWxlbWVudCB3aGlsZSBvYmpPbGQgaXMgcmVmZXJlbmNlIG9mIGJvdHRvbSAob3JpZ2luKSBESVYgZWxlbWVudC5cclxuICAgIC8qKlxyXG4gICAgICogT2JqZWN0IGNvbnRhaW5zIHJlZmVyZW5jZSB0byBwcmV2aW91cywgc291cmNlLCBjdXJyZW50IGFuZCB0YXJnZXQgdGFibGUgY2VsbC4gVGQgcmVmZXJlbmNlcyBjYW4gYmUgdXNlZCBpbiBldmVudCBoYW5kbGVycy5cclxuICAgICAqIDx1bD5cclxuICAgICAqIDxsaT57SFRNTEVsZW1lbnR9IHRkLnNvdXJjZSAtIHJlZmVyZW5jZSB0byBzb3VyY2UgdGFibGUgY2VsbCAoc2V0IGluIG9ubW91c2Vkb3duKTwvbGk+XHJcbiAgICAgKiA8bGk+e0hUTUxFbGVtZW50fSB0ZC5wcmV2aW91cyAtIHJlZmVyZW5jZSB0byBwcmV2aW91cyB0YWJsZSBjZWxsIChzZXQgaW4gb25tb3VzZW1vdmUgYW5kIGF1dG9zY3JvbGwpPC9saT5cclxuICAgICAqIDxsaT57SFRNTEVsZW1lbnR9IHRkLmN1cnJlbnQgLSByZWZlcmVuY2UgdG8gY3VycmVudCB0YWJsZSBjZWxsIChzZXQgaW4gb25tb3VzZW1vdmUgYW5kIGF1dG9zY3JvbGwpPC9saT5cclxuICAgICAqIDxsaT57SFRNTEVsZW1lbnR9IHRkLnRhcmdldCAtIHJlZmVyZW5jZSB0byB0YXJnZXQgdGFibGUgY2VsbCAodGFyZ2V0IHRhYmxlIGNlbGwgaXMgc2V0IGluIGEgbW9tZW50IG9mIGRyb3BwaW5nIGVsZW1lbnQgdG8gdGhlIHRhYmxlIGNlbGwpPC9saT5cclxuICAgICAqIDwvdWw+XHJcbiAgICAgKiBAdHlwZSBPYmplY3RcclxuICAgICAqL1xyXG4gICAgdGQgOiB0ZCxcclxuICAgIC8qKlxyXG4gICAgICogSG92ZXIgb2JqZWN0IGNvbnRhaW5zIDQgcHJvcGVydGllczogY29sb3JUZCwgY29sb3JUciwgYm9yZGVyVGQgYW5kIGJvcmRlclRyLiBjb2xvclRkIGFuZCBjb2xvclRyIGRlZmluZSBob3ZlciBjb2xvciBmb3IgRElWIGVsZW1lbnQgYW5kIHRhYmxlIHJvdy5cclxuICAgICAqIElmIGJvcmRlclRkIGlzIGRlZmluZWQsIHRoZW4gaGlnaGxpZ2h0ZWQgY2VsbCB3aWxsIGhhdmUgYm9yZGVyLiBJZiBib3JkZXJUciBpcyBkZWZpbmVkIHRoZW4gaGlnaGxpZ2h0ZWQgcm93IHdpbGwgaGF2ZSBvbmx5IHRvcCBvciBib3R0b20gYm9yZGVyLlxyXG4gICAgICogVG9wIGJvcmRlciBzaG93cyB0aGF0IHJvdyB3aWxsIGJlIHBsYWNlZCBhYm92ZSBjdXJyZW50IHJvdywgd2hpbGUgYm90dG9tIGJvcmRlciBzaG93cyB0aGF0IGN1cnJlbnQgcm93IHdpbGwgYmUgcGxhY2VkIGJlbG93IGN1cnJlbnQgcm93LlxyXG4gICAgICogU29tZSBicm93c2VycyBtYXkgaGF2ZSBwcm9ibGVtIHdpdGggXCJib3JkZXItY29sbGFwc2U6Y29sbGFwc2VcIiB0YWJsZSBzdHlsZSBhbmQgYm9yZGVyIGhpZ2hsaWdodGluZy5cclxuICAgICAqIEluIHRoYXQgY2FzZSB0cnkgd2l0aG91dCBjb2xsYXBzaW5nIFREIGJvcmRlcnMgKGUuZyBzZXQgXCJib3JkZXItc3BhY2luZzowXCIgYW5kIHNtYWxsZXIgXCJ0ZC5ib3JkZXItd2lkdGhcIikuXHJcbiAgICAgKiBAdHlwZSBPYmplY3RcclxuICAgICAqIEBuYW1lIFJFRElQUy5kcmFnI2hvdmVyXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogLy8gc2V0IFwiIzlCQjNEQVwiIGFzIGhvdmVyIGNvbG9yIGZvciBURFxyXG4gICAgICogUkVESVBTLmRyYWcuaG92ZXIuY29sb3JUZCA9ICcjOUJCM0RBJztcclxuICAgICAqXHJcbiAgICAgKiAvLyBvciBzZXQgXCJMaW1lXCIgYXMgaG92ZXIgY29sb3IgZm9yIFRSXHJcbiAgICAgKiBSRURJUFMuZHJhZy5ob3Zlci5jb2xvclRyID0gJ0xpbWUnO1xyXG4gICAgICpcclxuICAgICAqIC8vIHNldCByZWQgYm9yZGVyIGZvciBoaWdobGlnaHRlZCBURFxyXG4gICAgICogUkVESVBTLmRyYWcuaG92ZXIuYm9yZGVyVGQgPSAnMnB4IHNvbGlkIHJlZCc7XHJcbiAgICAgKi9cclxuICAgIGhvdmVyIDogaG92ZXIsXHJcbiAgICAvKipcclxuICAgICAqIFNjcm9sbCBvYmplY3QgY29udGFpbnMgcHJvcGVydGllcyBuZWVkZWQgZm9yIGF1dG9zY3JvbGwgb3B0aW9uLlxyXG4gICAgICogPHVsPlxyXG4gICAgICogPGxpPntCb29sZWFufSBzY3JvbGwuZW5hYmxlIC0gRW5hYmxlIC8gZGlzYWJsZSBhdXRvc2Nyb2xsIG9wdGlvbi4gQnkgZGVmYXVsdCBhdXRvc2Nyb2xsIGlzIGVuYWJsZWQgYnV0IGl0IGNhbiBiZSB1c2VmdWxsIGluIHNvbWUgY2FzZXMgdG8gY29tcGxldGVseSB0dXJuIG9mZiBhdXRvc2Nyb2xsIChpZiBhcHBsaWNhdGlvbiBkb2Vzbid0IG5lZWQgYXV0b3Njcm9sbGluZyBwYWdlIG5vciBhdXRvc2Nyb2xsaW5nIERJViBjb250YWluZXIpLiBUdXJuaW5nIG9mZiBhdXRvc2Nyb2xsIHdpbGwgc3BlZWQgdXAgYXBwbGljYXRpb24gYmVjYXVzZSBleHRyYSBjYWxjdWxhdGlvbnMgd2lsbCBiZSBza2lwcGVkLiBEZWZhdWx0IGlzIHRydWU8L2xpPlxyXG4gICAgICogPGxpPntJbnRlZ2VyfSBzY3JvbGwuYm91bmQgLSBCb3VuZCBzaXplIGZvciB0cmlnZ2VyaW5nIHBhZ2UgYXV0b1Njcm9sbCBvciBhdXRvU2Nyb2xsIG9mIHNjcm9sbGFibGUgRElWIGNvbnRhaW5lci4gRGVmYXVsdCB2YWx1ZSBpcyAyNSAocHgpLjwvbGk+XHJcbiAgICAgKiA8bGk+e0ludGVnZXJ9IHNjcm9sbC5zcGVlZCAtIEF1dG9zY3JvbGwgcGF1c2UgaW4gbWlsbGlzZWNvbmRzLiBEZWZhdWx0IHZhbHVlIGlzIDIwIChtaWxsaXNlY29uZHMpLjwvbGk+XHJcbiAgICAgKiA8L3VsPlxyXG4gICAgICogQHR5cGUgT2JqZWN0XHJcbiAgICAgKi9cclxuICAgIHNjcm9sbCA6IHNjcm9sbCxcclxuICAgIC8qKlxyXG4gICAgICogT2JqZWN0IGNvbnRhaW5zIHN0eWxlcyAoY29sb3JzLCBvcGFjaXR5IGxldmVscykgZm9yIERJViBlbGVtZW50cyBhbmQgdGFibGUgcm93cy5cclxuICAgICAqIDx1bD5cclxuICAgICAqIDxsaT57U3RyaW5nfSBzdHlsZS5ib3JkZXJFbmFibGVkIC0gQm9yZGVyIHN0eWxlIGZvciBlbmFibGVkIERJViBlbGVtZW50cy4gRGVmYXVsdCBpcyBcInNvbGlkXCIuPC9saT5cclxuICAgICAqIDxsaT57U3RyaW5nfSBzdHlsZS5ib3JkZXJEaXNhYmxlZCAtIEJvcmRlciBzdHlsZSBmb3IgZGlzYWJsZWQgRElWIGVsZW1lbnRzLiBEZWZhdWx0IGlzIFwiZG90dGVkXCIuPC9saT5cclxuICAgICAqIDxsaT57SW50ZWdlcn0gc3R5bGUub3BhY2l0eURpc2FibGVkIC0gT3BhY2l0eSBsZXZlbCBmb3IgZGlzYWJsZWQgZWxlbWVudHMuIERlZmF1bHQgaXMgZW1wdHkgc3RyaW5nLjwvbGk+XHJcbiAgICAgKiA8bGk+e1N0cmluZ30gc3R5bGUucm93RW1wdHlDb2xvciAtIFwiRW1wdHkgcm93XCIgY29sb3IuIFdoZW4gbGFzdCByb3cgZnJvbSB0YWJsZSBpcyBtb3ZlZCB0aGVuIHRoaXMgY29sb3Igd2lsbCBiZSBzZXQgdG8gXCJlbXB0eSByb3dcIi4gRGVmYXVsdCBpcyBcIndoaXRlXCIuPC9saT5cclxuICAgICAqIDwvdWw+XHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogLy8gZGVmaW5lIGJvcmRlciBzdHlsZSBmb3IgZGlzYWJsZWQgZWxlbWVudHNcclxuICAgICAqIFJFRElQUy5kcmFnLnN0eWxlLmJvcmRlckRpc2FibGVkID0gJ2Rhc2hlZCc7XHJcbiAgICAgKiBAdHlwZSBPYmplY3RcclxuICAgICAqL1xyXG4gICAgc3R5bGUgOiBzdHlsZSxcclxuICAgIC8qKlxyXG4gICAgICogT2JqZWN0IGRlZmluZXMgc2V2ZXJhbCBydWxlcyByZWxhdGVkIHRvIGNsb25pbmcgRElWIGVsZW1lbnRzIGxpa2UgZW5hYmxlIGNsb25pbmcgd2l0aCBzaGlmdCBrZXksIGVuYWJsZSByZXR1cm5pbmcgY2xvbmVkIERJViBlbGVtZW50IHRvIGl0cyBzb3VyY2UgYW5kIHNvIG9uLlxyXG4gICAgICogSW5zdGVhZCBvZiBtb3ZpbmcsIERJViBlbGVtZW50IC8gcm93IHdpbGwgYmUgY2xvbmVkIGFuZCByZWFkeSBmb3IgZHJhZ2dpbmcuXHJcbiAgICAgKiBKdXN0IHByZXNzIFNISUZUIGtleSBhbmQgdHJ5IHRvIGRyYWcgRElWIGVsZW1lbnQgLyByb3cuXHJcbiAgICAgKiBpZiBjbG9uZS5zZW5kQmFjayBwcm9wZXJ0eSBzZXQgdG8gdHJ1ZSwgY2xvbmVkIERJViBlbGVtZW50IHdpbGwgYmUgZGVsZXRlZCB3aGVuIGRyb3BwZWQgdG8gdGhlIGNlbGwgY29udGFpbmluZyBpdHMgc291cmNlIGNsb25lIGVsZW1lbnQuXHJcbiAgICAgKiBJZiBleGlzdHMsIFwiY2xpbWl0XCIgY2xhc3Mgd2lsbCBiZSB1cGRhdGVkIChpbmNyZWFzZWQgYnkgMSkuXHJcbiAgICAgKiBjbG9uZS5kcm9wIHByb3BlcnR5IGRlZmluZXMgcGxhY2luZyBjbG9uZWQgRElWIGVsZW1lbnQgKGRyb3BwZWQgb3V0c2lkZSBhbnkgdGFibGUpIHRvIHRoZSBsYXN0IG1hcmtlZCBwb3NpdGlvbi5cclxuICAgICAqIElmIHRoaXMgcHJvcGVydHkgaXMgc2V0IHRvIHRydWUsIHRoZSBjbG9uZWQgRElWIGVsZW1lbnQgd2lsbCBiZSBhbHdheXMgcGxhY2VkIHRvIHRoZSB0YWJsZSBjZWxsLlxyXG4gICAgICogPHVsPlxyXG4gICAgICogPGxpPntCb29sZWFufSBjbG9uZS5rZXlEaXYgLSBJZiBzZXQgdG8gdHJ1ZSwgYWxsIERJViBlbGVtZW50cyBvbiB0YWJsZXMgY291bGQgYmUgY2xvbmVkIHdpdGggcHJlc3NlZCBTSElGVCBrZXkuIERlZmF1bHQgaXMgZmFsc2UuPC9saT5cclxuICAgICAqIDxsaT57Qm9vbGVhbn0gY2xvbmUua2V5Um93IC0gSWYgc2V0IHRvIHRydWUsIHRhYmxlIHJvd3MgY291bGQgYmUgY2xvbmVkIHdpdGggcHJlc3NlZCBTSElGVCBrZXkuIERlZmF1bHQgaXMgZmFsc2UuPC9saT5cclxuICAgICAqIDxsaT57Qm9vbGVhbn0gY2xvbmUuc2VuZEJhY2sgLSBJZiBzZXQgdG8gdHJ1ZSwgY2xvbmVkIGVsZW1lbnQgY2FuIGJlIHJldHVybmVkIHRvIGl0cyBzb3VyY2UuIERlZmF1bHQgaXMgZmFsc2UuPC9saT5cclxuICAgICAqIDxsaT57Qm9vbGVhbn0gY2xvbmUuZHJvcCAtIElmIHNldCB0byB0cnVlLCBjbG9uZWQgZWxlbWVudCB3aWxsIGJlIGFsd2F5cyBwbGFjZWQgdG8gdGhlIHRhYmxlICh0byB0aGUgbGFzdCBwb3NzaWJsZSBjZWxsKSBubyBtYXR0ZXIgaWYgaXMgZHJvcHBlZCBvdXRzaWRlIHRoZSB0YWJsZS4gRGVmYXVsdCBpcyBmYWxzZS48L2xpPlxyXG4gICAgICogPC91bD5cclxuICAgICAqIEB0eXBlIE9iamVjdFxyXG4gICAgICovXHJcbiAgICBjbG9uZSA6IGNsb25lLFxyXG4gICAgLyogcHVibGljIG1ldGhvZHMgKGRvY3VtZW50ZWQgaW4gbWFpbiBjb2RlKSAqL1xyXG4gICAgaW5pdCA6IGluaXQsXHJcbiAgICBlbmFibGVEcmFnIDogZW5hYmxlRHJhZyxcclxuICAgIGVuYWJsZURpdnMgOiBlbmFibGVEaXZzLFxyXG4gICAgcm93T3BhY2l0eSA6IHJvd09wYWNpdHksXHJcbiAgICBnZXRTY3JvbGxQb3NpdGlvbiA6IGdldFNjcm9sbFBvc2l0aW9uLFxyXG4gICAgZ2V0U3R5bGUgOiBnZXRTdHlsZSxcclxuICAgIGZpbmRQYXJlbnQgOiBmaW5kUGFyZW50LFxyXG4gICAgZXZlbnQgOiBldmVudFxyXG4gIH07XHJcbn0oKSk7XHJcblxyXG5cclxuaWYgKCFSRURJUFMuZXZlbnQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIFJFRElQUy5ldmVudCBpc24ndCBhbHJlYWR5IGRlZmluZWQgKGZyb20gb3RoZXIgUkVESVBTIGZpbGUpXHJcbntcclxuICBSRURJUFMuZXZlbnQgPSAoZnVuY3Rpb24gKCkgXHJcbiAge1xyXG4gICAgdmFyIGFkZDtcclxuICAgIHZhciByZW1vdmU7XHJcblxyXG4gICAgYWRkID0gZnVuY3Rpb24gKG9iaiwgZXZlbnROYW1lLCBoYW5kbGVyKSAgICAgICAgICAgICAgICAgICAgLy8gYWRkIGV2ZW50IGxpc3RlbmVyXHJcbiAgICB7XHJcbiAgICAgIGlmIChvYmouYWRkRXZlbnRMaXN0ZW5lcikgXHJcbiAgICAgIHtcclxuICAgICAgICBvYmouYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIGZhbHNlKTsgICAgICAgIC8vIChmYWxzZSkgcmVnaXN0ZXIgZXZlbnQgaW4gYnViYmxlIHBoYXNlIChldmVudCBwcm9wYWdhdGVzIGZyb20gZnJvbSB0YXJnZXQgZWxlbWVudCB1cCB0byB0aGUgRE9NIHJvb3QpXHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAob2JqLmF0dGFjaEV2ZW50KSBcclxuICAgICAge1xyXG4gICAgICAgIG9iai5hdHRhY2hFdmVudCgnb24nICsgZXZlbnROYW1lLCBoYW5kbGVyKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIFxyXG4gICAgICB7XHJcbiAgICAgICAgb2JqWydvbicgKyBldmVudE5hbWVdID0gaGFuZGxlcjtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZW1vdmUgPSBmdW5jdGlvbiAob2JqLCBldmVudE5hbWUsIGhhbmRsZXIpICAgICAgICAgICAgICAgICAvLyByZW1vdmUgZXZlbnQgbGlzdGVuZXJcclxuICAgIHtcclxuICAgICAgaWYgKG9iai5yZW1vdmVFdmVudExpc3RlbmVyKSBcclxuICAgICAge1xyXG4gICAgICAgIG9iai5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgZmFsc2UpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKG9iai5kZXRhY2hFdmVudCkgXHJcbiAgICAgIHtcclxuICAgICAgICBvYmouZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50TmFtZSwgaGFuZGxlcik7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBcclxuICAgICAge1xyXG4gICAgICAgIG9ialsnb24nICsgZXZlbnROYW1lXSA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHsgYWRkOiBhZGQsIHJlbW92ZTogcmVtb3ZlIH07XHJcbiAgfSgpKTtcclxufSIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIHJlZGlwcyA9IHt9O1xyXG5cclxucmVkaXBzLmluaXQgPSBmdW5jdGlvbiAoKSBcclxue1xyXG4gIHZhciByZCA9IFJFRElQUy5kcmFnOyAgIC8vIHJlZmVyZW5jZSB0byB0aGUgUkVESVBTLmRyYWcgbGlicmFyeVxyXG5cclxuICByZC5pbml0KCk7XHJcblxyXG4gIC8vcmQuY2xvbmUua2V5RGl2ID0gcmQuY2xvbmUua2V5Um93ID0gdHJ1ZTsgICAvLyBlbmFibGUgY2xvbmUgZWxlbWVudCBhbmQgY2xvbmUgcm93IHdpdGggc2hpZnQga2V5XHJcblxyXG4gIHJkLmV2ZW50LnJvd0Ryb3BwZWQgPSBmdW5jdGlvbiAobmV3UGFyZW50Um93KVxyXG4gIHtcclxuICAgIHZhciBtb3ZlZElEICAgICAgID0gcGFyc2VJbnQocmQub2JqT2xkLmlkLnJlcGxhY2UoJ3Jvd2lkJywgJycpKTtcclxuICAgIHZhciBuZXdQYXJlbnRJRCAgID0gcGFyc2VJbnQobmV3UGFyZW50Um93LmlkLnJlcGxhY2UoJ3Jvd2lkJywgJycpKTtcclxuICAgIHNwcmVhZFNoZWV0Lm1vdmVOb2RlKG1vdmVkSUQsIG5ld1BhcmVudElEKTtcclxuICB9O1xyXG5cclxuICByZC5ldmVudC5yb3dEcm9wcGVkU291cmNlID0gZnVuY3Rpb24gKCkgICAgICAgICAvLyByb3cgd2FzIGRyb3BwZWQgdG8gdGhlIHNvdXJjZSAtIGV2ZW50IGhhbmRsZXIsIG1pbmkgdGFibGUgKGNsb25lZCByb3cpIHdpbGwgYmUgZGVsZXRlZCBhbmQgc291cmNlIHJvdyBzaG91bGQgcmV0dXJuIHRvIG9yaWdpbmFsIHN0YXRlXHJcbiAge1xyXG4gICAgcmQucm93T3BhY2l0eShyZC5vYmpPbGQsIDEwMCk7ICAgICAgICAgICAgICAgIC8vIG1ha2Ugc291cmNlIHJvdyBjb21wbGV0ZWx5IHZpc2libGUgKG5vIG9wYWNpdHkpXHJcbiAgfTtcclxuXHJcbiAgcmQuZXZlbnQucm93TW92ZWQgPSBmdW5jdGlvbiAoKVxyXG4gIHtcclxuICAgIHJkLnJvd09wYWNpdHkocmQub2JqLCA4NSk7ICAgICAgICAgICAgICAgICAgICAvLyBzZXQgb3BhY2l0eSBmb3IgbW92ZWQgcm93LCByZC5vYmogaXMgcmVmZXJlbmNlIG9mIGNsb25lZCByb3cgKG1pbmkgdGFibGUpXHJcbiAgICByZC5yb3dPcGFjaXR5KHJkLm9iak9sZCwgMjAsICdXaGl0ZScpOyAgICAgICAgLy8gc2V0IG9wYWNpdHkgZm9yIHNvdXJjZSByb3cgYW5kIGNoYW5nZSBzb3VyY2Ugcm93IGJhY2tncm91bmQgY29sb3IsIG9iai5vYmpPbGQgaXMgcmVmZXJlbmNlIG9mIHNvdXJjZSByb3dcclxuICB9O1xyXG5cclxuICByZC5ldmVudC5yb3dDbGlja2VkICAgPSBmdW5jdGlvbiAoKSB7fTtcclxuICByZC5ldmVudC5yb3dOb3RNb3ZlZCAgPSBmdW5jdGlvbiAoKSB7fTtcclxuICByZC5ldmVudC5yb3dDbG9uZWQgICAgPSBmdW5jdGlvbiAoKSB7fTtcclxuICByZC5ldmVudC5yb3dOb3RDbG9uZWQgPSBmdW5jdGlvbiAoKSB7fTtcclxuICByZC5ldmVudC5yb3dEZWxldGVkICAgPSBmdW5jdGlvbiAoKSB7fTtcclxuXHJcbiAgcmQuZXZlbnQucm93VW5kZWxldGVkID0gZnVuY3Rpb24gKCkgICAgICAgICAgICAgLy8gcm93IGlzIHVuZGVsZXRlZCAocmV0dXJuIHNvdXJjZSByb3cgdG8gb3JpZ2luYWwgc3RhdGUpXHJcbiAge1xyXG4gICAgcmQucm93T3BhY2l0eShyZC5vYmpPbGQsIDEwMCk7XHJcbiAgfTtcclxufTtcclxuIiwidmFyIHJlc2l6ZUNvbHVtbkxlZnQgPSAwO1xyXG52YXIgcmVzaXplRmllbGQgPSAnMCc7XHJcbnZhciBNSU5fQ09MVU1OX1dJRFRIID0gNzA7XHJcbnZhciBHUklQU19XSURUSCA9IDE2O1xyXG5cclxudmFyIHN0YXJ0UmVzaXplID0gZnVuY3Rpb24oZSwgZ3JpcClcclxue1xyXG4gICQoZG9jdW1lbnQpLmJpbmQoJ3RvdWNobW92ZS5yZXNpemVDb2xHcmlwIG1vdXNlbW92ZS5yZXNpemVDb2xHcmlwJywgcmVzaXplRHJhZykuYmluZCgndG91Y2hlbmQucmVzaXplQ29sR3JpcCBtb3VzZXVwLnJlc2l6ZUNvbEdyaXAnLCByZXNpemVFbmQpO1xyXG5cclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzaXplTGluZScpLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc2l6ZUxpbmUnKS5zdHlsZS5sZWZ0ID0gZS5wYWdlWCArICdweCc7XHJcblxyXG4gIHJlc2l6ZUNvbHVtbkxlZnQgPSAkKGdyaXAucGFyZW50Tm9kZSkucG9zaXRpb24oKS5sZWZ0OyAgICAgICAgICAgICAgICAgICAgLy9zYXZlIHRoZSBsZWZ0IHBvc2l0aW9uIG9mIHRoZSBjb2x1bW4gYmVpbmcgcmVzaXplZFxyXG4gIHJlc2l6ZUZpZWxkID0gZ3JpcC5wYXJlbnROb2RlLmlkLnJlcGxhY2UoJ2NvbEhlYWRlcicsICcnKTsgICAgICAgICAgICAgICAgLy9zYXZlIHRoZSBmaWVsZCBvZiB0aGUgY29sdW1uIGJlaW5nIHJlc2l6ZWRcclxufTtcclxuXHJcbnZhciByZXNpemVFbmQgPSBmdW5jdGlvbihlKVxyXG57XHJcbiAgJChkb2N1bWVudCkudW5iaW5kKCd0b3VjaG1vdmUucmVzaXplQ29sR3JpcCBtb3VzZW1vdmUucmVzaXplQ29sR3JpcCcsIHJlc2l6ZURyYWcpLnVuYmluZCgndG91Y2hlbmQucmVzaXplQ29sR3JpcCBtb3VzZXVwLnJlc2l6ZUNvbEdyaXAnLCByZXNpemVFbmQpO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNpemVMaW5lJykuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG5cclxuICB2YXIgbmV3V2lkdGggPSBlLnBhZ2VYIC0gcmVzaXplQ29sdW1uTGVmdCAtIEdSSVBTX1dJRFRIO1xyXG5cclxuICBpZihuZXdXaWR0aCA8IE1JTl9DT0xVTU5fV0lEVEgpXHJcbiAge1xyXG4gICAgbmV3V2lkdGggPSBNSU5fQ09MVU1OX1dJRFRIO1xyXG4gIH1cclxuXHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbEhlYWRlcklucHV0JyArIHJlc2l6ZUZpZWxkKS5zdHlsZS53aWR0aCA9IG5ld1dpZHRoICsgJ3B4JzsgICAgLy9yZXNpemUgdGhlIHdpZHRoIG9mIHRoZSBjb2x1bW4gaGVhZGVyXHJcblxyXG4gIC8vcmVzaXplIHRoZSB3aWR0aCBvZiBldmVyeSBjZWxsIGluIHRoZSBjb2x1bW5cclxuICB2YXIgY29sdW1uQ2VsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZmllbGRJbnB1dCcgKyByZXNpemVGaWVsZCk7XHJcblxyXG4gIGZvcih2YXIgaSA9IDA7IGkgPCBjb2x1bW5DZWxscy5sZW5ndGg7IGkrKylcclxuICB7XHJcbiAgICBjb2x1bW5DZWxsc1tpXS5zdHlsZS53aWR0aCA9IChuZXdXaWR0aCArIDgpICsgJ3B4JztcclxuICB9XHJcbn07XHJcblxyXG52YXIgcmVzaXplRHJhZyA9IGZ1bmN0aW9uKGUpXHJcbntcclxuICBpZihlLnBhZ2VYID4gcmVzaXplQ29sdW1uTGVmdCArIE1JTl9DT0xVTU5fV0lEVEggKyBHUklQU19XSURUSClcclxuICB7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzaXplTGluZScpLnN0eWxlLmxlZnQgPSBlLnBhZ2VYICsgJ3B4JzsgICAgICAvL21vdmUgdGhlIHJlc2l6ZSBsaW5lIGFzIHRoZSB1c2VyIGRyYWdzIGl0XHJcbiAgfVxyXG59OyIsIiIsInZhciBmaWVsZE1lbnVDb250cm9sbGVyID1cclxue1xyXG4gIGRpc3BsYXlGaWVsZE1lbnU6IGZ1bmN0aW9uKGZpZWxkTmFtZSwgeCwgeSkgXHJcbiAge1xyXG4gICAgdmFyIGZpZWxkID0gcHJvamVjdC5nZXRGaWVsZChmaWVsZE5hbWUpO1xyXG4gICAgICBcclxuICAgIHRoaXMubWVudSA9IG5ldyBGaWVsZE1lbnUoZmllbGQsIHNwcmVhZFNoZWV0LmZpZWxkcyk7XHJcbiAgICBcclxuICAgIGZpZWxkTWVudVZpZXcucmVuZGVyKHRoaXMubWVudSwgeCwgeSk7ICAgIFxyXG4gIH0sXHJcbiAgaGFuZGxlQ2xpY2s6IGZ1bmN0aW9uKG1lbnVJdGVtSUQpXHJcbiAge1xyXG4gICAgdmFyIGNsaWNrZWQgPSB0aGlzLm1lbnUuZ2V0TWVudUl0ZW0obWVudUl0ZW1JRCwgdGhpcy5tZW51KTtcclxuICAgIHZhciBwYXJlbnQgPSB0aGlzLm1lbnUuZ2V0TWVudUl0ZW1QYXJlbnQobWVudUl0ZW1JRCwgdGhpcy5tZW51KTtcclxuICBcclxuICAgIGlmKGNsaWNrZWQuZmllbGQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiB0aGUgbWVudSBpdGVtIGRvZXNuJ3QgaGF2ZSBhIGZpZWxkIHRoZW4gaWdub3JlIGl0XHJcbiAgICB7XHJcbiAgICAgIHZhciBmaWVsZCA9IHByb2plY3QuZ2V0RmllbGQoY2xpY2tlZC5maWVsZC5uYW1lKTtcclxuICAgICAgZmllbGRbY2xpY2tlZC52YXJOYW1lXSA9IGNsaWNrZWQudmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zZXQgdmFsdWUgZm9yIHRoZSBmaWVsZCBpbiB0aGUgbW9kZWwgYmFzZWQgb24gdGhlIGNsaWNrZWQgbWVudSBpdGVtXHJcbiAgICBcclxuICAgICAgZmllbGRNZW51Vmlldy5zZXRDaGVja21hcmtzKG1lbnVJdGVtSUQsIHBhcmVudC5pdGVtcyk7XHJcblxyXG4gICAgICBpZihwYXJlbnQgPT09IHRoaXMubWVudSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIHRoaXMgaXMgYSB0b3AgbGV2ZWwgbWVudSBpdGVtIHRoZW4gdXBkYXRlIHRoZSBmb3JtYXR0aW5nLCBzaW5jZSB3ZSBvbmx5IHdhbnQgdG8gZG8gdGhpcyBvbmNlIHBlciBjbGlja1xyXG4gICAgICB7XHJcbiAgICAgICAgc3ByZWFkU2hlZXQudXBkYXRlTnVtYmVyRmllbGRGb3JtYXR0aW5nKGZpZWxkKTtcclxuICAgICAgfVxyXG4gICAgfSAgICBcclxuICB9XHJcbn07IiwiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKVxyXG57XHJcbiAgc2Nyb2xsQmFyV2lkdGggPSBnZXRTY3JvbGxCYXJXaWR0aCgpOyAgLy9nZXQgdGhlIHNjcm9sbGJhciB3aWR0aCBmb3IgdGhlIGJyb3dzZXIsIHRvIHVzZSBsYXRlciBmb3Igc2l6aW5nIG90aGVyIGVsZW1lbnRzIFxyXG4gIGhtcy5pbml0KCk7XHJcbn0pO1xyXG5cclxudmFyIGhtcyA9IFxyXG57XHJcbiAgaW5pdDogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgIHByb2plY3RzLmluaXQoZnVuY3Rpb24ocHJvamVjdHMpIHsgaGVhZGVyVmlldy5yZW5kZXIocHJvamVjdHMpOyB9KTsgICBcclxuICB9LFxyXG4gIG9wZW5Qcm9qZWN0OiBmdW5jdGlvbihwcm9qZWN0SUQpXHJcbiAge1xyXG4gICAgcHJvamVjdHMub3BlblByb2plY3QocHJvamVjdElELCBmdW5jdGlvbih0cmVlKVxyXG4gICAge1xyXG4gICAgICBwcm9qZWN0LnRyZWUgPSB0cmVlO1xyXG4gICAgICBobXMuc2VsZWN0VmlldyhoZWFkZXJWaWV3LnNlbGVjdGVkVmlldygpKTsgICAgXHJcbiAgICB9KTsgICAgIFxyXG4gIH0sXHJcbiAgc2F2ZVRvRGF0YWJhc2U6IGZ1bmN0aW9uKCkgeyBwcm9qZWN0LnNhdmVUb0RhdGFiYXNlKCk7IH0sXHJcbiAgc2VsZWN0VmlldzogZnVuY3Rpb24odmlld0lEKVxyXG4gIHtcclxuICAgIGlmKHByb2plY3QudHJlZSlcclxuICAgIHtcclxuICAgICAgaWYodGhpcy52aWV3KSB7IHRoaXMudmlldy5kZXN0cm95KCk7IH1cclxuICAgICAgdGhpcy5zaG93Vmlldyh2aWV3SUQpO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgc2hvd1ZpZXc6IGZ1bmN0aW9uKHZpZXdJRClcclxuICB7XHJcbiAgICBzd2l0Y2godmlld0lEKVxyXG4gICAge1xyXG4gICAgICBjYXNlIFNQUkVBRFNIRUVUX1ZJRVc6XHJcbiAgICAgICAgdGhpcy52aWV3ID0gc3ByZWFkU2hlZXRWaWV3O1xyXG4gICAgICAgIHNwcmVhZFNoZWV0LmRpc3BsYXkoKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgICBcclxuICAgICAgY2FzZSBUUkVFX1ZJRVc6XHJcbiAgICAgICAgdGhpcy52aWV3ID0gdHJlZVZpZXc7XHJcbiAgICAgICAgdHJlZS5kaXNwbGF5VHJlZSgpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICAgIFxyXG4gICAgICBjYXNlIFdFSUdIVEVEX1RSRUVfVklFVzpcclxuICAgICAgICB0aGlzLnZpZXcgPSB3ZWlnaHRlZFRyZWVWaWV3O1xyXG4gICAgICAgIHRyZWUuZGlzcGxheVdlaWdodGVkVHJlZSgpO1xyXG4gICAgICAgIGJyZWFrOyBcclxuICAgICAgICBcclxuICAgICAgY2FzZSBDSVJDTEVfVklFVzpcclxuICAgICAgICB0aGlzLnZpZXcgPSBjaXJjbGVWaWV3O1xyXG4gICAgICAgIGNpcmNsZVZpZXcuZGlzcGxheSgpO1xyXG4gICAgICAgIGJyZWFrOyAgICAgICAgICAgICAgICBcclxuICAgIH0gICAgXHJcbiAgfSxcclxuICBjcmVhdGVOZXdQcm9qZWN0OiBmdW5jdGlvbihuZXdQcm9qZWN0TmFtZSlcclxuICB7ICBcdFxyXG4gICAgcHJvamVjdHMuY3JlYXRlTmV3UHJvamVjdChuZXdQcm9qZWN0TmFtZSk7XHJcbiAgXHRobXMuc2VsZWN0VmlldyhoZWFkZXJWaWV3LnNlbGVjdGVkVmlldygpKTsgICAgICBcclxuICB9LFxyXG4gIG5leHRQcm9qZWN0SUQ6IGZ1bmN0aW9uKClcclxuICB7XHJcbiAgICByZXR1cm4gcHJvamVjdHMubmV4dFByb2plY3RJRCsrO1xyXG4gIH0sXHJcbiAgZXhwYW5kVG9MZXZlbDogZnVuY3Rpb24obGV2ZWwpXHJcbiAge1xyXG4gICAgcHJvamVjdC5leHBhbmRUb0xldmVsKHByb2plY3QudHJlZSwgbGV2ZWwpO1xyXG4gICAgLy9UT0RPOiB0aGUgZm9sbG93aW5nIG5lZWRzIHRvIGJlIHJlZmFjdG9yZWRcclxuICAgIGlmKHRoaXMudmlldyA9PT0gc3ByZWFkU2hlZXRWaWV3KSB7IHNwcmVhZFNoZWV0LmRpc3BsYXkoKTsgfVxyXG4gICAgZWxzZSBpZih0aGlzLnZpZXcgPT09IHRyZWVWaWV3KSB7IHRyZWVWaWV3LnJlZnJlc2goKTsgfVxyXG4gICAgZWxzZSBpZih0aGlzLnZpZXcgPT09IHdlaWdodGVkVHJlZVZpZXcpIHsgd2VpZ2h0ZWRUcmVlVmlldy5yZWZyZXNoKCk7IH0gICBcclxuICB9XHJcbn07XHJcblxyXG52YXIgc2Nyb2xsQmFyV2lkdGg7XHJcbnZhciBnZXRTY3JvbGxCYXJXaWR0aCA9IGZ1bmN0aW9uKCkgXHJcbntcclxuICB2YXIgZGl2LCB3aWR0aDtcclxuICBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICBkaXYuaW5uZXJIVE1MID0gJzxkaXYgc3R5bGU9XCJ3aWR0aDo1MHB4O2hlaWdodDo1MHB4O3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTUwcHg7dG9wOi01MHB4O292ZXJmbG93OmF1dG87XCI+PGRpdiBzdHlsZT1cIndpZHRoOjFweDtoZWlnaHQ6MTAwcHg7XCI+PC9kaXY+PC9kaXY+JztcclxuICBkaXYgPSBkaXYuZmlyc3RDaGlsZDtcclxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7XHJcbiAgd2lkdGggPSBkaXYub2Zmc2V0V2lkdGggLSBkaXYuY2xpZW50V2lkdGg7XHJcbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkaXYpO1xyXG4gIHJldHVybiB3aWR0aDtcclxufTsiLCJ2YXIgc3ByZWFkU2hlZXQgPSBcclxue1xyXG4gIGRpc3BsYXk6IGZ1bmN0aW9uKClcclxuICB7XHJcbiAgICBwcm9qZWN0LmNsZWFuc2VEYXRhKCk7ICAgICAgICAgICAgICAgICAgLy9yZXF1aXJlZCB0byByZW1vdmUgY2lyY3VsYXIgcmVmZXJlbmNlcyB0aGF0IG90aGVyIHZpZXdzIG1heSBhZGRcclxuICAgIHNwcmVhZFNoZWV0Vmlldy5yZW5kZXIocHJvamVjdC50cmVlKTtcclxuICB9LFxyXG4gIGZpZWxkczogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgIHJldHVybiBwcm9qZWN0LmZpZWxkcygpO1xyXG4gIH0sXHJcbiAgdHJlZTogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgIHJldHVybiBwcm9qZWN0LnRyZWU7XHJcbiAgfSxcclxuICB1cGRhdGVGaWVsZFZhbHVlOiBmdW5jdGlvbihmaWVsZE5hbWUsIG5vZGVJRClcclxuICB7XHJcbiAgICB2YXIgbm9kZSA9IHByb2plY3QuZmluZE5vZGUobm9kZUlEKTtcclxuICBcclxuICAgIGlmKG5vZGUpXHJcbiAgICB7XHJcbiAgICAgIGlmKCFub2RlLnZhbHVlcykgeyBub2RlLnZhbHVlcyA9IHt9OyB9XHJcbiAgICAgIG5vZGUudmFsdWVzW2ZpZWxkTmFtZV0gPSBzcHJlYWRTaGVldFZpZXcuZ2V0RmllbGRWYWx1ZShmaWVsZE5hbWUsIG5vZGVJRCk7ICAgICBcclxuICAgIH0gIFxyXG4gIFxyXG4gICAgLy9UT0RPOiBzaG91bGQgcGVyZm9ybSB0aGUgYWdncmVnYXRpb24gYmFzZWQgb24gdGhlIGZpZWxkIHNldHRpbmdzIGZvciBhZ2dyZWdhdGluZyB0aGlzIGZpZWxkXHJcbiAgICBwcm9qZWN0LnRyZWUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCkgXHJcbiAgICB7XHJcbiAgICAgIGFnZ3JlZ2F0ZV9hbnkoY2hpbGQsIGZpZWxkTmFtZSk7XHJcbiAgICB9KTsgICAgXHJcbiAgfSxcclxuICByYXdWYWx1ZTogZnVuY3Rpb24oZmllbGROYW1lLCBub2RlSUQpXHJcbiAge1xyXG4gICAgdmFyIG5vZGUgPSBwcm9qZWN0LmZpbmROb2RlKHBhcnNlSW50KG5vZGVJRCkpO1xyXG4gICAgXHJcbiAgICBpZihub2RlLnZhbHVlcyAmJiBub2RlLnZhbHVlc1tmaWVsZE5hbWVdKVxyXG4gICAge1xyXG4gICAgICByZXR1cm4gbm9kZS52YWx1ZXNbZmllbGROYW1lXTtcclxuICAgIH0gIFxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9ICAgIFxyXG4gIH0sXHJcbiAgZm9ybWF0dGVkVmFsdWU6IGZ1bmN0aW9uKGZpZWxkLCBub2RlKVxyXG4gIHtcclxuICAgIGlmKG5vZGUudmFsdWVzICYmIG5vZGUudmFsdWVzW2ZpZWxkLm5hbWVdKVxyXG4gICAge1xyXG4gICAgICByZXR1cm4gRmllbGQuZm9ybWF0VmFsdWUoZmllbGQsIG5vZGUudmFsdWVzW2ZpZWxkLm5hbWVdKTtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgIHtcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgfSAgICBcclxuICB9LFxyXG4gIGFkZEZpZWxkOiBmdW5jdGlvbihmaWVsZE5hbWUpXHJcbiAge1xyXG4gICAgcHJvamVjdC5hZGRGaWVsZChmaWVsZE5hbWUpO1xyXG4gICAgc3ByZWFkU2hlZXRWaWV3LmFkZEZpZWxkKGZpZWxkTmFtZSk7XHJcbiAgfSxcclxuICBoYXNDaGlsZHJlbjogZnVuY3Rpb24obm9kZSlcclxuICB7XHJcbiAgICByZXR1cm4gIXByb2plY3QuaXNOb2RlQ2hpbGRsZXNzKG5vZGUpO1xyXG4gIH0sXHJcbiAgY2hpbGRyZW5IaWRkZW46IGZ1bmN0aW9uKG5vZGUpXHJcbiAge1xyXG4gICAgcmV0dXJuIHByb2plY3QuaXNOb2RlQ29sbGFwc2VkKG5vZGUpO1xyXG4gIH0sXHJcbiAgbW92ZU5vZGU6IGZ1bmN0aW9uKG5vZGVJRCwgbmV3UGFyZW50SUQpXHJcbiAge1xyXG4gICAgdmFyIG5ld1BhcmVudE5vZGUgPSBwcm9qZWN0LmZpbmROb2RlKG5ld1BhcmVudElEKTtcclxuICAgIHZhciBub2RlID0gcHJvamVjdC5maW5kTm9kZShub2RlSUQpO1xyXG4gIFxyXG4gICAgc3ByZWFkU2hlZXQucmVtb3ZlTm9kZShub2RlKTtcclxuICAgIHByb2plY3QuYWRkTm9kZShub2RlLCBuZXdQYXJlbnROb2RlKTtcclxuICAgIHNwcmVhZFNoZWV0LmFkZE5vZGUobm9kZSwgbmV3UGFyZW50Tm9kZSk7ICAgIFxyXG4gIH0sXHJcbiAgcmVtb3ZlTm9kZTogZnVuY3Rpb24obm9kZSlcclxuICB7XHJcbiAgICB2YXIgcGFyZW50Tm9kZSA9IHByb2plY3QuZmluZFBhcmVudChub2RlLmlkKTtcclxuICAgIHByb2plY3QudHJhdmVyc2UocHJvamVjdC5nZXRDaGlsZHJlbiwgc3ByZWFkU2hlZXRWaWV3LnJlbW92ZU5vZGUsIG5vZGUpO1xyXG4gICAgcHJvamVjdC5yZW1vdmVOb2RlKG5vZGUpO1xyXG4gICAgc3ByZWFkU2hlZXRWaWV3LnJlZHJhd05vZGVDb250ZW50KHBhcmVudE5vZGUpOyAgICAgICAgICAvL2lmIHRoZSBwYXJlbnQgaXMgY2hpbGRsZXNzIG5vdywgdGhlbiBoaWRlIHRoZSBvbGQgcGFyZW50J3MgZXhwYW5kL2NvbGxhcHNlIGljb24gICAgIFxyXG4gIH0sXHJcbiAgZGVsZXRlTm9kZTogZnVuY3Rpb24obm9kZUlEKVxyXG4gIHtcclxuICAgIHZhciBub2RlID0gcHJvamVjdC5maW5kTm9kZShub2RlSUQpO1xyXG4gICAgc3ByZWFkU2hlZXQucmVtb3ZlTm9kZShub2RlKTtcclxuICB9LFxyXG4gIGFkZE5vZGU6IGZ1bmN0aW9uKG5vZGUsIHBhcmVudE5vZGUpXHJcbiAge1xyXG4gICAgaWYocHJvamVjdC5pc05vZGVDb2xsYXBzZWQocGFyZW50Tm9kZSkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICB7XHJcbiAgICAgIHNwcmVhZFNoZWV0LmV4cGFuZE5vZGUocGFyZW50Tm9kZSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHNwcmVhZFNoZWV0Vmlldy5yZWRyYXdOb2RlQ29udGVudChwYXJlbnROb2RlKTtcclxuICAgIHNwcmVhZFNoZWV0Vmlldy5pbnNlcnROb2RlQWZ0ZXIobm9kZSwgcGFyZW50Tm9kZSk7ICAgICAgLy9hZGQgdGhlIG1vdmVkIG5vZGUgYW5kIGl0cyBkZXNjZW5kYW50cyB0byB0aGUgbmV3IHBhcmVudCBpbiB0aGUgdmlld1xyXG4gICAgc3ByZWFkU2hlZXRWaWV3LnJlbmRlckV4cGFuZGVyKCk7ICBcclxuICB9LFxyXG4gIGNvcHlOb2RlOiBmdW5jdGlvbihub2RlSUQpXHJcbiAge1xyXG4gICAgdmFyIHNvdXJjZU5vZGUgPSBwcm9qZWN0LmZpbmROb2RlKG5vZGVJRCk7XHJcbiAgICB2YXIgbmV3Tm9kZSA9IHByb2plY3QuY2xvbmVOb2RlKHNvdXJjZU5vZGUpO1xyXG4gICAgcHJvamVjdC5pbnNlcnROb2RlKG5ld05vZGUsIHNvdXJjZU5vZGUpO1xyXG4gICAgc3ByZWFkU2hlZXRWaWV3Lmluc2VydE5vZGVCZWZvcmUobmV3Tm9kZSwgc291cmNlTm9kZSk7ICAgIFxyXG4gIH0sXHJcbiAgZXhwYW5kTm9kZTogZnVuY3Rpb24obm9kZSlcclxuICB7XHJcbiAgICBwcm9qZWN0LmV4cGFuZE5vZGUobm9kZSk7XHJcbiAgICBzcHJlYWRTaGVldFZpZXcuZXhwYW5kTm9kZShub2RlKTtcclxuICAgIHNwcmVhZFNoZWV0Vmlldy5yZWRyYXdOb2RlQ29udGVudChub2RlKTsgICAgICBcclxuICB9LFxyXG4gIGNvbGxhcHNlTm9kZTogZnVuY3Rpb24obm9kZSlcclxuICB7XHJcbiAgICBwcm9qZWN0LnRyYXZlcnNlRGVzY2VuZGFudHMocHJvamVjdC5nZXRDaGlsZHJlbiwgc3ByZWFkU2hlZXRWaWV3LnJlbW92ZU5vZGUsIG5vZGUpOyAgICBcclxuICAgIHByb2plY3QuY29sbGFwc2VOb2RlKG5vZGUpO1xyXG4gICAgc3ByZWFkU2hlZXRWaWV3LnJlZHJhd05vZGVDb250ZW50KG5vZGUpOyAgICAgXHJcbiAgfSxcclxuICB0b2dnbGVOb2RlOiBmdW5jdGlvbihub2RlSUQpXHJcbiAge1xyXG4gICAgdmFyIG5vZGUgPSBwcm9qZWN0LmZpbmROb2RlKG5vZGVJRCk7XHJcbiAgICBcclxuICAgIGlmKHByb2plY3QuaXNOb2RlRXhwYW5kZWQobm9kZSkpXHJcbiAgICB7XHJcbiAgICAgIHNwcmVhZFNoZWV0LmNvbGxhcHNlTm9kZShub2RlKTsgICAgICAgICAgICAgICAgXHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHByb2plY3QuaXNOb2RlQ29sbGFwc2VkKG5vZGUpKVxyXG4gICAge1xyXG4gICAgICBzcHJlYWRTaGVldC5leHBhbmROb2RlKG5vZGUpOyBcclxuICAgIH0gIFxyXG4gIH0sXHJcbiAgdXBkYXRlTm9kZU5hbWU6IGZ1bmN0aW9uKG5vZGVJRCwgbmV3TmFtZSlcclxuICB7XHJcbiAgICBwcm9qZWN0LmZpbmROb2RlKG5vZGVJRCkubmFtZSA9IG5ld05hbWU7ICAgIFxyXG4gIH0sXHJcbiAgdXBkYXRlTnVtYmVyRmllbGRGb3JtYXR0aW5nOiBmdW5jdGlvbihmaWVsZClcclxuICB7XHJcbiAgICBwcm9qZWN0LnRyYXZlcnNlKHByb2plY3QuZ2V0Q2hpbGRyZW4sIGZ1bmN0aW9uKG5vZGUpXHJcbiAgICB7ICAgICAgXHJcbiAgICAgIGlmKG5vZGUudmFsdWVzKVxyXG4gICAgICB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gRmllbGQuZm9ybWF0VmFsdWUoZmllbGQsIE51bWJlcihub2RlLnZhbHVlc1tmaWVsZC5uYW1lXSkpOyAgICAgICAgICAgICAgICAvL2dldCB0aGUgdmFsdWUgZnJvbSB0aGUgbW9kZWxcclxuICAgICAgICBzcHJlYWRTaGVldFZpZXcudXBkYXRlRmllbGRWYWx1ZShmaWVsZC5uYW1lLCBub2RlLmlkLCB2YWx1ZSk7XHJcbiAgICAgIH0gICAgICBcclxuICAgIH0pO1xyXG4gIH0sXHJcbiAgZW5hYmxlRHJhZ2dpbmc6IGZ1bmN0aW9uKG5vZGUpXHJcbiAge1xyXG4gICAgcHJvamVjdC50cmF2ZXJzZShwcm9qZWN0LmdldENoaWxkcmVuLCBzcHJlYWRTaGVldFZpZXcuZW5hYmxlRHJhZ2dpbmcsIG5vZGUpOyAgICBcclxuICB9ICBcclxufTsiLCJ2YXIgdHJlZSA9XHJcbntcclxuICBkaXNwbGF5VHJlZTogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgIHRoaXMuZGF0YSA9IHByb2plY3QudHJlZTtcclxuICAgIHRoaXMuZmllbGQgPSBwcm9qZWN0LmZpZWxkcygpWzBdO1xyXG4gICAgdHJlZVZpZXcucmVuZGVyKCk7XHJcbiAgfSxcclxuICBkaXNwbGF5V2VpZ2h0ZWRUcmVlOiBmdW5jdGlvbigpXHJcbiAge1xyXG4gICAgdGhpcy5kYXRhID0gcHJvamVjdC50cmVlO1xyXG4gICAgdGhpcy5maWVsZCA9IHByb2plY3QuZmllbGRzKClbMF07XHJcbiAgICB0aGlzLm1heEZpZWxkVmFsdWUgPSB0aGlzLmNhbGNNYXhGaWVsZFZhbHVlKCk7XHJcbiAgICB3ZWlnaHRlZFRyZWVWaWV3LnJlbmRlcigpO1xyXG4gIH0sICBcclxuICBjYWxjTWF4RmllbGRWYWx1ZTogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgIHZhciBtYXhWYWx1ZSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcclxuICAgIFxyXG4gICAgcHJvamVjdC50cmF2ZXJzZShwcm9qZWN0LmdldENoaWxkcmVuLCBmdW5jdGlvbihub2RlKSBcclxuICAgIHtcclxuICAgICAgaWYobm9kZS52YWx1ZXMpXHJcbiAgICAgIHtcclxuICAgICAgICB2YXIgdmFsdWUgPSBub2RlLnZhbHVlc1t0cmVlLmZpZWxkLm5hbWVdO1xyXG4gICAgICAgIGlmKHZhbHVlID4gbWF4VmFsdWUpIHsgbWF4VmFsdWUgPSB2YWx1ZTsgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgcmV0dXJuIG1heFZhbHVlO1xyXG4gIH1cclxufTsiLCJ2YXIgRmllbGQgPSBmdW5jdGlvbihuYW1lKVxyXG57XHJcbiAgdGhpcy5uYW1lID0gbmFtZTtcclxuICB0aGlzLmRhdGF0eXBlID0gRmllbGQuTlVNQkVSO1xyXG4gIHRoaXMuZm9ybWF0ID0gRmllbGQuTlVNQkVSX0ZPUk1BVDtcclxuICB0aGlzLnByZWNpc2lvbiA9IDI7XHJcbiAgdGhpcy5hZ2dfdHlwZSA9IEZpZWxkLk5PX0FHR1JFR0FUSU9OO1xyXG4gIHRoaXMuYWdnX3F0eV9maWVsZCA9IG51bGw7XHJcbn07XHJcblxyXG5GaWVsZC5OVU1CRVIgPSAnMCc7XHJcbkZpZWxkLlNUUklORyA9ICcxJztcclxuRmllbGQuQ0hPSUNFID0gJzInO1xyXG5cclxuRmllbGQuTk9fQUdHUkVHQVRJT04gPSAnMCc7XHJcbkZpZWxkLlNVTV9BTllfQUdHUkVHQVRJT04gPSAnMSc7XHJcblxyXG5GaWVsZC5OVU1CRVJfRk9STUFUID0gJzAnO1xyXG5GaWVsZC5QRVJDRU5UX0ZPUk1BVCA9ICcxJztcclxuRmllbGQuU0NJRU5USUZJQ19GT1JNQVQgPSAnMic7XHJcblxyXG5GaWVsZC5mb3JtYXRWYWx1ZSA9IGZ1bmN0aW9uKGZpZWxkLCB2YWx1ZSlcclxue1xyXG4gIGlmKGZpZWxkLmRhdGF0eXBlID09PSBGaWVsZC5OVU1CRVIpXHJcbiAge1xyXG4gICAgdmFsdWUgPSBOdW1iZXIodmFsdWUpOyAgICAgIC8vVE9ETzogaGFuZGxlIGNhc2Ugd2hlcmUgdmFsdWUgZG9lc24ndCBwYXJzZSB0byBhIG51bWJlclxyXG4gICAgXHJcbiAgICBpZihmaWVsZC5mb3JtYXQgPT09IEZpZWxkLk5VTUJFUl9GT1JNQVQpXHJcbiAgICB7XHJcbiAgICAgIHJldHVybiB2YWx1ZS50b0ZpeGVkKGZpZWxkLnByZWNpc2lvbik7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKGZpZWxkLmZvcm1hdCA9PT0gRmllbGQuUEVSQ0VOVF9GT1JNQVQpXHJcbiAgICB7XHJcbiAgICAgIHJldHVybiAoMTAwLjAgKiB2YWx1ZSkudG9GaXhlZChmaWVsZC5wcmVjaXNpb24pICsgJyUnO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihmaWVsZC5mb3JtYXQgPT09IEZpZWxkLlNDSUVOVElGSUNfRk9STUFUKVxyXG4gICAge1xyXG4gICAgICByZXR1cm4gdmFsdWUudG9FeHBvbmVudGlhbChmaWVsZC5wcmVjaXNpb24pO1xyXG4gICAgfVxyXG4gIH1cclxuICBlbHNlIGlmKGZpZWxkLmRhdGF0eXBlID09PSBGaWVsZC5TVFJJTkcpXHJcbiAge1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH0gXHJcbiAgZWxzZSBpZihmaWVsZC5kYXRhdHlwZSA9PT0gRmllbGQuQ0hPSUNFKVxyXG4gIHtcclxuICAgIC8vVE9ETzogaW1wbGVtZW50XHJcbiAgfSAgICAgIFxyXG59OyAgIiwidmFyIEZpZWxkTWVudSA9IGZ1bmN0aW9uKGZpZWxkLCBmaWVsZHMpXHJcbntcclxuICB2YXIgbnVtYmVySXRlbSA9IG5ldyBGaWVsZE1lbnVJdGVtKCdOdW1iZXInLCBGaWVsZC5OVU1CRVIsICdkYXRhdHlwZScsIGZpZWxkKTtcclxuICB2YXIgZm9ybWF0SXRlbSA9IG5ldyBGaWVsZE1lbnVJdGVtKCdGb3JtYXQnKTtcclxuICBcclxuICB2YXIgbnVtYmVyRm9ybWF0SXRlbSA9IG5ldyBGaWVsZE1lbnVJdGVtKCdOdW1iZXInLCBGaWVsZC5OVU1CRVJfRk9STUFULCAnZm9ybWF0JywgZmllbGQpO1xyXG4gIG51bWJlckZvcm1hdEl0ZW0uaXRlbXMucHVzaChuZXcgRmllbGRNZW51SXRlbSgnMCcsIDAsICdwcmVjaXNpb24nLCBmaWVsZCkpO1xyXG4gIHZhciBkaXNwbGF5U3RyaW5nID0gJzAuJztcclxuICBmb3IodmFyIGkgPSAxOyBpIDwgMTE7IGkrKylcclxuICB7XHJcbiAgICBkaXNwbGF5U3RyaW5nICs9ICcwJztcclxuICAgIG51bWJlckZvcm1hdEl0ZW0uaXRlbXMucHVzaChuZXcgRmllbGRNZW51SXRlbShkaXNwbGF5U3RyaW5nLCBpLCAncHJlY2lzaW9uJywgZmllbGQpKTtcclxuICB9XHJcbiAgZm9ybWF0SXRlbS5pdGVtcy5wdXNoKG51bWJlckZvcm1hdEl0ZW0pO1xyXG4gIFxyXG4gIHZhciBwZXJjZW50Rm9ybWF0SXRlbSA9IG5ldyBGaWVsZE1lbnVJdGVtKCdQZXJjZW50JywgRmllbGQuUEVSQ0VOVF9GT1JNQVQsICdmb3JtYXQnLCBmaWVsZCk7XHJcbiAgcGVyY2VudEZvcm1hdEl0ZW0uaXRlbXMucHVzaChuZXcgRmllbGRNZW51SXRlbSgnMCUnLCAwLCAncHJlY2lzaW9uJywgZmllbGQpKTtcclxuICB2YXIgZGlzcGxheVN0cmluZyA9ICcwLic7XHJcbiAgZm9yKHZhciBpID0gMTsgaSA8IDExOyBpKyspXHJcbiAge1xyXG4gICAgZGlzcGxheVN0cmluZyArPSAnMCc7XHJcbiAgICBwZXJjZW50Rm9ybWF0SXRlbS5pdGVtcy5wdXNoKG5ldyBGaWVsZE1lbnVJdGVtKGRpc3BsYXlTdHJpbmcgKyAnJScsIGksICdwcmVjaXNpb24nLCBmaWVsZCkpO1xyXG4gIH1cclxuICBmb3JtYXRJdGVtLml0ZW1zLnB1c2gocGVyY2VudEZvcm1hdEl0ZW0pO1xyXG4gIFxyXG4gIHZhciBzY2llbnRpZmljRm9ybWF0SXRlbSA9IG5ldyBGaWVsZE1lbnVJdGVtKCdTY2llbnRpZmljJywgRmllbGQuU0NJRU5USUZJQ19GT1JNQVQsICdmb3JtYXQnLCBmaWVsZCk7XHJcbiAgc2NpZW50aWZpY0Zvcm1hdEl0ZW0uaXRlbXMucHVzaChuZXcgRmllbGRNZW51SXRlbSgnMGUrMCcsIDAsICdwcmVjaXNpb24nLCBmaWVsZCkpO1xyXG4gIHZhciBkaXNwbGF5U3RyaW5nID0gJzAuJztcclxuICBmb3IodmFyIGkgPSAxOyBpIDwgMTE7IGkrKylcclxuICB7XHJcbiAgICBkaXNwbGF5U3RyaW5nICs9ICcwJztcclxuICAgIHNjaWVudGlmaWNGb3JtYXRJdGVtLml0ZW1zLnB1c2gobmV3IEZpZWxkTWVudUl0ZW0oZGlzcGxheVN0cmluZyArICdlKzAnLCBpLCAncHJlY2lzaW9uJywgZmllbGQpKTtcclxuICB9XHJcbiAgZm9ybWF0SXRlbS5pdGVtcy5wdXNoKHNjaWVudGlmaWNGb3JtYXRJdGVtKTsgIFxyXG4gIFxyXG4gIG51bWJlckl0ZW0uaXRlbXMucHVzaChmb3JtYXRJdGVtKTtcclxuICBcclxuICB2YXIgYWdncmVnYXRpb25JdGVtID0gbmV3IEZpZWxkTWVudUl0ZW0oJ0FnZ3JlZ2F0aW9uJyk7XHJcbiAgYWdncmVnYXRpb25JdGVtLml0ZW1zLnB1c2gobmV3IEZpZWxkTWVudUl0ZW0oJ05vIEFnZ3JlZ2F0aW9uJywgRmllbGQuTk9fQUdHUkVHQVRJT04sICdhZ2dfdHlwZScsIGZpZWxkKSk7XHJcbiAgXHJcbiAgdmFyIHN1bUFueUFnZ0l0ZW0gPSBuZXcgRmllbGRNZW51SXRlbSgnU3VtIGFueSBkZWZpbmVkIGNoaWxkcmVuJywgRmllbGQuU1VNX0FOWV9BR0dSRUdBVElPTiwgJ2FnZ190eXBlJywgZmllbGQpO1xyXG4gIFxyXG4gIGZvcih2YXIgaW5kZXggaW4gZmllbGRzKVxyXG4gIHtcclxuICAgIHZhciBmID0gZmllbGRzW2luZGV4XTtcclxuICAgIFxyXG4gICAgaWYoZi5uYW1lICE9IGZpZWxkLm5hbWUpXHJcbiAgICB7XHJcbiAgICAgIHN1bUFueUFnZ0l0ZW0uaXRlbXMucHVzaChuZXcgRmllbGRNZW51SXRlbShmLm5hbWUsIGYubmFtZSwgJ2FnZ19xdHlfZmllbGQnLCBmaWVsZCkpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBhZ2dyZWdhdGlvbkl0ZW0uaXRlbXMucHVzaChzdW1BbnlBZ2dJdGVtKTtcclxuICBudW1iZXJJdGVtLml0ZW1zLnB1c2goYWdncmVnYXRpb25JdGVtKTtcclxuICBcclxuICB0aGlzLml0ZW1zID0gW107XHJcbiAgdGhpcy5pdGVtcy5wdXNoKG51bWJlckl0ZW0pO1xyXG4gIHRoaXMuaXRlbXMucHVzaChuZXcgRmllbGRNZW51SXRlbSgnVGV4dCcsIEZpZWxkLlNUUklORywgJ2RhdGF0eXBlJywgZmllbGQpKTtcclxuICAvL1RPRE86IHRoaXMuaXRlbXMucHVzaChuZXcgRmllbGRNZW51SXRlbSgnQ2hvaWNlJywgRmllbGQuQ0hPSUNFLCAnZGF0YXR5cGUnLCBmaWVsZCkpOyAgXHJcbn07XHJcblxyXG5GaWVsZE1lbnUucHJvdG90eXBlLmdldE1lbnVJdGVtID0gZnVuY3Rpb24oaWQsIG1lbnVJdGVtKVxyXG57XHJcbiAgaWYoaWQgPT09IG1lbnVJdGVtLmlkKVxyXG4gIHtcclxuICAgIHJldHVybiBtZW51SXRlbTtcclxuICB9XHJcbiAgZWxzZSBpZihtZW51SXRlbS5pdGVtcyAmJiBtZW51SXRlbS5pdGVtcy5sZW5ndGggPiAwKVxyXG4gIHtcclxuICAgIHZhciBmb3VuZDtcclxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBtZW51SXRlbS5pdGVtcy5sZW5ndGg7IGkrKylcclxuICAgIHtcclxuICAgICAgZm91bmQgPSB0aGlzLmdldE1lbnVJdGVtKGlkLCBtZW51SXRlbS5pdGVtc1tpXSk7XHJcbiAgICAgIGlmKGZvdW5kKSB7IHJldHVybiBmb3VuZDsgfVxyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbkZpZWxkTWVudS5wcm90b3R5cGUuZ2V0TWVudUl0ZW1QYXJlbnQgPSBmdW5jdGlvbihpZCwgbWVudUl0ZW0pXHJcbntcclxuICBpZihtZW51SXRlbS5pdGVtcyAmJiBtZW51SXRlbS5pdGVtcy5sZW5ndGggPiAwKVxyXG4gIHtcclxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBtZW51SXRlbS5pdGVtcy5sZW5ndGg7IGkrKylcclxuICAgIHsgXHJcbiAgICAgIGlmKG1lbnVJdGVtLml0ZW1zW2ldLmlkID09PSBpZClcclxuICAgICAge1xyXG4gICAgICAgIHJldHVybiBtZW51SXRlbTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlXHJcbiAgICAgIHtcclxuICAgICAgICB2YXIgZm91bmQgPSB0aGlzLmdldE1lbnVJdGVtUGFyZW50KGlkLCBtZW51SXRlbS5pdGVtc1tpXSk7XHJcbiAgICAgICAgaWYoZm91bmQpIHsgcmV0dXJuIGZvdW5kOyB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn07IiwidmFyIEZpZWxkTWVudUl0ZW0gPSBmdW5jdGlvbihkaXNwbGF5LCB2YWx1ZSwgdmFyTmFtZSwgZmllbGQpXHJcbntcclxuICB0aGlzLmRpc3BsYXkgPSBkaXNwbGF5O1xyXG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICB0aGlzLnZhck5hbWUgPSB2YXJOYW1lO1xyXG4gIHRoaXMuZmllbGQgPSBmaWVsZDtcclxuICB0aGlzLml0ZW1zID0gW107XHJcbiAgdGhpcy5pZCA9IEZpZWxkTWVudUl0ZW0uaWQrKztcclxuICB0aGlzLnBhcmVudCA9IC0xO1xyXG5cclxuICBpZihmaWVsZClcclxuICB7XHJcbiAgICB0aGlzLmNoZWNrZWQgPSBmaWVsZFt2YXJOYW1lXSA9PT0gdmFsdWU7XHJcbiAgfVxyXG4gIGVsc2VcclxuICB7XHJcbiAgICB0aGlzLmNoZWNrZWQgPSBmYWxzZTtcclxuICB9XHJcbn07XHJcblxyXG5GaWVsZE1lbnVJdGVtLmlkID0gMDsiLCJ2YXIgcHJvamVjdCA9XHJcbntcclxuICBzYXZlVG9EYXRhYmFzZTogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgIHRoaXMuY2xlYW5zZURhdGEoKTtcclxuICAgICQuYWpheCh7IHR5cGU6ICdQT1NUJywgdXJsOiAnL2FwaS90cmVlJywgZGF0YVR5cGU6ICdqc29uJywgZGF0YTogeyBqc29uOiBKU09OLnN0cmluZ2lmeSh0aGlzLnRyZWUpIH0gfSk7XHJcbiAgfSxcclxuICBmaWVsZHM6IGZ1bmN0aW9uKClcclxuICB7XHJcbiAgICByZXR1cm4gdGhpcy50cmVlLmZpZWxkcztcclxuICB9LFxyXG4gIGNsZWFuc2VEYXRhOiBmdW5jdGlvbigpXHJcbiAge1xyXG4gICAgdGhpcy50cmF2ZXJzZShwcm9qZWN0LmdldENoaWxkcmVuLCBmdW5jdGlvbihub2RlKVxyXG4gICAge1xyXG4gICAgICBpZighbm9kZS5jaGlsZHJlbikgeyBub2RlLmNoaWxkcmVuID0gW107IH1cclxuICAgICAgZGVsZXRlIG5vZGUucGFyZW50O1xyXG4gICAgICBkZWxldGUgbm9kZS54O1xyXG4gICAgICBkZWxldGUgbm9kZS54MDtcclxuICAgICAgZGVsZXRlIG5vZGUueTtcclxuICAgICAgZGVsZXRlIG5vZGUueTA7XHJcbiAgICB9KTsgICAgXHJcbiAgfSxcclxuICBhZGRGaWVsZDogZnVuY3Rpb24oZmllbGROYW1lKVxyXG4gIHtcclxuICAgIHRoaXMudHJlZS5maWVsZHMucHVzaChuZXcgRmllbGQoZmllbGROYW1lKSk7XHJcbiAgfSxcclxuICBnZXRGaWVsZDogZnVuY3Rpb24oZmllbGROYW1lKVxyXG4gIHtcclxuICAgIGZvcih2YXIgaSBpbiB0aGlzLnRyZWUuZmllbGRzKVxyXG4gICAge1xyXG4gICAgICB2YXIgZmllbGQgPSB0aGlzLnRyZWUuZmllbGRzW2ldO1xyXG4gICAgICBpZihmaWVsZC5uYW1lID09PSBmaWVsZE5hbWUpXHJcbiAgICAgIHtcclxuICAgICAgICByZXR1cm4gZmllbGQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG4gIHJlbW92ZU5vZGU6IGZ1bmN0aW9uKG5vZGUpXHJcbiAge1xyXG4gICAgdmFyIHBhcmVudE5vZGUgPSB0aGlzLmZpbmRQYXJlbnQobm9kZS5pZCk7XHJcbiAgXHJcbiAgICBpZihwYXJlbnROb2RlKVxyXG4gICAge1xyXG4gICAgICBwYXJlbnROb2RlLmNoaWxkcmVuLnNwbGljZShwYXJlbnROb2RlLmNoaWxkcmVuLmluZGV4T2Yobm9kZSksIDEpO1xyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICB0aGlzLnRyZWUuY2hpbGRyZW4uc3BsaWNlKHRoaXMudHJlZS5jaGlsZHJlbi5pbmRleE9mKG5vZGUpLCAxKTsgIFxyXG4gICAgfSAgICBcclxuICB9LFxyXG4gIGFkZE5vZGU6IGZ1bmN0aW9uKG5vZGUsIHBhcmVudE5vZGUpXHJcbiAge1xyXG4gICAgcGFyZW50Tm9kZS5jaGlsZHJlbi5wdXNoKG5vZGUpOyAgICAgICAgICAgIC8vYWRkIHRoZSBtb3ZlZCBub2RlIHRvIGl0J3MgbmV3IHBhcmVudCBpbiB0aGUgbW9kZWxcclxuICAgIHByb2plY3Quc2V0RGVwdGhzKHBhcmVudE5vZGUpOyAgICAgICAgICAgICAvL3NldCB0aGUgbmV3IGRlcHRoIHZhbHVlcyBmb3IgdGhlIG1vdmVkIG5vZGVzICAgICAgIFxyXG4gIH0sXHJcbiAgc2V0RGVwdGhzOiBmdW5jdGlvbihub2RlKVxyXG4gIHtcclxuICAgIG5vZGUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCwgaSlcclxuICAgIHtcclxuICAgICAgY2hpbGQuZGVwdGggPSBub2RlLmRlcHRoICsgMTtcclxuICAgICAgXHJcbiAgICAgIGlmKGNoaWxkLmRlcHRoID4gcHJvamVjdC50cmVlLm1heERlcHRoKSBcclxuICAgICAgeyBcclxuICAgICAgICBwcm9qZWN0LnRyZWUubWF4RGVwdGggPSBjaGlsZC5kZXB0aDsgXHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIHByb2plY3Quc2V0RGVwdGhzKGNoaWxkKTtcclxuICAgIH0pO1xyXG4gIH0sXHJcbiAgaW5zZXJ0Tm9kZTogZnVuY3Rpb24obm9kZSwgc291cmNlTm9kZSlcclxuICB7XHJcbiAgICB2YXIgcGFyZW50Tm9kZSA9IHRoaXMuZmluZFBhcmVudChzb3VyY2VOb2RlLmlkKTtcclxuICAgIGlmKHBhcmVudE5vZGUpXHJcbiAgICB7XHJcbiAgICAgIHBhcmVudE5vZGUuY2hpbGRyZW4uc3BsaWNlKHBhcmVudE5vZGUuY2hpbGRyZW4uaW5kZXhPZihzb3VyY2VOb2RlKSwgMCwgbm9kZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICB7XHJcbiAgICAgIHRoaXMudHJlZS5jaGlsZHJlbi5zcGxpY2UodGhpcy50cmVlLmNoaWxkcmVuLmluZGV4T2Yoc291cmNlTm9kZSksIDAsIG5vZGUpO1xyXG4gICAgfSAgICAgXHJcbiAgfSxcclxuICBjbG9uZU5vZGU6IGZ1bmN0aW9uKHNvdXJjZU5vZGUpXHJcbiAge1xyXG4gICAgdmFyIG5ld05vZGUgPSAkLmV4dGVuZCh0cnVlLCB7fSwgc291cmNlTm9kZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY2xvbmUgdGhlIHNvdXJjZSBub2RlXHJcbiAgICB0aGlzLnRyYXZlcnNlKHRoaXMuZ2V0Q2hpbGRyZW4sIGZ1bmN0aW9uKG5vZGUpIHsgbm9kZS5pZCA9IHByb2plY3QudHJlZS5uZXh0Tm9kZUlEKys7IH0sIG5ld05vZGUpOyAgLy9hc3NpZ24gdW5pcXVlIGlkcyB0byBlYWNoIG5vZGUgaW4gdGhlIGNsb25lICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgIHJldHVybiBuZXdOb2RlOyAgICAgXHJcbiAgfSxcclxuICBleHBhbmROb2RlOiBmdW5jdGlvbihub2RlKVxyXG4gIHtcclxuICAgIGlmKHByb2plY3QuaXNOb2RlQ29sbGFwc2VkKG5vZGUpKVxyXG4gICAge1xyXG4gICAgICBub2RlLmNoaWxkcmVuID0gbm9kZS5fY2hpbGRyZW47XHJcbiAgICAgIG5vZGUuX2NoaWxkcmVuID0gW107IFxyXG4gICAgfSAgIFxyXG4gIH0sXHJcbiAgZnVsbHlFeHBhbmROb2RlOiBmdW5jdGlvbihub2RlKVxyXG4gIHtcclxuICAgIHByb2plY3QuZXhwYW5kTm9kZShub2RlKTtcclxuICAgIG5vZGUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCkgeyBwcm9qZWN0LmZ1bGx5RXhwYW5kTm9kZShjaGlsZCk7IH0pOyAgICAgICBcclxuICB9LFxyXG4gIGV4cGFuZFRvTGV2ZWw6IGZ1bmN0aW9uKG5vZGUsIGxldmVsKVxyXG4gIHsgICAgXHJcbiAgICBpZihub2RlLmRlcHRoIDwgbGV2ZWwpXHJcbiAgICB7XHJcbiAgICAgIHByb2plY3QuZXhwYW5kTm9kZShub2RlKTtcclxuICAgICAgZm9yKHZhciBpIGluIG5vZGUuY2hpbGRyZW4pIHsgcHJvamVjdC5leHBhbmRUb0xldmVsKG5vZGUuY2hpbGRyZW5baV0sIGxldmVsKTsgfVxyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICBwcm9qZWN0LmNvbGxhcHNlTm9kZShub2RlKTtcclxuICAgICAgZm9yKHZhciBpIGluIG5vZGUuX2NoaWxkcmVuKSB7IHByb2plY3QuZXhwYW5kVG9MZXZlbChub2RlLl9jaGlsZHJlbltpXSwgbGV2ZWwpOyB9XHJcbiAgICB9XHJcbiAgfSwgXHJcbiAgY29sbGFwc2VOb2RlOiBmdW5jdGlvbihub2RlKVxyXG4gIHtcclxuICAgIGlmKHByb2plY3QuaXNOb2RlRXhwYW5kZWQobm9kZSkpXHJcbiAgICB7XHJcbiAgICAgIG5vZGUuX2NoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcclxuICAgICAgbm9kZS5jaGlsZHJlbiA9IFtdO1xyXG4gICAgfSAgICBcclxuICB9LFxyXG4gIGZ1bGx5Q29sbGFwc2VOb2RlOiBmdW5jdGlvbihub2RlKVxyXG4gIHtcclxuICAgIGlmKG5vZGUuY2hpbGRyZW4pXHJcbiAgICB7XHJcbiAgICAgIG5vZGUuX2NoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcclxuICAgICAgbm9kZS5fY2hpbGRyZW4uZm9yRWFjaChwcm9qZWN0LmZ1bGx5Q29sbGFwc2VOb2RlKTtcclxuICAgICAgbm9kZS5jaGlsZHJlbiA9IFtdO1xyXG4gICAgfSAgICBcclxuICB9LFxyXG4gIHRvZ2dsZUV4cGFuc2lvbjogZnVuY3Rpb24obm9kZSlcclxuICB7XHJcbiAgICBpZiAobm9kZS5jaGlsZHJlbikgXHJcbiAgICB7XHJcbiAgICAgICAgbm9kZS5fY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xyXG4gICAgICAgIG5vZGUuY2hpbGRyZW4gPSBbXTtcclxuICAgIH0gXHJcbiAgICBlbHNlIGlmIChub2RlLl9jaGlsZHJlbikgXHJcbiAgICB7XHJcbiAgICAgICAgbm9kZS5jaGlsZHJlbiA9IG5vZGUuX2NoaWxkcmVuO1xyXG4gICAgICAgIG5vZGUuX2NoaWxkcmVuID0gW107XHJcbiAgICB9ICAgIFxyXG4gIH0sXHJcbiAgaGFzQ2hpbGRyZW46IGZ1bmN0aW9uKG5vZGUpXHJcbiAge1xyXG4gICAgcmV0dXJuIChub2RlLmNoaWxkcmVuICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB8fCAobm9kZS5fY2hpbGRyZW4gJiYgbm9kZS5fY2hpbGRyZW4ubGVuZ3RoID09PSAwKTtcclxuICB9LCAgXHJcbiAgaXNOb2RlQ2hpbGRsZXNzOiBmdW5jdGlvbihub2RlKVxyXG4gIHtcclxuICAgIHJldHVybiAoIW5vZGUuY2hpbGRyZW4gfHwgbm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDApICYmICghbm9kZS5fY2hpbGRyZW4gfHwgbm9kZS5fY2hpbGRyZW4ubGVuZ3RoID09PSAwKTtcclxuICB9LFxyXG4gIGlzTm9kZUNvbGxhcHNlZDogZnVuY3Rpb24obm9kZSlcclxuICB7XHJcbiAgICByZXR1cm4gbm9kZS5fY2hpbGRyZW4gJiYgbm9kZS5fY2hpbGRyZW4ubGVuZ3RoID4gMDtcclxuICB9LFxyXG4gIGlzTm9kZUV4cGFuZGVkOiBmdW5jdGlvbihub2RlKVxyXG4gIHtcclxuICAgIHJldHVybiBub2RlLmNoaWxkcmVuICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMDtcclxuICB9LFxyXG4gIGZpbmROb2RlOiBmdW5jdGlvbihub2RlSUQsIHNlYXJjaE5vZGUpXHJcbiAge1xyXG4gICAgaWYoIXNlYXJjaE5vZGUpIHsgc2VhcmNoTm9kZSA9IHRoaXMudHJlZTsgfVxyXG4gICAgXHJcbiAgICBpZihzZWFyY2hOb2RlLmlkID09PSBub2RlSUQpXHJcbiAgICB7XHJcbiAgICAgIHJldHVybiBzZWFyY2hOb2RlO1xyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICBmb3IodmFyIGkgaW4gc2VhcmNoTm9kZS5jaGlsZHJlbilcclxuICAgICAge1xyXG4gICAgICAgIHZhciBmb3VuZE5vZGUgPSB0aGlzLmZpbmROb2RlKG5vZGVJRCwgc2VhcmNoTm9kZS5jaGlsZHJlbltpXSk7XHJcbiAgICAgICAgaWYoZm91bmROb2RlKSB7IHJldHVybiBmb3VuZE5vZGU7IH1cclxuICAgICAgfVxyXG4gICAgfSAgICBcclxuICB9LFxyXG4gIGZpbmRQYXJlbnQ6IGZ1bmN0aW9uKG5vZGVJRCwgc2VhcmNoTm9kZSwgcGFyZW50KVxyXG4gIHtcclxuICAgIGlmKCFzZWFyY2hOb2RlKSB7IHNlYXJjaE5vZGUgPSB0aGlzLnRyZWU7IH1cclxuICAgIFxyXG4gICAgaWYoc2VhcmNoTm9kZS5pZCA9PT0gbm9kZUlEKVxyXG4gICAge1xyXG4gICAgICByZXR1cm4gcGFyZW50O1xyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICBmb3IodmFyIGkgaW4gc2VhcmNoTm9kZS5jaGlsZHJlbilcclxuICAgICAge1xyXG4gICAgICAgIHZhciBmb3VuZFBhcmVudCA9IHRoaXMuZmluZFBhcmVudChub2RlSUQsIHNlYXJjaE5vZGUuY2hpbGRyZW5baV0sIHNlYXJjaE5vZGUpO1xyXG4gICAgICAgIGlmKGZvdW5kUGFyZW50KSB7IHJldHVybiBmb3VuZFBhcmVudDsgfVxyXG4gICAgICB9XHJcbiAgICB9ICAgIFxyXG4gIH0sXHJcbiAgdHJhdmVyc2U6IGZ1bmN0aW9uKGNoaWxkcmVuRm4sIHZpc2l0Rm4sIHBhcmVudClcclxuICB7XHJcbiAgICBpZiAoIXBhcmVudCkgeyBwYXJlbnQgPSBwcm9qZWN0LnRyZWU7IH1cclxuICAgIHZpc2l0Rm4ocGFyZW50KTtcclxuICAgIFxyXG4gICAgdmFyIGNoaWxkcmVuID0gY2hpbGRyZW5GbihwYXJlbnQpO1xyXG4gICAgZm9yICh2YXIgaSBpbiBjaGlsZHJlbikgXHJcbiAgICB7XHJcbiAgICAgIHByb2plY3QudHJhdmVyc2UoY2hpbGRyZW5GbiwgdmlzaXRGbiwgY2hpbGRyZW5baV0pO1xyXG4gICAgfSAgICBcclxuICB9LFxyXG4gIHRyYXZlcnNlRGVzY2VuZGFudHM6IGZ1bmN0aW9uKGNoaWxkcmVuRm4sIHZpc2l0Rm4sIHBhcmVudClcclxuICB7XHJcbiAgICBpZighcGFyZW50KSB7IHBhcmVudCA9IHByb2plY3QudHJlZTsgfVxyXG4gICAgcGFyZW50LmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIHsgcHJvamVjdC50cmF2ZXJzZShjaGlsZHJlbkZuLCB2aXNpdEZuLCBjaGlsZCk7IH0pOyAgXHJcbiAgfSxcclxuICBnZXRDaGlsZHJlbjogZnVuY3Rpb24obm9kZSlcclxuICB7XHJcbiAgICByZXR1cm4gbm9kZS5jaGlsZHJlbiAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDAgPyBub2RlLmNoaWxkcmVuIDogbnVsbDsgICAgXHJcbiAgfSAgIFxyXG59OyIsInZhciBwcm9qZWN0cyA9XHJcbntcclxuICBpbml0OiBmdW5jdGlvbihmaW5pc2hGbilcclxuICB7ICBcdFxyXG4gICAgJC5hamF4KHsgdHlwZTogJ0dFVCcsIHVybDogJ2FwaS9wcm9qZWN0cyd9KS5kb25lKGZ1bmN0aW9uKGRhdGEpICAgLy9yZWFkIHByb2plY3RzIGZyb20gdGhlIHNlcnZlclxyXG4gICAgeyBcclxuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgZmluaXNoRm4oZGF0YS5wcm9qZWN0cyk7XHJcbiAgICB9KTsgICAgIFxyXG4gIH0sXHJcbiAgY3JlYXRlTmV3UHJvamVjdDogZnVuY3Rpb24obmV3UHJvamVjdE5hbWUpXHJcbiAge1xyXG4gIFx0JC5hamF4KHsgdHlwZTogJ1BPU1QnLCB1cmw6ICcvYXBpL2FkZFByb2plY3Q/cHJvamVjdE5hbWU9JyArIG5ld1Byb2plY3ROYW1lIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgdGhlIG5ldyBwcm9qZWN0IHRvIHRoZSBwcm9qZWN0cyBkb2N1bWVudCBpbiB0aGUgZGF0YWJhc2VcclxuICBcdFxyXG4gICAgcHJvamVjdC50cmVlID0geyBcInByb2plY3RJRFwiOiBwcm9qZWN0Lm5leHRQcm9qZWN0SUQsIFwicHJvamVjdE5hbWVcIjogbmV3UHJvamVjdE5hbWUsIFwibmFtZVwiOiBuZXdQcm9qZWN0TmFtZSwgXCJ2ZXJzaW9uXCI6IDEsIFwibmV4dE5vZGVJRFwiOiAzLCBcImRlcHRoXCI6IDAsIFwiaWRcIjogMSwgXCJmaWVsZHNcIjogW10sIFwiY2hpbGRyZW5cIjogW3sgXCJpZFwiOiAyLCBcIm5hbWVcIjogbmV3UHJvamVjdE5hbWUsIFwiZGVwdGhcIjogMSwgXCJjaGlsZHJlblwiOiBbXSB9XSB9O1xyXG4gIFx0cHJvamVjdC5zYXZlVG9EYXRhYmFzZSgpOyAgXHJcbiAgfSxcclxuICBvcGVuUHJvamVjdDogZnVuY3Rpb24ocHJvamVjdElELCBmaW5pc2hGbilcclxuICB7XHJcbiAgICAkLmFqYXgoeyB0eXBlOiAnR0VUJywgdXJsOiAnYXBpL3RyZWU/cHJvamVjdElEPScgKyBwcm9qZWN0SUQgfSkuZG9uZShmdW5jdGlvbihkYXRhKSAgICAgICAgICAgICAgIC8vcmVhZCB0cmVlIGZvciB0aGUgc2VsZWN0ZWQgcHJvamVjdCBmcm9tIHRoZSBkYXRhYmFzZVxyXG4gICAge1xyXG4gICAgICBmaW5pc2hGbihkYXRhKTtcclxuICAgIH0pOyAgICAgXHJcbiAgfSBcclxufTsiLCJ2YXIgRE9XTl9BUlJPV19JTUFHRV9QQVRIID0gJ2ltYWdlcy9kb3duLWFycm93LnBuZyc7XHJcbnZhciBDSEVDS19NQVJLX0lNQUdFX1BBVEggPSAnaW1hZ2VzL2NoZWNrbWFyay5wbmcnO1xyXG52YXIgQkxBTktfTUFSS19JTUFHRV9QQVRIID0gJ2ltYWdlcy9ibGFua21hcmsucG5nJztcclxuXHJcbnZhciBFTlRFUl9LRVkgPSAxMztcclxuXHJcbnZhciBLRVlfVVBfQVJST1cgPSAzODtcclxudmFyIEtFWV9ET1dOX0FSUk9XID0gNDA7XHJcbnZhciBLRVlfTEVGVF9BUlJPVyA9IDM3O1xyXG52YXIgS0VZX1JJR0hUX0FSUk9XID0gMzk7XHJcblxyXG52YXIgREVGQVVMVF9OT0RFX0lOUFVUX1dJRFRIID0gMzkwO1xyXG5cclxudmFyIFNQUkVBRFNIRUVUX1ZJRVcgPSAnMCc7XHJcbnZhciBUUkVFX1ZJRVcgPSAnMSc7XHJcbnZhciBXRUlHSFRFRF9UUkVFX1ZJRVcgPSAnMic7XHJcbnZhciBDSVJDTEVfVklFVyA9ICczJzsiLCJmdW5jdGlvbiBkZWJ1ZygpIHt9XHJcblxyXG5kZWJ1Zy5wcmludCA9IGZ1bmN0aW9uKG8pXHJcbntcclxuICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShvLCBudWxsLCAnXFx0JykpOyAgXHJcbn07XHJcblxyXG5kZWJ1Zy5wcmludFRyZWUgPSBmdW5jdGlvbigpXHJcbntcclxuICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShwcm9qZWN0LnRyZWUsIG51bGwsICdcXHQnKSk7XHJcbn07IiwidmFyIGNpcmNsZVZpZXcgPVxyXG57XHJcbiAgZGVzdHJveTogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgICQoJyNjaXJjbGVWaWV3JykucmVtb3ZlKCk7XHJcbiAgfSxcclxuICBkaXNwbGF5OiBmdW5jdGlvbigpXHJcbiAge1xyXG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGRpdiBpZD1cImNpcmNsZVZpZXdcIj48L2Rpdj4nKTtcclxuICAgIFxyXG4gICAgdmFyIG1hcmdpbiA9IDIwLFxyXG4gICAgICAgIGRpYW1ldGVyID0gOTYwO1xyXG4gICAgXHJcbiAgICB2YXIgY29sb3IgPSBkMy5zY2FsZS5saW5lYXIoKVxyXG4gICAgICAgIC5kb21haW4oWy0xLCA1XSlcclxuICAgICAgICAucmFuZ2UoW1wiaHNsKDE1Miw4MCUsODAlKVwiLCBcImhzbCgyMjgsMzAlLDQwJSlcIl0pXHJcbiAgICAgICAgLmludGVycG9sYXRlKGQzLmludGVycG9sYXRlSGNsKTtcclxuICAgIFxyXG4gICAgdmFyIHBhY2sgPSBkMy5sYXlvdXQucGFjaygpXHJcbiAgICAgICAgLnBhZGRpbmcoMilcclxuICAgICAgICAuc2l6ZShbZGlhbWV0ZXIgLSBtYXJnaW4sIGRpYW1ldGVyIC0gbWFyZ2luXSlcclxuICAgICAgICAudmFsdWUoZnVuY3Rpb24oZCkgeyByZXR1cm4gTWF0aC5QSSAqIGQudmFsdWVzWydBJ10gKiBkLnZhbHVlc1snQSddIC8gNDsgfSk7XHJcbiAgICBcclxuICAgIHZhciBzdmcgPSBkMy5zZWxlY3QoXCIjY2lyY2xlVmlld1wiKS5hcHBlbmQoXCJzdmdcIilcclxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIGRpYW1ldGVyKVxyXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGRpYW1ldGVyKVxyXG4gICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgZGlhbWV0ZXIgLyAyICsgXCIsXCIgKyBkaWFtZXRlciAvIDIgKyBcIilcIik7XHJcbiAgICBcclxuICAgIHZhciByb290ID0gcHJvamVjdC50cmVlO1xyXG5cclxuICAgIFxyXG4gICAgICB2YXIgZm9jdXMgPSByb290LFxyXG4gICAgICAgICAgbm9kZXMgPSBwYWNrLm5vZGVzKHJvb3QpLFxyXG4gICAgICAgICAgdmlldztcclxuICAgIFxyXG4gICAgICB2YXIgY2lyY2xlID0gc3ZnLnNlbGVjdEFsbChcImNpcmNsZVwiKVxyXG4gICAgICAgICAgLmRhdGEobm9kZXMpXHJcbiAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwiY2lyY2xlXCIpXHJcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQucGFyZW50ID8gZC5jaGlsZHJlbiA/IFwibm9kZVwiIDogXCJub2RlIG5vZGUtLWxlYWZcIiA6IFwibm9kZSBub2RlLS1yb290XCI7IH0pXHJcbiAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuY2hpbGRyZW4gPyBjb2xvcihkLmRlcHRoKSA6IG51bGw7IH0pXHJcbiAgICAgICAgICAub24oXCJjbGlja1wiLCBmdW5jdGlvbihkKSB7IGlmIChmb2N1cyAhPT0gZCkgem9vbShkKSwgZDMuZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7IH0pO1xyXG4gICAgXHJcbiAgICAgIHZhciB0ZXh0ID0gc3ZnLnNlbGVjdEFsbChcInRleHRcIilcclxuICAgICAgICAgIC5kYXRhKG5vZGVzKVxyXG4gICAgICAgIC5lbnRlcigpLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJsYWJlbFwiKVxyXG4gICAgICAgICAgLnN0eWxlKFwiZmlsbC1vcGFjaXR5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQucGFyZW50ID09PSByb290ID8gMSA6IDA7IH0pXHJcbiAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQucGFyZW50ID09PSByb290ID8gbnVsbCA6IFwibm9uZVwiOyB9KVxyXG4gICAgICAgICAgLnRleHQoZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5uYW1lOyB9KTtcclxuICAgIFxyXG4gICAgICB2YXIgbm9kZSA9IHN2Zy5zZWxlY3RBbGwoXCJjaXJjbGUsdGV4dFwiKTtcclxuICAgIFxyXG4gICAgICBkMy5zZWxlY3QoXCJib2R5XCIpXHJcbiAgICAgICAgICAuc3R5bGUoXCJiYWNrZ3JvdW5kXCIsIGNvbG9yKC0xKSlcclxuICAgICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKCkgeyB6b29tKHJvb3QpOyB9KTtcclxuICAgIFxyXG4gICAgICB6b29tVG8oW3Jvb3QueCwgcm9vdC55LCByb290LnIgKiAyICsgbWFyZ2luXSk7XHJcbiAgICBcclxuICAgICAgZnVuY3Rpb24gem9vbShkKSB7XHJcbiAgICAgICAgdmFyIGZvY3VzMCA9IGZvY3VzOyBmb2N1cyA9IGQ7XHJcbiAgICBcclxuICAgICAgICB2YXIgdHJhbnNpdGlvbiA9IGQzLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgICAuZHVyYXRpb24oZDMuZXZlbnQuYWx0S2V5ID8gNzUwMCA6IDc1MClcclxuICAgICAgICAgICAgLnR3ZWVuKFwiem9vbVwiLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgdmFyIGkgPSBkMy5pbnRlcnBvbGF0ZVpvb20odmlldywgW2ZvY3VzLngsIGZvY3VzLnksIGZvY3VzLnIgKiAyICsgbWFyZ2luXSk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHsgem9vbVRvKGkodCkpOyB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgICAgIHRyYW5zaXRpb24uc2VsZWN0QWxsKFwidGV4dFwiKVxyXG4gICAgICAgICAgLmZpbHRlcihmdW5jdGlvbihkKSB7IHJldHVybiBkLnBhcmVudCA9PT0gZm9jdXMgfHwgdGhpcy5zdHlsZS5kaXNwbGF5ID09PSBcImlubGluZVwiOyB9KVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsLW9wYWNpdHlcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5wYXJlbnQgPT09IGZvY3VzID8gMSA6IDA7IH0pXHJcbiAgICAgICAgICAgIC5lYWNoKFwic3RhcnRcIiwgZnVuY3Rpb24oZCkgeyBpZiAoZC5wYXJlbnQgPT09IGZvY3VzKSB0aGlzLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZVwiOyB9KVxyXG4gICAgICAgICAgICAuZWFjaChcImVuZFwiLCBmdW5jdGlvbihkKSB7IGlmIChkLnBhcmVudCAhPT0gZm9jdXMpIHRoaXMuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiOyB9KTtcclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIGZ1bmN0aW9uIHpvb21Ubyh2KSB7XHJcbiAgICAgICAgdmFyIGsgPSBkaWFtZXRlciAvIHZbMl07IHZpZXcgPSB2O1xyXG4gICAgICAgIG5vZGUuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcInRyYW5zbGF0ZShcIiArIChkLnggLSB2WzBdKSAqIGsgKyBcIixcIiArIChkLnkgLSB2WzFdKSAqIGsgKyBcIilcIjsgfSk7XHJcbiAgICAgICAgY2lyY2xlLmF0dHIoXCJyXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuciAqIGs7IH0pO1xyXG4gICAgICB9XHJcbiAgICBcclxuICAgIGQzLnNlbGVjdChzZWxmLmZyYW1lRWxlbWVudCkuc3R5bGUoXCJoZWlnaHRcIiwgZGlhbWV0ZXIgKyBcInB4XCIpOyAgICBcclxuICB9XHJcbn07IiwidmFyIGV4cGFuZGVyU2VsZWN0b3IgPVxyXG57XHJcbiAgaW5pdDogZnVuY3Rpb24obnVtTGV2ZWxzKVxyXG4gIHtcclxuICAgICQoJyNleHBhbmRlckNvbnRhaW5lcicpLmh0bWwoZXhwYW5kZXJTZWxlY3Rvci5nZXRNYXJrdXAobnVtTGV2ZWxzKSk7XHJcbiAgICAkKFwiI2V4cGFuZGVyU2VsZWN0b3JcIikuY2hhbmdlKGV4cGFuZGVyU2VsZWN0b3IuaGFuZGxlKTtcclxuICB9LFxyXG4gIGhhbmRsZTogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgIHZhciBsZXZlbCA9IHBhcnNlSW50KCQoJyNleHBhbmRlclNlbGVjdG9yJykudmFsKCkpO1xyXG5cclxuICAgIGlmKGxldmVsID4gMClcclxuICAgIHtcclxuICAgICAgaG1zLmV4cGFuZFRvTGV2ZWwobGV2ZWwpOyAgXHJcbiAgICB9XHJcbiAgfSwgIFxyXG4gIGdldE1hcmt1cDogZnVuY3Rpb24obnVtTGV2ZWxzKVxyXG4gIHtcclxuICAgIHZhciBtYXJrdXAgPSAnPGRpdiBpZD1cImV4cGFuZGVyU2VsZWN0Q29udGFpbmVyXCI+J1xyXG4gICAgKyAnPHNlbGVjdCBpZD1cImV4cGFuZGVyU2VsZWN0b3JcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPidcclxuICAgICsgJzxvcHRpb24gdmFsdWU9XCIwXCI+RXhwYW5kL0NvbGxhcHNlIHRvIExldmVsPC9vcHRpb24+JztcclxuICAgIFxyXG4gICAgZm9yKHZhciBpID0gMTsgaSA8IG51bUxldmVscysxOyBpKyspXHJcbiAgICB7XHJcbiAgICAgIG1hcmt1cCArPSAnPG9wdGlvbiB2YWx1ZT1cIicgKyBpICsgJ1wiPicgKyBpICsgJzwvb3B0aW9uPic7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIG1hcmt1cCArPSAnPC9zZWxlY3Q+J1xyXG4gICAgKyAnPGlucHV0IGlkPVwicHJvamVjdEFjdGlvbklucHV0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj48L2lucHV0PidcclxuICAgICsgJzwvZGl2Pic7XHJcbiAgICByZXR1cm4gbWFya3VwOyBcclxuICB9XHJcbn07IiwidmFyIGZpZWxkTWVudVZpZXcgPSBcclxue1xyXG4gIHJlbmRlcjogZnVuY3Rpb24oZmllbGRNZW51LCB4LCB5KVxyXG4gIHtcclxuICAgIHZhciBtYXJrdXAgPSAnPGRpdiBpZD1cImZpZWxkTWVudVwiIHN0eWxlPVwibGVmdDonICsgKHgtMTApICsgJ3B4O3RvcDonICsgKHktMTApICsgJ3B4O1wiPic7XHJcbiAgICBcclxuICAgIG1hcmt1cCArPSB0aGlzLnJlbmRlck1lbnUoZmllbGRNZW51KTtcclxuICAgIFxyXG4gICAgbWFya3VwICs9ICc8L2Rpdj4nO1xyXG4gICAgXHJcbiAgICAkKCdib2R5JykuYXBwZW5kKCQobWFya3VwKSk7XHJcbiAgICAkKCcjZmllbGRNZW51JykubW91c2VsZWF2ZShmdW5jdGlvbigpIHsgJCgnI2ZpZWxkTWVudScpLnJlbW92ZSgpOyB9KTsgIFxyXG4gIH0sXHJcbiAgcmVuZGVyTWVudTogZnVuY3Rpb24obWVudSlcclxuICB7XHJcbiAgICB2YXIgbWFya3VwID0gJzx1bD4nO1xyXG4gICAgXHJcbiAgICBtZW51Lml0ZW1zLmZvckVhY2goZnVuY3Rpb24obWVudUl0ZW0pXHJcbiAgICB7XHJcbiAgICAgIG1hcmt1cCArPSAnPGxpIG9uY2xpY2s9XCJmaWVsZE1lbnVDb250cm9sbGVyLmhhbmRsZUNsaWNrKCcgKyBtZW51SXRlbS5pZCArICcpO1wiPic7XHJcbiAgXHJcbiAgICAgIHZhciBjaGVja01hcmtDbGFzcyA9ICd1bmNoZWNrZWRGaWVsZE1lbnVJdGVtJztcclxuICAgICAgaWYobWVudUl0ZW0uZmllbGQgJiYgbWVudUl0ZW0uY2hlY2tlZClcclxuICAgICAge1xyXG4gICAgICAgIGNoZWNrTWFya0NsYXNzID0gJ2NoZWNrZWRGaWVsZE1lbnVJdGVtJztcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgbWFya3VwICs9ICc8aW1nIGlkPVwiRmllbGRNZW51SXRlbScgKyBtZW51SXRlbS5pZCArICdcIiBzcmM9XCInICsgQ0hFQ0tfTUFSS19JTUFHRV9QQVRIICsgJ1wiIGNsYXNzPVwiJyArIGNoZWNrTWFya0NsYXNzICsgJ1wiLz4nO1xyXG4gICAgICBtYXJrdXAgKz0gbWVudUl0ZW0uZGlzcGxheTtcclxuICAgICAgXHJcbiAgICAgIGlmKG1lbnVJdGVtLml0ZW1zICYmIG1lbnVJdGVtLml0ZW1zLmxlbmd0aCA+IDApXHJcbiAgICAgIHtcclxuICAgICAgICBtYXJrdXAgKz0gJzxkaXYgY2xhc3M9XCJhcnJvd1JpZ2h0XCI+PC9kaXY+JztcclxuICAgICAgICBtYXJrdXAgKz0gZmllbGRNZW51Vmlldy5yZW5kZXJNZW51KG1lbnVJdGVtKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgbWFya3VwICs9ICc8L2xpPic7ICAgICAgXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgcmV0dXJuIG1hcmt1cCArICc8L3VsPic7ICAgIFxyXG4gIH0sXHJcbiAgc2V0Q2hlY2ttYXJrczogZnVuY3Rpb24obWVudUl0ZW1JRCwgc2libGluZ3MpXHJcbiAge1xyXG4gICAgc2libGluZ3MuZm9yRWFjaChmdW5jdGlvbihzaWJsaW5nKSB7ICQoJyNGaWVsZE1lbnVJdGVtJyArIHNpYmxpbmcuaWQpLnJlbW92ZUNsYXNzKCdjaGVja2VkRmllbGRNZW51SXRlbScpLmFkZENsYXNzKCd1bmNoZWNrZWRGaWVsZE1lbnVJdGVtJyk7IH0pOyAgLy9jbGVhciB0aGUgY2hlY2ttYXJrcyBmb3IgYWxsIGl0ZW0gb24gdGhlIHNhbWUgbWVudSBsZXZlbFxyXG4gIFxyXG4gICAgJCgnI0ZpZWxkTWVudUl0ZW0nICsgbWVudUl0ZW1JRCkucmVtb3ZlQ2xhc3MoJ3VuY2hlY2tlZEZpZWxkTWVudUl0ZW0nKS5hZGRDbGFzcygnY2hlY2tlZEZpZWxkTWVudUl0ZW0nKTsgICAgICBcclxuICB9XHJcbn07IiwidmFyIGhlYWRlclZpZXcgPSBcclxue1xyXG4gIHJlbmRlcjogZnVuY3Rpb24ocHJvamVjdHMpXHJcbiAge1xyXG4gICAgdmFyIG1hcmt1cCA9ICc8c2VsZWN0IGlkPVwicHJvamVjdFNlbGVjdG9yXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj4nICtcclxuICAgICc8b3B0aW9uIGlkPVwic2VsZWN0UHJvamVjdE9wdGlvblwiIHZhbHVlPVwiMFwiPlNlbGVjdCBQcm9qZWN0Li4uPC9vcHRpb24+JztcclxuICBcclxuICAgIHByb2plY3RzLmZvckVhY2goZnVuY3Rpb24ocHJvamVjdClcclxuICAgIHtcclxuICAgICAgbWFya3VwICs9ICc8b3B0aW9uIHZhbHVlPVwiJyArIHByb2plY3QuaWQgKyAnXCI+JyArIHByb2plY3QubmFtZSArICc8L29wdGlvbj4nO1xyXG4gICAgfSk7XHJcbiAgXHJcbiAgICBtYXJrdXAgKz0gJzxvcHRpb24gaWQ9XCJuZXdQcm9qZWN0T3B0aW9uXCIgdmFsdWU9XCItMVwiPkNyZWF0ZSBOZXcgUHJvamVjdC4uLjwvb3B0aW9uPjwvc2VsZWN0PidcclxuICAgICsgJzxpbnB1dCBpZD1cImVkaXROZXdQcm9qZWN0TmFtZUlucHV0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj48L2lucHV0PidcclxuICAgICsgJzxhIGhyZWY9XCIjXCIgaWQ9XCJzYXZlLWRhdGFiYXNlLWJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCI+U2F2ZSB0byBEYXRhYmFzZTwvYT4nO1xyXG4gICAgLy9tYXJrdXAgKz0gJzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHRcIiBpZD1cInNhdmUtZmlsZS1idXR0b25cIiBvbmNsaWNrPVwic2F2ZUxvY2FsbHkoKVwiPlNhdmUgYXMgRmlsZTwvYT4nOyAgICBcclxuICAgIFxyXG4gICAgbWFya3VwICs9ICc8c2VsZWN0IGlkPVwidmlld1NlbGVjdG9yXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj4nICtcclxuICAgICc8b3B0aW9uIHZhbHVlPVwiMFwiPlNwcmVhZCBTaGVldDwvb3B0aW9uPicgK1xyXG4gICAgJzxvcHRpb24gdmFsdWU9XCIxXCI+VHJlZTwvb3B0aW9uPicgK1xyXG4gICAgJzxvcHRpb24gdmFsdWU9XCIyXCI+V2VpZ2h0ZWQgVHJlZTwvb3B0aW9uPicgK1xyXG4gICAgJzxvcHRpb24gdmFsdWU9XCIzXCI+Q2lyY2xlIFBhY2tpbmc8L29wdGlvbj4nICtcclxuICAgICc8L3NlbGVjdD4nO1xyXG4gICAgXHJcbiAgICAkKCcjaGVhZGVyJykuaHRtbChtYXJrdXApO1xyXG4gICAgXHJcbiAgICAvL2V2ZW50IGhhbmRsZXJzXHJcbiAgICAkKCcjcHJvamVjdFNlbGVjdG9yJykuY2hhbmdlKGZ1bmN0aW9uKCkgeyBoZWFkZXJWaWV3LnNlbGVjdFByb2plY3QoJCh0aGlzKSk7IH0pO1xyXG4gICAgJCgnI3NhdmUtZGF0YWJhc2UtYnV0dG9uJykuY2xpY2soZnVuY3Rpb24oKSB7IGhtcy5zYXZlVG9EYXRhYmFzZSgpOyB9KTtcclxuICAgICQoJyN2aWV3U2VsZWN0b3InKS5jaGFuZ2UoZnVuY3Rpb24oKSB7IGhtcy5zZWxlY3RWaWV3KCQodGhpcykudmFsKCkpOyB9KTtcclxuICAgICQoJyNlZGl0TmV3UHJvamVjdE5hbWVJbnB1dCcpLmtleXVwKGZ1bmN0aW9uKGUpIHsgaGVhZGVyVmlldy5jcmVhdGVOZXdQcm9qZWN0KGUpOyB9KTtcclxuICB9LFxyXG4gIHNlbGVjdGVkVmlldzogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgIHJldHVybiAkKCcjdmlld1NlbGVjdG9yJykudmFsKCk7XHJcbiAgfSxcclxuICBzZWxlY3RQcm9qZWN0OiBmdW5jdGlvbihwcm9qZWN0U2VsZWN0b3IpXHJcbiAge1xyXG4gICAgaWYocHJvamVjdFNlbGVjdG9yLmZpbmQoXCI6c2VsZWN0ZWRcIikuYXR0cignaWQnKSA9PT0gXCJuZXdQcm9qZWN0T3B0aW9uXCIpXHJcbiAgICB7XHJcbiAgICAgICQoJyNlZGl0TmV3UHJvamVjdE5hbWVJbnB1dCcpLnZhbChcIlR5cGUgTmV3IFByb2plY3QgTmFtZSBhbmQgUHJlc3MgRW50ZXIgdG8gQ3JlYXRlXCIpO1xyXG4gICAgICAkKCcjZWRpdE5ld1Byb2plY3ROYW1lSW5wdXQnKS5zaG93KCkuZm9jdXMoKS5zZWxlY3QoKTtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgIHtcclxuICAgICAgJCgnI3NlbGVjdFByb2plY3RPcHRpb24nKS5yZW1vdmUoKTsgICAgIC8vcmVtb3ZlIHRoZSBzZWxlY3QgcHJvamVjdCBvcHRpb24sIG9uY2UgdGhlIHVzZXIgc2VsZWN0cyBhIHByb2plY3QgICAgICBcclxuICAgICAgaG1zLm9wZW5Qcm9qZWN0KHByb2plY3RTZWxlY3Rvci52YWwoKSk7XHJcbiAgICB9ICAgICAgIFxyXG4gIH0sXHJcbiAgY3JlYXRlTmV3UHJvamVjdDogZnVuY3Rpb24oZSlcclxuICB7XHJcbiAgICBpZihlLmtleUNvZGUgPT0gRU5URVJfS0VZKVxyXG4gICAge1xyXG4gICAgXHQkKCcjc2VsZWN0UHJvamVjdE9wdGlvbicpLnJlbW92ZSgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlIHRoZSBzZWxlY3QgcHJvamVjdCBvcHRpb24sIG9uY2UgdGhlIHVzZXIgc2VsZWN0cyBhIHByb2plY3QgXHJcbiAgICBcdFxyXG4gICAgXHR2YXIgbmV3UHJvamVjdE5hbWUgPSAkKCcjZWRpdE5ld1Byb2plY3ROYW1lSW5wdXQnKS52YWwoKTtcclxuICAgIFx0JCgnI2VkaXROZXdQcm9qZWN0TmFtZUlucHV0JykuaGlkZSgpO1xyXG4gICAgXHRcclxuICAgIFx0Ly9hZGQgYW4gb3B0aW9uIGZvciB0aGUgbmV3IHByb2plY3QgdG8gdGhlIHByb2plY3RzIGxpc3QsIHNlbGVjdCB0aGF0IG9wdGlvblxyXG4gICAgXHR2YXIgbmV3UHJvamVjdElEID0gaG1zLm5leHRQcm9qZWN0SUQoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1RPRE86IG5lZWQgdG8gZ2V0IHRoaXMgZnJvbSB0aGUgZGF0YWJhc2UgdG8gaW5zdXJlIHdlIGdldCB0aGUgY29ycmVjdCBpZFxyXG4gICAgXHR2YXIgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcclxuICAgIFx0b3B0aW9uLnRleHQgPSBuZXdQcm9qZWN0TmFtZTtcclxuICAgIFx0b3B0aW9uLnZhbHVlID0gbmV3UHJvamVjdElELnRvU3RyaW5nKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgXHQkKG9wdGlvbikuaW5zZXJ0QmVmb3JlKCcjcHJvamVjdFNlbGVjdG9yIG9wdGlvbjpudGgtY2hpbGQoJyArICQoJyNwcm9qZWN0U2VsZWN0b3InKS5sZW5ndGggKyAnKScpO1xyXG4gICAgXHQkKCcjcHJvamVjdFNlbGVjdG9yJykudmFsKG5ld1Byb2plY3RJRCk7XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgIGhtcy5jcmVhdGVOZXdQcm9qZWN0KG5ld1Byb2plY3ROYW1lKTtcclxuICAgIH0gICAgXHJcbiAgfVxyXG59OyIsInZhciBwcm9qZWN0QWN0aW9uID1cclxue1xyXG4gIGluaXQ6IGZ1bmN0aW9uKClcclxuICB7XHJcbiAgICAkKCcjcHJvamVjdC1hY3Rpb24tY29udGFpbmVyJykuaHRtbChwcm9qZWN0QWN0aW9uLm1hcmt1cCgpKTtcclxuICAgIFxyXG4gICAgJCgnI3Byb2plY3RBY3Rpb25JbnB1dCcpLmtleXVwKGZ1bmN0aW9uKGUpXHJcbiAgICB7XHJcbiAgICAgIGlmKGUua2V5Q29kZSA9PSBFTlRFUl9LRVkpXHJcbiAgICAgIHtcclxuICAgICAgICBwcm9qZWN0QWN0aW9uLmVudGVyUHJlc3NlZCgpO1xyXG4gICAgICB9XHJcbiAgICB9KTsgXHJcbiAgICBcclxuICAgICQoXCIjcHJvamVjdEFjdGlvblNlbGVjdG9yXCIpLmNoYW5nZShwcm9qZWN0QWN0aW9uLmhhbmRsZSk7XHJcbiAgfSxcclxuICBoYW5kbGU6IGZ1bmN0aW9uKClcclxuICB7XHJcbiAgXHRpZigkKCcjcHJvamVjdEFjdGlvblNlbGVjdG9yJykudmFsKCkgPT0gJ2FkZEZpZWxkJylcclxuICBcdHtcclxuICAgICAgJCgnI3Byb2plY3RBY3Rpb25JbnB1dCcpLnZhbChcIlR5cGUgTmV3IEZpZWxkIE5hbWUgYW5kIFByZXNzIEVudGVyIHRvIENyZWF0ZVwiKTtcclxuICBcdFx0JCgnI3Byb2plY3RBY3Rpb25JbnB1dCcpLnNob3coKS5mb2N1cygpLnNlbGVjdCgpO1xyXG4gIFx0fVx0XHJcbiAgfSxcclxuICBlbnRlclByZXNzZWQ6IGZ1bmN0aW9uKClcclxuICB7XHJcbiAgXHRpZigkKCcjcHJvamVjdEFjdGlvblNlbGVjdG9yJykudmFsKCkgPT0gJ2FkZEZpZWxkJylcclxuICBcdHtcclxuICAgICAgc3ByZWFkU2hlZXQuYWRkRmllbGQoJCgnI3Byb2plY3RBY3Rpb25JbnB1dCcpLnZhbCgpKTtcdFxyXG4gICAgICAkKCcjcHJvamVjdEFjdGlvbklucHV0JykuaGlkZSgpO1xyXG4gICAgICAkKCcjcHJvamVjdEFjdGlvblNlbGVjdG9yJykudmFsKCdibGFuaycpO1xyXG4gIFx0fVxyXG4gIH0sXHJcbiAgbWFya3VwOiBmdW5jdGlvbigpXHJcbiAge1xyXG4gICAgcmV0dXJuICc8ZGl2IGlkPVwicHJvamVjdEFjdGlvblNlbGVjdG9yQ29udGFpbmVyXCI+J1xyXG4gICAgKyAnPHNlbGVjdCBpZD1cInByb2plY3RBY3Rpb25TZWxlY3RvclwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCI+J1xyXG4gICAgKyAnPG9wdGlvbiB2YWx1ZT1cImJsYW5rXCI+PC9vcHRpb24+J1xyXG4gICAgKyAnPG9wdGlvbiB2YWx1ZT1cImFkZEZpZWxkXCI+QWRkIEZpZWxkPC9vcHRpb24+J1xyXG4gICAgKyAnPC9zZWxlY3Q+J1xyXG4gICAgKyAnPGlucHV0IGlkPVwicHJvamVjdEFjdGlvbklucHV0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj48L2lucHV0PidcclxuICAgICsgJzwvZGl2Pic7IFxyXG4gIH1cclxufTsiLCJ2YXIgc3ByZWFkU2hlZXRLZXlIYW5kbGVyID1cclxue1xyXG4gIGNoZWNrS2V5OiBmdW5jdGlvbihlKSBcclxuICB7XHJcbiAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XHJcbiAgXHJcbiAgICBpZiAoZS5rZXlDb2RlID09IEtFWV9VUF9BUlJPVykgXHJcbiAgICB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdmFyIHByZXZSb3cgPSAkKHNwcmVhZFNoZWV0S2V5SGFuZGxlci5maW5kQW5jZXN0b3IoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCwgJ3RyJykpLnByZXYoKVswXTtcclxuICAgICAgXHJcbiAgICAgIGlmKHByZXZSb3cpIHsgJCgnIycgKyBzcHJlYWRTaGVldEtleUhhbmRsZXIuZ2V0TmV4dEVsZW1lbnRJRChwcmV2Um93KSkuZm9jdXMoKTsgfSAgICAgIFxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZS5rZXlDb2RlID09IEtFWV9ET1dOX0FSUk9XKSBcclxuICAgIHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB2YXIgbmV4dFJvdyA9ICQoc3ByZWFkU2hlZXRLZXlIYW5kbGVyLmZpbmRBbmNlc3Rvcihkb2N1bWVudC5hY3RpdmVFbGVtZW50LCAndHInKSkubmV4dCgpWzBdO1xyXG4gICAgICBcclxuICAgICAgaWYobmV4dFJvdykgeyAkKCcjJyArIHNwcmVhZFNoZWV0S2V5SGFuZGxlci5nZXROZXh0RWxlbWVudElEKG5leHRSb3cpKS5mb2N1cygpOyB9ICAgICAgIFxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZS5rZXlDb2RlID09IEtFWV9SSUdIVF9BUlJPVykgXHJcbiAgICB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgJChzcHJlYWRTaGVldEtleUhhbmRsZXIuZmluZEFuY2VzdG9yKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQsICd0ZCcpKS5uZXh0KCkuZmluZCgnaW5wdXQnKS5mb2N1cygpOyAgXHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChlLmtleUNvZGUgPT0gS0VZX0xFRlRfQVJST1cpIFxyXG4gICAge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICQoc3ByZWFkU2hlZXRLZXlIYW5kbGVyLmZpbmRBbmNlc3Rvcihkb2N1bWVudC5hY3RpdmVFbGVtZW50LCAndGQnKSkucHJldigpLmZpbmQoJ2lucHV0JykuZm9jdXMoKTsgIFxyXG4gICAgfSAgICBcclxuICB9LFxyXG4gIGdldE5leHRFbGVtZW50SUQ6IGZ1bmN0aW9uKG5ld1JvdylcclxuICB7XHJcbiAgICB2YXIgaWQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmlkOyAgXHJcbiAgICBpZihpZC5pbmRleE9mKCdub2RlSW5wdXQnKSA+IC0xKVxyXG4gICAge1xyXG4gICAgICByZXR1cm4gJ25vZGVJbnB1dCcgKyBuZXdSb3cuaWQucmVwbGFjZSgncm93aWQnLCcnKTtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgIHtcclxuICAgICAgdmFyIGNsYXNzZXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmNsYXNzTmFtZS5zcGxpdCgnICcpO1xyXG4gIFxyXG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkrKylcclxuICAgICAge1xyXG4gICAgICAgIHZhciBjID0gY2xhc3Nlc1tpXTtcclxuICBcclxuICAgICAgICBpZihjLmluZGV4T2YoJ2ZpZWxkSW5wdXQnKSA+IC0xICYmIGMgIT0gJ2ZpZWxkSW5wdXQnKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHZhciBmaWVsZE5hbWUgPSBjLnJlcGxhY2UoJ2ZpZWxkSW5wdXQnLCAnJyk7XHJcbiAgICAgICAgICByZXR1cm4gZmllbGROYW1lICsgbmV3Um93LmlkLnJlcGxhY2UoJ2RhdGFyb3dpZCcsJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSAgIFxyXG4gIH0sXHJcbiAgZmluZEFuY2VzdG9yOiBmdW5jdGlvbihlbCwgdGFnTmFtZSkgXHJcbiAge1xyXG4gICAgdGFnTmFtZSA9IHRhZ05hbWUudG9Mb3dlckNhc2UoKTtcclxuICBcclxuICAgIHdoaWxlIChlbCAmJiBlbC5wYXJlbnROb2RlKSBcclxuICAgIHtcclxuICAgICAgZWwgPSBlbC5wYXJlbnROb2RlO1xyXG4gICAgICBpZiAoZWwudGFnTmFtZSAmJiBlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IHRhZ05hbWUpIHsgcmV0dXJuIGVsOyB9XHJcbiAgICB9XHJcbiAgfVxyXG59OyIsIi8vVE9ETzogYWRkIGNvbW1lbnRzXHJcbnZhciBzcHJlYWRTaGVldFZpZXcgPSBcclxue1xyXG4gIHJlbmRlcjogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgICQoZG9jdW1lbnQpLm9uKFwia2V5ZG93blwiLCBzcHJlYWRTaGVldEtleUhhbmRsZXIuY2hlY2tLZXkpO1xyXG4gICAgXHJcbiAgICAkKCcjc3ByZWFkU2hlZXRWaWV3JykucmVtb3ZlKCk7XHJcbiAgICAkKCdib2R5JykuYXBwZW5kKHRoaXMuc3ByZWFkU2hlZXRNYXJrdXAoKSk7XHJcbiAgICBcclxuICAgIHByb2plY3RBY3Rpb24uaW5pdCgpO1xyXG4gICAgdGhpcy5yZW5kZXJFeHBhbmRlcigpO1xyXG4gICAgdGhpcy5yZW5kZXJGaWVsZHNSb3coKTtcclxuICAgIHRoaXMucmVuZGVyRGF0YVRhYmxlKCk7XHJcbiAgICB0aGlzLnJlbmRlck5vZGVDb2x1bW4oKTtcclxuICB9LFxyXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uKCkgXHJcbiAgeyBcclxuICAgICQoJyNzcHJlYWRTaGVldFZpZXcnKS5yZW1vdmUoKTtcclxuICAgICQoZG9jdW1lbnQpLm9mZihcImtleWRvd25cIik7IFxyXG4gIH0sXHJcbiAgc3ByZWFkU2hlZXRNYXJrdXA6IGZ1bmN0aW9uKClcclxuICB7XHJcbiAgICByZXR1cm4gJzxkaXYgaWQ9XCJzcHJlYWRTaGVldFZpZXdcIj4nICtcclxuICAgICAgJzxkaXYgaWQ9XCJzcHJlYWRTaGVldFZpZXdBY3Rpb25zXCI+PGRpdiBpZD1cInByb2plY3QtYWN0aW9uLWNvbnRhaW5lclwiPjwvZGl2PjxkaXYgaWQ9XCJleHBhbmRlckNvbnRhaW5lclwiPjwvZGl2PjwvZGl2PicgK1xyXG4gICAgICAnPGRpdiBpZD1cImZpZWxkcy1oZWFkZXItcm93XCI+PC9kaXY+JyArXHJcbiAgICAgICc8ZGl2IGlkPVwicmVkaXBzLWRyYWdcIj48L2Rpdj4nICtcclxuICAgICAgJzxkaXYgaWQ9XCJkYXRhLWNvbnRhaW5lclwiPjwvZGl2PicgK1xyXG4gICAgJzwvZGl2Pic7XHJcbiAgfSxcclxuICByZW5kZXJFeHBhbmRlcjogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgIGV4cGFuZGVyU2VsZWN0b3IuaW5pdChzcHJlYWRTaGVldC50cmVlKCkubWF4RGVwdGgpO1xyXG4gIH0sXHJcbiAgcmVuZGVyRmllbGRzUm93OiBmdW5jdGlvbigpXHJcbiAge1xyXG4gICAgJCgnI2ZpZWxkcy1oZWFkZXItcm93JykuaHRtbCgnPHRhYmxlIGlkPVwiZmllbGRIZWFkZXJUYWJsZVwiPjx0ciBpZD1cImZpZWxkSGVhZGVyUm93XCI+PC90cj48L3RhYmxlPicpO1xyXG4gIFxyXG4gICAgc3ByZWFkU2hlZXQuZmllbGRzKCkuZm9yRWFjaChmdW5jdGlvbihmaWVsZClcclxuICAgIHsgXHJcbiAgICAgICQoJyNmaWVsZEhlYWRlclJvdycpLmFwcGVuZChzcHJlYWRTaGVldFZpZXcuZmllbGRIZWFkZXIoZmllbGQubmFtZSkpO1xyXG4gICAgICAkKCcjZmllbGRNZW51QnV0dG9uJyArIGZpZWxkLm5hbWUpLmNsaWNrKGZ1bmN0aW9uKGUpIHsgc3ByZWFkU2hlZXRWaWV3LnNob3dGaWVsZE1lbnUoZSwgZmllbGQubmFtZSk7IH0pO1xyXG4gICAgfSk7XHJcbiAgXHJcbiAgICAkKCcjZmllbGRzLWhlYWRlci1yb3cnKS5jc3MoJ3JpZ2h0Jywgc2Nyb2xsQmFyV2lkdGggKyAncHgnKTsgICAvL3Nob3J0ZW4gdGhlIHdpZHRoIG9mIHRoZSBmaWVsZHNSb3cgYnkgdGhlIHdpZHRoIG9mIHRoZSBzY3JvbGwgYmFyICAgXHJcbiAgfSxcclxuICBmaWVsZEhlYWRlcjogZnVuY3Rpb24oZmllbGROYW1lKVxyXG4gIHtcclxuICAgIHJldHVybiAnPHRkIGNsYXNzPVwiZmllbGRIZWFkZXJDZWxsXCI+PGRpdiBjbGFzcz1cImZpZWxkSGVhZGVyQ29udGFpbmVyXCI+J1xyXG4gICAgICArICc8ZGl2IGNsYXNzPVwibW92ZUNvbEdyaXBcIj48L2Rpdj4nXHJcbiAgICAgICsgJzxkaXYgY2xhc3M9XCJmaWVsZE5hbWVJbnB1dENvbnRhaW5lclwiPjx0ZXh0YXJlYSBpZD1cImNvbEhlYWRlcklucHV0JyArIGZpZWxkTmFtZSArICdcIiBjbGFzcz1cImZpZWxkTmFtZUlucHV0XCI+JyArIGZpZWxkTmFtZSArICc8L3RleHRhcmVhPjwvZGl2PidcclxuICAgICAgKyAnPGRpdiBjbGFzcz1cImZpZWxkSGVhZGVyQnV0dG9uXCI+J1xyXG4gICAgICArICc8aW1nIGlkPVwiZmllbGRNZW51QnV0dG9uJyArIGZpZWxkTmFtZSArICdcIiBzcmM9XCJpbWFnZXMvZG93bi1hcnJvdy5wbmdcIi8+J1xyXG4gICAgICArICc8L2Rpdj4nXHJcbiAgICAgICsgJzxkaXYgaWQ9XCJncmlwJyArIGZpZWxkTmFtZSArICdcIiBjbGFzcz1cInJlc2l6ZUNvbEdyaXBcIiBvbm1vdXNlZG93bj1cInN0YXJ0UmVzaXplKGV2ZW50LCB0aGlzKVwiPjwvZGl2PidcclxuICAgICAgKyAnPC9kaXY+PC90ZD4nO1xyXG4gIH0sXHJcbiAgc2hvd0ZpZWxkTWVudTogZnVuY3Rpb24oZSwgZmllbGROYW1lKVxyXG4gIHtcclxuICAgIGlmKCQoJyNmaWVsZE1lbnUnKS5sZW5ndGggPT09IDApXHJcbiAgICB7XHJcbiAgICAgIGZpZWxkTWVudUNvbnRyb2xsZXIuZGlzcGxheUZpZWxkTWVudShmaWVsZE5hbWUsIGUuY2xpZW50WCwgZS5jbGllbnRZKTtcclxuICAgIH0gICAgXHJcbiAgfSxcclxuICByZW5kZXJEYXRhVGFibGU6IGZ1bmN0aW9uKClcclxuICB7ICAgIFxyXG4gICAgJCgnI2RhdGEtY29udGFpbmVyJykuYXBwZW5kKCc8dGFibGUgaWQ9XCJkYXRhVGFibGVcIj48L3RhYmxlPicpO1xyXG4gICAgc3ByZWFkU2hlZXQudHJlZSgpLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIFxyXG4gICAgeyBcclxuICAgICAgJCgnI2RhdGFUYWJsZScpLmFwcGVuZChzcHJlYWRTaGVldFZpZXcuZGF0YVJvd3NNYXJrdXAoY2hpbGQpKTsgXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgJCgnI2RhdGEtY29udGFpbmVyJykuc2Nyb2xsKGZ1bmN0aW9uKCkgXHJcbiAgICB7XHJcbiAgICAgICQoJyNyZWRpcHMtZHJhZycpLnNjcm9sbFRvcCgkKCcjZGF0YS1jb250YWluZXInKS5zY3JvbGxUb3AoKSk7XHJcbiAgICAgICQoJyNmaWVsZHMtaGVhZGVyLXJvdycpLnNjcm9sbExlZnQoJCgnI2RhdGEtY29udGFpbmVyJykuc2Nyb2xsTGVmdCgpKTsgICAgICBcclxuICAgIH0pOyAgICAgXHJcbiAgfSxcclxuICBkYXRhUm93c01hcmt1cDogZnVuY3Rpb24obm9kZSlcclxuICB7XHJcbiAgICB2YXIgbWFya3VwID0gJzx0ciBpZD1cImRhdGFyb3dpZCcgKyBub2RlLmlkICsgJ1wiIGNsYXNzPVwiZGF0YVJvd1wiPic7XHJcbiAgICBcclxuICAgIHNwcmVhZFNoZWV0LmZpZWxkcygpLmZvckVhY2goZnVuY3Rpb24oZmllbGQpIFxyXG4gICAgeyAgXHJcbiAgICAgIG1hcmt1cCArPSAnPHRkIGNsYXNzPVwiY2VsbFwiPidcclxuICAgICAgICAgICAgICsgJzxpbnB1dCBjbGFzcz1cImZpZWxkSW5wdXQgZmllbGRJbnB1dCcgKyBmaWVsZC5uYW1lICsgJ1wiIHR5cGU9XCJ0ZXh0XCIgaWQ9XCInICsgZmllbGQubmFtZSArIG5vZGUuaWQgKyAnXCIgdmFsdWU9XCInICsgc3ByZWFkU2hlZXQuZm9ybWF0dGVkVmFsdWUoZmllbGQsIG5vZGUpICsgJ1wiICdcclxuICAgICAgICAgICAgICsgJ29uaW5wdXQ9XCJzcHJlYWRTaGVldC51cGRhdGVGaWVsZFZhbHVlKFxcJycgKyBmaWVsZC5uYW1lICsgJ1xcJywnICsgbm9kZS5pZCArICcpXCIgb25mb2N1cz1cIiQodGhpcykudmFsKHNwcmVhZFNoZWV0LnJhd1ZhbHVlKFxcJycgKyBmaWVsZC5uYW1lICsgJ1xcJywnICsgbm9kZS5pZCArICcpKVwiPidcclxuICAgICAgICAgICAgICsgJzwvdGQ+JztcclxuICAgIH0pO1xyXG5cclxuICAgIG5vZGUuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCkgeyBtYXJrdXAgKz0gc3ByZWFkU2hlZXRWaWV3LmRhdGFSb3dzTWFya3VwKGNoaWxkKTsgfSk7ICAgXHJcblxyXG4gICAgcmV0dXJuIG1hcmt1cCArICc8L3RyPic7XHJcbiAgfSxcclxuICByZW5kZXJEYXRhQ2VsbDogZnVuY3Rpb24ocm93LCBmaWVsZE5hbWUsIG5vZGVJRCwgdmFsdWUpXHJcbiAge1xyXG4gICAgJChyb3cpLmFwcGVuZChzcHJlYWRTaGVldFZpZXcuZmllbGRDZWxsKGZpZWxkTmFtZSwgbm9kZUlELCB2YWx1ZSkpO1xyXG4gICAgJCgnIycgKyBmaWVsZE5hbWUgKyBub2RlSUQpLm9uKCdpbnB1dCcsIGZ1bmN0aW9uKCkgeyBzcHJlYWRTaGVldC51cGRhdGVGaWVsZFZhbHVlKGZpZWxkTmFtZSwgbm9kZUlEKTsgfSk7XHJcbiAgICAkKCcjJyArIGZpZWxkTmFtZSArIG5vZGVJRCkuZm9jdXMoZnVuY3Rpb24oKSB7ICQodGhpcykudmFsKHNwcmVhZFNoZWV0LnJhd1ZhbHVlKGZpZWxkTmFtZSwgbm9kZUlEKSk7IH0pOyAgICAgXHJcbiAgfSxcclxuICBmaWVsZENlbGw6IGZ1bmN0aW9uKGZpZWxkTmFtZSwgbm9kZUlELCB2YWx1ZSlcclxuICB7XHJcbiAgICByZXR1cm4gJzx0ZCBjbGFzcz1cImNlbGxcIj48aW5wdXQgY2xhc3M9XCJmaWVsZElucHV0IGZpZWxkSW5wdXQnICsgZmllbGROYW1lICsgJ1wiIHR5cGU9XCJ0ZXh0XCIgaWQ9XCInICsgZmllbGROYW1lICsgbm9kZUlEICsgJ1wiIHZhbHVlPVwiJyArIHZhbHVlICsgJ1wiPjwvdGQ+JztcclxuICB9LFxyXG4gIG5vZGVSb3dNYXJrdXA6IGZ1bmN0aW9uKG5vZGUpXHJcbiAge1xyXG4gICAgdmFyIG1hcmt1cCA9ICc8dHIgaWQ9XCJyb3dpZCcgKyBub2RlLmlkICsgJ1wiIGNsYXNzPVwibm9kZVJvd1wiPjx0ZCBjbGFzcz1cInJlZGlwcy1yb3doYW5kbGVyIGNlbGxcIj48ZGl2IGlkPVwibm9kZUNvbnRlbnQnICsgbm9kZS5pZCArICdcIiBjbGFzcz1cIm5vZGUtY29udGFpbmVyXCI+JztcclxuICAgIFxyXG4gICAgbWFya3VwICs9IHNwcmVhZFNoZWV0Vmlldy5kZWxldGVCdXR0b24obm9kZS5pZCkgKyBzcHJlYWRTaGVldFZpZXcuY29weUJ1dHRvbihub2RlLmlkKSArIHNwcmVhZFNoZWV0Vmlldy5kcmFnSGFuZGxlO1xyXG4gICAgbWFya3VwICs9IHNwcmVhZFNoZWV0Vmlldy5ub2RlQ29udGVudChub2RlKTsgICAgXHJcbiAgXHJcbiAgICBub2RlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIHsgbWFya3VwICs9IHNwcmVhZFNoZWV0Vmlldy5ub2RlUm93TWFya3VwKGNoaWxkKTsgfSk7XHJcbiAgXHJcbiAgICByZXR1cm4gbWFya3VwICsgJzwvZGl2PjwvdGQ+PC90cj4nO1xyXG4gIH0sXHJcbiAgbm9kZUNvbnRlbnQ6IGZ1bmN0aW9uKG5vZGUpXHJcbiAge1xyXG4gICAgdmFyIGljb25NYXJrdXA7XHJcbiAgICB2YXIgZGVwdGhBZGp1c3RtZW50ID0gKG5vZGUuZGVwdGgtMSkgKiAxMDtcclxuICAgIHZhciB3aWR0aEFkanVzdG1lbnQgPSBkZXB0aEFkanVzdG1lbnQ7ICAgXHJcbiAgXHJcbiAgICBpZihzcHJlYWRTaGVldC5oYXNDaGlsZHJlbihub2RlKSlcclxuICAgIHtcclxuICAgICAgaWYoc3ByZWFkU2hlZXQuY2hpbGRyZW5IaWRkZW4obm9kZSkpIHsgaWNvbk1hcmt1cCA9ICc8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1yaWdodFwiPjwvc3Bhbj4nOyB9XHJcbiAgICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGljb25NYXJrdXAgPSAnPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93blwiPjwvc3Bhbj4nOyB9XHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICB7XHJcbiAgICAgIGljb25NYXJrdXAgPSAnPHNwYW4+PC9zcGFuPic7XHJcbiAgICAgIGRlcHRoQWRqdXN0bWVudCArPSAxMjtcclxuICAgICAgd2lkdGhBZGp1c3RtZW50IC09IDEwO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gc3ByZWFkU2hlZXRWaWV3LmV4cGFuZEljb24obm9kZS5pZCwgZGVwdGhBZGp1c3RtZW50LCBpY29uTWFya3VwKSArIHNwcmVhZFNoZWV0Vmlldy5ub2RlSW5wdXQobm9kZSwgREVGQVVMVF9OT0RFX0lOUFVUX1dJRFRILXdpZHRoQWRqdXN0bWVudCk7ICAgICBcclxuICB9LFxyXG4gIHJlbmRlck5vZGVDb2x1bW46IGZ1bmN0aW9uKClcclxuICB7XHJcbiAgICAkKCcjcmVkaXBzLWRyYWcnKS5odG1sKCc8dGFibGUgaWQ9XCJ0cmVlVGFibGVcIj48L3RhYmxlPicpO1xyXG4gICAgc3ByZWFkU2hlZXQudHJlZSgpLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIFxyXG4gICAgeyBcclxuICAgICAgICQoJyN0cmVlVGFibGUnKS5hcHBlbmQoc3ByZWFkU2hlZXRWaWV3Lm5vZGVSb3dNYXJrdXAoY2hpbGQpKTtcclxuICAgIH0pO1xyXG4gICAgJCgnI3JlZGlwcy1kcmFnJykuY3NzKCdib3R0b20nLCBzY3JvbGxCYXJXaWR0aCArICdweCcpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3Nob3J0ZW4gdGhlIGhlaWdodCBvZiB0aGUgdHJlZSBzZWN0aW9uIGJ5IHRoZSB3aWR0aCBvZiB0aGUgc2Nyb2xsIGJhclxyXG4gIFx0cmVkaXBzLmluaXQoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2luaXRpYWxpemUgdHJlZSBkcmFnL2Ryb3AgbGlicmFyeSAgICBcclxuICB9LFxyXG4gIGRyYWdIYW5kbGU6ICc8ZGl2IGNsYXNzPVwicmVkaXBzLWRyYWcgcHVsbC1yaWdodFwiPjxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1tb3ZlXCI+PC9pPjwvZGl2PicsXHJcbiAgY29weUJ1dHRvbjogZnVuY3Rpb24obm9kZUlEKSB7IHJldHVybiAnPGEgaHJlZj1cIiNcIiAgY2xhc3M9XCJwdWxsLXJpZ2h0IGJ0biBidG4taW5mbyBidG4teHMgY29weS1idXR0b25cIiBvbmNsaWNrPVwic3ByZWFkU2hlZXQuY29weU5vZGUoJyArIG5vZGVJRCArICcpXCI+PGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXBsdXNcIj48L2k+PC9hPicgfSxcclxuICBkZWxldGVCdXR0b246IGZ1bmN0aW9uKG5vZGVJRCkgeyByZXR1cm4gJzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJwdWxsLXJpZ2h0IGJ0biBidG4tZGFuZ2VyIGJ0bi14cyBkZWxldGUtYnV0dG9uXCIgb25jbGljaz1cInNwcmVhZFNoZWV0LmRlbGV0ZU5vZGUoJyArIG5vZGVJRCArICcpXCI+PGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZVwiPjwvaT48L2E+JyB9LFxyXG4gIGV4cGFuZEljb246IGZ1bmN0aW9uKG5vZGVJRCwgZGVwdGhBZGp1c3RtZW50LCBpY29uTWFya3VwKSBcclxuICB7IFxyXG4gICAgcmV0dXJuICc8YSBocmVmPVwiI1wiIGlkPVwiaWNvbicgKyBub2RlSUQgKyAnXCIgY2xhc3M9XCJidG4gYnRuLXhzXCIgc3R5bGU9XCJtYXJnaW4tbGVmdDonICsgZGVwdGhBZGp1c3RtZW50ICsgJ3B4XCIgJ1xyXG4gICAgICAgICArICdvbmNsaWNrPVwic3ByZWFkU2hlZXQudG9nZ2xlTm9kZSgnICsgbm9kZUlEICsgJylcIj4nICsgaWNvbk1hcmt1cCArICc8L2E+JzsgXHJcbiAgfSxcclxuICBub2RlSW5wdXQ6IGZ1bmN0aW9uKG5vZGUsIHdpZHRoKVxyXG4gIHsgXHJcbiAgICByZXR1cm4gJzxpbnB1dCBpZD1cIm5vZGVJbnB1dCcgKyBub2RlLmlkICsgJ1wiIGNsYXNzPVwibm9kZVRleHRJbnB1dFwiIHN0eWxlPVwid2lkdGg6JyArIHdpZHRoICsgJ3B4XCIgdHlwZT1cInRleHRcIiAnXHJcbiAgICAgICAgICsgJ3ZhbHVlPVwiJyArIG5vZGUubmFtZSArICdcIiBvbmlucHV0PVwic3ByZWFkU2hlZXRWaWV3LnVwZGF0ZU5vZGVOYW1lKCcgKyBub2RlLmlkICsgJylcIi8+JzsgXHJcbiAgfSxcclxuICBleHBhbmROb2RlOiBmdW5jdGlvbihub2RlKVxyXG4gIHtcclxuICAgIHZhciBjaGlsZDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hZGQgZGVzY2VuZGFudCBub2RlIHJvd3MgdG8gdGhlIERPTVxyXG4gICAgZm9yKHZhciBpID0gbm9kZS5jaGlsZHJlbi5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pICAgICAgICAgICAgICAgICAgICAgICAgICAvL2l0ZXJhdGUgaW4gcmV2ZXJzZSBvcmRlciB0byBwcmVzZXJ2ZSB0aGUgbm9kZSBvcmRlcmluZ1xyXG4gICAge1xyXG4gICAgICBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XHJcbiAgICAgICQoc3ByZWFkU2hlZXRWaWV3LmRhdGFSb3dzTWFya3VwKGNoaWxkKSkuaW5zZXJ0QWZ0ZXIoJCgnI2RhdGFyb3dpZCcgKyBub2RlLmlkKSk7XHJcbiAgICAgICQoc3ByZWFkU2hlZXRWaWV3Lm5vZGVSb3dNYXJrdXAoY2hpbGQpKS5pbnNlcnRBZnRlcigkKCcjcm93aWQnICsgbm9kZS5pZCkpO1xyXG4gICAgfSAgICAgXHJcblxyXG4gICAgc3ByZWFkU2hlZXRWaWV3LmVuYWJsZURyYWdnaW5nKG5vZGUpOyAgICAgXHJcbiAgfSxcclxuICByZWRyYXdOb2RlQ29udGVudDogZnVuY3Rpb24obm9kZSlcclxuICB7XHJcbiAgICAkKCcjaWNvbicgKyBub2RlLmlkKS5yZW1vdmUoKTtcclxuICAgICQoJyNub2RlSW5wdXQnICsgbm9kZS5pZCkucmVtb3ZlKCk7XHJcbiAgICAkKCcjbm9kZUNvbnRlbnQnICsgbm9kZS5pZCkuYXBwZW5kKHNwcmVhZFNoZWV0Vmlldy5ub2RlQ29udGVudChub2RlKSk7ICAgICBcclxuICB9LFxyXG4gIGFkZEZpZWxkOiBmdW5jdGlvbihmaWVsZE5hbWUpXHJcbiAge1xyXG4gICAgJCgnI2ZpZWxkSGVhZGVyUm93JykuYXBwZW5kKHNwcmVhZFNoZWV0Vmlldy5maWVsZEhlYWRlcihmaWVsZE5hbWUpKTtcclxuICAgICQoJyNmaWVsZE1lbnVCdXR0b24nICsgZmllbGROYW1lKS5jbGljayhmdW5jdGlvbihlKSB7IHNwcmVhZFNoZWV0Vmlldy5zaG93RmllbGRNZW51KGUsIGZpZWxkTmFtZSk7IH0pO1xyXG4gICAgJCgnLmRhdGFSb3cnKS5lYWNoKGZ1bmN0aW9uKGksIGl0ZW0pIHsgc3ByZWFkU2hlZXRWaWV3LnJlbmRlckRhdGFDZWxsKGl0ZW0sIGZpZWxkTmFtZSwgcGFyc2VJbnQoaXRlbS5pZC5yZXBsYWNlKCdkYXRhcm93aWQnLCAnJykpLCAnJyk7IH0pOyAgICAgICAgXHJcbiAgfSxcclxuICB1cGRhdGVOb2RlTmFtZTogZnVuY3Rpb24obm9kZUlEKVxyXG4gIHtcclxuICAgIHZhciB2YWx1ZSA9ICQoJyNub2RlSW5wdXQnICsgbm9kZUlEKS52YWwoKTtcclxuICAgIHNwcmVhZFNoZWV0LnVwZGF0ZU5vZGVOYW1lKG5vZGVJRCwgdmFsdWUpO1xyXG4gICAgJCgnI25vZGVJbnB1dCcgKyBub2RlSUQpLmF0dHIoJ3ZhbHVlJywgdmFsdWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy91cGRhdGUgdGhlIGlucHV0IHZhbHVlIGluIHRoZSBET00sIHNvIHRoYXQgd2hlbiB3ZSBkcmFnL21vdmUgdGhlIHJvdywgdGhlIHZhbHVlIGlzIGNvcnJlY3QgICAgXHJcbiAgfSxcclxuICByZW1vdmVOb2RlOiBmdW5jdGlvbihub2RlKVxyXG4gIHtcclxuICAgICQoJyNyb3dpZCcgKyBub2RlLmlkKS5yZW1vdmUoKTtcclxuICAgICQoJyNkYXRhcm93aWQnICsgbm9kZS5pZCkucmVtb3ZlKCk7ICAgICBcclxuICB9LFxyXG4gIGluc2VydE5vZGVCZWZvcmU6IGZ1bmN0aW9uKG5vZGUsIGluc2VydEJlZm9yZU5vZGUpXHJcbiAge1xyXG4gICAgJChzcHJlYWRTaGVldFZpZXcubm9kZVJvd01hcmt1cChub2RlKSkuaW5zZXJ0QmVmb3JlKCQoJyNyb3dpZCcgKyBpbnNlcnRCZWZvcmVOb2RlLmlkKSk7ICAgICAgLy9pbnNlcnQgdGhlIG5ldyByb3dzIGJlZm9yZSB0aGUgc291cmNlIHJvd1xyXG4gICAgJChzcHJlYWRTaGVldFZpZXcuZGF0YVJvd3NNYXJrdXAobm9kZSkpLmluc2VydEJlZm9yZSgkKCcjZGF0YXJvd2lkJyArIGluc2VydEJlZm9yZU5vZGUuaWQpKTsgLy9pbnNlcnQgdGhlIG5ldyByb3dzIGJlZm9yZSB0aGUgc291cmNlIHJvd1xyXG4gICAgc3ByZWFkU2hlZXRWaWV3LmVuYWJsZURyYWdnaW5nKG5vZGUpOyAgICBcclxuICB9LFxyXG4gIGluc2VydE5vZGVBZnRlcjogZnVuY3Rpb24obm9kZSwgaW5zZXJ0QWZ0ZXJOb2RlKVxyXG4gIHtcclxuICAgICQoc3ByZWFkU2hlZXRWaWV3Lm5vZGVSb3dNYXJrdXAobm9kZSkpLmluc2VydEFmdGVyKCQoJyNyb3dpZCcgKyBpbnNlcnRBZnRlck5vZGUuaWQpKTsgICAgICAvL2luc2VydCB0aGUgbmV3IHJvd3MgYmVmb3JlIHRoZSBzb3VyY2Ugcm93XHJcbiAgICAkKHNwcmVhZFNoZWV0Vmlldy5kYXRhUm93c01hcmt1cChub2RlKSkuaW5zZXJ0QWZ0ZXIoJCgnI2RhdGFyb3dpZCcgKyBpbnNlcnRBZnRlck5vZGUuaWQpKTsgLy9pbnNlcnQgdGhlIG5ldyByb3dzIGJlZm9yZSB0aGUgc291cmNlIHJvd1xyXG4gICAgc3ByZWFkU2hlZXRWaWV3LmVuYWJsZURyYWdnaW5nKG5vZGUpOyAgICBcclxuICB9LFxyXG4gIGVuYWJsZURyYWdnaW5nOiBmdW5jdGlvbihub2RlKVxyXG4gIHtcclxuICAgIFJFRElQUy5kcmFnLmVuYWJsZURpdnMoJ2luaXQnLCAkKCcjcm93aWQnICsgbm9kZS5pZCkuZmluZCgnZGl2JykpOyAgICAgICBcclxuICB9LFxyXG4gIGdldEZpZWxkVmFsdWU6IGZ1bmN0aW9uKGZpZWxkTmFtZSwgbm9kZUlEKVxyXG4gIHtcclxuICAgIHJldHVybiAkKCcjJyArIGZpZWxkTmFtZSArIG5vZGVJRCkudmFsKCk7XHJcbiAgfSxcclxuICB1cGRhdGVGaWVsZFZhbHVlOiBmdW5jdGlvbihmaWVsZE5hbWUsIG5vZGVJRCwgdmFsdWUpXHJcbiAge1xyXG4gICAgJCgnIycgKyBmaWVsZE5hbWUgKyBub2RlSUQpLnZhbCh2YWx1ZSk7XHJcbiAgfVxyXG59OyIsInZhciBNSU5fTk9ERV9TSVpFID0gNTtcclxudmFyIE1BWF9OT0RFX1NJWkUgPSAxMDA7XHJcblxyXG52YXIgVkVSVElDQUxfVklFVyA9IDA7XHJcbnZhciBIT1JJWk9OVEFMX1ZJRVcgPSAxO1xyXG5cclxuLy9UT0RPOiByZWZhY3RvciwgcmVtb3ZlIHJlZmVyZW5jZXMgdG8gcHJvamVjdCBhbmQgcHV0IHRoZW0gaW4gdGhlIHRyZWUgY29udHJvbGxlciBmaWxlXHJcbnZhciB0cmVlVmlldyA9IFxyXG57XHJcbiAgZGVzdHJveTogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgICQoJyN0cmVlVmlldycpLnJlbW92ZSgpO1xyXG4gIH0sXHJcbiAgcmVmcmVzaDogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgIHRyZWVWaWV3LnVwZGF0ZSh0cmVlVmlldy5yb290KTtcclxuICB9LFxyXG4gIHJvdGF0ZTogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgIGlmKHRyZWVWaWV3LmRpcmVjdGlvbiA9PT0gSE9SSVpPTlRBTF9WSUVXKVxyXG4gICAge1xyXG4gICAgICB0cmVlVmlldy5kaXJlY3Rpb24gPSBWRVJUSUNBTF9WSUVXO1xyXG4gICAgICB0cmVlVmlldy5ob3Jpem9udGFsX3NwYWNpbmcgPSAxMDA7XHJcbiAgICAgIHRyZWVWaWV3LnZlcnRpY2FsX3NwYWNpbmcgPSA2MDtcclxuICAgICAgdHJlZVZpZXcuZGlhZ29uYWwgPSBkMy5zdmcuZGlhZ29uYWwoKS5wcm9qZWN0aW9uKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFtkLngsIGQueV07IH0pOyAgLy8gZGVmaW5lIGEgZDMgZGlhZ29uYWwgcHJvamVjdGlvbiBmb3IgdXNlIGJ5IHRoZSBub2RlIHBhdGhzIGxhdGVyIG9uLlxyXG4gICAgICBcclxuICAgICAgdHJlZVZpZXcucm9vdC55MCA9IHRyZWVWaWV3LnZpZXdlckhlaWdodCAvIDI7XHJcbiAgICAgIHRyZWVWaWV3LnJvb3QueDAgPSAwOyAgICAgIFxyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICB0cmVlVmlldy5kaXJlY3Rpb24gPSBIT1JJWk9OVEFMX1ZJRVc7XHJcbiAgICAgIHRyZWVWaWV3Lmhvcml6b250YWxfc3BhY2luZyA9IDE1MDtcclxuICAgICAgdHJlZVZpZXcudmVydGljYWxfc3BhY2luZyA9IDI1O1xyXG4gICAgICB0cmVlVmlldy5kaWFnb25hbCA9IGQzLnN2Zy5kaWFnb25hbCgpLnByb2plY3Rpb24oZnVuY3Rpb24oZCkgeyByZXR1cm4gW2QueSwgZC54XTsgfSk7ICAvLyBkZWZpbmUgYSBkMyBkaWFnb25hbCBwcm9qZWN0aW9uIGZvciB1c2UgYnkgdGhlIG5vZGUgcGF0aHMgbGF0ZXIgb24uXHJcbiAgICAgIFxyXG4gICAgICB0cmVlVmlldy5yb290LngwID0gdHJlZVZpZXcudmlld2VySGVpZ2h0IC8gMjtcclxuICAgICAgdHJlZVZpZXcucm9vdC55MCA9IDA7ICAgIFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0cmVlVmlldy51cGRhdGUodHJlZVZpZXcucm9vdCk7XHJcbiAgfSxcclxuICBpbml0OiBmdW5jdGlvbigpXHJcbiAge1xyXG4gICAgdHJlZVZpZXcuZGlyZWN0aW9uID0gSE9SSVpPTlRBTF9WSUVXO1xyXG4gICAgdHJlZVZpZXcuc2VsZWN0ZWROb2RlID0gbnVsbDtcclxuICAgIHRyZWVWaWV3LmRyYWdnaW5nTm9kZSA9IG51bGw7XHJcbiAgICB0cmVlVmlldy5kdXJhdGlvbiA9IDc1MDtcclxuICAgIHRyZWVWaWV3Lmhvcml6b250YWxfc3BhY2luZyA9IDE1MDtcclxuICAgIHRyZWVWaWV3LnZlcnRpY2FsX3NwYWNpbmcgPSAyNTsgICAgXHJcbiAgICBcclxuICAgIHRyZWVWaWV3Lm1heExhYmVsTGVuZ3RoID0gMDtcclxuICAgIFxyXG4gICAgcHJvamVjdC50cmF2ZXJzZShwcm9qZWN0LmdldENoaWxkcmVuLCBmdW5jdGlvbihkKVxyXG4gICAge1xyXG4gICAgICB0cmVlVmlldy5tYXhMYWJlbExlbmd0aCA9IE1hdGgubWF4KGQubmFtZS5sZW5ndGgsIHRyZWVWaWV3Lm1heExhYmVsTGVuZ3RoKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICB0cmVlVmlldy52aWV3ZXJXaWR0aCA9ICQoJyN0cmVlLWNvbnRhaW5lcicpLndpZHRoKCk7XHJcbiAgICB0cmVlVmlldy52aWV3ZXJIZWlnaHQgPSAkKCcjdHJlZS1jb250YWluZXInKS5oZWlnaHQoKTtcclxuICAgIFxyXG4gICAgdHJlZVZpZXcudHJlZSA9IGQzLmxheW91dC50cmVlKCkuc2l6ZShbdHJlZVZpZXcudmlld2VySGVpZ2h0LCB0cmVlVmlldy52aWV3ZXJXaWR0aF0pO1xyXG4gICAgdHJlZVZpZXcucm9vdCA9IHByb2plY3QudHJlZTtcclxuICAgIFxyXG4gICAgdHJlZVZpZXcuZHJhZ1N0YXJ0ZWQgPSBudWxsO1xyXG4gICAgdHJlZVZpZXcuZGlhZ29uYWwgPSBkMy5zdmcuZGlhZ29uYWwoKS5wcm9qZWN0aW9uKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFtkLnksIGQueF07IH0pOyAgLy8gZGVmaW5lIGEgZDMgZGlhZ29uYWwgcHJvamVjdGlvbiBmb3IgdXNlIGJ5IHRoZSBub2RlIHBhdGhzIGxhdGVyIG9uLiAgICAgICAgICAgICAgICBcclxuICB9LCAgXHJcbiAgcmVuZGVyOiBmdW5jdGlvbigpXHJcbiAge1xyXG4gICAgdHJlZVZpZXcuZGVzdHJveSgpO1xyXG4gICAgJCgnYm9keScpLmFwcGVuZCgnPGRpdiBpZD1cInRyZWVWaWV3XCI+PGRpdiBpZD1cInRyZWVWaWV3T3B0aW9uc1wiPjxkaXYgaWQ9XCJleHBhbmRlckNvbnRhaW5lclwiPjwvZGl2PjwvZGl2PjxkaXYgaWQ9XCJ0cmVlLWNvbnRhaW5lclwiPjwvZGl2PjwvZGl2PicpO1xyXG4gXHJcbiAgICBleHBhbmRlclNlbGVjdG9yLmluaXQocHJvamVjdC50cmVlLm1heERlcHRoKTtcclxuICAgICQoJyN0cmVlVmlld09wdGlvbnMnKS5hcHBlbmQoJzxhIGhyZWY9XCIjXCIgaWQ9XCJ0cmVlVmlld1JvdGF0ZUJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0IHB1bGwtcmlnaHRcIj5Sb3RhdGUgVmlldzwvYT4nKTtcclxuICAgICQoJyN0cmVlVmlld1JvdGF0ZUJ1dHRvbicpLmNsaWNrKGZ1bmN0aW9uKCkgeyB0cmVlVmlldy5yb3RhdGUoKTsgfSk7ICBcclxuIFxyXG4gICAgdHJlZVZpZXcuaW5pdCgpO1xyXG5cclxuICAgIGZ1bmN0aW9uIHpvb20oKSB7IHRyZWVWaWV3LnN2Z0dyb3VwLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBkMy5ldmVudC50cmFuc2xhdGUgKyBcIilzY2FsZShcIiArIGQzLmV2ZW50LnNjYWxlICsgXCIpXCIpOyB9ICAgLy8gRGVmaW5lIHRoZSB6b29tIGZ1bmN0aW9uIGZvciB0aGUgem9vbWFibGUgdHJlZVxyXG4gIFxyXG4gICAgdHJlZVZpZXcuem9vbUxpc3RlbmVyID0gZDMuYmVoYXZpb3Iuem9vbSgpLnNjYWxlRXh0ZW50KFswLjEsIDNdKS5vbihcInpvb21cIiwgem9vbSk7ICAgICAvLyBkZWZpbmUgdGhlIHRyZWVWaWV3Lnpvb21MaXN0ZW5lciB3aGljaCBjYWxscyB0aGUgem9vbSBmdW5jdGlvbiBvbiB0aGUgXCJ6b29tXCIgZXZlbnQgY29uc3RyYWluZWQgd2l0aGluIHRoZSBzY2FsZUV4dGVudHNcclxuICBcclxuICAgIGZ1bmN0aW9uIGluaXRpYXRlRHJhZyhkLCBkb21Ob2RlKSBcclxuICAgIHtcclxuICAgICAgdHJlZVZpZXcuZHJhZ2dpbmdOb2RlID0gZDtcclxuICAgICAgZDMuc2VsZWN0KGRvbU5vZGUpLnNlbGVjdCgnLmdob3N0Q2lyY2xlJykuYXR0cigncG9pbnRlci1ldmVudHMnLCAnbm9uZScpO1xyXG4gICAgICBkMy5zZWxlY3RBbGwoJy5naG9zdENpcmNsZScpLmF0dHIoJ2NsYXNzJywgJ2dob3N0Q2lyY2xlIHNob3cnKTtcclxuICAgICAgZDMuc2VsZWN0KGRvbU5vZGUpLmF0dHIoJ2NsYXNzJywgJ25vZGUgYWN0aXZlRHJhZycpO1xyXG5cclxuICAgICAgdHJlZVZpZXcuc3ZnR3JvdXAuc2VsZWN0QWxsKFwiZy5ub2RlXCIpLnNvcnQoZnVuY3Rpb24oYSwgYikgICAgLy8gc2VsZWN0IHRoZSBwYXJlbnQgYW5kIHNvcnQgdGhlIHBhdGgnc1xyXG4gICAgICB7IFxyXG4gICAgICAgIGlmIChhLmlkICE9IHRyZWVWaWV3LmRyYWdnaW5nTm9kZS5pZCkgcmV0dXJuIDE7ICAgICAgICAgIC8vIGEgaXMgbm90IHRoZSBob3ZlcmVkIGVsZW1lbnQsIHNlbmQgXCJhXCIgdG8gdGhlIGJhY2tcclxuICAgICAgICBlbHNlIHJldHVybiAtMTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhIGlzIHRoZSBob3ZlcmVkIGVsZW1lbnQsIGJyaW5nIFwiYVwiIHRvIHRoZSBmcm9udFxyXG4gICAgICB9KTtcclxuICAgICAgLy8gaWYgbm9kZXMgaGFzIGNoaWxkcmVuLCByZW1vdmUgdGhlIGxpbmtzIGFuZCBub2Rlc1xyXG4gICAgICBpZiAobm9kZXMubGVuZ3RoID4gMSkgXHJcbiAgICAgIHtcclxuICAgICAgICAvLyByZW1vdmUgbGluayBwYXRoc1xyXG4gICAgICAgIGxpbmtzID0gdHJlZVZpZXcudHJlZS5saW5rcyhub2Rlcyk7XHJcbiAgICAgICAgbm9kZVBhdGhzID0gdHJlZVZpZXcuc3ZnR3JvdXAuc2VsZWN0QWxsKFwicGF0aC5saW5rXCIpLmRhdGEobGlua3MsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudGFyZ2V0LmlkOyB9KS5yZW1vdmUoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyByZW1vdmUgY2hpbGQgbm9kZXNcclxuICAgICAgICBub2Rlc0V4aXQgPSB0cmVlVmlldy5zdmdHcm91cC5zZWxlY3RBbGwoXCJnLm5vZGVcIikuZGF0YShub2RlcywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5pZDsgfSkuZmlsdGVyKGZ1bmN0aW9uKGQsIGkpIHsgcmV0dXJuIGQuaWQgIT0gdHJlZVZpZXcuZHJhZ2dpbmdOb2RlLmlkOyB9KS5yZW1vdmUoKTtcclxuICAgICAgfVxyXG4gIFxyXG4gICAgICAvLyByZW1vdmUgcGFyZW50IGxpbmtcclxuICAgICAgcGFyZW50TGluayA9IHRyZWVWaWV3LnRyZWUubGlua3ModHJlZVZpZXcudHJlZS5ub2Rlcyh0cmVlVmlldy5kcmFnZ2luZ05vZGUucGFyZW50KSk7XHJcbiAgICAgIHRyZWVWaWV3LnN2Z0dyb3VwLnNlbGVjdEFsbCgncGF0aC5saW5rJykuZmlsdGVyKGZ1bmN0aW9uKGQsIGkpIHsgcmV0dXJuIGQudGFyZ2V0LmlkID09IHRyZWVWaWV3LmRyYWdnaW5nTm9kZS5pZDsgfSkucmVtb3ZlKCk7XHJcblxyXG4gICAgICB0cmVlVmlldy5kcmFnU3RhcnRlZCA9IG51bGw7XHJcbiAgICB9XHJcbiAgXHJcbiAgICAvLyBkZWZpbmUgdGhlIGJhc2VTdmcsIGF0dGFjaGluZyBhIGNsYXNzIGZvciBzdHlsaW5nIGFuZCB0aGUgdHJlZVZpZXcuem9vbUxpc3RlbmVyXHJcbiAgICB2YXIgYmFzZVN2ZyA9IGQzLnNlbGVjdChcIiN0cmVlLWNvbnRhaW5lclwiKS5hcHBlbmQoXCJzdmdcIilcclxuICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB0cmVlVmlldy52aWV3ZXJXaWR0aClcclxuICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgdHJlZVZpZXcudmlld2VySGVpZ2h0KVxyXG4gICAgICAuYXR0cihcImNsYXNzXCIsIFwib3ZlcmxheVwiKVxyXG4gICAgICAuY2FsbCh0cmVlVmlldy56b29tTGlzdGVuZXIpO1xyXG4gIFxyXG4gICAgZHJhZ0xpc3RlbmVyID0gZDMuYmVoYXZpb3IuZHJhZygpLm9uKFwiZHJhZ3N0YXJ0XCIsIHRyZWVWaWV3LmRyYWdzdGFydCkub24oXCJkcmFnXCIsIGRyYWcpLm9uKFwiZHJhZ2VuZFwiLCB0cmVlVmlldy5kcmFnZW5kKTsgIC8vIERlZmluZSB0aGUgZHJhZyBsaXN0ZW5lcnMgZm9yIGRyYWcvZHJvcCBiZWhhdmlvdXIgb2Ygbm9kZXMuXHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIGRyYWcoZClcclxuICAgIHtcclxuICAgICAgaWYgKGQgPT0gdHJlZVZpZXcucm9vdCkgeyByZXR1cm47IH1cclxuICAgICAgXHJcbiAgICAgIGlmICh0cmVlVmlldy5kcmFnU3RhcnRlZCkgXHJcbiAgICAgIHtcclxuICAgICAgICBkb21Ob2RlID0gdGhpcztcclxuICAgICAgICBpbml0aWF0ZURyYWcoZCwgZG9tTm9kZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGQueDAgKz0gZDMuZXZlbnQuZHk7XHJcbiAgICAgIGQueTAgKz0gZDMuZXZlbnQuZHg7XHJcbiAgICAgIGQzLnNlbGVjdCh0aGlzKS5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgZC55MCArIFwiLFwiICsgZC54MCArIFwiKVwiKTtcclxuICAgICAgdHJlZVZpZXcudXBkYXRlVGVtcENvbm5lY3RvcigpOyAgICAgIFxyXG4gICAgfVxyXG4gIFxyXG4gICAgLy8gQXBwZW5kIGEgZ3JvdXAgd2hpY2ggaG9sZHMgYWxsIG5vZGVzIGFuZCB3aGljaCB0aGUgem9vbSBMaXN0ZW5lciBjYW4gYWN0IHVwb24uXHJcbiAgICB0cmVlVmlldy5zdmdHcm91cCA9IGJhc2VTdmcuYXBwZW5kKFwiZ1wiKTtcclxuICBcclxuICAgIC8vIERlZmluZSB0aGUgcm9vdFxyXG4gICAgdHJlZVZpZXcucm9vdC54MCA9IHRyZWVWaWV3LnZpZXdlckhlaWdodCAvIDI7XHJcbiAgICB0cmVlVmlldy5yb290LnkwID0gMDtcclxuICAgIFxyXG4gICAgLy8gTGF5b3V0IHRoZSB0cmVlIGluaXRpYWxseSBhbmQgY2VudGVyIG9uIHRoZSByb290IG5vZGUuXHJcbiAgICB0cmVlVmlldy51cGRhdGUodHJlZVZpZXcucm9vdCk7XHJcbiAgICB0cmVlVmlldy5jZW50ZXJOb2RlKHRyZWVWaWV3LnJvb3QpOyAgICBcclxuICB9LFxyXG4gIGNsaWNrOiBmdW5jdGlvbihkKSAgIC8vIFRvZ2dsZSBjaGlsZHJlbiBvbiBjbGljay5cclxuICB7XHJcbiAgICBpZiAoZDMuZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkgeyByZXR1cm47IH0gLy8gY2xpY2sgc3VwcHJlc3NlZFxyXG4gICAgcHJvamVjdC50b2dnbGVFeHBhbnNpb24oZCk7XHJcbiAgICB0cmVlVmlldy51cGRhdGUoZCk7XHJcbiAgfSwgIFxyXG4gIHVwZGF0ZTogZnVuY3Rpb24oc291cmNlKSBcclxuICB7IFxyXG4gICAgdmFyIGkgPSAwO1xyXG4gICAgICAgIFxyXG4gICAgLy8gQ29tcHV0ZSB0aGUgbmV3IGhlaWdodCwgZnVuY3Rpb24gY291bnRzIHRvdGFsIGNoaWxkcmVuIG9mIHJvb3Qgbm9kZSBhbmQgc2V0cyB0cmVlIGhlaWdodCBhY2NvcmRpbmdseS5cclxuICAgIC8vIFRoaXMgcHJldmVudHMgdGhlIGxheW91dCBsb29raW5nIHNxdWFzaGVkIHdoZW4gbmV3IG5vZGVzIGFyZSBtYWRlIHZpc2libGUgb3IgbG9va2luZyBzcGFyc2Ugd2hlbiBub2RlcyBhcmUgcmVtb3ZlZFxyXG4gICAgLy8gVGhpcyBtYWtlcyB0aGUgbGF5b3V0IG1vcmUgY29uc2lzdGVudC5cclxuICAgIHZhciBsZXZlbFdpZHRoID0gWzFdO1xyXG4gICAgdmFyIGNoaWxkQ291bnQgPSBmdW5jdGlvbihsZXZlbCwgbikgXHJcbiAgICB7XHJcbiAgICAgIGlmIChuLmNoaWxkcmVuICYmIG4uY2hpbGRyZW4ubGVuZ3RoID4gMCkgXHJcbiAgICAgIHtcclxuICAgICAgICBpZiAobGV2ZWxXaWR0aC5sZW5ndGggPD0gbGV2ZWwgKyAxKSB7IGxldmVsV2lkdGgucHVzaCgwKTsgfVxyXG5cclxuICAgICAgICBsZXZlbFdpZHRoW2xldmVsICsgMV0gKz0gbi5jaGlsZHJlbi5sZW5ndGg7XHJcbiAgICAgICAgbi5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGQpIHsgY2hpbGRDb3VudChsZXZlbCArIDEsIGQpOyB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgY2hpbGRDb3VudCgwLCB0cmVlVmlldy5yb290KTtcclxuICAgIHZhciBuZXdIZWlnaHQgPSBkMy5tYXgobGV2ZWxXaWR0aCkgKiB0cmVlVmlldy52ZXJ0aWNhbF9zcGFjaW5nOyAvLyAyNSBwaXhlbHMgcGVyIGxpbmVcclxuICAgIHRyZWVWaWV3LnRyZWUgPSB0cmVlVmlldy50cmVlLnNpemUoW25ld0hlaWdodCwgdHJlZVZpZXcudmlld2VyV2lkdGhdKTtcclxuXHJcbiAgICAvLyBDb21wdXRlIHRoZSBuZXcgdHJlZSBsYXlvdXQuXHJcbiAgICB2YXIgbm9kZXMgPSB0cmVlVmlldy50cmVlLm5vZGVzKHRyZWVWaWV3LnJvb3QpLnJldmVyc2UoKTtcclxuICAgIHZhciBsaW5rcyA9IHRyZWVWaWV3LnRyZWUubGlua3Mobm9kZXMpO1xyXG5cclxuICAgIC8vIFNldCB3aWR0aHMgYmV0d2VlbiBsZXZlbHMgYmFzZWQgb24gbWF4TGFiZWxMZW5ndGguXHJcbiAgICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAvL2QueSA9IChkLmRlcHRoICogKHRyZWVWaWV3Lm1heExhYmVsTGVuZ3RoICogMTApKTsgLy9tYXhMYWJlbExlbmd0aCAqIDEwcHhcclxuICAgICAgICAvLyBhbHRlcm5hdGl2ZWx5IHRvIGtlZXAgYSBmaXhlZCBzY2FsZSBvbmUgY2FuIHNldCBhIGZpeGVkIGRlcHRoIHBlciBsZXZlbFxyXG4gICAgICAgIC8vIE5vcm1hbGl6ZSBmb3IgZml4ZWQtZGVwdGggYnkgY29tbWVudGluZyBvdXQgYmVsb3cgbGluZVxyXG4gICAgICAgIGQueSA9IChkLmRlcHRoICogdHJlZVZpZXcuaG9yaXpvbnRhbF9zcGFjaW5nKTsgLy8yMDBweCBwZXIgbGV2ZWwuXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIG5vZGVz4oCmXHJcbiAgICBub2RlID0gdHJlZVZpZXcuc3ZnR3JvdXAuc2VsZWN0QWxsKFwiZy5ub2RlXCIpLmRhdGEobm9kZXMsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuaWQgfHwgKGQuaWQgPSArK2kpOyB9KTtcclxuXHJcbiAgICAvLyBFbnRlciBhbnkgbmV3IG5vZGVzIGF0IHRoZSBwYXJlbnQncyBwcmV2aW91cyBwb3NpdGlvbi5cclxuICAgIHZhciBub2RlRW50ZXIgPSBub2RlLmVudGVyKCkuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAuY2FsbChkcmFnTGlzdGVuZXIpXHJcbiAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJub2RlXCIpXHJcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgc291cmNlLnkwICsgXCIsXCIgKyBzb3VyY2UueDAgKyBcIilcIjsgfSlcclxuICAgICAgLm9uKCdjbGljaycsIHRyZWVWaWV3LmNsaWNrKTtcclxuXHJcbiAgICBub2RlRW50ZXIuYXBwZW5kKFwiY2lyY2xlXCIpXHJcbiAgICAgIC5hdHRyKCdjbGFzcycsICdub2RlQ2lyY2xlJylcclxuICAgICAgLmF0dHIoXCJyXCIsIDApXHJcbiAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gcHJvamVjdC5pc05vZGVDb2xsYXBzZWQoZCkgPyBcImxpZ2h0c3RlZWxibHVlXCIgOiBcIiNmZmZcIjsgfSk7XHJcblxyXG4gICAgbm9kZUVudGVyLmFwcGVuZChcInRleHRcIilcclxuICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHByb2plY3QuaGFzQ2hpbGRyZW4oZCkgPyAtMTAgOiAxMDsgfSlcclxuICAgICAgLmF0dHIoXCJkeVwiLCBcIi4zNWVtXCIpXHJcbiAgICAgIC5hdHRyKCdjbGFzcycsICdub2RlVGV4dCcpXHJcbiAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gcHJvamVjdC5oYXNDaGlsZHJlbihkKSA/IFwiZW5kXCIgOiBcInN0YXJ0XCI7IH0pXHJcbiAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQubmFtZTsgfSlcclxuICAgICAgLnN0eWxlKFwiZmlsbC1vcGFjaXR5XCIsIDApO1xyXG5cclxuICAgIC8vIHBoYW50b20gbm9kZSB0byBnaXZlIHVzIG1vdXNlb3ZlciBpbiBhIHJhZGl1cyBhcm91bmQgaXRcclxuICAgIG5vZGVFbnRlci5hcHBlbmQoXCJjaXJjbGVcIilcclxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2dob3N0Q2lyY2xlJylcclxuICAgICAgLmF0dHIoXCJyXCIsIDMwKVxyXG4gICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMC4yKSAvLyBjaGFuZ2UgdGhpcyB0byB6ZXJvIHRvIGhpZGUgdGhlIHRhcmdldCBhcmVhXHJcbiAgICAgIC5zdHlsZShcImZpbGxcIiwgXCJyZWRcIilcclxuICAgICAgLmF0dHIoJ3BvaW50ZXItZXZlbnRzJywgJ21vdXNlb3ZlcicpXHJcbiAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbihub2RlKSB7IHRyZWVWaWV3Lm92ZXJDaXJjbGUobm9kZSk7IH0pXHJcbiAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKG5vZGUpIHsgdHJlZVZpZXcub3V0Q2lyY2xlKG5vZGUpOyB9KTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIHRleHQgdG8gcmVmbGVjdCB3aGV0aGVyIG5vZGUgaGFzIGNoaWxkcmVuIG9yIG5vdC5cclxuICAgIG5vZGUuc2VsZWN0KCd0ZXh0JylcclxuICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gcHJvamVjdC5oYXNDaGlsZHJlbihkKSA/IC0xMCA6IDEwOyB9KVxyXG4gICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gcHJvamVjdC5oYXNDaGlsZHJlbihkKSA/IFwiZW5kXCIgOiBcInN0YXJ0XCI7IH0pXHJcbiAgICAgICAgLnRleHQoZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5uYW1lOyB9KTtcclxuXHJcbiAgICAvLyBDaGFuZ2UgdGhlIGNpcmNsZSBmaWxsIGRlcGVuZGluZyBvbiB3aGV0aGVyIGl0IGhhcyBjaGlsZHJlbiBhbmQgaXMgY29sbGFwc2VkXHJcbiAgICBub2RlLnNlbGVjdChcImNpcmNsZS5ub2RlQ2lyY2xlXCIpXHJcbiAgICAgIC5hdHRyKFwiclwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB0cmVlVmlldy5jb21wdXRlTm9kZVNpemUoZCk7IH0pXHJcbiAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gcHJvamVjdC5pc05vZGVDb2xsYXBzZWQoZCkgPyBcImxpZ2h0c3RlZWxibHVlXCIgOiBcIiNmZmZcIjsgfSk7XHJcblxyXG4gICAgLy8gVHJhbnNpdGlvbiBub2RlcyB0byB0aGVpciBuZXcgcG9zaXRpb24uXHJcbiAgICB2YXIgbm9kZVVwZGF0ZTtcclxuICAgIGlmKHRyZWVWaWV3LmRpcmVjdGlvbiA9PT0gVkVSVElDQUxfVklFVylcclxuICAgIHtcclxuICAgICAgbm9kZVVwZGF0ZSA9IG5vZGUuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcInRyYW5zbGF0ZShcIiArIGQueCArIFwiLFwiICsgZC55ICsgXCIpXCI7IH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICBub2RlVXBkYXRlID0gbm9kZS5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgZC55ICsgXCIsXCIgKyBkLnggKyBcIilcIjsgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRmFkZSB0aGUgdGV4dCBpblxyXG4gICAgbm9kZVVwZGF0ZS5zZWxlY3QoXCJ0ZXh0XCIpLnN0eWxlKFwiZmlsbC1vcGFjaXR5XCIsIDEpO1xyXG5cclxuICAgIC8vIFRyYW5zaXRpb24gZXhpdGluZyBub2RlcyB0byB0aGUgcGFyZW50J3MgbmV3IHBvc2l0aW9uLlxyXG4gICAgdmFyIG5vZGVFeGl0ID0gbm9kZS5leGl0KClcclxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcInRyYW5zbGF0ZShcIiArIHNvdXJjZS55ICsgXCIsXCIgKyBzb3VyY2UueCArIFwiKVwiOyB9KVxyXG4gICAgICAgIC5yZW1vdmUoKTtcclxuXHJcbiAgICBub2RlRXhpdC5zZWxlY3QoXCJjaXJjbGVcIikuYXR0cihcInJcIiwgMCk7XHJcbiAgICBub2RlRXhpdC5zZWxlY3QoXCJ0ZXh0XCIpLnN0eWxlKFwiZmlsbC1vcGFjaXR5XCIsIDApO1xyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgbGlua3PigKZcclxuICAgIHZhciBsaW5rID0gdHJlZVZpZXcuc3ZnR3JvdXAuc2VsZWN0QWxsKFwicGF0aC5saW5rXCIpLmRhdGEobGlua3MsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudGFyZ2V0LmlkOyB9KTtcclxuXHJcbiAgICAvLyBFbnRlciBhbnkgbmV3IGxpbmtzIGF0IHRoZSBwYXJlbnQncyBwcmV2aW91cyBwb3NpdGlvbi5cclxuICAgIGxpbmsuZW50ZXIoKS5pbnNlcnQoXCJwYXRoXCIsIFwiZ1wiKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJsaW5rXCIpXHJcbiAgICAgICAgLmF0dHIoXCJkXCIsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgdmFyIG8gPSB7IHg6IHNvdXJjZS54MCwgeTogc291cmNlLnkwIH07XHJcbiAgICAgICAgICAgIHJldHVybiB0cmVlVmlldy5kaWFnb25hbCh7IHNvdXJjZTogbywgdGFyZ2V0OiBvIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8vIFRyYW5zaXRpb24gbGlua3MgdG8gdGhlaXIgbmV3IHBvc2l0aW9uLlxyXG4gICAgbGluay5hdHRyKFwiZFwiLCB0cmVlVmlldy5kaWFnb25hbCk7XHJcblxyXG4gICAgLy8gVHJhbnNpdGlvbiBleGl0aW5nIG5vZGVzIHRvIHRoZSBwYXJlbnQncyBuZXcgcG9zaXRpb24uXHJcbiAgICBsaW5rLmV4aXQoKVxyXG4gICAgICAgIC5hdHRyKFwiZFwiLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgIHZhciBvID0geyB4OiBzb3VyY2UueCwgeTogc291cmNlLnkgfTtcclxuICAgICAgICAgICAgcmV0dXJuIHRyZWVWaWV3LmRpYWdvbmFsKHsgc291cmNlOiBvLCB0YXJnZXQ6IG8gfSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAucmVtb3ZlKCk7XHJcblxyXG4gICAgLy8gU3Rhc2ggdGhlIG9sZCBwb3NpdGlvbnMgZm9yIHRyYW5zaXRpb24uXHJcbiAgICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKGQpIHsgZC54MCA9IGQueDsgZC55MCA9IGQueTsgfSk7XHJcbiAgfSwgIFxyXG4gIGRyYWdzdGFydDogZnVuY3Rpb24oZClcclxuICB7XHJcbiAgICBpZiAoZCA9PSB0cmVlVmlldy5yb290KSB7IHJldHVybjsgfVxyXG4gICAgdHJlZVZpZXcuZHJhZ1N0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgbm9kZXMgPSB0cmVlVmlldy50cmVlLm5vZGVzKGQpO1xyXG4gICAgZDMuZXZlbnQuc291cmNlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAvLyBpdCdzIGltcG9ydGFudCB0aGF0IHdlIHN1cHByZXNzIHRoZSBtb3VzZW92ZXIgZXZlbnQgb24gdGhlIG5vZGUgYmVpbmcgZHJhZ2dlZC4gT3RoZXJ3aXNlIGl0IHdpbGwgYWJzb3JiIHRoZSBtb3VzZW92ZXIgZXZlbnQgYW5kIHRoZSB1bmRlcmx5aW5nIG5vZGUgd2lsbCBub3QgZGV0ZWN0IGl0IGQzLnNlbGVjdCh0aGlzKS5hdHRyKCdwb2ludGVyLWV2ZW50cycsICdub25lJyk7ICAgICAgXHJcbiAgfSxcclxuICBkcmFnZW5kOiBmdW5jdGlvbihkKVxyXG4gIHtcclxuICAgIGlmIChkID09IHRyZWVWaWV3LnJvb3QpIHsgcmV0dXJuOyB9XHJcbiAgICBkb21Ob2RlID0gdGhpcztcclxuICAgIFxyXG4gICAgaWYgKHRyZWVWaWV3LnNlbGVjdGVkTm9kZSkgXHJcbiAgICB7XHJcbiAgICAgIC8vIG5vdyByZW1vdmUgdGhlIGVsZW1lbnQgZnJvbSB0aGUgcGFyZW50LCBhbmQgaW5zZXJ0IGl0IGludG8gdGhlIG5ldyBlbGVtZW50cyBjaGlsZHJlblxyXG4gICAgICBwcm9qZWN0LnJlbW92ZU5vZGUodHJlZVZpZXcuZHJhZ2dpbmdOb2RlKTtcclxuICAgICAgXHJcbiAgICAgIGlmKCF0cmVlVmlldy5zZWxlY3RlZE5vZGUuY2hpbGRyZW4pIHsgdHJlZVZpZXcuc2VsZWN0ZWROb2RlLmNoaWxkcmVuID0gW107IH1cclxuICAgICAgdHJlZVZpZXcuc2VsZWN0ZWROb2RlLmNoaWxkcmVuLnB1c2godHJlZVZpZXcuZHJhZ2dpbmdOb2RlKTtcclxuICAgICAgXHJcbiAgICAgIHByb2plY3QuZXhwYW5kTm9kZSh0cmVlVmlldy5zZWxlY3RlZE5vZGUpOyAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIG5vZGUgYmVpbmcgYWRkZWQgdG8gaXMgZXhwYW5kZWQgc28gdXNlciBjYW4gc2VlIGFkZGVkIG5vZGUgaXMgY29ycmVjdGx5IG1vdmVkICAgIFxyXG4gICAgfSBcclxuICBcclxuICAgIHRyZWVWaWV3LnNlbGVjdGVkTm9kZSA9IG51bGw7XHJcbiAgICBkMy5zZWxlY3RBbGwoJy5naG9zdENpcmNsZScpLmF0dHIoJ2NsYXNzJywgJ2dob3N0Q2lyY2xlJyk7XHJcbiAgICBkMy5zZWxlY3QoZG9tTm9kZSkuYXR0cignY2xhc3MnLCAnbm9kZScpO1xyXG4gICAgXHJcbiAgICBkMy5zZWxlY3QoZG9tTm9kZSkuc2VsZWN0KCcuZ2hvc3RDaXJjbGUnKS5hdHRyKCdwb2ludGVyLWV2ZW50cycsICcnKTsgICAvLyBub3cgcmVzdG9yZSB0aGUgbW91c2VvdmVyIGV2ZW50IG9yIHdlIHdvbid0IGJlIGFibGUgdG8gZHJhZyBhIDJuZCB0aW1lXHJcbiAgICB0cmVlVmlldy51cGRhdGVUZW1wQ29ubmVjdG9yKCk7XHJcbiAgICBcclxuICAgIGlmICh0cmVlVmlldy5kcmFnZ2luZ05vZGUgIT09IG51bGwpIFxyXG4gICAge1xyXG4gICAgICB0cmVlVmlldy51cGRhdGUodHJlZVZpZXcucm9vdCk7XHJcbiAgICAgIC8vdHJlZVZpZXcuY2VudGVyTm9kZSh0cmVlVmlldy5kcmFnZ2luZ05vZGUpO1xyXG4gICAgICB0cmVlVmlldy5kcmFnZ2luZ05vZGUgPSBudWxsO1xyXG4gICAgfSAgICAgIFxyXG4gIH0sXHJcbiAgLy8gRnVuY3Rpb24gdG8gdXBkYXRlIHRoZSB0ZW1wb3JhcnkgY29ubmVjdG9yIGluZGljYXRpbmcgZHJhZ2dpbmcgYWZmaWxpYXRpb25cclxuICB1cGRhdGVUZW1wQ29ubmVjdG9yOiBmdW5jdGlvbigpIFxyXG4gIHtcclxuICAgIHZhciBkYXRhID0gW107XHJcbiAgICBpZiAodHJlZVZpZXcuZHJhZ2dpbmdOb2RlICE9PSBudWxsICYmIHRyZWVWaWV3LnNlbGVjdGVkTm9kZSAhPT0gbnVsbCkgICAvLyBoYXZlIHRvIGZsaXAgdGhlIHNvdXJjZSBjb29yZGluYXRlcyBzaW5jZSB3ZSBkaWQgdGhpcyBmb3IgdGhlIGV4aXN0aW5nIGNvbm5lY3RvcnMgb24gdGhlIG9yaWdpbmFsIHRyZWVcclxuICAgIHtcclxuICAgICAgZGF0YSA9IFt7IHNvdXJjZTogeyB4OiB0cmVlVmlldy5zZWxlY3RlZE5vZGUueTAsIHk6IHRyZWVWaWV3LnNlbGVjdGVkTm9kZS54MCB9LCB0YXJnZXQ6IHsgeDogdHJlZVZpZXcuZHJhZ2dpbmdOb2RlLnkwLCB5OiB0cmVlVmlldy5kcmFnZ2luZ05vZGUueDAgfSB9XTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdmFyIGxpbmsgPSB0cmVlVmlldy5zdmdHcm91cC5zZWxlY3RBbGwoXCIudGVtcGxpbmtcIikuZGF0YShkYXRhKTtcclxuICAgIGxpbmsuZW50ZXIoKS5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJjbGFzc1wiLCBcInRlbXBsaW5rXCIpLmF0dHIoXCJkXCIsIGQzLnN2Zy5kaWFnb25hbCgpKS5hdHRyKCdwb2ludGVyLWV2ZW50cycsICdub25lJyk7XHJcbiAgICBsaW5rLmF0dHIoXCJkXCIsIGQzLnN2Zy5kaWFnb25hbCgpKTtcclxuICAgIGxpbmsuZXhpdCgpLnJlbW92ZSgpO1xyXG4gIH0sXHJcbiAgb3ZlckNpcmNsZTogZnVuY3Rpb24oZCkgXHJcbiAge1xyXG4gICAgdHJlZVZpZXcuc2VsZWN0ZWROb2RlID0gZDtcclxuICAgIHRyZWVWaWV3LnVwZGF0ZVRlbXBDb25uZWN0b3IoKTtcclxuICB9LFxyXG4gIG91dENpcmNsZTogZnVuY3Rpb24oZCkgXHJcbiAge1xyXG4gICAgdHJlZVZpZXcuc2VsZWN0ZWROb2RlID0gbnVsbDtcclxuICAgIHRyZWVWaWV3LnVwZGF0ZVRlbXBDb25uZWN0b3IoKTtcclxuICB9LFxyXG4gIGNlbnRlck5vZGU6IGZ1bmN0aW9uKHNvdXJjZSkgICAgIC8vIEZ1bmN0aW9uIHRvIGNlbnRlciBub2RlIHdoZW4gY2xpY2tlZC9kcm9wcGVkIHNvIG5vZGUgZG9lc24ndCBnZXQgbG9zdCB3aGVuIGNvbGxhcHNpbmcvbW92aW5nIHdpdGggbGFyZ2UgYW1vdW50IG9mIGNoaWxkcmVuLlxyXG4gIHtcclxuICAgIHNjYWxlID0gdHJlZVZpZXcuem9vbUxpc3RlbmVyLnNjYWxlKCk7XHJcbiAgICB4ID0gLXNvdXJjZS55MDtcclxuICAgIHkgPSAtc291cmNlLngwO1xyXG4gICAgeCA9IHggKiBzY2FsZSArIHRyZWVWaWV3LnZpZXdlcldpZHRoIC8gNDtcclxuICAgIHkgPSB5ICogc2NhbGUgKyB0cmVlVmlldy52aWV3ZXJIZWlnaHQgLyAyO1xyXG4gICAgZDMuc2VsZWN0KCdnJykuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIHggKyBcIixcIiArIHkgKyBcIilzY2FsZShcIiArIHNjYWxlICsgXCIpXCIpO1xyXG4gICAgdHJlZVZpZXcuem9vbUxpc3RlbmVyLnNjYWxlKHNjYWxlKTtcclxuICAgIHRyZWVWaWV3Lnpvb21MaXN0ZW5lci50cmFuc2xhdGUoW3gsIHldKTtcclxuICB9LCAgICAgICAgICBcclxuICBjb21wdXRlTm9kZVNpemU6IGZ1bmN0aW9uKG5vZGUpXHJcbiAge1xyXG4gICAgdmFyIG5vZGVTaXplID0gTUlOX05PREVfU0laRTtcclxuICAgIFxyXG4gICAgLyppZih0cmVlLmZpZWxkKVxyXG4gICAge1xyXG4gICAgICBpZihub2RlLnZhbHVlcyAmJiBub2RlLnZhbHVlc1t0cmVlLmZpZWxkLm5hbWVdKVxyXG4gICAgICB7XHJcbiAgICAgICAgLy9ub2RlU2l6ZSA9IDIgKiBNYXRoLlBJICogTWF0aC5zcXJ0KE1BWF9OT0RFX1NJWkUgKiBub2RlLnZhbHVlc1t0cmVlLmZpZWxkLm5hbWVdIC8gdHJlZS5tYXhGaWVsZFZhbHVlIC8gTWF0aC5QSSk7XHJcbiAgICAgICAgbm9kZVNpemUgPSBNQVhfTk9ERV9TSVpFICogTWF0aC5zcXJ0KG5vZGUudmFsdWVzW3RyZWUuZmllbGQubmFtZV0gLyB0cmVlLm1heEZpZWxkVmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZihub2RlU2l6ZSA8IE1JTl9OT0RFX1NJWkUpIHsgbm9kZVNpemUgPSBNSU5fTk9ERV9TSVpFOyB9XHJcbiAgICB9Ki9cclxuICAgIFxyXG4gICAgcmV0dXJuIG5vZGVTaXplOyAgICAgICBcclxuICB9ICAgXHJcbn07IiwidmFyIE1JTl9OT0RFX1NJWkUgPSA1O1xyXG52YXIgTUFYX05PREVfU0laRSA9IDEwMDtcclxuXHJcbnZhciBWRVJUSUNBTF9WSUVXID0gMDtcclxudmFyIEhPUklaT05UQUxfVklFVyA9IDE7XHJcblxyXG52YXIgd2VpZ2h0ZWRUcmVlVmlldyA9IFxyXG57XHJcbiAgZGVzdHJveTogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgICQoJyN0cmVlVmlldycpLnJlbW92ZSgpO1xyXG4gIH0sXHJcbiAgcmVmcmVzaDogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgIHdlaWdodGVkVHJlZVZpZXcudXBkYXRlKHdlaWdodGVkVHJlZVZpZXcucm9vdCk7XHJcbiAgfSxcclxuICByb3RhdGU6IGZ1bmN0aW9uKClcclxuICB7XHJcbiAgICBpZih3ZWlnaHRlZFRyZWVWaWV3LmRpcmVjdGlvbiA9PT0gSE9SSVpPTlRBTF9WSUVXKVxyXG4gICAge1xyXG4gICAgICB3ZWlnaHRlZFRyZWVWaWV3LmRpcmVjdGlvbiA9IFZFUlRJQ0FMX1ZJRVc7XHJcbiAgICAgIHdlaWdodGVkVHJlZVZpZXcuaG9yaXpvbnRhbF9zcGFjaW5nID0gMTAwO1xyXG4gICAgICB3ZWlnaHRlZFRyZWVWaWV3LnZlcnRpY2FsX3NwYWNpbmcgPSA2MDtcclxuICAgICAgd2VpZ2h0ZWRUcmVlVmlldy5kaWFnb25hbCA9IGQzLnN2Zy5kaWFnb25hbCgpLnByb2plY3Rpb24oZnVuY3Rpb24oZCkgeyByZXR1cm4gW2QueCwgZC55XTsgfSk7ICAvLyBkZWZpbmUgYSBkMyBkaWFnb25hbCBwcm9qZWN0aW9uIGZvciB1c2UgYnkgdGhlIG5vZGUgcGF0aHMgbGF0ZXIgb24uXHJcbiAgICAgIFxyXG4gICAgICB3ZWlnaHRlZFRyZWVWaWV3LnJvb3QueTAgPSB3ZWlnaHRlZFRyZWVWaWV3LnZpZXdlckhlaWdodCAvIDI7XHJcbiAgICAgIHdlaWdodGVkVHJlZVZpZXcucm9vdC54MCA9IDA7ICAgICAgXHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICB7XHJcbiAgICAgIHdlaWdodGVkVHJlZVZpZXcuZGlyZWN0aW9uID0gSE9SSVpPTlRBTF9WSUVXO1xyXG4gICAgICB3ZWlnaHRlZFRyZWVWaWV3Lmhvcml6b250YWxfc3BhY2luZyA9IDMwMDtcclxuICAgICAgd2VpZ2h0ZWRUcmVlVmlldy52ZXJ0aWNhbF9zcGFjaW5nID0gMjAwO1xyXG4gICAgICB3ZWlnaHRlZFRyZWVWaWV3LmRpYWdvbmFsID0gZDMuc3ZnLmRpYWdvbmFsKCkucHJvamVjdGlvbihmdW5jdGlvbihkKSB7IHJldHVybiBbZC55LCBkLnhdOyB9KTsgIC8vIGRlZmluZSBhIGQzIGRpYWdvbmFsIHByb2plY3Rpb24gZm9yIHVzZSBieSB0aGUgbm9kZSBwYXRocyBsYXRlciBvbi5cclxuICAgICAgXHJcbiAgICAgIHdlaWdodGVkVHJlZVZpZXcucm9vdC54MCA9IHdlaWdodGVkVHJlZVZpZXcudmlld2VySGVpZ2h0IC8gMjtcclxuICAgICAgd2VpZ2h0ZWRUcmVlVmlldy5yb290LnkwID0gMDsgICAgXHJcbiAgICB9XHJcbiAgICBcclxuICAgIHdlaWdodGVkVHJlZVZpZXcudXBkYXRlKHdlaWdodGVkVHJlZVZpZXcucm9vdCk7XHJcbiAgfSxcclxuICBpbml0OiBmdW5jdGlvbigpXHJcbiAge1xyXG4gICAgd2VpZ2h0ZWRUcmVlVmlldy5kaXJlY3Rpb24gPSBIT1JJWk9OVEFMX1ZJRVc7XHJcbiAgICB3ZWlnaHRlZFRyZWVWaWV3LnNlbGVjdGVkTm9kZSA9IG51bGw7XHJcbiAgICB3ZWlnaHRlZFRyZWVWaWV3LmRyYWdnaW5nTm9kZSA9IG51bGw7XHJcbiAgICB3ZWlnaHRlZFRyZWVWaWV3LmR1cmF0aW9uID0gNzUwO1xyXG4gICAgd2VpZ2h0ZWRUcmVlVmlldy5ob3Jpem9udGFsX3NwYWNpbmcgPSAzMDA7XHJcbiAgICB3ZWlnaHRlZFRyZWVWaWV3LnZlcnRpY2FsX3NwYWNpbmcgPSAyMDA7ICAgIFxyXG4gICAgXHJcbiAgICB3ZWlnaHRlZFRyZWVWaWV3Lm1heExhYmVsTGVuZ3RoID0gMDtcclxuICAgIFxyXG4gICAgcHJvamVjdC50cmF2ZXJzZShwcm9qZWN0LmdldENoaWxkcmVuLCBmdW5jdGlvbihkKVxyXG4gICAge1xyXG4gICAgICB3ZWlnaHRlZFRyZWVWaWV3Lm1heExhYmVsTGVuZ3RoID0gTWF0aC5tYXgoZC5uYW1lLmxlbmd0aCwgd2VpZ2h0ZWRUcmVlVmlldy5tYXhMYWJlbExlbmd0aCk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgd2VpZ2h0ZWRUcmVlVmlldy52aWV3ZXJXaWR0aCA9ICQoJyN0cmVlLWNvbnRhaW5lcicpLndpZHRoKCk7XHJcbiAgICB3ZWlnaHRlZFRyZWVWaWV3LnZpZXdlckhlaWdodCA9ICQoJyN0cmVlLWNvbnRhaW5lcicpLmhlaWdodCgpO1xyXG4gICAgXHJcbiAgICB3ZWlnaHRlZFRyZWVWaWV3LnRyZWUgPSBkMy5sYXlvdXQudHJlZSgpLnNpemUoW3dlaWdodGVkVHJlZVZpZXcudmlld2VySGVpZ2h0LCB3ZWlnaHRlZFRyZWVWaWV3LnZpZXdlcldpZHRoXSk7XHJcbiAgICB3ZWlnaHRlZFRyZWVWaWV3LnJvb3QgPSBwcm9qZWN0LnRyZWU7XHJcbiAgICBcclxuICAgIHdlaWdodGVkVHJlZVZpZXcuZHJhZ1N0YXJ0ZWQgPSBudWxsO1xyXG4gICAgd2VpZ2h0ZWRUcmVlVmlldy5kaWFnb25hbCA9IGQzLnN2Zy5kaWFnb25hbCgpLnByb2plY3Rpb24oZnVuY3Rpb24oZCkgeyByZXR1cm4gW2QueSwgZC54XTsgfSk7ICAvLyBkZWZpbmUgYSBkMyBkaWFnb25hbCBwcm9qZWN0aW9uIGZvciB1c2UgYnkgdGhlIG5vZGUgcGF0aHMgbGF0ZXIgb24uICAgICAgICAgICAgICAgIFxyXG4gIH0sICBcclxuICByZW5kZXI6IGZ1bmN0aW9uKClcclxuICB7XHJcbiAgICB3ZWlnaHRlZFRyZWVWaWV3LmRlc3Ryb3koKTtcclxuICAgICQoJ2JvZHknKS5hcHBlbmQoJzxkaXYgaWQ9XCJ0cmVlVmlld1wiPjxkaXYgaWQ9XCJ0cmVlVmlld09wdGlvbnNcIj48ZGl2IGlkPVwiZXhwYW5kZXJDb250YWluZXJcIj48L2Rpdj48L2Rpdj48ZGl2IGlkPVwidHJlZS1jb250YWluZXJcIj48L2Rpdj48L2Rpdj4nKTtcclxuIFxyXG4gICAgZXhwYW5kZXJTZWxlY3Rvci5pbml0KHByb2plY3QudHJlZS5tYXhEZXB0aCk7XHJcbiAgICAkKCcjdHJlZVZpZXdPcHRpb25zJykuYXBwZW5kKCc8YSBocmVmPVwiI1wiIGlkPVwidHJlZVZpZXdSb3RhdGVCdXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdCBwdWxsLXJpZ2h0XCI+Um90YXRlIFZpZXc8L2E+Jyk7XHJcbiAgICAkKCcjdHJlZVZpZXdSb3RhdGVCdXR0b24nKS5jbGljayhmdW5jdGlvbigpIHsgd2VpZ2h0ZWRUcmVlVmlldy5yb3RhdGUoKTsgfSk7ICBcclxuIFxyXG4gICAgd2VpZ2h0ZWRUcmVlVmlldy5pbml0KCk7XHJcblxyXG4gICAgZnVuY3Rpb24gem9vbSgpIHsgd2VpZ2h0ZWRUcmVlVmlldy5zdmdHcm91cC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgZDMuZXZlbnQudHJhbnNsYXRlICsgXCIpc2NhbGUoXCIgKyBkMy5ldmVudC5zY2FsZSArIFwiKVwiKTsgfSAgIC8vIERlZmluZSB0aGUgem9vbSBmdW5jdGlvbiBmb3IgdGhlIHpvb21hYmxlIHRyZWVcclxuICBcclxuICAgIHdlaWdodGVkVHJlZVZpZXcuem9vbUxpc3RlbmVyID0gZDMuYmVoYXZpb3Iuem9vbSgpLnNjYWxlRXh0ZW50KFswLjEsIDNdKS5vbihcInpvb21cIiwgem9vbSk7ICAgICAvLyBkZWZpbmUgdGhlIHdlaWdodGVkVHJlZVZpZXcuem9vbUxpc3RlbmVyIHdoaWNoIGNhbGxzIHRoZSB6b29tIGZ1bmN0aW9uIG9uIHRoZSBcInpvb21cIiBldmVudCBjb25zdHJhaW5lZCB3aXRoaW4gdGhlIHNjYWxlRXh0ZW50c1xyXG4gIFxyXG4gICAgZnVuY3Rpb24gaW5pdGlhdGVEcmFnKGQsIGRvbU5vZGUpIFxyXG4gICAge1xyXG4gICAgICB3ZWlnaHRlZFRyZWVWaWV3LmRyYWdnaW5nTm9kZSA9IGQ7XHJcbiAgICAgIGQzLnNlbGVjdChkb21Ob2RlKS5zZWxlY3QoJy5naG9zdENpcmNsZScpLmF0dHIoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKTtcclxuICAgICAgZDMuc2VsZWN0QWxsKCcuZ2hvc3RDaXJjbGUnKS5hdHRyKCdjbGFzcycsICdnaG9zdENpcmNsZSBzaG93Jyk7XHJcbiAgICAgIGQzLnNlbGVjdChkb21Ob2RlKS5hdHRyKCdjbGFzcycsICdub2RlIGFjdGl2ZURyYWcnKTtcclxuXHJcbiAgICAgIHdlaWdodGVkVHJlZVZpZXcuc3ZnR3JvdXAuc2VsZWN0QWxsKFwiZy5ub2RlXCIpLnNvcnQoZnVuY3Rpb24oYSwgYikgICAgLy8gc2VsZWN0IHRoZSBwYXJlbnQgYW5kIHNvcnQgdGhlIHBhdGgnc1xyXG4gICAgICB7IFxyXG4gICAgICAgIGlmIChhLmlkICE9IHdlaWdodGVkVHJlZVZpZXcuZHJhZ2dpbmdOb2RlLmlkKSByZXR1cm4gMTsgICAgICAgICAgLy8gYSBpcyBub3QgdGhlIGhvdmVyZWQgZWxlbWVudCwgc2VuZCBcImFcIiB0byB0aGUgYmFja1xyXG4gICAgICAgIGVsc2UgcmV0dXJuIC0xOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgaXMgdGhlIGhvdmVyZWQgZWxlbWVudCwgYnJpbmcgXCJhXCIgdG8gdGhlIGZyb250XHJcbiAgICAgIH0pO1xyXG4gICAgICAvLyBpZiBub2RlcyBoYXMgY2hpbGRyZW4sIHJlbW92ZSB0aGUgbGlua3MgYW5kIG5vZGVzXHJcbiAgICAgIGlmIChub2Rlcy5sZW5ndGggPiAxKSBcclxuICAgICAge1xyXG4gICAgICAgIC8vIHJlbW92ZSBsaW5rIHBhdGhzXHJcbiAgICAgICAgbGlua3MgPSB3ZWlnaHRlZFRyZWVWaWV3LnRyZWUubGlua3Mobm9kZXMpO1xyXG4gICAgICAgIG5vZGVQYXRocyA9IHdlaWdodGVkVHJlZVZpZXcuc3ZnR3JvdXAuc2VsZWN0QWxsKFwicGF0aC5saW5rXCIpLmRhdGEobGlua3MsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudGFyZ2V0LmlkOyB9KS5yZW1vdmUoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyByZW1vdmUgY2hpbGQgbm9kZXNcclxuICAgICAgICBub2Rlc0V4aXQgPSB3ZWlnaHRlZFRyZWVWaWV3LnN2Z0dyb3VwLnNlbGVjdEFsbChcImcubm9kZVwiKS5kYXRhKG5vZGVzLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLmlkOyB9KS5maWx0ZXIoZnVuY3Rpb24oZCwgaSkgeyByZXR1cm4gZC5pZCAhPSB3ZWlnaHRlZFRyZWVWaWV3LmRyYWdnaW5nTm9kZS5pZDsgfSkucmVtb3ZlKCk7XHJcbiAgICAgIH1cclxuICBcclxuICAgICAgLy8gcmVtb3ZlIHBhcmVudCBsaW5rXHJcbiAgICAgIHBhcmVudExpbmsgPSB3ZWlnaHRlZFRyZWVWaWV3LnRyZWUubGlua3Mod2VpZ2h0ZWRUcmVlVmlldy50cmVlLm5vZGVzKHdlaWdodGVkVHJlZVZpZXcuZHJhZ2dpbmdOb2RlLnBhcmVudCkpO1xyXG4gICAgICB3ZWlnaHRlZFRyZWVWaWV3LnN2Z0dyb3VwLnNlbGVjdEFsbCgncGF0aC5saW5rJykuZmlsdGVyKGZ1bmN0aW9uKGQsIGkpIHsgcmV0dXJuIGQudGFyZ2V0LmlkID09IHdlaWdodGVkVHJlZVZpZXcuZHJhZ2dpbmdOb2RlLmlkOyB9KS5yZW1vdmUoKTtcclxuXHJcbiAgICAgIHdlaWdodGVkVHJlZVZpZXcuZHJhZ1N0YXJ0ZWQgPSBudWxsO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgLy8gZGVmaW5lIHRoZSBiYXNlU3ZnLCBhdHRhY2hpbmcgYSBjbGFzcyBmb3Igc3R5bGluZyBhbmQgdGhlIHdlaWdodGVkVHJlZVZpZXcuem9vbUxpc3RlbmVyXHJcbiAgICB2YXIgYmFzZVN2ZyA9IGQzLnNlbGVjdChcIiN0cmVlLWNvbnRhaW5lclwiKS5hcHBlbmQoXCJzdmdcIilcclxuICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3ZWlnaHRlZFRyZWVWaWV3LnZpZXdlcldpZHRoKVxyXG4gICAgICAuYXR0cihcImhlaWdodFwiLCB3ZWlnaHRlZFRyZWVWaWV3LnZpZXdlckhlaWdodClcclxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcIm92ZXJsYXlcIilcclxuICAgICAgLmNhbGwod2VpZ2h0ZWRUcmVlVmlldy56b29tTGlzdGVuZXIpO1xyXG4gIFxyXG4gICAgZHJhZ0xpc3RlbmVyID0gZDMuYmVoYXZpb3IuZHJhZygpLm9uKFwiZHJhZ3N0YXJ0XCIsIHdlaWdodGVkVHJlZVZpZXcuZHJhZ3N0YXJ0KS5vbihcImRyYWdcIiwgZHJhZykub24oXCJkcmFnZW5kXCIsIHdlaWdodGVkVHJlZVZpZXcuZHJhZ2VuZCk7ICAvLyBEZWZpbmUgdGhlIGRyYWcgbGlzdGVuZXJzIGZvciBkcmFnL2Ryb3AgYmVoYXZpb3VyIG9mIG5vZGVzLlxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBkcmFnKGQpXHJcbiAgICB7XHJcbiAgICAgIGlmIChkID09IHdlaWdodGVkVHJlZVZpZXcucm9vdCkgeyByZXR1cm47IH1cclxuICAgICAgXHJcbiAgICAgIGlmICh3ZWlnaHRlZFRyZWVWaWV3LmRyYWdTdGFydGVkKSBcclxuICAgICAge1xyXG4gICAgICAgIGRvbU5vZGUgPSB0aGlzO1xyXG4gICAgICAgIGluaXRpYXRlRHJhZyhkLCBkb21Ob2RlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZC54MCArPSBkMy5ldmVudC5keTtcclxuICAgICAgZC55MCArPSBkMy5ldmVudC5keDtcclxuICAgICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBkLnkwICsgXCIsXCIgKyBkLngwICsgXCIpXCIpO1xyXG4gICAgICB3ZWlnaHRlZFRyZWVWaWV3LnVwZGF0ZVRlbXBDb25uZWN0b3IoKTsgICAgICBcclxuICAgIH1cclxuICBcclxuICAgIC8vIEFwcGVuZCBhIGdyb3VwIHdoaWNoIGhvbGRzIGFsbCBub2RlcyBhbmQgd2hpY2ggdGhlIHpvb20gTGlzdGVuZXIgY2FuIGFjdCB1cG9uLlxyXG4gICAgd2VpZ2h0ZWRUcmVlVmlldy5zdmdHcm91cCA9IGJhc2VTdmcuYXBwZW5kKFwiZ1wiKTtcclxuICBcclxuICAgIC8vIERlZmluZSB0aGUgcm9vdFxyXG4gICAgd2VpZ2h0ZWRUcmVlVmlldy5yb290LngwID0gd2VpZ2h0ZWRUcmVlVmlldy52aWV3ZXJIZWlnaHQgLyAyO1xyXG4gICAgd2VpZ2h0ZWRUcmVlVmlldy5yb290LnkwID0gMDtcclxuICAgIFxyXG4gICAgLy8gTGF5b3V0IHRoZSB0cmVlIGluaXRpYWxseSBhbmQgY2VudGVyIG9uIHRoZSByb290IG5vZGUuXHJcbiAgICB3ZWlnaHRlZFRyZWVWaWV3LnVwZGF0ZSh3ZWlnaHRlZFRyZWVWaWV3LnJvb3QpO1xyXG4gICAgd2VpZ2h0ZWRUcmVlVmlldy5jZW50ZXJOb2RlKHdlaWdodGVkVHJlZVZpZXcucm9vdCk7ICAgIFxyXG4gIH0sXHJcbiAgY2xpY2s6IGZ1bmN0aW9uKGQpICAgLy8gVG9nZ2xlIGNoaWxkcmVuIG9uIGNsaWNrLlxyXG4gIHtcclxuICAgIGlmIChkMy5ldmVudC5kZWZhdWx0UHJldmVudGVkKSB7IHJldHVybjsgfSAvLyBjbGljayBzdXBwcmVzc2VkXHJcbiAgICBwcm9qZWN0LnRvZ2dsZUV4cGFuc2lvbihkKTtcclxuICAgIHdlaWdodGVkVHJlZVZpZXcudXBkYXRlKGQpO1xyXG4gIH0sICBcclxuICB1cGRhdGU6IGZ1bmN0aW9uKHNvdXJjZSkgXHJcbiAgeyBcclxuICAgIHZhciBpID0gMDtcclxuICAgICAgICBcclxuICAgIC8vIENvbXB1dGUgdGhlIG5ldyBoZWlnaHQsIGZ1bmN0aW9uIGNvdW50cyB0b3RhbCBjaGlsZHJlbiBvZiByb290IG5vZGUgYW5kIHNldHMgdHJlZSBoZWlnaHQgYWNjb3JkaW5nbHkuXHJcbiAgICAvLyBUaGlzIHByZXZlbnRzIHRoZSBsYXlvdXQgbG9va2luZyBzcXVhc2hlZCB3aGVuIG5ldyBub2RlcyBhcmUgbWFkZSB2aXNpYmxlIG9yIGxvb2tpbmcgc3BhcnNlIHdoZW4gbm9kZXMgYXJlIHJlbW92ZWRcclxuICAgIC8vIFRoaXMgbWFrZXMgdGhlIGxheW91dCBtb3JlIGNvbnNpc3RlbnQuXHJcbiAgICB2YXIgbGV2ZWxXaWR0aCA9IFsxXTtcclxuICAgIHZhciBjaGlsZENvdW50ID0gZnVuY3Rpb24obGV2ZWwsIG4pIFxyXG4gICAge1xyXG4gICAgICBpZiAobi5jaGlsZHJlbiAmJiBuLmNoaWxkcmVuLmxlbmd0aCA+IDApIFxyXG4gICAgICB7XHJcbiAgICAgICAgaWYgKGxldmVsV2lkdGgubGVuZ3RoIDw9IGxldmVsICsgMSkgeyBsZXZlbFdpZHRoLnB1c2goMCk7IH1cclxuXHJcbiAgICAgICAgbGV2ZWxXaWR0aFtsZXZlbCArIDFdICs9IG4uY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICAgIG4uY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihkKSB7IGNoaWxkQ291bnQobGV2ZWwgKyAxLCBkKTsgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBcclxuICAgIGNoaWxkQ291bnQoMCwgd2VpZ2h0ZWRUcmVlVmlldy5yb290KTtcclxuICAgIHZhciBuZXdIZWlnaHQgPSBkMy5tYXgobGV2ZWxXaWR0aCkgKiB3ZWlnaHRlZFRyZWVWaWV3LnZlcnRpY2FsX3NwYWNpbmc7IC8vIDI1IHBpeGVscyBwZXIgbGluZVxyXG4gICAgd2VpZ2h0ZWRUcmVlVmlldy50cmVlID0gd2VpZ2h0ZWRUcmVlVmlldy50cmVlLnNpemUoW25ld0hlaWdodCwgd2VpZ2h0ZWRUcmVlVmlldy52aWV3ZXJXaWR0aF0pO1xyXG5cclxuICAgIC8vIENvbXB1dGUgdGhlIG5ldyB0cmVlIGxheW91dC5cclxuICAgIHZhciBub2RlcyA9IHdlaWdodGVkVHJlZVZpZXcudHJlZS5ub2Rlcyh3ZWlnaHRlZFRyZWVWaWV3LnJvb3QpLnJldmVyc2UoKTtcclxuICAgIHZhciBsaW5rcyA9IHdlaWdodGVkVHJlZVZpZXcudHJlZS5saW5rcyhub2Rlcyk7XHJcblxyXG4gICAgLy8gU2V0IHdpZHRocyBiZXR3ZWVuIGxldmVscyBiYXNlZCBvbiBtYXhMYWJlbExlbmd0aC5cclxuICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24oZCkge1xyXG4gICAgICAgIC8vZC55ID0gKGQuZGVwdGggKiAod2VpZ2h0ZWRUcmVlVmlldy5tYXhMYWJlbExlbmd0aCAqIDEwKSk7IC8vbWF4TGFiZWxMZW5ndGggKiAxMHB4XHJcbiAgICAgICAgLy8gYWx0ZXJuYXRpdmVseSB0byBrZWVwIGEgZml4ZWQgc2NhbGUgb25lIGNhbiBzZXQgYSBmaXhlZCBkZXB0aCBwZXIgbGV2ZWxcclxuICAgICAgICAvLyBOb3JtYWxpemUgZm9yIGZpeGVkLWRlcHRoIGJ5IGNvbW1lbnRpbmcgb3V0IGJlbG93IGxpbmVcclxuICAgICAgICBkLnkgPSAoZC5kZXB0aCAqIHdlaWdodGVkVHJlZVZpZXcuaG9yaXpvbnRhbF9zcGFjaW5nKTsgLy8yMDBweCBwZXIgbGV2ZWwuXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIG5vZGVz4oCmXHJcbiAgICBub2RlID0gd2VpZ2h0ZWRUcmVlVmlldy5zdmdHcm91cC5zZWxlY3RBbGwoXCJnLm5vZGVcIikuZGF0YShub2RlcywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5pZCB8fCAoZC5pZCA9ICsraSk7IH0pO1xyXG5cclxuICAgIC8vIEVudGVyIGFueSBuZXcgbm9kZXMgYXQgdGhlIHBhcmVudCdzIHByZXZpb3VzIHBvc2l0aW9uLlxyXG4gICAgdmFyIG5vZGVFbnRlciA9IG5vZGUuZW50ZXIoKS5hcHBlbmQoXCJnXCIpXHJcbiAgICAgIC5jYWxsKGRyYWdMaXN0ZW5lcilcclxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcIm5vZGVcIilcclxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBzb3VyY2UueTAgKyBcIixcIiArIHNvdXJjZS54MCArIFwiKVwiOyB9KVxyXG4gICAgICAub24oJ2NsaWNrJywgd2VpZ2h0ZWRUcmVlVmlldy5jbGljayk7XHJcblxyXG4gICAgbm9kZUVudGVyLmFwcGVuZChcImNpcmNsZVwiKVxyXG4gICAgICAuYXR0cignY2xhc3MnLCAnbm9kZUNpcmNsZScpXHJcbiAgICAgIC5hdHRyKFwiclwiLCAwKVxyXG4gICAgICAuc3R5bGUoXCJmaWxsXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHByb2plY3QuaXNOb2RlQ29sbGFwc2VkKGQpID8gXCJsaWdodHN0ZWVsYmx1ZVwiIDogXCIjZmZmXCI7IH0pO1xyXG5cclxuICAgIG5vZGVFbnRlci5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBwcm9qZWN0Lmhhc0NoaWxkcmVuKGQpID8gLTEwIDogMTA7IH0pXHJcbiAgICAgIC5hdHRyKFwiZHlcIiwgXCIuMzVlbVwiKVxyXG4gICAgICAuYXR0cignY2xhc3MnLCAnbm9kZVRleHQnKVxyXG4gICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHByb2plY3QuaGFzQ2hpbGRyZW4oZCkgPyBcImVuZFwiIDogXCJzdGFydFwiOyB9KVxyXG4gICAgICAudGV4dChmdW5jdGlvbihkKSB7IHJldHVybiBkLm5hbWU7IH0pXHJcbiAgICAgIC5zdHlsZShcImZpbGwtb3BhY2l0eVwiLCAwKTtcclxuXHJcbiAgICAvLyBwaGFudG9tIG5vZGUgdG8gZ2l2ZSB1cyBtb3VzZW92ZXIgaW4gYSByYWRpdXMgYXJvdW5kIGl0XHJcbiAgICBub2RlRW50ZXIuYXBwZW5kKFwiY2lyY2xlXCIpXHJcbiAgICAgIC5hdHRyKCdjbGFzcycsICdnaG9zdENpcmNsZScpXHJcbiAgICAgIC5hdHRyKFwiclwiLCAzMClcclxuICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIDAuMikgLy8gY2hhbmdlIHRoaXMgdG8gemVybyB0byBoaWRlIHRoZSB0YXJnZXQgYXJlYVxyXG4gICAgICAuc3R5bGUoXCJmaWxsXCIsIFwicmVkXCIpXHJcbiAgICAgIC5hdHRyKCdwb2ludGVyLWV2ZW50cycsICdtb3VzZW92ZXInKVxyXG4gICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24obm9kZSkgeyB3ZWlnaHRlZFRyZWVWaWV3Lm92ZXJDaXJjbGUobm9kZSk7IH0pXHJcbiAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKG5vZGUpIHsgd2VpZ2h0ZWRUcmVlVmlldy5vdXRDaXJjbGUobm9kZSk7IH0pO1xyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgdGV4dCB0byByZWZsZWN0IHdoZXRoZXIgbm9kZSBoYXMgY2hpbGRyZW4gb3Igbm90LlxyXG4gICAgbm9kZS5zZWxlY3QoJ3RleHQnKVxyXG4gICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBwcm9qZWN0Lmhhc0NoaWxkcmVuKGQpID8gLTEwIDogMTA7IH0pXHJcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBwcm9qZWN0Lmhhc0NoaWxkcmVuKGQpID8gXCJlbmRcIiA6IFwic3RhcnRcIjsgfSlcclxuICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7IHJldHVybiBkLm5hbWU7IH0pO1xyXG5cclxuICAgIC8vIENoYW5nZSB0aGUgY2lyY2xlIGZpbGwgZGVwZW5kaW5nIG9uIHdoZXRoZXIgaXQgaGFzIGNoaWxkcmVuIGFuZCBpcyBjb2xsYXBzZWRcclxuICAgIG5vZGUuc2VsZWN0KFwiY2lyY2xlLm5vZGVDaXJjbGVcIilcclxuICAgICAgLmF0dHIoXCJyXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHdlaWdodGVkVHJlZVZpZXcuY29tcHV0ZU5vZGVTaXplKGQpOyB9KVxyXG4gICAgICAuc3R5bGUoXCJmaWxsXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHByb2plY3QuaXNOb2RlQ29sbGFwc2VkKGQpID8gXCJsaWdodHN0ZWVsYmx1ZVwiIDogXCIjZmZmXCI7IH0pO1xyXG5cclxuICAgIC8vIFRyYW5zaXRpb24gbm9kZXMgdG8gdGhlaXIgbmV3IHBvc2l0aW9uLlxyXG4gICAgdmFyIG5vZGVVcGRhdGU7XHJcbiAgICBpZih3ZWlnaHRlZFRyZWVWaWV3LmRpcmVjdGlvbiA9PT0gVkVSVElDQUxfVklFVylcclxuICAgIHtcclxuICAgICAgbm9kZVVwZGF0ZSA9IG5vZGUuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcInRyYW5zbGF0ZShcIiArIGQueCArIFwiLFwiICsgZC55ICsgXCIpXCI7IH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICBub2RlVXBkYXRlID0gbm9kZS5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgZC55ICsgXCIsXCIgKyBkLnggKyBcIilcIjsgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRmFkZSB0aGUgdGV4dCBpblxyXG4gICAgbm9kZVVwZGF0ZS5zZWxlY3QoXCJ0ZXh0XCIpLnN0eWxlKFwiZmlsbC1vcGFjaXR5XCIsIDEpO1xyXG5cclxuICAgIC8vIFRyYW5zaXRpb24gZXhpdGluZyBub2RlcyB0byB0aGUgcGFyZW50J3MgbmV3IHBvc2l0aW9uLlxyXG4gICAgdmFyIG5vZGVFeGl0ID0gbm9kZS5leGl0KClcclxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcInRyYW5zbGF0ZShcIiArIHNvdXJjZS55ICsgXCIsXCIgKyBzb3VyY2UueCArIFwiKVwiOyB9KVxyXG4gICAgICAgIC5yZW1vdmUoKTtcclxuXHJcbiAgICBub2RlRXhpdC5zZWxlY3QoXCJjaXJjbGVcIikuYXR0cihcInJcIiwgMCk7XHJcbiAgICBub2RlRXhpdC5zZWxlY3QoXCJ0ZXh0XCIpLnN0eWxlKFwiZmlsbC1vcGFjaXR5XCIsIDApO1xyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgbGlua3PigKZcclxuICAgIHZhciBsaW5rID0gd2VpZ2h0ZWRUcmVlVmlldy5zdmdHcm91cC5zZWxlY3RBbGwoXCJwYXRoLmxpbmtcIikuZGF0YShsaW5rcywgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50YXJnZXQuaWQ7IH0pO1xyXG5cclxuICAgIC8vIEVudGVyIGFueSBuZXcgbGlua3MgYXQgdGhlIHBhcmVudCdzIHByZXZpb3VzIHBvc2l0aW9uLlxyXG4gICAgbGluay5lbnRlcigpLmluc2VydChcInBhdGhcIiwgXCJnXCIpXHJcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImxpbmtcIilcclxuICAgICAgICAuYXR0cihcImRcIiwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICB2YXIgbyA9IHsgeDogc291cmNlLngwLCB5OiBzb3VyY2UueTAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIHdlaWdodGVkVHJlZVZpZXcuZGlhZ29uYWwoeyBzb3VyY2U6IG8sIHRhcmdldDogbyB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAvLyBUcmFuc2l0aW9uIGxpbmtzIHRvIHRoZWlyIG5ldyBwb3NpdGlvbi5cclxuICAgIGxpbmsuYXR0cihcImRcIiwgd2VpZ2h0ZWRUcmVlVmlldy5kaWFnb25hbCk7XHJcblxyXG4gICAgLy8gVHJhbnNpdGlvbiBleGl0aW5nIG5vZGVzIHRvIHRoZSBwYXJlbnQncyBuZXcgcG9zaXRpb24uXHJcbiAgICBsaW5rLmV4aXQoKVxyXG4gICAgICAgIC5hdHRyKFwiZFwiLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgIHZhciBvID0geyB4OiBzb3VyY2UueCwgeTogc291cmNlLnkgfTtcclxuICAgICAgICAgICAgcmV0dXJuIHdlaWdodGVkVHJlZVZpZXcuZGlhZ29uYWwoeyBzb3VyY2U6IG8sIHRhcmdldDogbyB9KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5yZW1vdmUoKTtcclxuXHJcbiAgICAvLyBTdGFzaCB0aGUgb2xkIHBvc2l0aW9ucyBmb3IgdHJhbnNpdGlvbi5cclxuICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24oZCkgeyBkLngwID0gZC54OyBkLnkwID0gZC55OyB9KTtcclxuICB9LCAgXHJcbiAgZHJhZ3N0YXJ0OiBmdW5jdGlvbihkKVxyXG4gIHtcclxuICAgIGlmIChkID09IHdlaWdodGVkVHJlZVZpZXcucm9vdCkgeyByZXR1cm47IH1cclxuICAgIHdlaWdodGVkVHJlZVZpZXcuZHJhZ1N0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgbm9kZXMgPSB3ZWlnaHRlZFRyZWVWaWV3LnRyZWUubm9kZXMoZCk7XHJcbiAgICBkMy5ldmVudC5zb3VyY2VFdmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIC8vIGl0J3MgaW1wb3J0YW50IHRoYXQgd2Ugc3VwcHJlc3MgdGhlIG1vdXNlb3ZlciBldmVudCBvbiB0aGUgbm9kZSBiZWluZyBkcmFnZ2VkLiBPdGhlcndpc2UgaXQgd2lsbCBhYnNvcmIgdGhlIG1vdXNlb3ZlciBldmVudCBhbmQgdGhlIHVuZGVybHlpbmcgbm9kZSB3aWxsIG5vdCBkZXRlY3QgaXQgZDMuc2VsZWN0KHRoaXMpLmF0dHIoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKTsgICAgICBcclxuICB9LFxyXG4gIGRyYWdlbmQ6IGZ1bmN0aW9uKGQpXHJcbiAge1xyXG4gICAgaWYgKGQgPT0gd2VpZ2h0ZWRUcmVlVmlldy5yb290KSB7IHJldHVybjsgfVxyXG4gICAgZG9tTm9kZSA9IHRoaXM7XHJcbiAgICBcclxuICAgIGlmICh3ZWlnaHRlZFRyZWVWaWV3LnNlbGVjdGVkTm9kZSkgXHJcbiAgICB7XHJcbiAgICAgIC8vIG5vdyByZW1vdmUgdGhlIGVsZW1lbnQgZnJvbSB0aGUgcGFyZW50LCBhbmQgaW5zZXJ0IGl0IGludG8gdGhlIG5ldyBlbGVtZW50cyBjaGlsZHJlblxyXG4gICAgICBwcm9qZWN0LnJlbW92ZU5vZGUod2VpZ2h0ZWRUcmVlVmlldy5kcmFnZ2luZ05vZGUpO1xyXG4gICAgICBcclxuICAgICAgaWYoIXdlaWdodGVkVHJlZVZpZXcuc2VsZWN0ZWROb2RlLmNoaWxkcmVuKSB7IHdlaWdodGVkVHJlZVZpZXcuc2VsZWN0ZWROb2RlLmNoaWxkcmVuID0gW107IH1cclxuICAgICAgd2VpZ2h0ZWRUcmVlVmlldy5zZWxlY3RlZE5vZGUuY2hpbGRyZW4ucHVzaCh3ZWlnaHRlZFRyZWVWaWV3LmRyYWdnaW5nTm9kZSk7XHJcbiAgICAgIFxyXG4gICAgICBwcm9qZWN0LmV4cGFuZE5vZGUod2VpZ2h0ZWRUcmVlVmlldy5zZWxlY3RlZE5vZGUpOyAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIG5vZGUgYmVpbmcgYWRkZWQgdG8gaXMgZXhwYW5kZWQgc28gdXNlciBjYW4gc2VlIGFkZGVkIG5vZGUgaXMgY29ycmVjdGx5IG1vdmVkICAgIFxyXG4gICAgfSBcclxuICBcclxuICAgIHdlaWdodGVkVHJlZVZpZXcuc2VsZWN0ZWROb2RlID0gbnVsbDtcclxuICAgIGQzLnNlbGVjdEFsbCgnLmdob3N0Q2lyY2xlJykuYXR0cignY2xhc3MnLCAnZ2hvc3RDaXJjbGUnKTtcclxuICAgIGQzLnNlbGVjdChkb21Ob2RlKS5hdHRyKCdjbGFzcycsICdub2RlJyk7XHJcbiAgICBcclxuICAgIGQzLnNlbGVjdChkb21Ob2RlKS5zZWxlY3QoJy5naG9zdENpcmNsZScpLmF0dHIoJ3BvaW50ZXItZXZlbnRzJywgJycpOyAgIC8vIG5vdyByZXN0b3JlIHRoZSBtb3VzZW92ZXIgZXZlbnQgb3Igd2Ugd29uJ3QgYmUgYWJsZSB0byBkcmFnIGEgMm5kIHRpbWVcclxuICAgIHdlaWdodGVkVHJlZVZpZXcudXBkYXRlVGVtcENvbm5lY3RvcigpO1xyXG4gICAgXHJcbiAgICBpZiAod2VpZ2h0ZWRUcmVlVmlldy5kcmFnZ2luZ05vZGUgIT09IG51bGwpIFxyXG4gICAge1xyXG4gICAgICB3ZWlnaHRlZFRyZWVWaWV3LnVwZGF0ZSh3ZWlnaHRlZFRyZWVWaWV3LnJvb3QpO1xyXG4gICAgICAvL3dlaWdodGVkVHJlZVZpZXcuY2VudGVyTm9kZSh3ZWlnaHRlZFRyZWVWaWV3LmRyYWdnaW5nTm9kZSk7XHJcbiAgICAgIHdlaWdodGVkVHJlZVZpZXcuZHJhZ2dpbmdOb2RlID0gbnVsbDtcclxuICAgIH0gICAgICBcclxuICB9LFxyXG4gIC8vIEZ1bmN0aW9uIHRvIHVwZGF0ZSB0aGUgdGVtcG9yYXJ5IGNvbm5lY3RvciBpbmRpY2F0aW5nIGRyYWdnaW5nIGFmZmlsaWF0aW9uXHJcbiAgdXBkYXRlVGVtcENvbm5lY3RvcjogZnVuY3Rpb24oKSBcclxuICB7XHJcbiAgICB2YXIgZGF0YSA9IFtdO1xyXG4gICAgaWYgKHdlaWdodGVkVHJlZVZpZXcuZHJhZ2dpbmdOb2RlICE9PSBudWxsICYmIHdlaWdodGVkVHJlZVZpZXcuc2VsZWN0ZWROb2RlICE9PSBudWxsKSAgIC8vIGhhdmUgdG8gZmxpcCB0aGUgc291cmNlIGNvb3JkaW5hdGVzIHNpbmNlIHdlIGRpZCB0aGlzIGZvciB0aGUgZXhpc3RpbmcgY29ubmVjdG9ycyBvbiB0aGUgb3JpZ2luYWwgdHJlZVxyXG4gICAge1xyXG4gICAgICBkYXRhID0gW3sgc291cmNlOiB7IHg6IHdlaWdodGVkVHJlZVZpZXcuc2VsZWN0ZWROb2RlLnkwLCB5OiB3ZWlnaHRlZFRyZWVWaWV3LnNlbGVjdGVkTm9kZS54MCB9LCB0YXJnZXQ6IHsgeDogd2VpZ2h0ZWRUcmVlVmlldy5kcmFnZ2luZ05vZGUueTAsIHk6IHdlaWdodGVkVHJlZVZpZXcuZHJhZ2dpbmdOb2RlLngwIH0gfV07XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZhciBsaW5rID0gd2VpZ2h0ZWRUcmVlVmlldy5zdmdHcm91cC5zZWxlY3RBbGwoXCIudGVtcGxpbmtcIikuZGF0YShkYXRhKTtcclxuICAgIGxpbmsuZW50ZXIoKS5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJjbGFzc1wiLCBcInRlbXBsaW5rXCIpLmF0dHIoXCJkXCIsIGQzLnN2Zy5kaWFnb25hbCgpKS5hdHRyKCdwb2ludGVyLWV2ZW50cycsICdub25lJyk7XHJcbiAgICBsaW5rLmF0dHIoXCJkXCIsIGQzLnN2Zy5kaWFnb25hbCgpKTtcclxuICAgIGxpbmsuZXhpdCgpLnJlbW92ZSgpO1xyXG4gIH0sXHJcbiAgb3ZlckNpcmNsZTogZnVuY3Rpb24oZCkgXHJcbiAge1xyXG4gICAgd2VpZ2h0ZWRUcmVlVmlldy5zZWxlY3RlZE5vZGUgPSBkO1xyXG4gICAgd2VpZ2h0ZWRUcmVlVmlldy51cGRhdGVUZW1wQ29ubmVjdG9yKCk7XHJcbiAgfSxcclxuICBvdXRDaXJjbGU6IGZ1bmN0aW9uKGQpIFxyXG4gIHtcclxuICAgIHdlaWdodGVkVHJlZVZpZXcuc2VsZWN0ZWROb2RlID0gbnVsbDtcclxuICAgIHdlaWdodGVkVHJlZVZpZXcudXBkYXRlVGVtcENvbm5lY3RvcigpO1xyXG4gIH0sXHJcbiAgY2VudGVyTm9kZTogZnVuY3Rpb24oc291cmNlKSAgICAgLy8gRnVuY3Rpb24gdG8gY2VudGVyIG5vZGUgd2hlbiBjbGlja2VkL2Ryb3BwZWQgc28gbm9kZSBkb2Vzbid0IGdldCBsb3N0IHdoZW4gY29sbGFwc2luZy9tb3Zpbmcgd2l0aCBsYXJnZSBhbW91bnQgb2YgY2hpbGRyZW4uXHJcbiAge1xyXG4gICAgc2NhbGUgPSB3ZWlnaHRlZFRyZWVWaWV3Lnpvb21MaXN0ZW5lci5zY2FsZSgpO1xyXG4gICAgeCA9IC1zb3VyY2UueTA7XHJcbiAgICB5ID0gLXNvdXJjZS54MDtcclxuICAgIHggPSB4ICogc2NhbGUgKyB3ZWlnaHRlZFRyZWVWaWV3LnZpZXdlcldpZHRoIC8gNDtcclxuICAgIHkgPSB5ICogc2NhbGUgKyB3ZWlnaHRlZFRyZWVWaWV3LnZpZXdlckhlaWdodCAvIDI7XHJcbiAgICBkMy5zZWxlY3QoJ2cnKS5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgeCArIFwiLFwiICsgeSArIFwiKXNjYWxlKFwiICsgc2NhbGUgKyBcIilcIik7XHJcbiAgICB3ZWlnaHRlZFRyZWVWaWV3Lnpvb21MaXN0ZW5lci5zY2FsZShzY2FsZSk7XHJcbiAgICB3ZWlnaHRlZFRyZWVWaWV3Lnpvb21MaXN0ZW5lci50cmFuc2xhdGUoW3gsIHldKTtcclxuICB9LCAgICAgICAgICBcclxuICBjb21wdXRlTm9kZVNpemU6IGZ1bmN0aW9uKG5vZGUpXHJcbiAge1xyXG4gICAgdmFyIG5vZGVTaXplID0gTUlOX05PREVfU0laRTtcclxuICAgIFxyXG4gICAgaWYodHJlZS5maWVsZClcclxuICAgIHtcclxuICAgICAgaWYobm9kZS52YWx1ZXMgJiYgbm9kZS52YWx1ZXNbdHJlZS5maWVsZC5uYW1lXSlcclxuICAgICAge1xyXG4gICAgICAgIC8vbm9kZVNpemUgPSAyICogTWF0aC5QSSAqIE1hdGguc3FydChNQVhfTk9ERV9TSVpFICogbm9kZS52YWx1ZXNbdHJlZS5maWVsZC5uYW1lXSAvIHRyZWUubWF4RmllbGRWYWx1ZSAvIE1hdGguUEkpO1xyXG4gICAgICAgIG5vZGVTaXplID0gTUFYX05PREVfU0laRSAqIE1hdGguc3FydChub2RlLnZhbHVlc1t0cmVlLmZpZWxkLm5hbWVdIC8gdHJlZS5tYXhGaWVsZFZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYobm9kZVNpemUgPCBNSU5fTk9ERV9TSVpFKSB7IG5vZGVTaXplID0gTUlOX05PREVfU0laRTsgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gbm9kZVNpemU7ICAgICAgIFxyXG4gIH0gICBcclxufTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=