function aggregate_any(e,a){if(e.children&&0!==e.children.length){for(var l=0,n=0;n<e.children.length;n++)l+=aggregate_any(e.children[n],a);return e.values||(e.values={}),e.values[a]=l,document.getElementById(a+e.id).value=l,l}return e.values&&e.values[a]?parseFloat(e.values[a]):0}
var DOWN_ARROW_IMAGE_PATH="images/down-arrow.png",CHECK_MARK_IMAGE_PATH="images/checkmark.png",BLANK_MARK_IMAGE_PATH="images/blankmark.png",ENTER_KEY=13;
function Debug(){}Debug.print=function(n){console.log(JSON.stringify(n,null,"	"))},Debug.printTree=function(){console.log(JSON.stringify(Tree.getTree(),null,"	"))};
"use strict";var REDIPS=REDIPS||{};REDIPS.drag=function(){var e,o,t,n,r,d,l,i,a,s,c,f,p,g,u,v,y,m,h,w,E,b,D,I,S,R,P,x,N,T,C,B,j,k=null,L={width:0,height:0},M={width:null,height:null,container:[],obj:null},O={page:{x:0,y:0},div:{x:0,y:0},flag:{x:0,y:0}},Y=[],H=[],W=null,_=null,X={x:0,y:0},A={x:0,y:0,value:7,flag:!1},V=!1,z=!1,F=null,q=null,K=null,$=null,G=null,J=null,Q=!1,U=!1,Z={colorTd:"#FFCFAE",colorTr:"#9BB3DA"},ee={enable:!0,bound:25,speed:20},oe={borderDisabled:"dotted",opacityDisabled:"",rowEmptyColor:"white"},te={},ne={keyDiv:!1,keyRow:!1,sendBack:!1,drop:!1},re={cloned:function(){},clonedDropped:function(){},clonedEnd1:function(){},clonedEnd2:function(){},dropped:function(){},droppedBefore:function(){},finish:function(){},notCloned:function(){},notMoved:function(){},rowChanged:function(){},rowClicked:function(){},rowCloned:function(){},rowDropped:function(){},rowDroppedBefore:function(){},rowDroppedSource:function(){},rowMoved:function(){},rowNotCloned:function(){},rowNotMoved:function(){}};return e=function(){if(W=document.getElementById("redips-drag"),j=m(),!document.getElementById("redips_clone")){var e=document.createElement("div");e.id="redips_clone",e.style.width=e.style.height="1px",W.appendChild(e)}o("init",".redips-drag"),T=document.getElementById("treeTable"),T.redips={},c(),REDIPS.event.add(window,"resize",c),REDIPS.event.add(window,"scroll",y)},n=function(e){var o,t,n,l,i=e||window.event;if(i.cancelBubble=!0,i.stopPropagation&&i.stopPropagation(),V=i.shiftKey,window.getSelection)window.getSelection().removeAllRanges();else if(document.selection&&"Text"===document.selection.type)try{document.selection.empty()}catch(a){}return n=X.x=i.clientX,l=X.y=i.clientY,A.x=n,A.y=l,A.flag=!1,REDIPS.drag.objOld=U=Q||this,REDIPS.drag.obj=Q=this,z=Q.className.indexOf("redips-clone")>-1,REDIPS.drag.obj=Q=R(Q),y(),F=$=null,f(),K=q=F,J=G=$,REDIPS.drag.event.rowClicked(te.current),null!==F&&null!==$||(f(),K=q=F,J=G=$,null!==F&&null!==$)?(C=B=!1,REDIPS.event.add(document,"mousemove",d),REDIPS.event.add(document,"mouseup",r),null!==F&&(N=u(F)),t=D(T,"position"),"fixed"!==t&&(t=D(T.parentNode,"position")),o=v(Q,t),k=[l-o[0],o[1]-n,o[2]-l,n-o[3]],!1):!0},R=function(e){var o,t,n;return"DIV"===e.nodeName?(n=e,e=I("TR",e),void 0===e.redips&&(e.redips={}),e.redips.div=n,e):(t=e,o=document.createElement("table"),o.innerHTML='<tr id="'+t.id+'" class="'+t.classList+'">'+t.innerHTML+"</tr>",o.redips={},o.redips.sourceRow=t,E(t,o.rows[0]),document.getElementById("redips_clone").appendChild(o),o)},P=function(e){var o,t,n;n=function(e){var o;void 0!==e.redips&&e.redips.emptyRow?S(e,"empty",REDIPS.drag.style.rowEmptyColor):(o=I("TABLE",e),o.deleteRow(e.rowIndex))};var r=Q;e>T.rows.length-1&&(e=T.rows.length-1);var d=T.rows[e];t=r.getElementsByTagName("tr")[0],r.parentNode.removeChild(r),o=REDIPS.drag.event.rowDroppedBefore(T,r.redips.sourceRow.rowIndex),o!==!1&&(e<T.rows.length?d.parentNode.insertBefore(t,d.nextSibling):(d.parentNode.appendChild(t),d=T.rows[0]),B||n(r.redips.sourceRow),delete t.redips.emptyRow,REDIPS.drag.event.rowDropped(d))},r=function(e){var o,t,n,a,s,c,f=e||window.event;if(n=f.clientX,a=f.clientY,O.flag.x=O.flag.y=0,REDIPS.event.remove(document,"mousemove",d),REDIPS.event.remove(document,"mouseup",r),W.onselectstart=null,i(Q),M.width=document.documentElement.scrollWidth,M.height=document.documentElement.scrollHeight,O.flag.x=O.flag.y=0,null===F||null===$)REDIPS.drag.event.notMoved();else{if(REDIPS.drag.td.target=te.target=T.rows[F].cells[$],g(F,N),o=F,C)if(K===o){for(t=Q.getElementsByTagName("tr")[0],U.style.backgroundColor=t.style.backgroundColor,s=0;s<t.cells.length;s++)U.cells[s].style.backgroundColor=t.cells[s].style.backgroundColor;Q.parentNode.removeChild(Q),delete U.redips.emptyRow,B?REDIPS.drag.event.rowNotCloned():REDIPS.drag.event.rowDroppedSource(te.target)}else P(o);else REDIPS.drag.event.rowNotMoved();B||A.flag?B&&K===F&&J===$?(Q.parentNode.removeChild(Q),Y[U.id]-=1,REDIPS.drag.event.notCloned()):B&&REDIPS.drag.clone.drop===!1&&(n<T.redips.offset[3]||n>T.redips.offset[1]||a<T.redips.offset[0]||a>T.redips.offset[2])?(Q.parentNode.removeChild(Q),Y[U.id]-=1,REDIPS.drag.event.notCloned()):(c=REDIPS.drag.event.droppedBefore(te.target),l(c)):REDIPS.drag.event.notMoved(),y(),REDIPS.drag.event.finish()}q=G=null},l=function(e){var o,t=null;if(e!==!1){if(ne.sendBack===!0){o=te.target.getElementsByTagName("DIV");for(var n=0;n<o.length;n++)if(Q!==o[n]&&0===Q.id.indexOf(o[n].id)){t=o[n];break}if(t)return b(t,1),void Q.parentNode.removeChild(Q)}te.target.appendChild(Q),a(Q),REDIPS.drag.event.dropped(te.target),B&&(REDIPS.drag.event.clonedDropped(te.target),b(U,-1))}else B&&Q.parentNode&&Q.parentNode.removeChild(Q)},a=function(e,o){e.onmousedown=o===!1?null:n},i=function(e){e.style.top="",e.style.left="",e.style.position="",e.style.zIndex=""},d=function(e){var o,t,n,r,d,l,i,a=e||window.event,c=REDIPS.drag.scroll.bound;if(t=X.x=a.clientX,n=X.y=a.clientY,r=Math.abs(A.x-t),d=Math.abs(A.y-n),C||((z||REDIPS.drag.clone.keyRow===!0&&V)&&(B=!0),REDIPS.drag.objOld=U=Q,REDIPS.drag.obj=Q=R(Q),Q.style.zIndex=999,Q.style.position="fixed",y(),f(),B?REDIPS.drag.event.rowCloned():REDIPS.drag.event.rowMoved(),p(),t>L.width-k[1]&&(Q.style.left=L.width-(k[1]+k[3])+"px"),n>L.height-k[2]&&(Q.style.top=L.height-(k[0]+k[2])+"px")),C=!0,t>k[3]&&t<L.width-k[1]&&(Q.style.left=t-k[3]+"px"),n>k[0]&&n<L.height-k[2]&&(Q.style.top=n-k[0]+"px"),t<_[1]&&t>_[3]&&n<_[2]&&n>_[0]&&0===O.flag.x&&0===O.flag.y&&(H.containTable||t<H[3]||t>H[1]||n<H[0]||n>H[2])&&(f(),s()),REDIPS.drag.scroll.enable)for(O.page.x=c-(L.width/2>t?t-k[3]:L.width-t-k[1]),O.page.x>0?(O.page.x>c&&(O.page.x=c),i=0,O.page.x*=t<L.width/2?-1:1,O.page.x<0&&0>=i||O.page.x>0&&i>=M.width-L.width||0===O.flag.x++&&(REDIPS.event.remove(window,"scroll",y),h(window))):O.page.x=0,O.page.y=c-(L.height/2>n?n-k[0]:L.height-n-k[2]),O.page.y>0?(O.page.y>c&&(O.page.y=c),i=window.pageYOffset||document.documentElement.scrollTop,O.page.y*=n<L.height/2?-1:1,O.page.y<0&&0>=i||O.page.y>0&&i>=M.height-L.height||0===O.flag.y++&&(REDIPS.event.remove(window,"scroll",y),w(window))):O.page.y=0,l=0;l<M.container.length;l++){if(o=M.container[l],o.autoscroll&&t<o.offset[1]&&t>o.offset[3]&&n<o.offset[2]&&n>o.offset[0]){O.div.x=c-(o.midstX>t?t-k[3]-o.offset[3]:o.offset[1]-t-k[1]),O.div.x>0?(O.div.x>c&&(O.div.x=c),O.div.x*=t<o.midstX?-1:1,0===O.flag.x++&&(REDIPS.event.remove(o.div,"scroll",y),h(o.div))):O.div.x=0,O.div.y=c-(o.midstY>n?n-k[0]-o.offset[0]:o.offset[2]-n-k[2]),O.div.y>0?(O.div.y>c&&(O.div.y=c),O.div.y*=n<o.midstY?-1:1,0===O.flag.y++&&(REDIPS.event.remove(o.div,"scroll",y),w(o.div))):O.div.y=0;break}O.div.x=O.div.y=0}a.cancelBubble=!0,a.stopPropagation&&a.stopPropagation()},s=function(){(F!==q||$!==G)&&(null!==q&&null!==G&&(g(q,N),REDIPS.drag.td.previous=te.previous=T.rows[q].cells[G],REDIPS.drag.td.current=te.current=T.rows[F].cells[$],F!==q&&REDIPS.drag.event.rowChanged(te.current)),p())},c=function(){L.width=window.innerWidth,L.height=window.innerHeight,M.width=document.documentElement.scrollWidth,M.height=document.documentElement.scrollHeight,y()},f=function(){var e,o,t,n,r,d,l=[];if(e=function(){null!==q&&null!==G&&(F=q,$=G)},n=X.x,r=X.y,l[0]=T.redips.offset[0],l[1]=T.redips.offset[1],l[2]=T.redips.offset[2],l[3]=T.redips.offset[3],void 0!==T.sca&&(l[0]=l[0]>T.sca.offset[0]?l[0]:T.sca.offset[0],l[1]=l[1]<T.sca.offset[1]?l[1]:T.sca.offset[1],l[2]=l[2]<T.sca.offset[2]?l[2]:T.sca.offset[2],l[3]=l[3]>T.sca.offset[3]?l[3]:T.sca.offset[3]),l[3]<n&&n<l[1]&&l[0]<r&&r<l[2]){for(o=T.redips.row_offset,F=0;F<o.length-1;F++)if(void 0!==o[F]){if(H[0]=o[F][0],void 0!==o[F+1])H[2]=o[F+1][0];else for(d=F+2;d<o.length;d++)if(void 0!==o[d]){H[2]=o[d][0];break}if(r<=H[2])break}t=F,F===o.length-1&&(H[0]=o[F][0],H[2]=T.redips.offset[2]),$=0,0>F||0>$?e():F!==t&&(H[0]=o[F][0],H[2]=H[0]+T.rows[F].cells[$].offsetHeight,(r<H[0]||r>H[2])&&e())}},p=function(){null!==F&&null!==$&&(N=u(F),g(F),q=F,G=$)},g=function(e,o){var t,n;t=T.rows[e];for(var r=0;r<t.cells.length;r++)n=t.cells[r].style,n.backgroundColor=void 0===o?REDIPS.drag.hover.colorTr:o.color[r].toString(),void 0!==REDIPS.drag.hover.borderTr&&(void 0===o?K>F?n.borderTop=REDIPS.drag.hover.borderTr:n.borderBottom=REDIPS.drag.hover.borderTr:(n.borderTopWidth=o.top[r][0],n.borderTopStyle=o.top[r][1],n.borderTopColor=o.top[r][2],n.borderBottomWidth=o.bottom[r][0],n.borderBottomStyle=o.bottom[r][1],n.borderBottomColor=o.bottom[r][2]))},u=function(e){var o,t,n={color:[],top:[],right:[],bottom:[],left:[]},r=function(e,o){var t="border"+o+"Width",n="border"+o+"Style",r="border"+o+"Color";return[D(e,t),D(e,n),D(e,r)]};o=T.rows[e];for(var d=0;d<o.cells.length;d++)t=o.cells[d],n.color[d]=t.style.backgroundColor,void 0!==REDIPS.drag.hover.borderTr&&(n.top[d]=r(t,"Top"),n.bottom[d]=r(t,"Bottom"));return n},v=function(e,o,t){var n=0,r=0,d=e;if("fixed"!==o&&(n=0-j[0],r=0-j[1]),void 0===t||t===!0){do n+=e.offsetLeft-e.scrollLeft,r+=e.offsetTop-e.scrollTop,e=e.offsetParent;while(e&&"BODY"!==e.nodeName)}else do n+=e.offsetLeft,r+=e.offsetTop,e=e.offsetParent;while(e&&"BODY"!==e.nodeName);return[r,n+d.offsetWidth,r+d.offsetHeight,n]},y=function(){var e,o,t;j=m(),e=[],o=D(T,"position"),"fixed"!==o&&(o=D(T.parentNode,"position"));for(var n=T.rows.length-1;n>=0;n--)"none"!==T.rows[n].style.display&&(e[n]=v(T.rows[n],o));T.redips.offset=v(T,o),T.redips.row_offset=e,_=v(W);for(var n=0;n<M.container.length;n++)o=D(M.container[n].div,"position"),t=v(M.container[n].div,o,!1),M.container[n].offset=t,M.container[n].midstX=(t[1]+t[3])/2,M.container[n].midstY=(t[0]+t[2])/2},m=function(){var e=window.pageYOffset||document.documentElement.scrollTop,o=0;return[o,e]},h=function(e){var o,t,n,r,d,l=X.x,i=X.y;O.flag.x>0&&(y(),f(),l<_[1]&&l>_[3]&&i<_[2]&&i>_[0]&&s()),"object"==typeof e&&(M.obj=e),M.obj===window?(n=t=m()[0],r=M.width-L.width,d=O.page.x):(n=M.obj.scrollLeft,r=M.obj.scrollWidth-M.obj.clientWidth,d=O.div.x),O.flag.x>0&&(0>d&&n>0||d>0&&r>n)?(M.obj===window?(window.scrollBy(d,0),n=m()[0],o=parseInt(Q.style.left,10),isNaN(o)&&(o=0)):M.obj.scrollLeft+=d,setTimeout(h,REDIPS.drag.scroll.speed)):(REDIPS.event.add(M.obj,"scroll",y),O.flag.x=0,H=[0,0,0,0])},w=function(e){var o,t,n,r,d,l=X.x,i=X.y;O.flag.y>0&&(y(),f(),l<_[1]&&l>_[3]&&i<_[2]&&i>_[0]&&s()),"object"==typeof e&&(M.obj=e),M.obj===window?(n=t=m()[1],r=M.height-L.height,d=O.page.y):(n=M.obj.scrollTop,r=M.obj.scrollHeight-M.obj.clientHeight,d=O.div.y),O.flag.y>0&&(0>d&&n>0||d>0&&r>n)?(M.obj===window?(window.scrollBy(0,d),n=m()[1],o=parseInt(Q.style.top,10),isNaN(o)&&(o=0)):M.obj.scrollTop+=d,setTimeout(w,REDIPS.drag.scroll.speed)):(REDIPS.event.add(M.obj,"scroll",y),O.flag.y=0,H=[0,0,0,0])},E=function(e,o){var t,n=[];n[0]=function(e,o){e.redips&&(o.redips={},o.redips.enabled=e.redips.enabled,o.redips.container=e.redips.container,e.redips.enabled&&a(o))},n[1]=function(e,o){e.redips&&(o.redips={},o.redips.emptyRow=e.redips.emptyRow)},t=function(t){var r,d,l=["DIV","TR"];r=e.getElementsByTagName(l[t]),d=o.getElementsByTagName(l[t]);for(var i=0;i<d.length;i++)n[t](r[i],d[i])},"DIV"===e.nodeName?n[0](e,o):"TR"===e.nodeName&&n[1](e,o),t(0),t(1)},b=function(e,t){var n,r,d,l;l=e.className,n=l.match(/climit(\d)_(\d+)/),null!==n&&(r=parseInt(n[1],10),d=parseInt(n[2],10),0===d&&1===t&&(l+=" redips-clone",2===r&&o(!0,e)),d+=t,l=l.replace(/climit\d_\d+/g,"climit"+r+"_"+d),0>=d&&(l=l.replace("redips-clone",""),2===r?(o(!1,e),REDIPS.drag.event.clonedEnd2()):REDIPS.drag.event.clonedEnd1()),e.className=x(l))},o=function(e,o){var n=[];void 0===o?n=W.getElementsByTagName("div"):"string"==typeof o?n=document.querySelectorAll(o):"object"!=typeof o||"DIV"===o.nodeName&&-1!==o.className.indexOf("redips-drag")?n[0]=o:n=o.getElementsByTagName("div"),t(e,n)},t=function(e,o){var t,n,r,d,l,i,s,c,f,p,g,u=[],m=/\bredips-drag\b/i,h=/\bredips-noautoscroll\b/i;for(l=REDIPS.drag.style.opacityDisabled,e===!0||"init"===e?(d=REDIPS.drag.style.borderEnabled,i="move",f=!0):(d=REDIPS.drag.style.borderDisabled,i="auto",f=!1),t=0,n=0;t<o.length;t++)if(m.test(o[t].className))"init"===e||void 0===o[t].redips?(o[t].redips={},o[t].redips.container=W):e===!0&&"number"==typeof l?(o[t].style.opacity="",o[t].style.filter=""):e===!1&&"number"==typeof l&&(o[t].style.opacity=l/100,o[t].style.filter="alpha(opacity="+l+")"),a(o[t],f),o[t].style.borderStyle=d,o[t].style.cursor=i,o[t].redips.enabled=f;else if("init"===e&&(s=D(o[t],"overflow"),"visible"!==s)){for(REDIPS.event.add(o[t],"scroll",y),g=D(o[t],"position"),p=v(o[t],g,!1),c=!h.test(o[t].className),M.container[n]={div:o[t],offset:p,midstX:(p[1]+p[3])/2,midstY:(p[0]+p[2])/2,autoscroll:c},u=o[t].getElementsByTagName("table"),r=0;r<u.length;r++)u[r].sca=M.container[n];n++}},D=function(e,o){return e&&e.currentStyle?e.currentStyle[o]:e&&window.getComputedStyle?document.defaultView.getComputedStyle(e,null)[o]:void 0},I=function(e,o){for(o=o.parentNode;o&&o.nodeName!==e;)o=o.parentNode;return o},x=function(e){return void 0!==e&&(e=e.replace(/^\s+|\s+$/g,"").replace(/\s{2,}/g," ")),e},S=function(e,o,t){var n,r,d;if("string"==typeof e&&(e=document.getElementById(e),e=I("TABLE",e)),"TR"===e.nodeName)for(n=e.getElementsByTagName("td"),r=0;r<n.length;r++)if(n[r].style.backgroundColor=t?t:"","empty"===o)n[r].innerHTML="";else for(d=0;d<n[r].childNodes.length;d++)1===n[r].childNodes[d].nodeType&&(n[r].childNodes[d].style.opacity=o/100,n[r].childNodes[d].style.filter="alpha(opacity="+o+")");else e.style.opacity=o/100,e.style.filter="alpha(opacity="+o+")",e.style.backgroundColor=t?t:""},{obj:Q,objOld:U,td:te,hover:Z,scroll:ee,style:oe,clone:ne,init:e,enableDrag:o,enableDivs:t,rowOpacity:S,getScrollPosition:m,getStyle:D,findParent:I,event:re}}(),REDIPS.event||(REDIPS.event=function(){var e,o;return e=function(e,o,t){e.addEventListener?e.addEventListener(o,t,!1):e.attachEvent?e.attachEvent("on"+o,t):e["on"+o]=t},o=function(e,o,t){e.removeEventListener?e.removeEventListener(o,t,!1):e.detachEvent?e.detachEvent("on"+o,t):e["on"+o]=null},{add:e,remove:o}}());
"use strict";var redips={};redips.init=function(){var e=REDIPS.drag;e.init(),e.event.rowDropped=function(o){var n=parseInt(e.objOld.id.replace("rowid","")),t=parseInt(o.id.replace("rowid",""));SpreadSheetView.moveNode(n,t)},e.event.rowDroppedSource=function(){e.rowOpacity(e.objOld,100)},e.event.rowMoved=function(){e.rowOpacity(e.obj,85),e.rowOpacity(e.objOld,20,"White")},e.event.rowClicked=function(){},e.event.rowNotMoved=function(){},e.event.rowCloned=function(){},e.event.rowNotCloned=function(){},e.event.rowDeleted=function(){},e.event.rowUndeleted=function(){e.rowOpacity(e.objOld,100)}};
var Field=function(i){this.name=i,this.datatype=Field.NUMBER,this.format=Field.NUMBER_FORMAT,this.precision=2,this.agg_type=Field.NO_AGGREGATION,this.agg_qty_field=null};Field.NUMBER="0",Field.STRING="1",Field.CHOICE="2",Field.NO_AGGREGATION="0",Field.SUM_ANY_AGGREGATION="1",Field.NUMBER_FORMAT="0",Field.PERCENT_FORMAT="1",Field.SCIENTIFIC_FORMAT="2",Field.formatValue=function(i,e){if(i.datatype===Field.NUMBER){if(e=Number(e),i.format===Field.NUMBER_FORMAT)return e.toFixed(i.precision);if(i.format===Field.PERCENT_FORMAT)return(100*e).toFixed(i.precision)+"%";if(i.format===Field.SCIENTIFIC_FORMAT)return e.toExponential(i.precision)}else{if(i.datatype===Field.STRING)return e;i.datatype===Field.CHOICE}};
var scrollBarWidth;$(document).ready(function(){scrollBarWidth=getScrollBarWidth(),document.onkeydown=checkKey,hms.init()});var getScrollBarWidth=function(){var t,e;return t=document.createElement("div"),t.innerHTML='<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>',t=t.firstChild,document.body.appendChild(t),e=t.offsetWidth-t.clientWidth,document.body.removeChild(t),e};
function checkKey(e){if(e=e||window.event,e.keyCode==KEY_UP_ARROW){e.preventDefault();var t=$(getAncestorTag(document.activeElement,"tr")).prev()[0];t&&$("#"+getNextElementID(t)).focus()}else if(e.keyCode==KEY_DOWN_ARROW){e.preventDefault();var n=$(getAncestorTag(document.activeElement,"tr")).next()[0];n&&$("#"+getNextElementID(n)).focus()}else e.keyCode==KEY_RIGHT_ARROW?(e.preventDefault(),$(getAncestorTag(document.activeElement,"td")).next().find("input").focus()):e.keyCode==KEY_LEFT_ARROW&&(e.preventDefault(),$(getAncestorTag(document.activeElement,"td")).prev().find("input").focus())}function getNextElementID(e){var t=document.activeElement.id;if(t.indexOf("nodeInput")>-1)return"nodeInput"+e.id.replace("rowid","");for(var n=document.activeElement.className.split(" "),a=0;a<n.length;a++){var r=n[a];if(r.indexOf("fieldInput")>-1&&"fieldInput"!=r){var o=r.replace("fieldInput","");return o+e.id.replace("datarowid","")}}}var KEY_UP_ARROW=38,KEY_DOWN_ARROW=40,KEY_LEFT_ARROW=37,KEY_RIGHT_ARROW=39,getAncestorTag=function(e,t){for(t=t.toLowerCase();e&&e.parentNode;)if(e=e.parentNode,e.tagName&&e.tagName.toLowerCase()==t)return e};
function addRow(e){var n="",i='<div class="redips-drag pull-right"><i class="glyphicon glyphicon-move"></i></div>',t='<a href="#" class="pull-right btn btn-danger btn-xs delete-button" onclick="SpreadSheetView.deleteNode('+e.id+')"><i class="glyphicon glyphicon-remove"></i></a>',a='<a href="#"  class="pull-right btn btn-info btn-xs copy-button" onclick="SpreadSheetView.copyNode('+e.id+')"><i class="glyphicon glyphicon-plus"></i></a>';if(n+='<tr id="rowid'+e.id+'" class="nodeRow"><td class="redips-rowhandler cell"><div id="nodeContent'+e.id+'" class="node-container">',n+=t+a+i,n+=getNodeContentMarkup(e),e.children&&e.children.length>0)for(var r in e.children)n+=addRow(e.children[r]);return n+="</div></td></tr>"}function getNodeContentMarkup(e){var n="",i=10*(e.depth-1);return e.children&&e.children.length>0?n+='<a href="#" id="icon'+e.id+'" style="margin-left:'+i+'px" onclick="SpreadSheetView.toggleExpandIcon('+e.id+')" class="btn btn-xs"><span class="glyphicon glyphicon-chevron-down"></span></a>':e._children&&e._children.length>0?n+='<a href="#" id="icon'+e.id+'" style="margin-left:'+i+'px" onclick="SpreadSheetView.toggleExpandIcon('+e.id+')" class="btn btn-xs"><span class="glyphicon glyphicon-chevron-right"></span></a>':(n+='<a href="#" id="icon'+e.id+'" style="margin-left:'+(i+12)+'px" onclick="SpreadSheetView.toggleExpandIcon('+e.id+')" class="btn btn-xs"><span></span></a>',i-=10),n+='<input id="nodeInput'+e.id+'" class="nodeTextInput" type="text" value="'+e.name+'" style="width:'+(DEFAULT_NODE_INPUT_WIDTH-i)+'px" oninput="SpreadSheetView.updateNodeName('+e.id+')"/>'}function getFieldMenuMarkup(e,n,i,t){var a=Tree.getField(e),r=new Menu,s=new MenuItem("Number",Field.NUMBER,"datatype",a),d=new MenuItem("Format"),l=new MenuItem("Number",Field.NUMBER_FORMAT,"format",a);l.items.push(new MenuItem("0",0,"precision",a));for(var c="0.",o=1;11>o;o++)c+="0",l.items.push(new MenuItem(c,o,"precision",a));d.items.push(l);var p=new MenuItem("Percent",Field.PERCENT_FORMAT,"format",a);p.items.push(new MenuItem("0",0,"precision",a));for(var c="0.",o=1;11>o;o++)c+="0",p.items.push(new MenuItem(c+"%",o,"precision",a));d.items.push(p);var u=new MenuItem("Scientific",Field.SCIENTIFIC_FORMAT,"format",a);u.items.push(new MenuItem("0",0,"precision",a));for(var c="0.",o=1;11>o;o++)c+="0",u.items.push(new MenuItem(c+"e+0",o,"precision",a));d.items.push(u),s.items.push(d);var h=new MenuItem("Aggregation");h.items.push(new MenuItem("No Aggregation",Field.NO_AGGREGATION,"agg_type",a));var m=new MenuItem("Sum any defined children",Field.SUM_ANY_AGGREGATION,"agg_type",a);for(var g in t){var M=t[g];M.name!=a.name&&m.items.push(new MenuItem(M.name,M.name,"agg_qty_field",a))}h.items.push(m),s.items.push(h),r.items=[],r.items.push(s),r.items.push(new MenuItem("Text",Field.STRING,"datatype",a));var I='<div id="fieldMenu" style="left:'+n+"px;top:"+i+'px;">';return I+=generateMenuMarkup(r),I+="</div>"}function generateMenuMarkup(e){for(var n="<ul>",i=0;i<e.items.length;i++){var t=e.items[i];n+='<li onclick="Menu.handleClick('+t.id+');">';var a="uncheckedMenuItem";t.field&&t.checked&&(a="checkedMenuItem"),n+='<img id="menuItem'+t.id+'" src="'+CHECK_MARK_IMAGE_PATH+'" class="'+a+'"/>',n+=t.display,t.items&&t.items.length>0&&(n+='<div class="arrowRight"></div>'),t.items&&t.items.length>0&&(n+=generateMenuMarkup(t)),n+="</li>"}return n+"</ul>"}var DEFAULT_NODE_INPUT_WIDTH=390;
var Menu=function(){Menu.menu=this};Menu.menu,Menu.handleClick=function(e){var n=Menu.menu.getMenuItem(e,Menu.menu),t=Menu.menu.getMenuItemParent(e,Menu.menu);if(n.field){var u=Tree.getField(n.field.name);u[n.varName]=n.value;for(var m in t.items)$("#menuItem"+t.items[m].id).removeClass("checkedMenuItem").addClass("uncheckedMenuItem");$("#menuItem"+e).removeClass("uncheckedMenuItem").addClass("checkedMenuItem"),t===Menu.menu&&SpreadSheetView.updateFieldFormatting(u)}},Menu.prototype.getMenuItem=function(e,n){if(e===n.id)return n;if(n.items&&n.items.length>0)for(var t,u=0;u<n.items.length;u++)if(t=this.getMenuItem(e,n.items[u]))return t;return null},Menu.prototype.getMenuItemParent=function(e,n){if(n.items&&n.items.length>0)for(var t=0;t<n.items.length;t++){if(n.items[t].id===e)return n;var u=this.getMenuItemParent(e,n.items[t]);if(u)return u}return null};
var MenuItem=function(i,t,e,s){this.display=i,this.value=t,this.varName=e,this.field=s,this.items=[],this.id=MenuItem.id++,this.parent=-1,this.checked=s?s[e]===t:!1};MenuItem.id=0;
var resizeColumnLeft=0,resizeField="0",MIN_COLUMN_WIDTH=70,GRIPS_WIDTH=16,startResize=function(e,i){$(document).bind("touchmove.resizeColGrip mousemove.resizeColGrip",resizeDrag).bind("touchend.resizeColGrip mouseup.resizeColGrip",resizeEnd),document.getElementById("resizeLine").style.visibility="visible",document.getElementById("resizeLine").style.left=e.pageX+"px",resizeColumnLeft=$(i.parentNode).position().left,resizeField=i.parentNode.id.replace("colHeader","")},resizeEnd=function(e){$(document).unbind("touchmove.resizeColGrip mousemove.resizeColGrip",resizeDrag).unbind("touchend.resizeColGrip mouseup.resizeColGrip",resizeEnd),document.getElementById("resizeLine").style.visibility="hidden";var i=e.pageX-resizeColumnLeft-GRIPS_WIDTH;MIN_COLUMN_WIDTH>i&&(i=MIN_COLUMN_WIDTH),document.getElementById("colHeaderInput"+resizeField).style.width=i+"px";for(var t=document.querySelectorAll(".fieldInput"+resizeField),r=0;r<t.length;r++)t[r].style.width=i+8+"px"},resizeDrag=function(e){e.pageX>resizeColumnLeft+MIN_COLUMN_WIDTH+GRIPS_WIDTH&&(document.getElementById("resizeLine").style.left=e.pageX+"px")};
function Tree(){}Tree.tree=null,Tree.getTree=function(){return Tree.tree},Tree.setTree=function(e){Tree.tree=e},Tree.getFields=function(){return Tree.tree.fields},Tree.getField=function(e){for(var r in Tree.tree.fields){var n=Tree.tree.fields[r];if(n.name===e)return n}},Tree.removeNode=function(e){var r=Tree.findParent(e.id);r?r.children.splice(r.children.indexOf(e),1):Tree.tree.children.splice(Tree.tree.children.indexOf(e),1)},Tree.addNode=function(e,r){r.children.push(e),Tree.setDepths(r)},Tree.insertNode=function(e,r){var n=Tree.findParent(r.id);n?n.children.splice(n.children.indexOf(r),0,e):Tree.tree.children.splice(Tree.tree.children.indexOf(r),0,e)},Tree.cloneNode=function(e){var r=$.extend(!0,{},e);return Tree.assignNewNodeIDs(r),r},Tree.assignNewNodeIDs=function(e){e.id=Tree.tree.nextNodeID++;for(var r in e.children)Tree.assignNewNodeIDs(e.children[r])},Tree.expandNode=function(e){e.children=e._children,e._children=[]},Tree.collapseNode=function(e){e._children=e.children,e.children=[]},Tree.isNodeChildless=function(e){return!(e.children&&0!==e.children.length||e._children&&0!==e._children.length)},Tree.isNodeCollapsed=function(e){return e._children&&e._children.length>0},Tree.isNodeExpanded=function(e){return e.children&&e.children.length>0},Tree.setDepths=function(e){for(var r in e.children)e.children[r].depth=e.depth+1,Tree.setDepths(e.children[r])},Tree.findNode=function(e,r){if(r||(r=Tree.tree),r.id===e)return r;for(var n in r.children){var i=Tree.findNode(e,r.children[n]);if(i)return i}},Tree.findParent=function(e,r,n){if(r||(r=Tree.tree),r.id===e)return n;for(var i in r.children){var d=Tree.findParent(e,r.children[i],r);if(d)return d}},Tree.updateNodeValue=function(e,r,n){var i=Tree.findNode(e,Tree.tree);i&&(i.values||(i.values={}),i.values[r]=n)},Tree.traverse=function(e,r,n){n||(n=Tree.tree),r(n);var i=e(n);for(var d in i)Tree.traverse(e,r,i[d])},Tree.traverseDescendants=function(e,r,n){n||(n=Tree.tree);for(var i in n.children)Tree.traverse(e,r,n.children[i])},Tree.getChildren=function(e){return e.children&&e.children.length>0?e.children:null};
var project={saveToDatabase:function(){$.ajax({type:"POST",url:"/api/tree",dataType:"json",data:{json:JSON.stringify(Tree.getTree())}})},fields:function(){return this.data.fields},cleanseData:function(){Tree.traverse(Tree.getChildren,function(e){e.children||(e.children=[]),delete e.parent})},addField:function(e){this.data.fields.push(new Field(e))}};
var projects={init:function(e){$.ajax({type:"GET",url:"api/projects"}).done(function(t){this.data=t,e(t.projects)})},createNewProject:function(e){$.ajax({type:"POST",url:"/api/addProject?projectName="+e}),project.data={projectID:project.nextProjectID,projectName:e,name:e,version:1,nextNodeID:2,depth:0,fields:[],children:[{id:1,name:e,depth:1,children:[]}]},project.saveToDatabase(),Tree.setTree(project.data)},openProject:function(e,t){$.ajax({type:"GET",url:"api/tree?projectID="+e}).done(function(e){Tree.setTree(e),t(e)})}};
var hms={init:function(){projects.init(function(e){headerView.render(e)})},openProject:function(e){projects.openProject(e,function(e){project.data=e,spreadSheet.display()}),this.view&&this.view.destroy(),this.view=spreadSheetView},saveToDatabase:function(){project.saveToDatabase()},switchView:function(){this.view===spreadSheetView?(this.view.destroy(),this.view=treeView):this.view===treeView&&(this.view.destroy(),this.view=spreadSheetView,spreadSheet.display())},createNewProject:function(e){projects.createNewProject(e),this.view.destroy(),this.view=spreadSheetView,spreadSheet.display()},nextProjectID:function(){return projects.nextProjectID++}};
var spreadSheet={display:function(){project.cleanseData(),spreadSheetView.render(project.data)},fields:function(){return project.fields()},updateFieldValue:function(e,n){Tree.updateNodeValue(parseInt(n),e,$("#"+e+n).val());for(var r in Tree.getTree().children)aggregate_any(Tree.getTree().children[r],e)},rawValue:function(e,n){var r=Tree.getField(e),a=Tree.findNode(parseInt(n));return a.values&&a.values[r.name]?a.values[r.name]:""},formattedValue:function(e,n){return n.values&&n.values[e.name]?Field.formatValue(e,n.values[e.name]):""},addField:function(e){project.addField(e),spreadSheetView.addField(e)},hasChildren:function(e){return e.children&&e.children.length>0||e._children&&e._children.length>0},childrenHidden:function(e){return e._children&&e._children.length>0}};
var headerView={render:function(e){var t='<select id="projectSelector" class="form-control"><option id="selectProjectOption" value="0">Select Project...</option>';e.forEach(function(e){t+='<option value="'+e.id+'">'+e.name+"</option>"}),t+='<option id="newProjectOption" value="-1">Create New Project...</option></select><input id="editNewProjectNameInput" class="form-control"></input><a href="#" id="save-database-button" class="btn btn-default">Save to Database</a><a href="#" id="switchViewButton" class="btn btn-default">Switch View</a>',$("#header").html(t),$("#projectSelector").change(function(){headerView.selectProject($(this))}),$("#save-database-button").click(function(){hms.saveToDatabase()}),$("#switchViewButton").click(function(){hms.switchView()}),$("#editNewProjectNameInput").keyup(function(e){headerView.createNewProject(e)})},selectProject:function(e){"newProjectOption"===e.find(":selected").attr("id")?($("#editNewProjectNameInput").val("Type New Project Name and Press Enter to Create"),$("#editNewProjectNameInput").show().focus().select()):($("#selectProjectOption").remove(),hms.openProject(e.val()))},createNewProject:function(e){if(e.keyCode==ENTER_KEY){$("#selectProjectOption").remove();var t=$("#editNewProjectNameInput").val();$("#editNewProjectNameInput").hide();var o=hms.nextProjectID(),c=document.createElement("option");c.text=t,c.value=o.toString(),$(c).insertBefore("#projectSelector option:nth-child("+$("#projectSelector").length+")"),$("#projectSelector").val(o),hms.createNewProject(t)}}};
var projectAction={init:function(){$("#project-action-container").html(projectAction.markup()),$("#projectActionInput").keyup(function(t){t.keyCode==ENTER_KEY&&projectAction.enterPressed()}),$("#projectActionSelector").change(projectAction.handle)},handle:function(){"addField"==$("#projectActionSelector").val()&&($("#projectActionInput").val("Type New Field Name and Press Enter to Create"),$("#projectActionInput").show().focus().select())},enterPressed:function(){"addField"==$("#projectActionSelector").val()&&(spreadSheet.addField($("#projectActionInput").val()),$("#projectActionInput").hide(),$("#projectActionSelector").val("blank"))},markup:function(){return'<table><tr id="headerRow"><tr><div id="project-select-container"><select id="projectActionSelector" class="form-control"><option value="blank"></option><option value="addField">Add Field</option></select><input id="projectActionInput" class="form-control"></input></div></tr><table>'}};
function SpreadSheetView(){}var spreadSheetView={render:function(){$("body").append(this.spreadSheetMarkup()),projectAction.init(),this.renderFieldsRow(),this.renderDataTable(),this.renderNodeColumn()},destroy:function(){$("#spreadSheetView").remove()},spreadSheetMarkup:function(){return'<div id="spreadSheetView"><div id="project-action-container"></div><div id="fields-header-row"></div><div id="redips-drag"></div><div id="data-container"></div></div>'},renderFieldsRow:function(){$("#fields-header-row").html('<table id="fieldHeaderTable"><tr id="fieldHeaderRow"></tr></table>'),spreadSheet.fields().forEach(function(e){$("#fieldHeaderRow").append(spreadSheetView.fieldHeader(e.name)),$("#fieldMenuButton"+e.name).click(function(d){spreadSheetView.showFieldMenu(d,e.name)})}),$("#fields-header-row").css("right",scrollBarWidth+"px")},fieldHeader:function(e){return'<td class="fieldHeaderCell"><div class="fieldHeaderContainer"><div class="moveColGrip"></div><div class="fieldNameInputContainer"><textarea id="colHeaderInput'+e+'" class="fieldNameInput">'+e+'</textarea></div><div class="fieldHeaderButton"><img id="fieldMenuButton'+e+'" src="images/down-arrow.png"/></div><div id="grip'+e+'" class="resizeColGrip" onmousedown="startResize(event, this)"></div></div></td>'},showFieldMenu:function(e,d){0===$("#fieldMenu").length&&($(getFieldMenuMarkup(d,e.clientX,e.clientY,Tree.getTree().fields)).appendTo("body"),$("#fieldMenu").mouseleave(function(){$("#fieldMenu").remove()}))},renderDataTable:function(){$("#data-container").append('<table id="dataTable"></table>'),Tree.getTree().children.forEach(function(e){spreadSheetView.renderDataRow(e)}),$("#data-container").scroll(function(){$("#redips-drag").scrollTop($("#data-container").scrollTop()),$("#fields-header-row").scrollLeft($("#data-container").scrollLeft())})},renderDataRow:function(e,d){d?$('<tr id="datarowid'+e.id+'" class="dataRow"></tr>').insertAfter(d):$("#dataTable").append('<tr id="datarowid'+e.id+'" class="dataRow"></tr>'),Tree.getFields().forEach(function(d){spreadSheetView.renderDataCell($("#datarowid"+e.id),d.name,e.id,spreadSheet.formattedValue(d,e))}),e.children.forEach(d?function(d){spreadSheetView.renderDataRow(d,$("#datarowid"+e.id))}:function(e){spreadSheetView.renderDataRow(e)})},renderDataCell:function(e,d,i,n){$(e).append(spreadSheetView.fieldCell(d,i,n)),$("#"+d+i).on("input",function(){spreadSheet.updateFieldValue(d,i)}),$("#"+d+i).focus(function(){$(this).val(spreadSheet.rawValue(d,i))})},fieldCell:function(e,d,i){return'<td class="cell"><input class="fieldInput fieldInput'+e+'" type="text" id="'+e+d+'" value="'+i+'"></td>'},renderNodeColumn:function(){$("#redips-drag").html('<table id="treeTable"></table>'),Tree.getTree().children.forEach(function(e){spreadSheetView.renderNodeCell(e)}),$("#redips-drag").css("bottom",scrollBarWidth+"px"),redips.init()},renderNodeCell:function(e,d){d?$(spreadSheetView.nodeRow(e.id)).insertAfter(d):$("#treeTable").append(spreadSheetView.nodeRow(e.id)),$("#nodeContent"+e.id).append(spreadSheetView.deleteButton(e.id)+spreadSheetView.copyButton(e.id)+spreadSheetView.dragHandle),spreadSheetView.addNodeContent(e),$("#nodeInput"+e.id).on("input",function(){SpreadSheetView.updateNodeName(e.id)}),e.children.forEach(d?function(d){spreadSheetView.renderNodeCell(d,$("#rowid"+e.id))}:function(e){spreadSheetView.renderNodeCell(e)})},nodeRow:function(e){return'<tr id="rowid'+e+'" class="nodeRow"><td class="redips-rowhandler cell"><div id="nodeContent'+e+'" class="node-container"></div></td></tr>'},dragHandle:'<div class="redips-drag pull-right"><i class="glyphicon glyphicon-move"></i></div>',copyButton:function(e){return'<a href="#"  class="pull-right btn btn-info btn-xs copy-button" onclick="SpreadSheetView.copyNode('+e+')"><i class="glyphicon glyphicon-plus"></i></a>'},deleteButton:function(e){return'<a href="#" class="pull-right btn btn-danger btn-xs delete-button" onclick="SpreadSheetView.deleteNode('+e+')"><i class="glyphicon glyphicon-remove"></i></a>'},expandIcon:function(e){return'<a href="#" id="icon'+e+'" class="btn btn-xs"><span></span></a>'},nodeInput:function(e){return'<input id="nodeInput'+e.id+'" class="nodeTextInput" type="text" value="'+e.name+'"/>'},addNodeContent:function(e){$("#nodeContent"+e.id).append(spreadSheetView.expandIcon(e.id)+spreadSheetView.nodeInput(e));var d=10*(e.depth-1),i=d;spreadSheet.hasChildren(e)?$("#icon"+e.id).append(spreadSheet.childrenHidden(e)?'<span class="glyphicon glyphicon-chevron-right"></span>':'<span class="glyphicon glyphicon-chevron-down"></span>'):($("#icon"+e.id).append("<span></span>"),d+=12,i-=10),$("#icon"+e.id).click(function(){spreadSheetView.toggleNodeExpansion(e.id)}),$("#icon"+e.id).css("margin-left",d+"px"),$("#nodeInput"+e.id).css("width",DEFAULT_NODE_INPUT_WIDTH-i+"px")},toggleNodeExpansion:function(e){var d=Tree.findNode(e);if(Tree.isNodeExpanded(d))Tree.traverseDescendants(Tree.getChildren,function(e){$("#datarowid"+e.id).remove(),$("#rowid"+e.id).remove()},d),Tree.collapseNode(d);else if(Tree.isNodeCollapsed(d)){Tree.expandNode(d);for(var i,n=d.children.length-1;n>=0;n--)i=d.children[n],spreadSheetView.renderDataRow(i,$("#datarowid"+d.id)),spreadSheetView.renderNodeCell(i,$("#rowid"+d.id));SpreadSheetView.enableDragging(d)}spreadSheetView.redrawNodeContent(d)},redrawNodeContent:function(e){$("#icon"+e.id).remove(),$("#nodeInput"+e.id).remove(),spreadSheetView.addNodeContent(e)},addField:function(e){$("#fieldHeaderRow").append(this.fieldHeaderMarkup(e,Tree.getTree().fields.length)),$("#fieldMenuButton"+e).click(function(d){spreadSheetView.showFieldMenu(d,e)}),$(".dataRow").each(function(d,i){spreadSheetView.renderDataCell(i,e,parseInt(i.id.replace("datarowid","")),"")})}};SpreadSheetView.moveNode=function(e,d){var i=Tree.findNode(d),n=Tree.findNode(e);SpreadSheetView.removeNode(n),Tree.addNode(n,i),SpreadSheetView.addNode(n,i)},SpreadSheetView.addNode=function(e,d){Tree.isNodeCollapsed(d)&&SpreadSheetView.expandNode(d),spreadSheetView.redrawNodeContent(d),$(addRow(e)).insertAfter($("#rowid"+d.id)),$(addDataRow(e,Tree.getTree().fields)).insertAfter($("#datarowid"+d.id)),SpreadSheetView.enableDragging(e)},SpreadSheetView.insertNode=function(e,d){$(addRow(e)).insertBefore($("#rowid"+d.id)),$(addDataRow(e,Tree.getTree().fields)).insertBefore($("#datarowid"+d.id)),SpreadSheetView.enableDragging(e)},SpreadSheetView.removeNode=function(e){Tree.traverse(Tree.getChildren,function(e){$("#rowid"+e.id).remove(),$("#datarowid"+e.id).remove()},e);var d=Tree.findParent(e.id);Tree.removeNode(e),spreadSheetView.redrawNodeContent(d)},SpreadSheetView.enableDragging=function(e){Tree.traverse(Tree.getChildren,function(e){REDIPS.drag.enableDivs("init",$("#rowid"+e.id).find("div"))},e)},SpreadSheetView.updateFieldFormatting=function(e){$(".fieldInput"+e.name).each(function(d){var i=$(this).attr("id").replace(e.name,""),n=Tree.findNode(parseInt(i));if(n.values){var t=Number(n.values[e.name]);$(this).val(Field.formatValue(e,t))}})},SpreadSheetView.copyNode=function(e){var d=Tree.findNode(e),i=Tree.cloneNode(d);Tree.insertNode(i,d),SpreadSheetView.insertNode(i,d)},SpreadSheetView.deleteNode=function(e){SpreadSheetView.removeNode(Tree.findNode(e))},SpreadSheetView.updateNodeName=function(e){var d=Tree.findNode(e);d.name=$("#nodeInput"+e).val(),$("#nodeInput"+e).attr("value",$("#nodeInput"+e).val())},SpreadSheetView.updateFieldValue=function(e,d){Tree.updateNodeValue(parseInt(d),e,$("#"+e+d).val());for(var i in Tree.getTree().children)aggregate_any(Tree.getTree().children[i],e)};
function TreeView(){}var treeView={render:function(){},destroy:function(){$("#tree-container").remove()}};TreeView.display=function(t){function e(t,n,r){if(t){n(t);var a=r(t);if(a)for(var l=a.length,i=0;l>i;i++)e(a[i],n,r)}}function n(){A.sort(function(t,e){return e.name.toLowerCase()<t.name.toLowerCase()?1:-1})}function r(t,e){var n=m;panTimer&&(clearTimeout(panTimer),translateCoords=d3.transform(z.attr("transform")),"left"==e||"right"==e?(translateX="left"==e?translateCoords.translate[0]+n:translateCoords.translate[0]-n,translateY=translateCoords.translate[1]):("up"==e||"down"==e)&&(translateX=translateCoords.translate[0],translateY="up"==e?translateCoords.translate[1]+n:translateCoords.translate[1]-n),scaleX=translateCoords.scale[0],scaleY=translateCoords.scale[1],scale=X.scale(),z.transition().attr("transform","translate("+translateX+","+translateY+")scale("+scale+")"),d3.select(t).select("g.node").attr("transform","translate("+translateX+","+translateY+")"),X.scale(X.scale()),X.translate([translateX,translateY]),panTimer=setTimeout(function(){r(t,n,e)},50))}function a(){z.attr("transform","translate("+d3.event.translate+")scale("+d3.event.scale+")")}function l(t,e){p=t,d3.select(e).select(".ghostCircle").attr("pointer-events","none"),d3.selectAll(".ghostCircle").attr("class","ghostCircle show"),d3.select(e).attr("class","node activeDrag"),z.selectAll("g.node").sort(function(t,e){return t.id!=p.id?1:-1}),nodes.length>1&&(links=A.links(nodes),nodePaths=z.selectAll("path.link").data(links,function(t){return t.target.id}).remove(),nodesExit=z.selectAll("g.node").data(nodes,function(t){return t.id}).filter(function(t,e){return t.id==p.id?!1:!0}).remove()),parentLink=A.links(A.nodes(p.parent)),z.selectAll("path.link").filter(function(t,e){return t.target.id==p.id?!0:!1}).remove(),dragStarted=null}function i(){g=null,d3.selectAll(".ghostCircle").attr("class","ghostCircle"),d3.select(domNode).attr("class","node"),d3.select(domNode).select(".ghostCircle").attr("pointer-events",""),N(),null!==p&&(u(f),s(p),p=null)}function o(t){t._children&&(t.children=t._children,t.children.forEach(o),t._children=[])}function s(t){scale=X.scale(),x=-t.y0,y=-t.x0,x=x*scale+k/2,y=y*scale+w/2,d3.select("g").transition().duration(T).attr("transform","translate("+x+","+y+")scale("+scale+")"),X.scale(scale),X.translate([x,y])}function c(t){return t.children?(t._children=t.children,t.children=[]):t._children&&(t.children=t._children,t._children=[]),t}function d(t){d3.event.defaultPrevented||(t=c(t),u(t),s(t))}function u(t){var e=function(t,e){return t.values&&t.values[e]&&t.values[e]>5?t.values[e]:5},n=[1],r=function(t,e){e.children&&e.children.length>0&&(n.length<=t+1&&n.push(0),n[t+1]+=e.children.length,e.children.forEach(function(e){r(t+1,e)}))};r(0,f);var a=25*d3.max(n);A=A.size([a,k]);var l=A.nodes(f).reverse(),i=A.links(l);l.forEach(function(t){t.y=10*t.depth*v}),node=z.selectAll("g.node").data(l,function(t){return t.id||(t.id=++_)});var o=node.enter().append("g").call(dragListener).attr("class","node").attr("transform",function(e){return"translate("+t.y0+","+t.x0+")"}).on("click",d);o.append("circle").attr("class","nodeCircle").attr("r",0).style("fill",function(t){return t._children?"lightsteelblue":"#fff"}),o.append("text").attr("x",function(t){return t.children||t._children?-10:10}).attr("dy",".35em").attr("class","nodeText").attr("text-anchor",function(t){return t.children||t._children?"end":"start"}).text(function(t){return t.name}).style("fill-opacity",0),o.append("circle").attr("class","ghostCircle").attr("r",30).attr("opacity",.2).style("fill","red").attr("pointer-events","mouseover").on("mouseover",function(t){b(t)}).on("mouseout",function(t){L(t)}),node.select("text").attr("x",function(t){return t.children||t._children?-10:10}).attr("text-anchor",function(t){return t.children||t._children?"end":"start"}).text(function(t){return t.name}),node.select("circle.nodeCircle").attr("r",function(t){return e(t)}).style("fill",function(t){return t._children?"lightsteelblue":"#fff"});var s=node.transition().duration(T).attr("transform",function(t){return"translate("+t.y+","+t.x+")"});s.select("text").style("fill-opacity",1);var c=node.exit().transition().duration(T).attr("transform",function(e){return"translate("+t.y+","+t.x+")"}).remove();c.select("circle").attr("r",0),c.select("text").style("fill-opacity",0);var u=z.selectAll("path.link").data(i,function(t){return t.target.id});u.enter().insert("path","g").attr("class","link").attr("d",function(e){var n={x:t.x0,y:t.y0};return E({source:n,target:n})}),u.transition().duration(T).attr("d",E),u.exit().transition().duration(T).attr("d",function(e){var n={x:t.x,y:t.y};return E({source:n,target:n})}).remove(),l.forEach(function(t){t.x0=t.x,t.y0=t.y})}$("body").append('<div id="tree-container"></div>');var f,h=0,v=0,g=null,p=null,m=200,C=20,_=0,T=750,k=$("#tree-container").width(),w=$("#tree-container").height(),A=d3.layout.tree().size([w,k]),E=d3.svg.diagonal().projection(function(t){return[t.y,t.x]});e(t,function(t){h++,v=Math.max(t.name.length,v)},function(t){return t.children&&t.children.length>0?t.children:null}),n();var X=d3.behavior.zoom().scaleExtent([.1,3]).on("zoom",a),Y=d3.select("#tree-container").append("svg").attr("width",k).attr("height",w).attr("class","overlay").call(X);dragListener=d3.behavior.drag().on("dragstart",function(t){t!=f&&(dragStarted=!0,nodes=A.nodes(t),d3.event.sourceEvent.stopPropagation())}).on("drag",function(t){if(t!=f){if(dragStarted&&(domNode=this,l(t,domNode)),relCoords=d3.mouse($("svg").get(0)),relCoords[0]<C)panTimer=!0,r(this,"left");else if(relCoords[0]>$("svg").width()-C)panTimer=!0,r(this,"right");else if(relCoords[1]<C)panTimer=!0,r(this,"up");else if(relCoords[1]>$("svg").height()-C)panTimer=!0,r(this,"down");else try{clearTimeout(panTimer)}catch(e){}t.x0+=d3.event.dy,t.y0+=d3.event.dx;var n=d3.select(this);n.attr("transform","translate("+t.y0+","+t.x0+")"),N()}}).on("dragend",function(t){if(t!=f)if(domNode=this,g){var e=p.parent.children.indexOf(p);e>-1&&p.parent.children.splice(e,1),g.children||g._children?g.children?g.children.push(p):g._children.push(p):(g.children=[],g.children.push(p)),o(g),n(),i()}else i()});var b=function(t){g=t,N()},L=function(t){g=null,N()},N=function(){var t=[];null!==p&&null!==g&&(t=[{source:{x:g.y0,y:g.x0},target:{x:p.y0,y:p.x0}}]);var e=z.selectAll(".templink").data(t);e.enter().append("path").attr("class","templink").attr("d",d3.svg.diagonal()).attr("pointer-events","none"),e.attr("d",d3.svg.diagonal()),e.exit().remove()},z=Y.append("g");f=t,f.x0=w/2,f.y0=0,u(f),s(f)};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFnZy5qcyIsImNvbnN0YW50cy5qcyIsIkRlYnVnLmpzIiwiZHJhZy1saWIuanMiLCJkcmFnLmpzIiwiRmllbGQuanMiLCJpbml0LmpzIiwia2V5cy5qcyIsIm1hcmt1cC5qcyIsIk1lbnUuanMiLCJNZW51SXRlbS5qcyIsInJlc2l6ZS1jb2x1bW4uanMiLCJUcmVlLmpzIiwibW9kZWwvcHJvamVjdC5qcyIsIm1vZGVsL3Byb2plY3RzLmpzIiwicHJlc2VudGVyL2htcy5qcyIsInByZXNlbnRlci9zcHJlYWRTaGVldC5qcyIsInZpZXcvaGVhZGVyVmlldy5qcyIsInZpZXcvcHJvamVjdEFjdGlvbi5qcyIsInZpZXcvc3ByZWFkU2hlZXRWaWV3LmpzIiwidmlldy90cmVlVmlldy5qcyJdLCJuYW1lcyI6WyJhZ2dyZWdhdGVfYW55Iiwibm9kZSIsImZpZWxkIiwiY2hpbGRyZW4iLCJsZW5ndGgiLCJjaGlsZHJlblN1bSIsImkiLCJ2YWx1ZXMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJ2YWx1ZSIsInBhcnNlRmxvYXQiLCJET1dOX0FSUk9XX0lNQUdFX1BBVEgiLCJDSEVDS19NQVJLX0lNQUdFX1BBVEgiLCJCTEFOS19NQVJLX0lNQUdFX1BBVEgiLCJFTlRFUl9LRVkiLCJEZWJ1ZyIsInByaW50IiwibyIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5IiwicHJpbnRUcmVlIiwiVHJlZSIsImdldFRyZWUiLCJSRURJUFMiLCJkcmFnIiwiaW5pdCIsImVuYWJsZURyYWciLCJlbmFibGVEaXZzIiwiaGFuZGxlck9uTW91c2VEb3duIiwiaGFuZGxlck9uTW91c2VVcCIsImhhbmRsZXJPbk1vdXNlTW92ZSIsImVsZW1lbnREcm9wIiwicmVzZXRTdHlsZXMiLCJyZWdpc3RlckV2ZW50cyIsImNlbGxDaGFuZ2VkIiwiaGFuZGxlck9uUmVzaXplIiwic2V0VGFibGVSb3dDb2x1bW4iLCJzZXRQb3NpdGlvbiIsInNldFRkU3R5bGUiLCJnZXRUZFN0eWxlIiwiYm94T2Zmc2V0IiwiY2FsY3VsYXRlQ2VsbHMiLCJnZXRTY3JvbGxQb3NpdGlvbiIsImF1dG9TY3JvbGxYIiwiYXV0b1Njcm9sbFkiLCJjb3B5UHJvcGVydGllcyIsImNsb25lTGltaXQiLCJnZXRTdHlsZSIsImZpbmRQYXJlbnQiLCJyb3dPcGFjaXR5Iiwicm93Q2xvbmUiLCJyb3dEcm9wIiwibm9ybWFsaXplIiwiYmdTdHlsZU9sZCIsInRhYmxlIiwibW92ZWQiLCJjbG9uZWQiLCJ3aW5kb3dTY3JvbGxQb3NpdGlvbiIsIm9iak1hcmdpbiIsInNjcmVlbiIsIndpZHRoIiwiaGVpZ2h0Iiwic2Nyb2xsRGF0YSIsImNvbnRhaW5lciIsIm9iaiIsImVkZ2UiLCJwYWdlIiwieCIsInkiLCJkaXYiLCJmbGFnIiwiY2xvbmVkSWQiLCJjdXJyZW50Q2VsbCIsImRyYWdDb250YWluZXIiLCJkaXZCb3giLCJwb2ludGVyIiwidGhyZXNob2xkIiwic2hpZnRLZXkiLCJjbG9uZUNsYXNzIiwicm93Iiwicm93X29sZCIsInJvd19zb3VyY2UiLCJjZWxsIiwiY2VsbF9vbGQiLCJjZWxsX3NvdXJjZSIsIm9iak9sZCIsImhvdmVyIiwiY29sb3JUZCIsImNvbG9yVHIiLCJzY3JvbGwiLCJlbmFibGUiLCJib3VuZCIsInNwZWVkIiwic3R5bGUiLCJib3JkZXJEaXNhYmxlZCIsIm9wYWNpdHlEaXNhYmxlZCIsInJvd0VtcHR5Q29sb3IiLCJ0ZCIsImNsb25lIiwia2V5RGl2Iiwia2V5Um93Iiwic2VuZEJhY2siLCJkcm9wIiwiZXZlbnQiLCJjbG9uZWREcm9wcGVkIiwiY2xvbmVkRW5kMSIsImNsb25lZEVuZDIiLCJkcm9wcGVkIiwiZHJvcHBlZEJlZm9yZSIsImZpbmlzaCIsIm5vdENsb25lZCIsIm5vdE1vdmVkIiwicm93Q2hhbmdlZCIsInJvd0NsaWNrZWQiLCJyb3dDbG9uZWQiLCJyb3dEcm9wcGVkIiwicm93RHJvcHBlZEJlZm9yZSIsInJvd0Ryb3BwZWRTb3VyY2UiLCJyb3dNb3ZlZCIsInJvd05vdENsb25lZCIsInJvd05vdE1vdmVkIiwicmVkaXBzQ2xvbmUiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJyZWRpcHMiLCJhZGQiLCJ3aW5kb3ciLCJlIiwib2Zmc2V0IiwicG9zaXRpb24iLCJYIiwiWSIsImV2dCIsImNhbmNlbEJ1YmJsZSIsInN0b3BQcm9wYWdhdGlvbiIsImdldFNlbGVjdGlvbiIsInJlbW92ZUFsbFJhbmdlcyIsInNlbGVjdGlvbiIsInR5cGUiLCJlbXB0eSIsImVycm9yIiwiY2xpZW50WCIsImNsaWVudFkiLCJ0aGlzIiwiY2xhc3NOYW1lIiwiaW5kZXhPZiIsImN1cnJlbnQiLCJwYXJlbnROb2RlIiwiZWwiLCJ0YWJsZU1pbmkiLCJyb3dPYmoiLCJub2RlTmFtZSIsInVuZGVmaW5lZCIsImlubmVySFRNTCIsImNsYXNzTGlzdCIsInNvdXJjZVJvdyIsInJvd3MiLCJyb3dJZHgiLCJ0ck1pbmkiLCJkZWxldGVUYWJsZVJvdyIsInRibCIsImVtcHR5Um93IiwiZGVsZXRlUm93Iiwicm93SW5kZXgiLCJ0YWJsZVJvdyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJuZXh0U2libGluZyIsInJfcm93IiwibXRfdHIiLCJyZW1vdmUiLCJvbnNlbGVjdHN0YXJ0IiwiZG9jdW1lbnRFbGVtZW50Iiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJ0YXJnZXQiLCJjZWxscyIsImJhY2tncm91bmRDb2xvciIsImNsb25lU291cmNlRGl2Iiwib25tb3VzZWRvd24iLCJ0b3AiLCJsZWZ0IiwiekluZGV4Iiwic2NhIiwiZGVsdGFYIiwiZGVsdGFZIiwic2Nyb2xsUG9zaXRpb24iLCJNYXRoIiwiYWJzIiwiY29udGFpblRhYmxlIiwicGFnZVlPZmZzZXQiLCJzY3JvbGxUb3AiLCJhdXRvc2Nyb2xsIiwibWlkc3RYIiwibWlkc3RZIiwicHJldmlvdXMiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJyb3dfb2Zmc2V0Iiwicm93X2ZvdW5kIiwidG9zIiwib2Zmc2V0SGVpZ2h0IiwicmkiLCJ0IiwidHIiLCJzIiwiY29sb3IiLCJ0b1N0cmluZyIsImJvcmRlclRyIiwiYm9yZGVyVG9wIiwiYm9yZGVyQm90dG9tIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJUb3BTdHlsZSIsImJvcmRlclRvcENvbG9yIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJib3R0b20iLCJib3JkZXJCb3R0b21TdHlsZSIsImJvcmRlckJvdHRvbUNvbG9yIiwiYyIsInJpZ2h0IiwiYm9yZGVyIiwibmFtZSIsImJveCIsImJveF9zY3JvbGwiLCJvTGVmdCIsIm9Ub3AiLCJib3hPbGQiLCJvZmZzZXRMZWZ0Iiwic2Nyb2xsTGVmdCIsIm9mZnNldFRvcCIsIm9mZnNldFBhcmVudCIsIm9mZnNldFdpZHRoIiwiY2IiLCJkaXNwbGF5Iiwic2Nyb2xsWSIsInNjcm9sbFgiLCJzbyIsInBvcyIsIm9sZCIsIm1heHNwIiwiZWRnZUNyb3NzZWQiLCJjbGllbnRXaWR0aCIsInNjcm9sbEJ5IiwicGFyc2VJbnQiLCJpc05hTiIsInNldFRpbWVvdXQiLCJjbGllbnRIZWlnaHQiLCJzcmMiLCJjbG4iLCJjaGlsZHMiLCJjb3B5IiwiZTEiLCJlMiIsImVuYWJsZWQiLCJlbDEiLCJlbDIiLCJ0biIsIm1hdGNoQXJyYXkiLCJsaW1pdFR5cGUiLCJsaW1pdCIsImNsYXNzZXMiLCJtYXRjaCIsInJlcGxhY2UiLCJlbmFibGVfZmxhZyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJqIiwiayIsImJvcmRlclN0eWxlIiwib3BhY2l0eSIsImN1cnNvciIsIm92ZXJmbG93IiwidGJscyIsInJlZ2V4RHJhZyIsInJlZ2V4Tm9BdXRvc2Nyb2xsIiwiYm9yZGVyRW5hYmxlZCIsInRlc3QiLCJmaWx0ZXIiLCJzdHlsZV9uYW1lIiwiY3VycmVudFN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImRlZmF1bHRWaWV3IiwidGFnX25hbWUiLCJzdHIiLCJ0ZE5vZGVMaXN0IiwiY2hpbGROb2RlcyIsIm5vZGVUeXBlIiwiZXZlbnROYW1lIiwiaGFuZGxlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsInJkIiwibmV3UGFyZW50Um93IiwibW92ZWRJRCIsIm5ld1BhcmVudElEIiwiU3ByZWFkU2hlZXRWaWV3IiwibW92ZU5vZGUiLCJyb3dEZWxldGVkIiwicm93VW5kZWxldGVkIiwiRmllbGQiLCJkYXRhdHlwZSIsIk5VTUJFUiIsImZvcm1hdCIsIk5VTUJFUl9GT1JNQVQiLCJwcmVjaXNpb24iLCJhZ2dfdHlwZSIsIk5PX0FHR1JFR0FUSU9OIiwiYWdnX3F0eV9maWVsZCIsIlNUUklORyIsIkNIT0lDRSIsIlNVTV9BTllfQUdHUkVHQVRJT04iLCJQRVJDRU5UX0ZPUk1BVCIsIlNDSUVOVElGSUNfRk9STUFUIiwiZm9ybWF0VmFsdWUiLCJOdW1iZXIiLCJ0b0ZpeGVkIiwidG9FeHBvbmVudGlhbCIsInNjcm9sbEJhcldpZHRoIiwiJCIsInJlYWR5IiwiZ2V0U2Nyb2xsQmFyV2lkdGgiLCJvbmtleWRvd24iLCJjaGVja0tleSIsImhtcyIsImZpcnN0Q2hpbGQiLCJib2R5Iiwia2V5Q29kZSIsIktFWV9VUF9BUlJPVyIsInByZXZlbnREZWZhdWx0IiwicHJldlJvdyIsImdldEFuY2VzdG9yVGFnIiwiYWN0aXZlRWxlbWVudCIsInByZXYiLCJnZXROZXh0RWxlbWVudElEIiwiZm9jdXMiLCJLRVlfRE9XTl9BUlJPVyIsIm5leHRSb3ciLCJuZXh0IiwiS0VZX1JJR0hUX0FSUk9XIiwiZmluZCIsIktFWV9MRUZUX0FSUk9XIiwibmV3Um93Iiwic3BsaXQiLCJmaWVsZE5hbWUiLCJ0YWdOYW1lIiwidG9Mb3dlckNhc2UiLCJhZGRSb3ciLCJtYXJrdXAiLCJkcmFnSGFuZGxlIiwiZGVsZXRlQnV0dG9uIiwiY29weUJ1dHRvbiIsImdldE5vZGVDb250ZW50TWFya3VwIiwiZGVwdGhBZGp1c3RtZW50IiwiZGVwdGgiLCJfY2hpbGRyZW4iLCJERUZBVUxUX05PREVfSU5QVVRfV0lEVEgiLCJnZXRGaWVsZE1lbnVNYXJrdXAiLCJmaWVsZHMiLCJnZXRGaWVsZCIsIm1lbnUiLCJNZW51IiwibnVtYmVySXRlbSIsIk1lbnVJdGVtIiwiZm9ybWF0SXRlbSIsIm51bWJlckZvcm1hdEl0ZW0iLCJpdGVtcyIsInB1c2giLCJkaXNwbGF5U3RyaW5nIiwicGVyY2VudEZvcm1hdEl0ZW0iLCJzY2llbnRpZmljRm9ybWF0SXRlbSIsImFnZ3JlZ2F0aW9uSXRlbSIsInN1bUFueUFnZ0l0ZW0iLCJpbmRleCIsImYiLCJnZW5lcmF0ZU1lbnVNYXJrdXAiLCJpdGVtIiwiY2hlY2tNYXJrQ2xhc3MiLCJjaGVja2VkIiwiaGFuZGxlQ2xpY2siLCJjbGlja2VkIiwiZ2V0TWVudUl0ZW0iLCJwYXJlbnQiLCJnZXRNZW51SXRlbVBhcmVudCIsInZhck5hbWUiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwidXBkYXRlRmllbGRGb3JtYXR0aW5nIiwicHJvdG90eXBlIiwibWVudUl0ZW0iLCJmb3VuZCIsInJlc2l6ZUNvbHVtbkxlZnQiLCJyZXNpemVGaWVsZCIsIk1JTl9DT0xVTU5fV0lEVEgiLCJHUklQU19XSURUSCIsInN0YXJ0UmVzaXplIiwiZ3JpcCIsImJpbmQiLCJyZXNpemVEcmFnIiwicmVzaXplRW5kIiwidmlzaWJpbGl0eSIsInBhZ2VYIiwidW5iaW5kIiwibmV3V2lkdGgiLCJjb2x1bW5DZWxscyIsInRyZWUiLCJzZXRUcmVlIiwiZ2V0RmllbGRzIiwicmVtb3ZlTm9kZSIsInNwbGljZSIsImFkZE5vZGUiLCJzZXREZXB0aHMiLCJpbnNlcnROb2RlIiwic291cmNlTm9kZSIsImNsb25lTm9kZSIsIm5ld05vZGUiLCJleHRlbmQiLCJhc3NpZ25OZXdOb2RlSURzIiwibmV4dE5vZGVJRCIsImV4cGFuZE5vZGUiLCJjb2xsYXBzZU5vZGUiLCJpc05vZGVDaGlsZGxlc3MiLCJpc05vZGVDb2xsYXBzZWQiLCJpc05vZGVFeHBhbmRlZCIsImZpbmROb2RlIiwibm9kZUlEIiwiZm91bmROb2RlIiwiZm91bmRQYXJlbnQiLCJ1cGRhdGVOb2RlVmFsdWUiLCJ0cmF2ZXJzZSIsImNoaWxkcmVuRm4iLCJ2aXNpdEZuIiwidHJhdmVyc2VEZXNjZW5kYW50cyIsImdldENoaWxkcmVuIiwicHJvamVjdCIsInNhdmVUb0RhdGFiYXNlIiwiYWpheCIsInVybCIsImRhdGFUeXBlIiwiZGF0YSIsImpzb24iLCJjbGVhbnNlRGF0YSIsImFkZEZpZWxkIiwicHJvamVjdHMiLCJmaW5pc2hGbiIsImRvbmUiLCJjcmVhdGVOZXdQcm9qZWN0IiwibmV3UHJvamVjdE5hbWUiLCJwcm9qZWN0SUQiLCJuZXh0UHJvamVjdElEIiwicHJvamVjdE5hbWUiLCJ2ZXJzaW9uIiwib3BlblByb2plY3QiLCJoZWFkZXJWaWV3IiwicmVuZGVyIiwic3ByZWFkU2hlZXQiLCJ2aWV3IiwiZGVzdHJveSIsInNwcmVhZFNoZWV0VmlldyIsInN3aXRjaFZpZXciLCJ0cmVlVmlldyIsInVwZGF0ZUZpZWxkVmFsdWUiLCJ2YWwiLCJyYXdWYWx1ZSIsImZvcm1hdHRlZFZhbHVlIiwiaGFzQ2hpbGRyZW4iLCJjaGlsZHJlbkhpZGRlbiIsImZvckVhY2giLCJodG1sIiwiY2hhbmdlIiwic2VsZWN0UHJvamVjdCIsImNsaWNrIiwia2V5dXAiLCJwcm9qZWN0U2VsZWN0b3IiLCJhdHRyIiwic2hvdyIsInNlbGVjdCIsImhpZGUiLCJuZXdQcm9qZWN0SUQiLCJvcHRpb24iLCJ0ZXh0IiwicHJvamVjdEFjdGlvbiIsImVudGVyUHJlc3NlZCIsImhhbmRsZSIsImFwcGVuZCIsInNwcmVhZFNoZWV0TWFya3VwIiwicmVuZGVyRmllbGRzUm93IiwicmVuZGVyRGF0YVRhYmxlIiwicmVuZGVyTm9kZUNvbHVtbiIsImZpZWxkSGVhZGVyIiwic2hvd0ZpZWxkTWVudSIsImNzcyIsImFwcGVuZFRvIiwibW91c2VsZWF2ZSIsImNoaWxkIiwicmVuZGVyRGF0YVJvdyIsInBhcmVudFJvdyIsImluc2VydEFmdGVyIiwicmVuZGVyRGF0YUNlbGwiLCJmaWVsZENlbGwiLCJvbiIsInJlbmRlck5vZGVDZWxsIiwicGFyZW50Q2VsbCIsIm5vZGVSb3ciLCJhZGROb2RlQ29udGVudCIsInVwZGF0ZU5vZGVOYW1lIiwiZXhwYW5kSWNvbiIsIm5vZGVJbnB1dCIsIndpZHRoQWRqdXN0bWVudCIsInRvZ2dsZU5vZGVFeHBhbnNpb24iLCJuIiwiZW5hYmxlRHJhZ2dpbmciLCJyZWRyYXdOb2RlQ29udGVudCIsImZpZWxkSGVhZGVyTWFya3VwIiwiZWFjaCIsIm5ld1BhcmVudE5vZGUiLCJhZGREYXRhUm93IiwiaW5zZXJ0QmVmb3JlTm9kZSIsImNvcHlOb2RlIiwiZGVsZXRlTm9kZSIsIlRyZWVWaWV3IiwidHJlZURhdGEiLCJ2aXNpdCIsImNvdW50Iiwic29ydFRyZWUiLCJzb3J0IiwiYSIsImIiLCJwYW4iLCJkb21Ob2RlIiwiZGlyZWN0aW9uIiwicGFuU3BlZWQiLCJwYW5UaW1lciIsImNsZWFyVGltZW91dCIsInRyYW5zbGF0ZUNvb3JkcyIsImQzIiwidHJhbnNmb3JtIiwic3ZnR3JvdXAiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlIiwidHJhbnNsYXRlWSIsInNjYWxlWCIsInNjYWxlIiwic2NhbGVZIiwiem9vbUxpc3RlbmVyIiwidHJhbnNpdGlvbiIsInpvb20iLCJpbml0aWF0ZURyYWciLCJkIiwiZHJhZ2dpbmdOb2RlIiwic2VsZWN0QWxsIiwibm9kZXMiLCJsaW5rcyIsIm5vZGVQYXRocyIsIm5vZGVzRXhpdCIsInBhcmVudExpbmsiLCJkcmFnU3RhcnRlZCIsImVuZERyYWciLCJzZWxlY3RlZE5vZGUiLCJ1cGRhdGVUZW1wQ29ubmVjdG9yIiwidXBkYXRlIiwicm9vdCIsImNlbnRlck5vZGUiLCJleHBhbmQiLCJzb3VyY2UiLCJ5MCIsIngwIiwidmlld2VyV2lkdGgiLCJ2aWV3ZXJIZWlnaHQiLCJkdXJhdGlvbiIsInRvZ2dsZUNoaWxkcmVuIiwiZGVmYXVsdFByZXZlbnRlZCIsImNvbXB1dGVOb2RlU2l6ZSIsImxldmVsV2lkdGgiLCJjaGlsZENvdW50IiwibGV2ZWwiLCJuZXdIZWlnaHQiLCJtYXgiLCJzaXplIiwicmV2ZXJzZSIsIm1heExhYmVsTGVuZ3RoIiwibm9kZUVudGVyIiwiZW50ZXIiLCJjYWxsIiwiZHJhZ0xpc3RlbmVyIiwib3ZlckNpcmNsZSIsIm91dENpcmNsZSIsIm5vZGVVcGRhdGUiLCJub2RlRXhpdCIsImV4aXQiLCJsaW5rIiwiaW5zZXJ0IiwiZGlhZ29uYWwiLCJ0b3RhbE5vZGVzIiwicGFuQm91bmRhcnkiLCJsYXlvdXQiLCJzdmciLCJwcm9qZWN0aW9uIiwiYmVoYXZpb3IiLCJzY2FsZUV4dGVudCIsImJhc2VTdmciLCJzb3VyY2VFdmVudCIsInJlbENvb3JkcyIsIm1vdXNlIiwiZ2V0IiwiZHkiLCJkeCJdLCJtYXBwaW5ncyI6IkFBQUEsUUFBU0EsZUFBY0MsRUFBTUMsR0FFM0IsR0FBSUQsRUFBS0UsVUFBcUMsSUFBekJGLEVBQUtFLFNBQVNDLE9BWW5DLENBR0UsSUFBSSxHQUZBQyxHQUFjLEVBRVZDLEVBQUksRUFBR0EsRUFBSUwsRUFBS0UsU0FBU0MsT0FBUUUsSUFFdkNELEdBQWVMLGNBQWNDLEVBQUtFLFNBQVNHLEdBQUlKLEVBV2pELE9BUklELEdBQUtNLFNBRVBOLEVBQUtNLFdBR1BOLEVBQUtNLE9BQU9MLEdBQVNHLEVBQ3JCRyxTQUFTQyxlQUFlUCxFQUFRRCxFQUFLUyxJQUFJQyxNQUFRTixFQUUxQ0EsRUExQlAsTUFBSUosR0FBS00sUUFBV04sRUFBS00sT0FBT0wsR0FNdkJVLFdBQVdYLEVBQUtNLE9BQU9MLElBSnZCO0FDTmIsR0FBSVcsdUJBQXdCLHdCQUN4QkMsc0JBQXdCLHVCQUN4QkMsc0JBQXdCLHVCQUV4QkMsVUFBWTtBQ0poQixRQUFTQyxVQUVUQSxNQUFNQyxNQUFRLFNBQVNDLEdBRXJCQyxRQUFRQyxJQUFJQyxLQUFLQyxVQUFVSixFQUFHLEtBQU0sT0FHdENGLE1BQU1PLFVBQVksV0FFaEJKLFFBQVFDLElBQUlDLEtBQUtDLFVBQVVFLEtBQUtDLFVBQVcsS0FB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ZEEsS0FBSyxJQUFLNkQsR0FBRzZELElBQUlKLFlBQ2pCdEgsS0FBSyxpQkFBa0IsUUFFNUJvSCxFQUFLcEgsS0FBSyxJQUFLNkQsR0FBRzZELElBQUlKLFlBRXRCRixFQUFLRCxPQUFPbmEsVUFrT1orVyxFQUFXK0QsRUFBUXBILE9BQU8sSUFHOUI2RSxHQUFPeEMsRUFDUHdDLEVBQUtLLEdBQUtFLEVBQWUsRUFDekJQLEVBQUtJLEdBQUssRUFRVkwsRUFBT0MsR0FDUEMsRUFBV0QiLCJmaWxlIjoiaG1zLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGFnZ3JlZ2F0ZV9hbnkobm9kZSwgZmllbGQpXHJcbntcclxuICBpZighbm9kZS5jaGlsZHJlbiB8fCBub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMClcclxuICB7XHJcbiAgICBpZighbm9kZS52YWx1ZXMgfHwgIW5vZGUudmFsdWVzW2ZpZWxkXSlcclxuICAgIHtcclxuICAgICAgcmV0dXJuIDAuMDtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgIHtcclxuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQobm9kZS52YWx1ZXNbZmllbGRdKTtcclxuICAgIH1cclxuICB9XHJcbiAgZWxzZVxyXG4gIHtcclxuICAgIHZhciBjaGlsZHJlblN1bSA9IDAuMDtcclxuXHJcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKylcclxuICAgIHtcclxuICAgICAgY2hpbGRyZW5TdW0gKz0gYWdncmVnYXRlX2FueShub2RlLmNoaWxkcmVuW2ldLCBmaWVsZCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYoIW5vZGUudmFsdWVzKVxyXG4gICAge1xyXG4gICAgICBub2RlLnZhbHVlcyA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIG5vZGUudmFsdWVzW2ZpZWxkXSA9IGNoaWxkcmVuU3VtOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZSB0aGUgbW9kZWxcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGZpZWxkICsgbm9kZS5pZCkudmFsdWUgPSBjaGlsZHJlblN1bTsgICAgICAgICAvL3VwZGF0ZSB0aGUgdmlld1xyXG5cclxuICAgIHJldHVybiBjaGlsZHJlblN1bTtcclxuICB9XHJcbn0iLCJ2YXIgRE9XTl9BUlJPV19JTUFHRV9QQVRIID0gJ2ltYWdlcy9kb3duLWFycm93LnBuZyc7XHJcbnZhciBDSEVDS19NQVJLX0lNQUdFX1BBVEggPSAnaW1hZ2VzL2NoZWNrbWFyay5wbmcnO1xyXG52YXIgQkxBTktfTUFSS19JTUFHRV9QQVRIID0gJ2ltYWdlcy9ibGFua21hcmsucG5nJztcclxuXHJcbnZhciBFTlRFUl9LRVkgPSAxMzsiLCJmdW5jdGlvbiBEZWJ1ZygpIHt9XHJcblxyXG5EZWJ1Zy5wcmludCA9IGZ1bmN0aW9uKG8pXHJcbntcclxuICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShvLCBudWxsLCAnXFx0JykpOyAgXHJcbn07XHJcblxyXG5EZWJ1Zy5wcmludFRyZWUgPSBmdW5jdGlvbigpXHJcbntcclxuICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShUcmVlLmdldFRyZWUoKSwgbnVsbCwgJ1xcdCcpKTtcclxufTsiLCIvKlxyXG5Db3B5cmlnaHQgKGMpIDIwMDgtMjAxMSwgd3d3LnJlZGlwcy5uZXQgQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuQ29kZSBsaWNlbnNlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2U6IGh0dHA6Ly93d3cucmVkaXBzLm5ldC9saWNlbnNlL1xyXG5odHRwOi8vd3d3LnJlZGlwcy5uZXQvamF2YXNjcmlwdC9kcmFnLWFuZC1kcm9wLXRhYmxlLWNvbnRlbnQvXHJcbiovXHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBSRURJUFMgPSBSRURJUFMgfHwge307ICAgICAgLy9jcmVhdGUgUkVESVBTIG5hbWVzcGFjZSAoaWYgaXMgbm90IGFscmVhZHkgZGVmaW5lZCBpbiBhbm90aGVyIFJFRElQUyBwYWNrYWdlKVxyXG5cclxuLy9SRURJUFMuZHJhZyBpcyBhIEphdmFTY3JpcHQgZHJhZyBhbmQgZHJvcCBsaWJyYXJ5IGZvY3VzZWQgb24gZHJhZ2dpbmcgdGFibGUgY29udGVudCAoRElWIGVsZW1lbnRzKSBhbmQgdGFibGUgcm93cy5cclxuUkVESVBTLmRyYWcgPSAoZnVuY3Rpb24gKClcclxue1xyXG4gICAgLy8gbWV0aG9kc1xyXG4gIHZhciBpbml0LCAgICAgICAgICAgLy8gaW5pdGlhbGl6YXRpb25cclxuICAgIGVuYWJsZURyYWcsICAgICAgICAgLy8gbWV0aG9kIGF0dGFjaGVzIC8gZGV0YWNoZXMgb25tb3VzZWRvd24gYW5kIG9uc2Nyb2xsIGV2ZW50IGhhbmRsZXJzIGZvciBESVYgZWxlbWVudHNcclxuICAgIGVuYWJsZURpdnMsXHJcbiAgICBoYW5kbGVyT25Nb3VzZURvd24sICAgICAvLyBvbm1vdXNlZG93biBoYW5kbGVyXHJcbiAgICBoYW5kbGVyT25Nb3VzZVVwLCAgICAgLy8gb25tb3VzZXVwIGhhbmRsZXJcclxuICAgIGhhbmRsZXJPbk1vdXNlTW92ZSwgICAgIC8vIG9ubW91c2Vtb3ZlIGhhbmRsZXIgZm9yIHRoZSBkb2N1bWVudCBsZXZlbFxyXG4gICAgZWxlbWVudERyb3AsICAgICAgICAvLyBkcm9wIGVsZW1lbnQgdG8gdGhlIHRhYmxlIGNlbGxcclxuICAgIHJlc2V0U3R5bGVzLCAgICAgICAgLy8gcmVzZXQgb2JqZWN0IHN0eWxlcyBhZnRlciBlbGVtZW50IGlzIGRyb3BwZWRcclxuICAgIHJlZ2lzdGVyRXZlbnRzLCAgICAgICAvLyByZWdpc3RlciBldmVudCBsaXN0ZW5lcnMgZm9yIERJViBlbGVtZW50XHJcbiAgICBjZWxsQ2hhbmdlZCwgICAgICAgIC8vIHByaXZhdGUgbWV0aG9kIGNhbGxlZCBmcm9tIGhhbmRsZXJPbk1vdXNlTW92ZSgpLCBhdXRvU2Nyb2xsWCgpLCBhdXRvU2Nyb2xsWSgpXHJcbiAgICBoYW5kbGVyT25SZXNpemUsICAgICAgLy8gb25yZXNpemUgd2luZG93IGV2ZW50IGhhbmRsZXJcclxuICAgIHNldFRhYmxlUm93Q29sdW1uLCAgICAgIC8vIGZ1bmN0aW9uIHNldHMgY3VycmVudCB0YWJsZSwgcm93IGFuZCBjZWxsXHJcbiAgICBzZXRQb3NpdGlvbiwgICAgICAgIC8vIGZ1bmN0aW9uIHNldHMgY29sb3IgZm9yIHRoZSBjdXJyZW50IHRhYmxlIGNlbGwgYW5kIHJlbWVtYmVycyBwcmV2aW91cyBwb3NpdGlvbiBhbmQgY29sb3JcclxuICAgIHNldFRkU3R5bGUsICAgICAgICAgLy8gbWV0aG9kIHNldHMgYmFja2dyb3VuZCBjb2xvciBhbmQgYm9yZGVyIHN0eWxlcyBmb3IgVERcclxuICAgIGdldFRkU3R5bGUsICAgICAgICAgLy8gbWV0aG9kIHJldHVybnMgb2JqZWN0IGNvbnRhaW5pbmcgYmFja2dyb3VuZCBjb2xvciBhbmQgYm9yZGVyIHN0eWxlcyBmb3IgVERcclxuICAgIGJveE9mZnNldCwgICAgICAgICAgLy8gY2FsY3VsYXRlcyBvYmplY3QgKGJveCkgb2Zmc2V0ICh0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQpXHJcbiAgICBjYWxjdWxhdGVDZWxscywgICAgICAgLy8gY2FsY3VsYXRlcyB0YWJsZSBjb2x1bW5zIGFuZCByb3cgb2Zmc2V0cyAoY2VsbHMgZGltZW5zaW9ucylcclxuICAgIGdldFNjcm9sbFBvc2l0aW9uLCAgICAgIC8vIHJldHVybnMgc2Nyb2xsIHBvc2l0aW9ucyBpbiBhcnJheVxyXG4gICAgYXV0b1Njcm9sbFgsICAgICAgICAvLyBob3Jpem9udGFsIGF1dG8gc2Nyb2xsIGZ1bmN0aW9uXHJcbiAgICBhdXRvU2Nyb2xsWSwgICAgICAgIC8vIHZlcnRpY2FsIGF1dG8gc2Nyb2xsIGZ1bmN0aW9uXHJcbiAgICBjb3B5UHJvcGVydGllcywgICAgICAgLy8gbWV0aG9kIGNvcGllcyBjdXN0b20gcHJvcGVydGllcyBmcm9tIHNvdXJjZSBlbGVtZW50IHRvIHRoZSBjbG9uZWQgZWxlbWVudC5cclxuICAgIGNsb25lTGltaXQsICAgICAgICAgLy8gY2xvbmUgbGltaXQgKGFmdGVyIGNsb25pbmcgb2JqZWN0LCB0YWtlIGNhcmUgYWJvdXQgY2xpbWl0MV9YIG9yIGNsaW1pdDJfWCBjbGFzc25hbWVzKVxyXG4gICAgZ2V0U3R5bGUsICAgICAgICAgLy8gbWV0aG9kIHJldHVybnMgc3R5bGUgdmFsdWUgb2YgcmVxdWVzdGVkIG9iamVjdCBhbmQgc3R5bGUgbmFtZVxyXG4gICAgZmluZFBhcmVudCwgICAgICAgICAvLyBtZXRob2QgcmV0dXJucyBhIHJlZmVyZW5jZSBvZiB0aGUgcmVxdWlyZWQgcGFyZW50IGVsZW1lbnRcclxuICAgIHJvd09wYWNpdHksICAgICAgICAgLy8gbWV0aG9kIHNldHMgb3BhY2l0eSB0byB0YWJsZSByb3cgKGVsLCBvcGFjaXR5LCBjb2xvcilcclxuICAgIHJvd0Nsb25lLCAgICAgICAgIC8vIGNsb25lIHRhYmxlIHJvdyAtIGlucHV0IHBhcmFtZXRlciBpcyBESVYgd2l0aCBjbGFzcyBuYW1lIFwicmVkaXBzLXJvd1wiIC0+IERJViBjbGFzcz1cInJlZGlwcy1kcmFnIHJlZGlwcy1yb3dcIlxyXG4gICAgcm93RHJvcCwgICAgICAgICAgLy8gZnVuY3Rpb24gZHJvcHMgKGRlbGV0ZSBvbGQgJiBpbnNlcnQgbmV3KSB0YWJsZSByb3cgKGlucHV0IHBhcmFtZXRlcnMgYXJlIGN1cnJlbnQgdGFibGUgYW5kIHJvdylcclxuICAgIG5vcm1hbGl6ZSwgICAgICAgICAgLy8gcHJpdmF0ZSBtZXRob2QgcmV0dXJucyBub3JtYWxpemVkIHNwYWNlcyBmcm9tIGlucHV0IHN0cmluZ1xyXG5cclxuICAgIC8vIHByaXZhdGUgcGFyYW1ldGVyc1xyXG4gICAgb2JqTWFyZ2luID0gbnVsbCwgICAgIC8vIHNwYWNlIGZyb20gY2xpY2tlZCBwb2ludCB0byB0aGUgb2JqZWN0IGJvdW5kcyAodG9wLCByaWdodCwgYm90dG9tLCBsZWZ0KVxyXG5cclxuICAgIC8vIHdpbmRvdyB3aWR0aCBhbmQgaGVpZ2h0IChwYXJhbWV0ZXJzIGFyZSBzZXQgaW4gb25sb2FkIGFuZCBvbnJlc2l6ZSBldmVudCBoYW5kbGVyKSwganVzdCBmb3IgYSBub3RlOiB3aW5kb3cgYW5kIFdpbmRvdyBpcyByZXNlcnZlZCB3b3JkIGluIEpTIHNvIEkgbmFtZWQgdmFyaWFibGUgXCJzY3JlZW5cIilcclxuICAgIHNjcmVlbiA9IHt3aWR0aDogMCwgaGVpZ2h0OiAwfSxcclxuXHJcbiAgICAvLyBkZWZpbmUgc2Nyb2xsIG9iamVjdCB3aXRoIGNvbnRhaW5lZCBwcm9wZXJ0aWVzICh0aGlzIGlzIHByaXZhdGUgcHJvcGVydHkpXHJcbiAgICBzY3JvbGxEYXRhID0ge3dpZHRoIDogbnVsbCwgLy8gc2Nyb2xsIHdpZHRoIG9mIHRoZSB3aW5kb3cgKGl0IGlzIHVzdWFsbHkgZ3JlYXRlciB0aGVuIHdpbmRvdylcclxuICAgICAgICBoZWlnaHQgOiBudWxsLCAgICAvLyBzY3JvbGwgaGVpZ2h0IG9mIHRoZSB3aW5kb3cgKGl0IGlzIHVzdWFsbHkgZ3JlYXRlciB0aGVuIHdpbmRvdylcclxuICAgICAgICBjb250YWluZXIgOiBbXSwgICAvLyBzY3JvbGxhYmxlIGNvbnRhaW5lciBhcmVhcyAoY29udGFpbnMgYXV0b3Njcm9sbCBhcmVhcywgcmVmZXJlbmNlIHRvIHRoZSBjb250YWluZXIgYW5kIHNjcm9sbCBkaXJlY3Rpb24pXHJcbiAgICAgICAgb2JqIDogbnVsbH0sICAgIC8vIHNjcm9sbCBvYmplY3QgKG5lZWRlZCBpbiBhdXRvc2Nyb2xsIGZvciByZWN1cnNpdmUgY2FsbHMpXHJcblxyXG4gICAgZWRnZSA9IHtwYWdlOiB7eDogMCwgeTogMH0sIC8vIGF1dG9zY3JvbGwgYm91bmQgdmFsdWVzIGZvciBwYWdlIGFuZCBkaXYgYXMgc2Nyb2xsYWJsZSBjb250YWluZXJcclxuICAgICAgICBkaXY6ICB7eDogMCwgeTogMH0sIC8vIGNsb3NlciB0byB0aGUgZWRnZSwgZmFzdGVyIHNjcm9sbGluZ1xyXG4gICAgICAgIGZsYWc6IHt4OiAwLCB5OiAwfX0sLy8gZmxhZ3MgYXJlIG5lZWRlZCB0byBwcmV2ZW50IG11bHRpcGxlIGNhbGxzIG9mIGF1dG9TY3JvbGxYIGFuZCBhdXRvU2Nyb2xsWSBmcm9tIG9ubW91c2Vtb3ZlIGV2ZW50IGhhbmRsZXJcclxuXHJcbiAgICBiZ1N0eWxlT2xkLCAgICAgICAgIC8vIChvYmplY3QpIG9sZCB0ZCBzdHlsZXMgKGJhY2tncm91bmQgY29sb3IgYW5kIGJvcmRlciBzdHlsZXMpXHJcblxyXG4gICAgdGFibGUsICAgICAgICAvLyB0YWJsZSBvZmZzZXRzIGFuZCByb3cgb2Zmc2V0cyAoaW5pdGlhbGl6ZWQgaW4gb25sb2FkIGV2ZW50KVxyXG4gICAgbW92ZWQsICAgICAgICAgICAgLy8gKGJvb2xlYW4pIHRydWUgaWYgZWxlbWVudCBpcyBtb3ZlZFxyXG4gICAgY2xvbmVkLCAgICAgICAgICAgLy8gKGJvb2xlYW4pIHRydWUgaWYgZWxlbWVudCBpcyBjbG9uZWRcclxuICAgIGNsb25lZElkID0gW10sICAgICAgICAvLyBuZWVkZWQgZm9yIGluY3JlbWVudCBJRCBvZiBjbG9uZWQgZWxlbWVudHNcclxuICAgIGN1cnJlbnRDZWxsID0gW10sICAgICAvLyBjdXJyZW50IGNlbGwgYm91bmRzICh0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQpIGFuZCBcImNvbnRhaW5UYWJsZVwiIGZsYWcgZm9yIG5lc3RlZCB0YWJsZXNcclxuICAgIGRyYWdDb250YWluZXIgPSBudWxsLCAgIC8vIGRyYWcgY29udGFpbmVyIHJlZmVyZW5jZVxyXG4gICAgZGl2Qm94ID0gbnVsbCwgICAgICAgIC8vIGRpdiBkcmFnIGJveDogdG9wLCByaWdodCwgYm90dG9tIGFuZCBsZWZ0IG1hcmdpbiAoZGVjcmVhc2UgbnVtYmVyIGNhbGxzIG9mIHNldFRhYmxlUm93Q29sdW1uKVxyXG4gICAgcG9pbnRlciA9IHt4OiAwLCB5OiAwfSwgICAvLyBtb3VzZSBwb2ludGVyIHBvc2l0aW9uICh0aGlzIHByb3BlcnRpZXMgYXJlIHNldCBpbiBoYW5kbGVyT25Nb3VzZU1vdmUoKSAtIG5lZWRlZCBmb3IgYXV0b3Njcm9sbClcclxuICAgIHRocmVzaG9sZCA9IHt4OiAwLCAgICAgIC8vIGluaXRpYWwgeCwgeSBwb3NpdGlvbiBvZiBtb3VzZSBwb2ludGVyXHJcbiAgICAgICAgICB5OiAwLFxyXG4gICAgICAgICAgdmFsdWU6IDcsICAgLy8gdGhyZXNob2xkIGRpc3RhbmNlIHZhbHVlXHJcbiAgICAgICAgICBmbGFnOiBmYWxzZX0sIC8vIHRocmVzaG9sZCBmbGFnXHJcbiAgICBzaGlmdEtleSA9IGZhbHNlLCAgICAgLy8gKGJvb2xlYW4pIHRydWUgaWYgc2hpZnQga2V5IGlzIHByZXNzZWQgKHNldCBpbiBoYW5kbGVyX21vdXNlZG93bilcclxuICAgIGNsb25lQ2xhc3MgPSBmYWxzZSwgICAgIC8vIChib29sZWFuKSB0cnVlIGlmIGNsaWNrZWQgZWxlbWVudCBjb250YWlucyBjbG9uZSBpbiBjbGFzcyBuYW1lIChzZXQgaW4gaGFuZGxlcl9tb3VzZWRvd24pXHJcbiAgICB3aW5kb3dTY3JvbGxQb3NpdGlvbiwgICAvLyAoYXJyYXkpIHRvcCBhbmQgbGVmdCB3aW5kb3cgb2Zmc2V0IChzZXQgaW4gY2FsY3VsYXRlQ2VsbHMgYW5kIHVzZWQgaW4gYm94T2Zmc2V0KVxyXG5cclxuICAgIC8vIHNlbGVjdGVkLCBwcmV2aW91cyBhbmQgc291cmNlIHJvdyBhbmQgY2VsbCAocHJpdmF0ZSBwYXJhbWV0ZXJzIHRvbylcclxuICAgIHJvdyA9IG51bGwsXHJcbiAgICByb3dfb2xkID0gbnVsbCxcclxuICAgIHJvd19zb3VyY2UgPSBudWxsLFxyXG4gICAgY2VsbCA9IG51bGwsXHJcbiAgICBjZWxsX29sZCA9IG51bGwsXHJcbiAgICBjZWxsX3NvdXJjZSA9IG51bGwsXHJcblxyXG4gICAgLy8gdmFyaWFibGVzIGluIHRoZSBwcml2YXRlIHNjb3BlIHJldmVhbGVkIGFzIHB1YmxpYyAoc2VlIGluaXQoKSBtZXRob2QpXHJcbiAgICBvYmogPSBmYWxzZSwgICAgICAgIC8vIChvYmplY3QpIG1vdmVkIG9iamVjdFxyXG4gICAgb2JqT2xkID0gZmFsc2UsICAgICAgIC8vIChvYmplY3QpIHByZXZpb3VzbHkgbW92ZWQgb2JqZWN0IChiZWZvcmUgY2xpY2tlZCBvciBjbG9uZWQpXHJcbiAgICBob3ZlciA9IHtjb2xvclRkOiAnI0ZGQ0ZBRScsIGNvbG9yVHI6ICcjOUJCM0RBJ30sXHJcbiAgICBzY3JvbGwgPSB7ZW5hYmxlIDogdHJ1ZSwgIC8vIChib29sZWFuKSBlbmFibGUvZGlzYWJsZSBhdXRvc2Nyb2xsIGZ1bmN0aW9uIChkZWZhdWx0IGlzIHRydWUpXHJcbiAgICAgICAgYm91bmQgOiAyNSwgICAgIC8vIChpbnRlZ2VyKSBib3VuZCB3aWR0aCBmb3IgYXV0b3Njcm9sbFxyXG4gICAgICAgIHNwZWVkIDogMjB9LCAgICAvLyAoaW50ZWdlcikgc2Nyb2xsIHNwZWVkIGluIG1pbGxpc2Vjb25kc1xyXG4gICAgc3R5bGUgPSB7Ly9ib3JkZXJFbmFibGVkIDogJ3NvbGlkJywgLy8gKHN0cmluZykgYm9yZGVyIHN0eWxlIGZvciBlbmFibGVkIGVsZW1lbnRzXHJcbiAgICAgICAgYm9yZGVyRGlzYWJsZWQgOiAnZG90dGVkJywgIC8vIChzdHJpbmcpIGJvcmRlciBzdHlsZSBmb3IgZGlzYWJsZWQgZWxlbWVudHNcclxuICAgICAgICBvcGFjaXR5RGlzYWJsZWQgOiAnJywgICAvLyAoaW50ZWdlcikgc2V0IG9wYWNpdHkgZm9yIGRpc2FibGVkIGVsZW1lbnRzXHJcbiAgICAgICAgcm93RW1wdHlDb2xvciA6ICd3aGl0ZSd9LCAvLyAoc3RyaW5nKSBjb2xvciBvZiBlbXB0eSByb3dcclxuICAgIHRkID0ge30sICAgICAgICAgICAgLy8gKG9iamVjdCkgY29udGFpbnMgcmVmZXJlbmNlIHRvIHNvdXJjZSAoc2V0IGluIG9ubW91c2Vkb3duKSwgY3VycmVudCAoc2V0IGluIG9ubW91c2Vtb3ZlIGFuZCBhdXRvc2Nyb2xsKSwgcHJldmlvdXMgKHNldCBpbiBvbm1vdXNlbW92ZSBhbmQgYXV0b3Njcm9sbCkgYW5kIHRhcmdldCBjZWxsIChzZXQgaW4gb25tb3VzZXVwKVxyXG4gICAgY2xvbmUgPSB7a2V5RGl2IDogZmFsc2UsICAgIC8vIChib29sZWFuKSBpZiB0cnVlLCBlbGVtZW50cyBjb3VsZCBiZSBjbG9uZWQgd2l0aCBwcmVzc2VkIFNISUZUIGtleVxyXG4gICAgICAgIGtleVJvdyA6IGZhbHNlLCAgICAgLy8gKGJvb2xlYW4pIGlmIHRydWUsIHJvd3MgY291bGQgYmUgY2xvbmVkIHdpdGggcHJlc3NlZCBTSElGVCBrZXlcclxuICAgICAgICBzZW5kQmFjayA6IGZhbHNlLCAgIC8vIChib29sZWFuKSBpZiB0cnVlLCB0aGVuIGNsb25lZCBlbGVtZW50IGNhbiBiZSByZXR1cm5lZCB0byBpdHMgc291cmNlXHJcbiAgICAgICAgZHJvcCA6IGZhbHNlfSwgICAgICAvLyAoYm9vbGVhbikgaWYgdHJ1ZSwgdGhlbiBjbG9uZWQgZWxlbWVudCB3aWxsIGJlIGFsd2F5cyBkcm9wcGVkIHRvIHRoZSB0YWJsZSBubyBtYXR0ZXIgaWYgZHJvcHBlZCBvdXRzaWRlIG9mIHRoZSB0YWJsZVxyXG4gICAgXHJcbiAgICBldmVudCA9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKG9iamVjdCkgZXZlbnQgaGFuZGxlcnNcclxuICAgIHtcclxuICAgICAgY2xvbmVkIDogZnVuY3Rpb24gKCkge30sXHJcbiAgICAgIGNsb25lZERyb3BwZWQgOiBmdW5jdGlvbiAoKSB7fSxcclxuICAgICAgY2xvbmVkRW5kMSA6IGZ1bmN0aW9uICgpIHt9LFxyXG4gICAgICBjbG9uZWRFbmQyIDogZnVuY3Rpb24gKCkge30sXHJcbiAgICAgIGRyb3BwZWQgOiBmdW5jdGlvbiAoKSB7fSxcclxuICAgICAgZHJvcHBlZEJlZm9yZSA6IGZ1bmN0aW9uICgpIHt9LFxyXG4gICAgICBmaW5pc2ggOiBmdW5jdGlvbiAoKSB7fSxcclxuICAgICAgbm90Q2xvbmVkIDogZnVuY3Rpb24gKCkge30sXHJcbiAgICAgIG5vdE1vdmVkIDogZnVuY3Rpb24gKCkge30sXHJcbiAgICAgIHJvd0NoYW5nZWQgOiBmdW5jdGlvbiAoKSB7fSxcclxuICAgICAgcm93Q2xpY2tlZCA6IGZ1bmN0aW9uICgpIHt9LFxyXG4gICAgICByb3dDbG9uZWQgOiBmdW5jdGlvbiAoKSB7fSxcclxuICAgICAgcm93RHJvcHBlZCA6IGZ1bmN0aW9uICgpIHt9LFxyXG4gICAgICByb3dEcm9wcGVkQmVmb3JlIDogZnVuY3Rpb24gKCkge30sXHJcbiAgICAgIHJvd0Ryb3BwZWRTb3VyY2UgOiBmdW5jdGlvbiAoKSB7fSxcclxuICAgICAgcm93TW92ZWQgOiBmdW5jdGlvbiAoKSB7fSxcclxuICAgICAgcm93Tm90Q2xvbmVkIDogZnVuY3Rpb24gKCkge30sXHJcbiAgICAgIHJvd05vdE1vdmVkIDogZnVuY3Rpb24gKCkge31cclxuICAgIH07XHJcblxyXG5cclxuICAvKipcclxuICAgKiBEcmFnIGNvbnRhaW5lciBpbml0aWFsaXphdGlvbi4gSXQgc2hvdWxkIGJlIGNhbGxlZCBhdCBsZWFzdCBvbmNlIGFuZCBpdCdzIHBvc3NpYmxlIHRvIGNhbGwgYSBtZXRob2QgbWFueSB0aW1lcy4gRXZlcnkgcGFnZSBzaG91bGQgaGF2ZSBhdCBsZWFzdCBvbmUgZHJhZyBjb250YWluZXIuXHJcbiAgICogSWYgUkVESVBTLmRyYWcuaW5pdCgpIGlzIGNhbGxlZCB3aXRob3V0IGlucHV0IHBhcmFtZXRlciwgbGlicmFyeSB3aWxsIHNlYXJjaCBmb3IgZHJhZyBjb250YWluZXIgd2l0aCBpZD1cInJlZGlwcy1kcmFnXCIuXHJcbiAgICogT25seSB0YWJsZXMgaW5zaWRlIGRyYWcgY29udGFpbmVyIHdpbGwgYmUgc2Nhbm5lZC4gSXQgaXMgcG9zc2libGUgdG8gaGF2ZSBzZXZlcmFsIGRyYWcgY29udGFpbmVycyB0b3RhbHkgc2VwYXJhdGVkIChlbGVtZW50cyBmcm9tIG9uZSBjb250YWluZXIgd2lsbCBub3QgYmUgdmlzaWJsZSB0byBvdGhlciBkcmFnIGNvbnRhaW5lcnMpLlxyXG4gICAqIFwiaW5pdFwiIG1ldGhvZCBjYWxscyBlbmFibGVEcmFnLiBJZiB0YWJsZXMgYXJlIGdlbmVyYXRlZCBkeW5hbWljYWxseSB0aGVuIFJFRElQUy5pbml0KCkgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgdG8gc2V0IGN1c3RvbSBwcm9wZXJ0aWVzIHRvIHRhYmxlcyAodGFibGUgaW5pdGlhbGl6YXRpb24pLlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbZGNdIERyYWcgY29udGFpbmVyIElkIChkZWZhdWx0IGlzIFwicmVkaXBzLWRyYWdcIikuXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiAvLyBpbml0IGRyYWcgY29udGFpbmVyICh3aXRoIGRlZmF1bHQgaWQ9XCJyZWRpcHMtZHJhZ1wiKVxyXG4gICAqIFJFRElQUy5kcmFnLmluaXQoKTtcclxuICAgKlxyXG4gICAqIC8vIGluaXQgZHJhZyBjb250YWluZXIgd2l0aCBpZD1cIm15LWRyYWcxXCJcclxuICAgKiBSRURJUFMuZHJhZy5pbml0KCdteS1kcmFnMScpO1xyXG4gICAqL1xyXG4gIGluaXQgPSBmdW5jdGlvbiAoKVxyXG4gIHtcclxuICAgIGRyYWdDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVkaXBzLWRyYWcnKTsgICAgICAgICAgIC8vIHNldCByZWZlcmVuY2UgdG8gdGhlIGRyYWcgY29udGFpbmVyXHJcblxyXG4gICAgd2luZG93U2Nyb2xsUG9zaXRpb24gPSBnZXRTY3JvbGxQb3NpdGlvbigpOyAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGluaXRpYWwgd2luZG93IHNjcm9sbCBwb3NpdGlvblxyXG5cclxuICAgIC8vIGFwcGVuZCBESVYgaWQ9XCJyZWRpcHNfY2xvbmVcIiBpZiBESVYgZG9lc24ndCBleGlzdCAobmVlZGVkIGZvciBjbG9uaW5nIERJViBlbGVtZW50cylcclxuICAgIC8vIGlmIGF1dG9tYXRpYyBjcmVhdGlvbiBpc24ndCBwcmVjaXNlIGVub3VnaCwgdXNlciBjYW4gbWFudWFsbHkgY3JlYXRlIGFuZCBwbGFjZSBlbGVtZW50IHdpdGggaWQ9XCJyZWRpcHNfY2xvbmVcIiB0byBwcmV2ZW50IHdpbmRvdyBleHBhbmRpbmcgKHRoZW4gdGhpcyBjb2RlIHdpbGwgYmUgc2tpcHBlZClcclxuICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlZGlwc19jbG9uZScpKVxyXG4gICAge1xyXG4gICAgICB2YXIgcmVkaXBzQ2xvbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgcmVkaXBzQ2xvbmUuaWQgPSAncmVkaXBzX2Nsb25lJztcclxuICAgICAgcmVkaXBzQ2xvbmUuc3R5bGUud2lkdGggPSByZWRpcHNDbG9uZS5zdHlsZS5oZWlnaHQgPSAnMXB4JztcclxuICAgICAgZHJhZ0NvbnRhaW5lci5hcHBlbmRDaGlsZChyZWRpcHNDbG9uZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZW5hYmxlRHJhZygnaW5pdCcsICcucmVkaXBzLWRyYWcnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXR0YWNoIG9ubW91c2Vkb3duIGV2ZW50IGhhbmRsZXIgdG8gdGhlIERJViBlbGVtZW50cywgYXR0YWNoIG9uc2Nyb2xsPSdjYWxjdWxhdGVDZWxscycgZm9yIERJViBlbGVtZW50cyB3aXRoICdzY3JvbGwnIGluIGNsYXNzIG5hbWUgKHByZXBhcmUgc2Nyb2xsYWJsZSBjb250YWluZXIgYXJlYXMpXHJcbiAgICB0YWJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0cmVlVGFibGUnKTtcclxuICAgIHRhYmxlLnJlZGlwcyA9IHt9O1xyXG5cclxuICAgIGhhbmRsZXJPblJlc2l6ZSgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBpbml0aWFsIHdpbmRvdyB3aWR0aC9oZWlnaHQsIHNjcm9sbCB3aWR0aC9oZWlnaHQgYW5kIGRlZmluZSBvbnJlc2l6ZSBldmVudCBoYW5kbGVyLCBvbnJlc2l6ZSBldmVudCBoYW5kbGVyIGNhbGxzIGNhbGN1bGF0ZSBjb2x1bW5zXHJcbiAgICBSRURJUFMuZXZlbnQuYWRkKHdpbmRvdywgJ3Jlc2l6ZScsIGhhbmRsZXJPblJlc2l6ZSk7XHJcbiAgICBSRURJUFMuZXZlbnQuYWRkKHdpbmRvdywgJ3Njcm9sbCcsIGNhbGN1bGF0ZUNlbGxzKTsgICAgICAgICAgICAgICAvLyBhdHRhY2ggb25zY3JvbGwgZXZlbnQgdG8gdGhlIHdpbmRvdyAobmVlZGVkIGZvciByZWNhbGN1bGF0aW5nIHRhYmxlIGNlbGxzIHBvc2l0aW9ucylcclxuICB9O1xyXG5cclxuXHJcbiAgLy8gb25tb3VzZWRvd24gZXZlbnQgaGFuZGxlci4gIFRoaXMgZXZlbnQgaGFuZGxlciBpcyBhdHRhY2hlZCB0byBldmVyeSBESVYgZWxlbWVudCBpbiBkcmFnIGNvbnRhaW5lciAocGxlYXNlIHNlZSBcImVuYWJsZURyYWdcIikuXHJcbiAgaGFuZGxlck9uTW91c2VEb3duID0gZnVuY3Rpb24gKGUpXHJcbiAge1xyXG4gICAgdmFyIGV2dCA9IGUgfHwgd2luZG93LmV2ZW50OyAgICAgICAgICAvLyBkZWZpbmUgZXZlbnQgKGNyb3NzIGJyb3dzZXIpXHJcbiAgICB2YXIgb2Zmc2V0OyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9iamVjdCBvZmZzZXRcclxuICAgIHZhciBwb3NpdGlvbjsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcG9zaXRpb24gb2YgdGFibGUgb3IgY29udGFpbmVyIGJveCBvZiB0YWJsZSAoaWYgaGFzIHBvc2l0aW9uOmZpeGVkIHRoZW4gZXhjbHVkZSBzY3JvbGwgb2Zmc2V0KVxyXG4gICAgdmFyIFgsIFk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBYIGFuZCBZIHBvc2l0aW9uIG9mIG1vdXNlIHBvaW50ZXJcclxuXHJcbiAgICBldnQuY2FuY2VsQnViYmxlID0gdHJ1ZTsgICAgICAgICAgICAgIC8vIHN0b3AgZXZlbnQgcHJvcGFnYXRpb24gKG9ubHkgZmlyc3QgY2xpY2tlZCBlbGVtZW50IHdpbGwgcmVnaXN0ZXIgb25tb3VzZWRvd24gZXZlbnQpLCBuZWVkZWQgaW4gY2FzZSBvZiBwbGFjaW5nIHRhYmxlIGluc2lkZSBvZiA8ZGl2IGNsYXNzPVwicmVkaXBzLWRyYWdcIj4gKGFmdGVyIGVsZW1lbnQgd2FzIGRyb3BwZWQgdG8gdGhpcyB0YWJsZSBpdCBjb3VsZG4ndCBiZSBtb3ZlZCBvdXQgYW55IG1vcmUgLSB0YWJsZSBhbmQgZWxlbWVudCBtb3ZlZCB0b2dldGhlciBiZWNhdXNlIHRhYmxlIGNhcHR1cmVzIG1vdXNlZG93biBldmVudCBhbHNvIGluIGJ1YmJsaW5nIHByb2NlcylcclxuICAgIGlmIChldnQuc3RvcFByb3BhZ2F0aW9uKVxyXG4gICAge1xyXG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2hpZnRLZXkgPSBldnQuc2hpZnRLZXk7ICAgICAgICAgICAgICAvLyBzZXQgdHJ1ZSBvciBmYWxzZSBpZiBzaGlmdCBrZXkgaXMgcHJlc3NlZFxyXG5cclxuICAgIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRleHQgc2VsZWN0aW9uIChDaHJvbWUsIEZGLCBPcGVyYSwgU2FmYXJpKVxyXG4gICAge1xyXG4gICAgICB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24gJiYgZG9jdW1lbnQuc2VsZWN0aW9uLnR5cGUgPT09IFwiVGV4dFwiKSAgLy8gSUU4XHJcbiAgICB7XHJcbiAgICAgIHRyeSB7IGRvY3VtZW50LnNlbGVjdGlvbi5lbXB0eSgpOyB9IGNhdGNoIChlcnJvcikgeyB9ICAgICAgICAgICAgIC8vIGlnbm9yZSBlcnJvciB0byBhcyBhIHdvcmthcm91bmQgZm9yIGJ1ZyBpbiBJRThcclxuICAgIH1cclxuXHJcbiAgICBYID0gcG9pbnRlci54ID0gZXZ0LmNsaWVudFg7XHJcbiAgICBZID0gcG9pbnRlci55ID0gZXZ0LmNsaWVudFk7XHJcblxyXG4gICAgdGhyZXNob2xkLnggPSBYOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgaW5pdGlhbCB0aHJlc2hvbGQgcG9zaXRpb24gKG5lZWRlZCBmb3IgY2FsY3VsYXRpbmcgZGlzdGFuY2UpXHJcbiAgICB0aHJlc2hvbGQueSA9IFk7XHJcbiAgICB0aHJlc2hvbGQuZmxhZyA9IGZhbHNlO1xyXG5cclxuICAgIFJFRElQUy5kcmFnLm9iak9sZCA9IG9iak9sZCA9IG9iaiB8fCB0aGlzOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtZW1iZXIgcHJldmlvdXMgb2JqZWN0IGlmIGRlZmluZWQgb3Igc2V0IHRvIHRoZSBjbGlja2VkIG9iamVjdFxyXG4gICAgUkVESVBTLmRyYWcub2JqID0gb2JqID0gdGhpczsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgcmVmZXJlbmNlIHRvIHRoZSBjbGlja2VkIG9iamVjdFxyXG5cclxuICAgIGNsb25lQ2xhc3MgPSBvYmouY2xhc3NOYW1lLmluZGV4T2YoJ3JlZGlwcy1jbG9uZScpID4gLTE7ICAgICAgICAgICAgLy8gc2V0IHRydWUgb3IgZmFsc2UgaWYgY2xpY2tlZCBlbGVtZW50IGNvbnRhaW5zIFwicmVkaXBzLWNsb25lXCIgY2xhc3MgbmFtZSAobmVlZGVkIGZvciBjbG9uZSBlbGVtZW50IGFuZCBjbG9uZSB0YWJsZSByb3cpXHJcblxyXG4gICAgUkVESVBTLmRyYWcub2JqID0gb2JqID0gcm93Q2xvbmUob2JqKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBqdXN0IHJldHVybiByZWZlcmVuY2Ugb2YgdGhlIGN1cnJlbnQgcm93IChkbyBub3QgY2xvbmUpXHJcblxyXG4gICAgY2FsY3VsYXRlQ2VsbHMoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdXNlciBoYXMgdXNlZCBhIG1vdXNlIGV2ZW50IHRvIGluY3JlYXNlIHRoZSBkaW1lbnNpb25zIG9mIHRoZSB0YWJsZSAtIGNhbGwgY2FsY3VsYXRlQ2VsbHMoKVxyXG5cclxuICAgIHJvdyA9IGNlbGwgPSBudWxsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzZXQgcm93IGFuZCBjZWxsIGluZGV4ZXMgKG5lZWRlZCBpbiBjYXNlIG9mIGVuYWJsZSAvIGRpc2FibGUgdGFibGVzKVxyXG4gICAgc2V0VGFibGVSb3dDb2x1bW4oKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgY3VycmVudCB0YWJsZSwgcm93IGFuZCBjZWxsIGFuZCByZW1lbWJlciBzb3VyY2UgcG9zaXRpb24gKG9sZCBwb3NpdGlvbiBpcyBpbml0aWFsbHkgdGhlIHNhbWUgYXMgc291cmNlIHBvc2l0aW9uKVxyXG4gICAgcm93X3NvdXJjZSA9IHJvd19vbGQgPSByb3c7XHJcbiAgICBjZWxsX3NvdXJjZSA9IGNlbGxfb2xkID0gY2VsbDtcclxuXHJcbiAgICBSRURJUFMuZHJhZy5ldmVudC5yb3dDbGlja2VkKHRkLmN1cnJlbnQpO1xyXG5cclxuICAgIC8vIGlmIHN0YXJ0IHBvc2l0aW9uIGNhbm5vdCBiZSBkZWZpbmVkIHRoZW4gdXNlciBwcm9iYWJseSBjbGlja2VkIG9uIGVsZW1lbnQgdGhhdCBiZWxvbmdzIHRvIHRoZSBkaXNhYmxlZCB0YWJsZSAob3Igc29tZXRoaW5nIGVsc2UgaGFwcGVuZWQgdGhhdCB3YXMgbm90IHN1cHBvc2VkIHRvIGhhcHBlbiAtIGV2ZXJ5IGVsZW1lbnQgc2hvdWxkIGJlbG9uZyB0byB0aGUgdGFibGUpIHRoaXMgY29kZSBtdXN0IGdvIGFmdGVyIGV4ZWN1dGlvbiBvZiBldmVudCBoYW5kbGVyc1xyXG4gICAgaWYgKHJvdyA9PT0gbnVsbCB8fCBjZWxsID09PSBudWxsKVxyXG4gICAge1xyXG4gICAgICBzZXRUYWJsZVJvd0NvbHVtbigpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXJ1biBzZXRUYWJsZVJvd0NvbHVtbigpIGFnYWluIGJlY2F1c2Ugc29tZSBvZiB0YWJsZXMgbWlnaHQgYmUgZW5hYmxlZCBpbiBoYW5kbGVyIGV2ZW50cyBhYm92ZVxyXG4gICAgICByb3dfc291cmNlID0gcm93X29sZCA9IHJvdztcclxuICAgICAgY2VsbF9zb3VyY2UgPSBjZWxsX29sZCA9IGNlbGw7XHJcblxyXG4gICAgICBpZiAocm93ID09PSBudWxsIHx8IGNlbGwgPT09IG51bGwpICAvLyBubywgY2xpY2tlZCBlbGVtZW50IGlzIG9uIHRoZSBkaXNhYmxlZCB0YWJsZSAtIHNvcnJ5XHJcbiAgICAgIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG1vdmVkID0gY2xvbmVkID0gZmFsc2U7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzZXQgXCJtb3ZlZFwiIGZsYWcgKG5lZWRlZCBmb3IgY2xvbmUgb2JqZWN0IGluIGhhbmRsZXJPbk1vdXNlTW92ZSkgYW5kIFwiY2xvbmVkXCIgZmxhZ1xyXG5cclxuICAgIFJFRElQUy5ldmVudC5hZGQoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCBoYW5kbGVyT25Nb3VzZU1vdmUpOyAgICAgICAgLy8gYWN0aXZhdGUgb25tb3VzZW1vdmUgZXZlbnQgaGFuZGxlciBvbiBkb2N1bWVudCBvYmplY3RcclxuICAgIFJFRElQUy5ldmVudC5hZGQoZG9jdW1lbnQsICdtb3VzZXVwJywgaGFuZGxlck9uTW91c2VVcCk7ICAgICAgICAgICAgLy8gYWN0aXZhdGUgb25tb3VzZXVwIGV2ZW50IGhhbmRsZXIgb24gZG9jdW1lbnQgb2JqZWN0XHJcblxyXG4gICAgaWYgKHJvdyAhPT0gbnVsbCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1lbWJlciBiYWNrZ3JvdW5kIGNvbG9yIGlmIGlzIHBvc3NpYmxlXHJcbiAgICB7XHJcbiAgICAgIGJnU3R5bGVPbGQgPSBnZXRUZFN0eWxlKHJvdyk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9zaXRpb24gPSBnZXRTdHlsZSh0YWJsZSwgJ3Bvc2l0aW9uJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgdGFibGUgQ1NTIHBvc2l0aW9uIChuZWVkZWQgZm9yIGV4Y2x1c2lvbiBcInNjcm9sbCBvZmZzZXRcIiBpZiB0YWJsZSBib3ggaGFzIHBvc2l0aW9uIGZpeGVkKVxyXG5cclxuICAgIGlmIChwb3NpdGlvbiAhPT0gJ2ZpeGVkJykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGFibGUgZG9lc24ndCBoYXZlIHN0eWxlIHBvc2l0aW9uOmZpeGVkIHRoZW4gdGFibGUgY29udGFpbmVyIHNob3VsZCBiZSB0ZXN0ZWRcclxuICAgIHtcclxuICAgICAgcG9zaXRpb24gPSBnZXRTdHlsZSh0YWJsZS5wYXJlbnROb2RlLCAncG9zaXRpb24nKTtcclxuICAgIH1cclxuXHJcbiAgICBvZmZzZXQgPSBib3hPZmZzZXQob2JqLCBwb3NpdGlvbik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVmaW5lIG9iamVjdCBvZmZzZXRcclxuICAgIG9iak1hcmdpbiA9IFtZIC0gb2Zmc2V0WzBdLCBvZmZzZXRbMV0gLSBYLCBvZmZzZXRbMl0gLSBZLCBYIC0gb2Zmc2V0WzNdXTsgICAvLyBjYWxjdWxhdGUgb2Zmc2V0IGZyb20gdGhlIGNsaWNrZWQgcG9pbnQgaW5zaWRlIGVsZW1lbnQgdG8gdGhlIHRvcCwgcmlnaHQsIGJvdHRvbSBhbmQgbGVmdCBzaWRlIG9mIHRoZSBlbGVtZW50XHJcblxyXG4gICAgcmV0dXJuIGZhbHNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRpc2FibGUgdGV4dCBzZWxlY3Rpb24gZm9yIG5vbiBJRSBicm93c2Vyc1xyXG4gIH07XHJcblxyXG5cclxuICAvKipcclxuICAgKiBNZXRob2RzIHJldHVybnMgcmVmZXJlbmNlIHRvIHRoZSB0YWJsZSByb3cgb3IgY2xvbmVzIHRhYmxlIHJvdy5cclxuICAgKiBJZiBjYWxsZWQgZnJvbSBoYW5kbGVyT25Nb3VzZURvd246XHJcbiAgICogPHVsPlxyXG4gICAqIDxsaT5pbnB1dCBwYXJhbWV0ZXIgaXMgRElWIGNsYXNzPVwicmVkaXBzLXJvd1wiPC9saT5cclxuICAgKiA8bGk+bWV0aG9kIHdpbGwgcmV0dXJuIHJlZmVyZW5jZSBvZiB0aGUgY3VycmVudCByb3c8L2xpPlxyXG4gICAqIDwvdWw+XHJcbiAgICogSWYgY2FsbGVkIGZyb20gaGFuZGxlck9uTW91c2VNb3ZlOlxyXG4gICAqIDx1bD5cclxuICAgKiA8bGk+aW5wdXQgcGFyYW1ldGVyIGlzIFRSIChjdXJyZW50IHJvdykgLSBwcmV2aW91c2x5IHJldHVybmVkIHdpdGggdGhpcyBmdW5jdGlvbjwvbGk+XHJcbiAgICogPGxpPm1ldGhvZCB3aWxsIGNsb25lIGN1cnJlbnQgcm93IGFuZCByZXR1cm4gcmVmZXJlbmNlIG9mIHRoZSBjbG9uZWQgcm93PC9saT5cclxuICAgKiA8L3VsPlxyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIERJViBjbGFzcz1cInJlZGlwcy1yb3dcIiBvciBUUiAoY3VycmVudCByb3cpXHJcbiAgICogQHJldHVybiB7SFRNTEVsZW1lbnR9IFJldHVybnMgcmVmZXJlbmNlIG9mIHRoZSBjdXJyZW50IHJvdyBvciBjbG9uZSBjdXJyZW50IHJvdyBhbmQgcmV0dXJuIHJlZmVyZW5jZSBvZiB0aGUgY2xvbmVkIHJvdy5cclxuICAgKi9cclxuICByb3dDbG9uZSA9IGZ1bmN0aW9uIChlbClcclxuICB7XHJcbiAgICB2YXIgdGFibGVNaW5pOyAgICAgIC8vIG9yaWdpbmFsIHRhYmxlIGlzIGNsb25lZCBhbmQgYWxsIHJvd3MgZXhjZXB0IHBpY2tlZCByb3cgYXJlIGRlbGV0ZWRcclxuICAgIHZhciByb3dPYmo7ICAgICAgICAgLy8gcmVmZXJlbmNlIHRvIHRoZSByb3cgb2JqZWN0XHJcbiAgICB2YXIgZGl2OyAgICAgICAgICAgIC8vIHJlZmVyZW5jZSB0byB0aGUgPERJViBjbGFzcz1cInJlZGlwcy1kcmFnIHJlZGlwcy1yb3dcIj4gZWxlbWVudFxyXG5cclxuICAgIGlmIChlbC5ub2RlTmFtZSA9PT0gJ0RJVicpICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDEpIHJvd0Nsb25lIGNhbGwgaW4gb25tb3VzZWRvd24gd2lsbCByZXR1cm4gcmVmZXJlbmNlIG9mIFRSIGVsZW1lbnQgKGlucHV0IHBhcmFtZXRlciBpcyBIVE1MRWxlbWVudCA8ZGl2IGNsYXNzPVwicmVkaXBzLWRyYWcgcmVkaXBzLXJvd1wiPilcclxuICAgIHtcclxuICAgICAgZGl2ID0gZWw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbWVtYmVyIHJlZmVyZW5jZSB0byB0aGUgPERJViBjbGFzcz1cInJlZGlwcy1kcmFnIHJlZGlwcy1yb3dcIj5cclxuICAgICAgZWwgPSBmaW5kUGFyZW50KCdUUicsIGVsKTsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpbmQgcGFyZW50IFRSIGVsZW1lbnRcclxuICAgICAgaWYgKGVsLnJlZGlwcyA9PT0gdW5kZWZpbmVkKSB7IGVsLnJlZGlwcyA9IHt9OyB9ICAgIC8vIGNyZWF0ZSBhIFwicHJvcGVydHkgb2JqZWN0XCIgaW4gd2hpY2ggYWxsIGN1c3RvbSBwcm9wZXJ0aWVzIHdpbGwgYmUgc2F2ZWQgKGl0IGlzIG9ubHkgb25lIHByb3BlcnR5IGZvciBub3cpXHJcbiAgICAgIGVsLnJlZGlwcy5kaXYgPSBkaXY7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzYXZlIHJlZmVyZW5jZSB0byB0aGUgRElWIGVsZW1lbnQgYXMgcmVkaXBzLmRpdiB0aGlzIHdpbGwgbW9zdGx5IGJlIHJlZmVyZW5jZWQgYXMgb2JqT2xkLnJlZGlwcy5kaXYgKGJlY2F1c2Ugb2JqT2xkIGluIHJvdyBkcmFnZ2luZyBjb250ZXh0IGlzIHJlZmVyZW5jZSB0byB0aGUgc291cmNlIHJvdylcclxuICAgICAgcmV0dXJuIGVsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiByZWZlcmVuY2UgdG8gdGhlIFRSIGVsZW1lbnRcclxuICAgIH1cclxuICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDIpIHJvd0Nsb25lIGNhbGwgaW4gb25tb3VzZW1vdmUgd2lsbCBjbG9uZSBjdXJyZW50IHJvdyAoZWwubm9kZU5hbWUgPT09ICdUUicpXHJcbiAgICB7XHJcbiAgICAgIHJvd09iaiA9IGVsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbWVtYmVyIHNvdXJjZSByb3dcclxuXHJcbiAgICAgIHRhYmxlTWluaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyk7XHJcbiAgICAgIHRhYmxlTWluaS5pbm5lckhUTUwgPSAnPHRyIGlkPVwiJyArIHJvd09iai5pZCArICdcIiBjbGFzcz1cIicgKyByb3dPYmouY2xhc3NMaXN0ICsgJ1wiPicgKyByb3dPYmouaW5uZXJIVE1MICsgJzwvdHI+JztcclxuICAgICAgLy90YWJsZU1pbmkuaW5uZXJIVE1MID0gZ2V0QXNzZW1ibHlNYXJrdXAocGFyc2VJbnQocm93T2JqLmlkLnJlcGxhY2UoJ3Jvd2lkJywgJycpKSk7ICAgLy9jYW4gYmUgdXNlZCB0byBzaG93IHRoZSBlbnRpcmUgYXNzZW1ibHkgd2hlbiBkcmFnZ2luZywgdGVuZHMgdG8gc2xvdyB0aGluZ3MgZG93biBhbmQgYmUgY3VtYmVyc29tZVxyXG5cclxuICAgICAgdGFibGVNaW5pLnJlZGlwcyA9IHt9OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBcInByb3BlcnR5IG9iamVjdFwiIGluIHdoaWNoIGFsbCBjdXN0b20gcHJvcGVydGllcyB3aWxsIGJlIHNhdmVkXHJcbiAgICAgIHRhYmxlTWluaS5yZWRpcHMuc291cmNlUm93ID0gcm93T2JqOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2F2ZSBzb3VyY2Ugcm93IHJlZmVyZW5jZSAobmVlZGVkIGZvciBzb3VyY2Ugcm93IGRlbGV0aW9uIGluIHJvd0Ryb3AgbWV0aG9kKVxyXG5cclxuICAgICAgY29weVByb3BlcnRpZXMocm93T2JqLCB0YWJsZU1pbmkucm93c1swXSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb3B5IGN1c3RvbSBwcm9wZXJ0aWVzIHRvIGFsbCBjaGlsZCBESVYgZWxlbWVudHMgYW5kIHNldCBvbm1vdXNlZG93bi9vbmRibGNsaWNrIGV2ZW50IGhhbmRsZXJzXHJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWRpcHNfY2xvbmUnKS5hcHBlbmRDaGlsZCh0YWJsZU1pbmkpOyAgICAgLy8gYXBwZW5kIGNsb25lZCBtaW5pIHRhYmxlIHRvIHRoZSBESVYgaWQ9XCJyZWRpcHNfY2xvbmVcIlxyXG5cclxuICAgICAgcmV0dXJuIHRhYmxlTWluaTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogTWV0aG9kIGRyb3BzIHRhYmxlIHJvdyB0byB0aGUgdGFyZ2V0IHJvdyBhbmQgY2FsbHMgdXNlciBldmVudCBoYW5kbGVycy4gU291cmNlIHJvdyBpcyBkZWxldGVkIGFuZCBjbG9uZWQgcm93IGlzIGluc2VydGVkIGF0IHRoZSBuZXcgcG9zaXRpb24uXHJcbiAgICogTWV0aG9kIHRha2VzIGNhcmUgYWJvdXQgdGhlIGxhc3Qgcm93IGluIHRoZSB0YWJsZSBvbmx5IGlmIHVzZXIgZHJhZ3MgZWxlbWVudC4gSW4gY2FzZSBvZiBtb3Zpbmcgcm93cyB3aXRoIG1vdmVPYmplY3QoKSwgY29udHJvbFxyXG4gICAqIGFuZCBsb2dpYyBmb3IgbGFzdCByb3cgaXMgdHVybmVkIG9mZi4gVGhpcyBtZXRob2QgaXMgY2FsbGVkIGZyb20gaGFuZGxlck9uTW91c2VVcCgpXHJcbiAgICogQHBhcmFtIHtJbnRlZ2VyfSB0YWJsZUlkeCBUYWJsZSBpbmRleC5cclxuICAgKiBAcGFyYW0ge0ludGVnZXJ9IHJvd0lkeCBSb3cgaW5kZXguXHJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gW3RhYmxlTWluaV0gUmVmZXJlbmNlIHRvIHRoZSBtaW5pIHRhYmxlICh0YWJsZSB0aGF0IGNvbnRhaW5zIG9ubHkgb25lIHJvdykuIFRoaXMgaXMgYWN0dWFsbHkgY2xvbmUgb2Ygc291cmNlIHJvdy5cclxuICAgKi9cclxuICByb3dEcm9wID0gZnVuY3Rpb24gKHJvd0lkeClcclxuICB7XHJcbiAgICB2YXIgZHJvcDsgICAgICAgICAgICAgICAvLyAoYm9vbGVhbikgaWYgZmFsc2UgdGhlbiBkcm9wcGluZyByb3cgd2lsbCBiZSBjYW5jZWxlZFxyXG4gICAgdmFyIHRyTWluaTsgICAgICAgICAgICAgLy8gcmVmZXJlbmNlIHRvIHRoZSBUUiBpbiBtaW5pIHRhYmxlXHJcbiAgICB2YXIgZGVsZXRlVGFibGVSb3c7ICAgICAvLyBkZWxldGUgcm93IChwcml2YXRlIG1ldGhvZClcclxuXHJcbiAgICBkZWxldGVUYWJsZVJvdyA9IGZ1bmN0aW9uIChlbCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSB0YWJsZSByb3cgLSBpbnB1dCBwYXJlbWV0ZXIgaXMgcm93IHJlZmVyZW5jZSAocHJpdmF0ZSBtZXRob2QpXHJcbiAgICB7XHJcbiAgICAgIHZhciB0Ymw7XHJcblxyXG4gICAgICBpZiAoZWwucmVkaXBzID09PSB1bmRlZmluZWQgfHwgIWVsLnJlZGlwcy5lbXB0eVJvdykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiByb3cgZG9lc24ndCBoYXZlIGN1c3RvbSBcInJlZGlwc1wiIHByb3BlcnR5IG9yIGlzIG5vdCBtYXJrZWQgYXMgZW1wdHksIHRoZW4gaXQgY2FuIGJlIGRlbGV0ZWRcclxuICAgICAge1xyXG4gICAgICAgIHRibCA9IGZpbmRQYXJlbnQoJ1RBQkxFJywgZWwpO1xyXG4gICAgICAgIHRibC5kZWxldGVSb3coZWwucm93SW5kZXgpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVsc2UsIHJvdyBpcyBtYXJrZWQgYXMgXCJlbXB0eVwiIGFuZCBpdCB3aWxsIGJlIG9ubHkgY29sb3JlZCAobm90IGRlbGV0ZWQpLCBjb250ZW50IG9mIHRhYmxlIGNlbGxzIHdpbGwgYmUgZGVsZXRlZCBhbmQgYmFja2dyb3VuZCBjb2xvciB3aWxsIGJlIHNldCB0byBkZWZhdWx0IGNvbG9yXHJcbiAgICAgIHtcclxuICAgICAgICByb3dPcGFjaXR5KGVsLCAnZW1wdHknLCBSRURJUFMuZHJhZy5zdHlsZS5yb3dFbXB0eUNvbG9yKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgdGFibGVNaW5pID0gb2JqOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnRseSBkcmFnZ2VkIHJvdyAtIG1pbmkgdGFibGVcclxuXHJcbiAgICBpZiAocm93SWR4ID4gdGFibGUucm93cy5sZW5ndGggLSAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHJvdyBpbmRleCBpcyBvdXQgb2YgYm91bmRzLCB0aGVuIHNldCBtYXggcm93IGluZGV4IChyb3cgd2lsbCBiZSBhcHBlbmRlZCB0byB0aGUgdGFibGUgYm90dG9tKVxyXG4gICAge1xyXG4gICAgICByb3dJZHggPSB0YWJsZS5yb3dzLmxlbmd0aCAtIDE7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHRhYmxlUm93ID0gdGFibGUucm93c1tyb3dJZHhdO1xyXG5cclxuICAgIHRyTWluaSA9IHRhYmxlTWluaS5nZXRFbGVtZW50c0J5VGFnTmFtZSgndHInKVswXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHJlZmVyZW5jZSB0byB0aGUgVFIgaW4gbWluaSB0YWJsZSAobWluaSB0YWJsZSBoYXMgb25seSBvbmUgcm93IC0gZmlyc3Qgcm93KVxyXG5cclxuICAgIHRhYmxlTWluaS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRhYmxlTWluaSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVzdHJveSBtaW5pIHRhYmxlIChub2RlIHN0aWxsIGV4aXN0cyBpbiBtZW1vcnkpXHJcblxyXG4gICAgZHJvcCA9IFJFRElQUy5kcmFnLmV2ZW50LnJvd0Ryb3BwZWRCZWZvcmUodGFibGUsIHRhYmxlTWluaS5yZWRpcHMuc291cmNlUm93LnJvd0luZGV4KTsgICAgICAvLyBjYWxsIGV2ZW50LnJvd0Ryb3BwZWRCZWZvcmUoKSAtIHRoaXMgaGFuZGxlciBjYW4gcmV0dXJuIFwiZmFsc2VcIiB2YWx1ZVxyXG5cclxuICAgIGlmIChkcm9wICE9PSBmYWxzZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgaGFuZGxlciByZXR1cm5lZCBmYWxzZSB0aGVuIHJvdyBkcm9wcGluZyB3aWxsIGJlIGNhbmNlbGVkXHJcbiAgICB7XHJcbiAgICAgIGlmIChyb3dJZHggPCB0YWJsZS5yb3dzLmxlbmd0aCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHJvdyBpcyBub3QgZHJvcHBlZCB0byB0aGUgbGFzdCByb3cgcG9zaXRpb25cclxuICAgICAge1xyXG4gICAgICAgIHRhYmxlUm93LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRyTWluaSwgdGFibGVSb3cubmV4dFNpYmxpbmcpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJvdyBpcyBkcm9wcGVkIHRvIHRoZSBsYXN0IHJvdyBwb3NpdGlvbiwgaXQncyBwb3NzaWJsZSB0byBzZXQgdGFyZ2V0IHJvdyBpbmRleCBncmVhdGVyIHRoZW4gbnVtYmVyIG9mIHJvd3MgLSBpbiB0aGlzIGNhc2Ugcm93IHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIHRhYmxlIGVuZFxyXG4gICAgICB7XHJcbiAgICAgICAgdGFibGVSb3cucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0ck1pbmkpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJvdyBzaG91bGQgYmUgYXBwZW5kZWRcclxuICAgICAgICB0YWJsZVJvdyA9IHRhYmxlLnJvd3NbMF07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHJlZmVyZW5jZSB0byB0aGUgdXBwZXIgcm93LCBhZnRlciByb3cgaXMgYXBwZW5kZWQsIHVwcGVyIHJvdyBzaG91bGQgYmUgdGVzdGVkIGlmIGNvbnRhaW5zIFwiZW1wdHlSb3dcIiBzZXQgdG8gdHJ1ZSwgdGhpcyBjb3VsZCBoYXBwZW4gaW4gY2FzZSB3aGVuIHJvdyBpcyBtb3ZlZCB0byB0aGUgdGFibGUgd2l0aCBvbmx5IG9uZSBlbXB0eSByb3dcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFjbG9uZWQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVsZXRlIHNvdXJjZSByb3cgaWYgcm93IGlzIG5vdCBjbG9uZWRcclxuICAgICAge1xyXG4gICAgICAgIGRlbGV0ZVRhYmxlUm93KHRhYmxlTWluaS5yZWRpcHMuc291cmNlUm93KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZGVsZXRlIHRyTWluaS5yZWRpcHMuZW1wdHlSb3c7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVsZXRlIGVtcHR5Um93IHByb3BlcnR5IGZyb20gaW5zZXJ0ZWQvYXBwZW5kZWQgcm93IGJlY2F1c2UgZW1wdHlSb3cgd2lsbCBiZSBzZXQgb24gbmV4dCBtb3ZlLCBjb3B5UHJvcGVydGllcygpIGluIHJvd0Nsb25lKCkgY29waWVkIGVtcHR5Um93IHByb3BlcnR5IHRvIHRoZSByb3cgaW4gdGFibGVNaW5pLCBvdGhlcndpc2Ugcm93IHdpbGwgYmUgb3ZlcndyaXR0ZW4gYW5kIHRoYXQgaXMgbm90IGdvb2RcclxuICAgICAgUkVESVBTLmRyYWcuZXZlbnQucm93RHJvcHBlZCh0YWJsZVJvdyk7ICAgICAgICAgLy8gY2FsbCByb3dEcm9wcGVkIGV2ZW50IGhhbmRsZXJcclxuICAgIH1cclxuICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXZlbnQucm93RHJvcHBlZEJlZm9yZSgpIHJldHVybmVkIFwiZmFsc2VcIiAoaXQncyB1cCB0byB1c2VyIHRvIHJldHVybiBzb3VyY2Ugcm93IG9wYWNpdHkgdG8gaXRzIG9yaWdpbmFsIHN0YXRlKVxyXG4gICAge1xyXG4gICAgICAvLyByb3dPcGFjaXR5KG9iak9sZCwgMTAwKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogb25tb3VzZXVwIGV2ZW50IGhhbmRsZXIuXHJcbiAgICogaGFuZGxlck9uTW91c2VVcCBpcyBhdHRhY2hlZCB0byB0aGUgRElWIGVsZW1lbnQgaW4gYSBtb21lbnQgd2hlbiBESVYgZWxlbWVudCBpcyBjbGlja2VkICh0aGlzIGhhcHBlbnMgaW4gaGFuZGxlck9uTW91c2VEb3duKS5cclxuICAgKiBUaGlzIGV2ZW50IGhhbmRsZXIgZGV0YWNoZXMgb25tb3VzZW1vdmUgYW5kIG9ubW91c2V1cCBldmVudCBoYW5kbGVycy5cclxuICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IGluZm9ybWF0aW9uLlxyXG4gICAqL1xyXG4gIGhhbmRsZXJPbk1vdXNlVXAgPSBmdW5jdGlvbiAoZSlcclxuICB7XHJcbiAgICB2YXIgZXZ0ID0gZSB8fCB3aW5kb3cuZXZlbnQ7ICAgIC8vIGRlZmluZSBldmVudCAoRkYgJiBJRSlcclxuICAgIHZhciByX3JvdzsgICAgICAgICAgICAgICAgICAgICAgLy8gbmVlZGVkIGZvciBtb2RlPVwicm93XCJcclxuICAgIHZhciBtdF90cjsgICAgICAgICAgICAgICAgICAgICAgLy8gbmVlZGVkIGZvciByZXR1cm5pbmcgY29sb3IgdG8gdGhlIHRhYmxlIGNlbGwgKG10X3RyIC0gXCJtaW5pIHRhYmxlXCIgXCJ0YWJsZV9yb3dcIilcclxuICAgIHZhciBYLCBZOyAgICAgICAgICAgICAgICAgICAgICAgLy8gWCBhbmQgWSBwb3NpdGlvbiBvZiBtb3VzZSBwb2ludGVyXHJcbiAgICB2YXIgaTsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVzZWQgaW4gbG9jYWwgbG9vcFxyXG4gICAgdmFyIGRyb3A7ICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBmYWxzZSB0aGVuIGRyb3BwZWQgRElWIGVsZW1lbnRcclxuXHJcbiAgICBYID0gZXZ0LmNsaWVudFg7XHJcbiAgICBZID0gZXZ0LmNsaWVudFk7XHJcblxyXG4gICAgZWRnZS5mbGFnLnggPSBlZGdlLmZsYWcueSA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHR1cm4gb2ZmIGF1dG9zY3JvbGwgXCJjdXJyZW50IGNlbGxcIiBoYW5kbGluZyAoaWYgdXNlciBtb3VzZXVwIGluIHRoZSBtaWRkbGUgb2YgYXV0b3Njcm9sbGluZylcclxuXHJcbiAgICBSRURJUFMuZXZlbnQucmVtb3ZlKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgaGFuZGxlck9uTW91c2VNb3ZlKTtcclxuICAgIFJFRElQUy5ldmVudC5yZW1vdmUoZG9jdW1lbnQsICdtb3VzZXVwJywgaGFuZGxlck9uTW91c2VVcCk7XHJcblxyXG4gICAgZHJhZ0NvbnRhaW5lci5vbnNlbGVjdHN0YXJ0ID0gbnVsbDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRldGFjaCBkcmFnQ29udGFpbmVyLm9uc2VsZWN0c3RhcnQgaGFuZGxlciB0byBlbmFibGUgc2VsZWN0IGZvciBJRTcvSUU4IGJyb3dzZXJcclxuXHJcbiAgICByZXNldFN0eWxlcyhvYmopOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzZXQgb2JqZWN0IHN0eWxlc1xyXG5cclxuICAgIHNjcm9sbERhdGEud2lkdGggID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFdpZHRoO1xyXG4gICAgc2Nyb2xsRGF0YS5oZWlnaHQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xyXG5cclxuICAgIGVkZ2UuZmxhZy54ID0gZWRnZS5mbGFnLnkgPSAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXNldCBhdXRvc2Nyb2xsIGZsYWdzXHJcblxyXG4gICAgaWYgKHJvdyA9PT0gbnVsbCB8fCBjZWxsID09PSBudWxsKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIERJViBlbGVtZW50IHdhcyBjbGlja2VkIGFuZCBsZWZ0IGJ1dHRvbiB3YXMgcmVsZWFzZWQsIGJ1dCBlbGVtZW50IGlzIHBsYWNlZCBpbnNpZGUgdW5tb3ZhYmxlIHRhYmxlIGNlbGxcclxuICAgIHtcclxuICAgICAgUkVESVBTLmRyYWcuZXZlbnQubm90TW92ZWQoKTtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgIHtcclxuICAgICAgUkVESVBTLmRyYWcudGQudGFyZ2V0ID0gdGQudGFyZ2V0ID0gdGFibGUucm93c1tyb3ddLmNlbGxzW2NlbGxdO1xyXG5cclxuICAgICAgc2V0VGRTdHlsZShyb3csIGJnU3R5bGVPbGQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgYmFja2dyb3VuZCBjb2xvciBmb3IgZGVzdGluYXRpb24gcm93XHJcblxyXG4gICAgICByX3JvdyA9IHJvdztcclxuXHJcbiAgICAgIGlmICghbW92ZWQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcm93IHdhcyBjbGlja2VkIGFuZCBtb3VzZSBidXR0b24gd2FzIHJlbGVhc2VkIHJpZ2h0IGF3YXkgKHJvdyB3YXMgbm90IG1vdmVkKVxyXG4gICAgICB7XHJcbiAgICAgICAgUkVESVBTLmRyYWcuZXZlbnQucm93Tm90TW92ZWQoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJvdyB3YXMgbW92ZWRcclxuICAgICAge1xyXG4gICAgICAgIGlmIChyb3dfc291cmNlID09PSByX3JvdykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCBkcm9wcGVkIHRvIHRoZSBzb3VyY2Ugcm93XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbXRfdHIgPSBvYmouZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RyJylbMF07ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlZmVyZW5jZSB0byB0aGUgVFIgaW4gbWluaSB0YWJsZSAobWluaSB0YWJsZSBoYXMgb25seSBvbmUgcm93KVxyXG5cclxuICAgICAgICAgIG9iak9sZC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBtdF90ci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I7ICAgICAgICAgICAvLyByZXR1cm4gY29sb3IgdG8gdGhlIHNvdXJjZSByb3cgZnJvbSB0aGUgcm93IG9mIGNsb25lZCBtaW5pIHRhYmxlLCBjb2xvciBvZiB0aGUgc291cmNlIHJvdyBjYW4gYmUgY2hhbmdlZCBpbiBldmVudC5yb3dNb3ZlZCgpICh3aGVuIHVzZXIgd2FudHMgdG8gbWFyayBzb3VyY2Ugcm93KVxyXG5cclxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtdF90ci5jZWxscy5sZW5ndGg7IGkrKykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gY29sb3IgdG8gdGhlIGVhY2ggdGFibGUgY2VsbFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBvYmpPbGQuY2VsbHNbaV0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gbXRfdHIuY2VsbHNbaV0uc3R5bGUuYmFja2dyb3VuZENvbG9yO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIG9iai5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9iaik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgY2xvbmVkIG1pbmkgdGFibGVcclxuICAgICAgICAgIGRlbGV0ZSBvYmpPbGQucmVkaXBzLmVtcHR5Um93OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWxldGUgZW1wdHlSb3cgcHJvcGVydHkgZnJvbSBzb3VyY2Ugcm93IGJlY2F1c2UgZW1wdHlSb3cgd2lsbCBiZSBzZXQgb24gbmV4dCBtb3ZlLCBvdGhlcndpc2Ugcm93IHdvdWxkIGJlIG92ZXJ3cml0dGVuIGFuZCB0aGF0J3Mgbm8gZ29vZFxyXG5cclxuICAgICAgICAgIGlmIChjbG9uZWQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiByb3cgd2FzIGNsb25lZCBhbmQgZHJvcHBlZCB0byB0aGUgc291cmNlIGxvY2F0aW9uIHRoZW4gY2FsbCByb3dOb3RDbG9uZWQgZXZlbnQgaGFuZGxlclxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBSRURJUFMuZHJhZy5ldmVudC5yb3dOb3RDbG9uZWQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIGV2ZW50LnJvd0Ryb3BwZWRTb3VyY2UoKSBldmVudCBoYW5kbGVyXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIFJFRElQUy5kcmFnLmV2ZW50LnJvd0Ryb3BwZWRTb3VyY2UodGQudGFyZ2V0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGRyb3BwZWQgdG8gdGhlIG5ldyByb3dcclxuICAgICAgICB7XHJcbiAgICAgICAgICByb3dEcm9wKHJfcm93KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGlmICghY2xvbmVkICYmICF0aHJlc2hvbGQuZmxhZykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2xpY2tlZCBlbGVtZW50IHdhcyBub3QgbW92ZWQgLSBESVYgZWxlbWVudCBkaWRuJ3QgY3Jvc3MgdGhyZXNob2xkIHZhbHVlLCBqdXN0IGNhbGwgZXZlbnQubm90TW92ZWQgZXZlbnQgaGFuZGxlclxyXG4gICAgICB7XHJcbiAgICAgICAgUkVESVBTLmRyYWcuZXZlbnQubm90TW92ZWQoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmIChjbG9uZWQgJiYgcm93X3NvdXJjZSA9PT0gcm93ICYmIGNlbGxfc291cmNlID09PSBjZWxsKSAgICAgICAgICAgIC8vIGRlbGV0ZSBjbG9uZWQgZWxlbWVudCBpZiBkcm9wcGVkIG9uIHRoZSBzdGFydCBwb3NpdGlvblxyXG4gICAgICB7XHJcbiAgICAgICAgb2JqLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob2JqKTtcclxuICAgICAgICBjbG9uZWRJZFtvYmpPbGQuaWRdIC09IDE7XHJcbiAgICAgICAgUkVESVBTLmRyYWcuZXZlbnQubm90Q2xvbmVkKCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoY2xvbmVkICYmIFJFRElQUy5kcmFnLmNsb25lLmRyb3AgPT09IGZhbHNlICYmIChYIDwgdGFibGUucmVkaXBzLm9mZnNldFszXSB8fCBYID4gdGFibGUucmVkaXBzLm9mZnNldFsxXSB8fCBZIDwgdGFibGUucmVkaXBzLm9mZnNldFswXSB8fCBZID4gdGFibGUucmVkaXBzLm9mZnNldFsyXSkpICAgIC8vIGRlbGV0ZSBjbG9uZWQgZWxlbWVudCBpZiBkcm9wcGVkIG91dHNpZGUgY3VycmVudCB0YWJsZSBhbmQgY2xvbmUuZHJvcCBpcyBzZXQgdG8gZmFsc2VcclxuICAgICAge1xyXG4gICAgICAgIG9iai5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9iaik7XHJcbiAgICAgICAgY2xvbmVkSWRbb2JqT2xkLmlkXSAtPSAxO1xyXG4gICAgICAgIFJFRElQUy5kcmFnLmV2ZW50Lm5vdENsb25lZCgpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWxzZSBjYWxsIGV2ZW50LmRyb3BwZWRCZWZvcmUoKSwgYXBwZW5kIG9iamVjdCB0byB0aGUgY2VsbCBhbmQgY2FsbCBldmVudC5kcm9wcGVkKClcclxuICAgICAge1xyXG4gICAgICAgIGRyb3AgPSBSRURJUFMuZHJhZy5ldmVudC5kcm9wcGVkQmVmb3JlKHRkLnRhcmdldCk7ICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGwgZXZlbnQuZHJvcHBlZEJlZm9yZSBldmVudCBoYW5kbGVyXHJcbiAgICAgICAgZWxlbWVudERyb3AoZHJvcCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHJvcCBlbGVtZW50IHRvIHRoZSB0YWJsZSBjZWxsIChvciBkZWxldGUgY2xvbmVkIGVsZW1lbnQgaWYgZHJvcD1cImZhbHNlXCIpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNhbGN1bGF0ZUNlbGxzKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVjYWxjdWxhdGUgdGFibGUgY2VsbHMgYW5kIHNjcm9sbGVycyBiZWNhdXNlIGNlbGwgY29udGVudCBjb3VsZCBjaGFuZ2Ugcm93IGRpbWVuc2lvbnNcclxuICAgICAgUkVESVBTLmRyYWcuZXZlbnQuZmluaXNoKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIGxhc3QgZXZlbnQgaGFuZGxlclxyXG4gICAgfVxyXG5cclxuICAgIHJvd19vbGQgPSBjZWxsX29sZCA9IG51bGw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXNldCBvbGQgcG9zaXRpb25zXHJcbiAgfTtcclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIEVsZW1lbnQgZHJvcC4gVGhpcyBtZXRob2QgaXMgY2FsbGVkIGZyb20gaGFuZGxlck9uTW91c2VVcCBhbmQgYXBwZW5kcyBlbGVtZW50IHRvIHRoZSB0YXJnZXQgdGFibGUgY2VsbC5cclxuICAgKiBJZiBpbnB1dCBwYXJhbWV0ZXIgXCJkcm9wXCIgaXMgc2V0IHRvIFwiZmFsc2VcIiAodGhpcyBpcyBhY3R1YWxseSByZXR1cm4gdmFsdWUgZnJvbSBldmVudC5kcm9wcGVkQmVmb3JlKSB0aGVuIERJViBlbGVtZW50cyB3aWxsIG5vdCBiZSBkcm9wcGVkIChvbmx5IGNsb25lZCBlbGVtZW50IHdpbGwgYmUgZGVsZXRlZCkuXHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBbZHJvcF0gSWYgbm90IFwiZmFsc2VcIiB0aGVuIERJViBlbGVtZW50IHdpbGwgYmUgZHJvcHBlZCB0byB0aGUgY2VsbC5cclxuICAgKi9cclxuICBlbGVtZW50RHJvcCA9IGZ1bmN0aW9uIChkcm9wKSBcclxuICB7XHJcbiAgICB2YXIgY2xvbmVTb3VyY2VEaXYgPSBudWxsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjbG9uZSBzb3VyY2UgZWxlbWVudCAobmVlZGVkIGlmIGNsb25lLnNlbmRCYWNrIGlzIHNldCB0byB0cnVlKVxyXG4gICAgdmFyIGRpdjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm9kZUxpc3Qgb2YgRElWIGVsZW1lbnRzIGluIHRhcmdldCBjZWxsIChuZWVkZWQgaWYgY2xvbmUuc2VuZEJhY2sgaXMgc2V0IHRvIHRydWUpXHJcbiAgICBcclxuICAgIGlmIChkcm9wICE9PSBmYWxzZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGlucHV0IHBhcmFtZXRlciBpcyBub3QgXCJmYWxzZVwiIHRoZW4gRElWIGVsZW1lbnQgd2lsbCBiZSBkcm9wcGVkIHRvIHRoZSB0YWJsZSBjZWxsXHJcbiAgICB7XHJcbiAgICAgIGlmIChjbG9uZS5zZW5kQmFjayA9PT0gdHJ1ZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBjbG9uZS5zZW5kQmFjayBpcyBzZXQgdG8gdHJ1ZSB0aGVuIHRyeSB0byBmaW5kIHNvdXJjZSBlbGVtZW50IGluIHRhcmdldCBjZWxsXHJcbiAgICAgIHtcclxuICAgICAgICBkaXYgPSB0ZC50YXJnZXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ0RJVicpOyAgICAgICAgICAgICAgICAgIC8vIHNlYXJjaCBhbGwgRElWIGVsZW1lbnRzIGluIHRhcmdldCBjZWxsXHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXYubGVuZ3RoOyBpKyspICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggYWxsIERJViBlbGVtZW50cyBpbiB0YXJnZXQgY2VsbFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIC8vIGlmIERJViBpbiB0YXJnZXQgY2VsbCBpcyBzb3VyY2Ugb2YgZHJvcHBlZCBESVYgZWxlbWVudCAoZHJvcHBlZCBESVYgaWQgYW5kIGlkIG9mIERJViBpbiB0YXJnZXQgY2VsbCBoYXMgdGhlIHNhbWUgbmFtZSBiZWdpbm5pbmcgbGlrZSBcImQxMmMyXCIgYW5kIFwiZDEyXCIpXHJcbiAgICAgICAgICAvLyBvZiBjb3Vyc2UsIHRoZSBjYXNlIHdoZXJlIHNvdXJjZSBESVYgZWxlbWVudCBpcyBkcm9wcGVkIHRvIHRoZSBjZWxsIHdpdGggY2xvbmVkIERJViBlbGVtZW50IHNob3VsZCBiZSBleGNsdWRlZCAocG9zc2libGUgaW4gY2xpbWl0MSB0eXBlKVxyXG4gICAgICAgICAgaWYgKG9iaiAhPT0gZGl2W2ldICYmIG9iai5pZC5pbmRleE9mKGRpdltpXS5pZCkgPT09IDApIFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBjbG9uZVNvdXJjZURpdiA9IGRpdltpXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHJlZmVyZW5jZSB0byBjbG9uZVNvdXJjZURpdiBlbGVtZW50XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZiAoY2xvbmVTb3VyY2VEaXYpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGNsb25lIHNvdXJjZSBESVYgZWxlbWVudCBleGlzdHMgaW4gdGFyZ2V0IGNlbGxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBjbG9uZUxpbWl0KGNsb25lU291cmNlRGl2LCAxKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGUgY2xpbWl0IGNsYXNzIChpbmNyZW1lbnQgYnkgMSlcclxuICAgICAgICAgIG9iai5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9iaik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlbGV0ZSBkcm9wcGVkIERJViBlbGVtZW50XHJcbiAgICAgICAgICByZXR1cm47ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gZnJvbSB0aGUgbWV0aG9kIChldmVyeXRoaW5nIGlzIGRvbmUpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB0ZC50YXJnZXQuYXBwZW5kQ2hpbGQob2JqKTtcclxuICAgICAgXHJcbiAgICAgIHJlZ2lzdGVyRXZlbnRzKG9iaik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVnaXN0ZXIgZXZlbnQgbGlzdGVuZXJzIChGSVggZm9yIFNhZmFyaSBNb2JpbGUpXHJcbiAgICAgIFJFRElQUy5kcmFnLmV2ZW50LmRyb3BwZWQodGQudGFyZ2V0KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbCBldmVudC5kcm9wcGVkIGJlY2F1c2UgY2xvbmVMaW1pdCBjb3VsZCBjYWxsIGV2ZW50LmNsb25lZEVuZDEgb3IgZXZlbnQuY2xvbmVkRW5kMlxyXG4gICAgICBcclxuICAgICAgaWYgKGNsb25lZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBvYmplY3QgaXMgY2xvbmVkXHJcbiAgICAgIHtcclxuICAgICAgICBSRURJUFMuZHJhZy5ldmVudC5jbG9uZWREcm9wcGVkKHRkLnRhcmdldCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIGNsb25lZERyb3BwZWQgZXZlbnQgaGFuZGxlclxyXG4gICAgICAgIGNsb25lTGltaXQob2JqT2xkLCAtMSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBjbGltaXQxX1ggb3IgY2xpbWl0Ml9YIGNsYXNzbmFtZVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChjbG9uZWQgJiYgb2JqLnBhcmVudE5vZGUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2xvbmVkIGVsZW1lbnQgc2hvdWxkIGJlIGRlbGV0ZWQgKGlmIG5vdCBhbHJlYWR5IGRlbGV0ZWQpXHJcbiAgICB7XHJcbiAgICAgIG9iai5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9iaik7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogUmVnaXN0ZXIgZXZlbnQgbGlzdGVuZXJzIGZvciBESVYgZWxlbWVudC5cclxuICAgKiBESVYgZWxlbWVudHMgc2hvdWxkIGhhdmUgb25seSBvbm1vdXNlZG93biAodXNpbmcgdHJhZGl0aW9uYWwgZXZlbnQgcmVnaXN0cmF0aW9uIG1vZGVsKS5cclxuICAgKiBJIGhhZCBhIHByb2JsZW0gd2l0aCBhZHZhbmNlZCBldmVudCByZWdpc3RyYXRpb24gbW9kZWwuXHJcbiAgICogSW4gY2FzZSBvZiB1c2luZyBhZHZhbmNlZCBtb2RlbCwgc2VsZWN0ZWQgdGV4dCBhbmQgZHJhZ2dlZCBESVYgZWxlbWVudCB3ZXJlIGluIGNvbGxpc2lvbi5cclxuICAgKiBJdCBsb29rcyBsaWtlIHNlbGVjdGVkIHRleHQgd2FzIGFibGUgdG8gZHJhZyBpbnN0ZWFkIG9mIERJViBlbGVtZW50LlxyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGRpdiBSZWdpc3RlciBldmVudCBsaXN0ZW5lcnMgZm9yIG9ubW91c2Vkb3duLCBvbnRvdWNoc3RhcnQgYW5kIG9uZGJsY2xpY2sgdG8gdGhlIERJViBlbGVtZW50LlxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2ZsYWddIElmIHNldCB0byBmYWxzZSB0aGVuIGV2ZW50IGxpc3RlbmVycyB3aWxsIGJlIGRlbGV0ZWQuXHJcbiAgICovXHJcbiAgcmVnaXN0ZXJFdmVudHMgPSBmdW5jdGlvbiAoZGl2LCBmbGFnKVxyXG4gIHtcclxuICAgIGlmIChmbGFnID09PSBmYWxzZSkgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgZmxhZyBpcyBzZSB0byBmYWxzZSwgdGhlbiByZW1vdmUgZXZlbnQgbGlzdGVuZXJzIG9uIERJViBlbGVtZW50XHJcbiAgICB7XHJcbiAgICAgIGRpdi5vbm1vdXNlZG93biA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICB7XHJcbiAgICAgIGRpdi5vbm1vdXNlZG93biA9IGhhbmRsZXJPbk1vdXNlRG93bjtcclxuICAgIH1cclxuICB9O1xyXG5cclxuXHJcbiAgcmVzZXRTdHlsZXMgPSBmdW5jdGlvbiAoZWwpICAgICAgICAgLy8gQWZ0ZXIgZWxlbWVudCBpcyBkcm9wcGVkLCBzdHlsZXMgbmVlZCB0byBiZSByZXNldC5cclxuICB7XHJcbiAgICBlbC5zdHlsZS50b3AgID0gJyc7XHJcbiAgICBlbC5zdHlsZS5sZWZ0ID0gJyc7XHJcbiAgICBlbC5zdHlsZS5wb3NpdGlvbiA9ICcnO1xyXG4gICAgZWwuc3R5bGUuekluZGV4ID0gJyc7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogb25tb3VzZW1vdmUgZXZlbnQgaGFuZGxlci5cclxuICAgKiBoYW5kbGVyT25Nb3VzZU1vdmUgaXMgYXR0YWNoZWQgdG8gZG9jdW1lbnQgbGV2ZWwgaW4gYSBtb21lbnQgd2hlbiBESVYgZWxlbWVudCBpcyBjbGlja2VkICh0aGlzIGhhcHBlbnMgaW4gaGFuZGxlck9uTW91c2VEb3duKS5cclxuICAgKiBoYW5kbGVyT25Nb3VzZVVwIGRldGFjaGVzIG9ubW91c2Vtb3ZlIGFuZCBvbm1vdXNldXAgZXZlbnQgaGFuZGxlcnMuXHJcbiAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBpbmZvcm1hdGlvbi5cclxuICAgKi9cclxuICBoYW5kbGVyT25Nb3VzZU1vdmUgPSBmdW5jdGlvbiAoZSlcclxuICB7XHJcbiAgICB2YXIgZXZ0ID0gZSB8fCB3aW5kb3cuZXZlbnQ7ICAgICAgICAgICAgLy8gZGVmaW5lIGV2ZW50IChGRiAmIElFKVxyXG4gICAgdmFyIGJvdW5kID0gUkVESVBTLmRyYWcuc2Nyb2xsLmJvdW5kOyAgIC8vIHJlYWQgXCJib3VuZFwiIHB1YmxpYyBwcm9wZXJ0eSAobWF5YmUgY29kZSB3aWxsIGJlIGZhc3RlciwgYW5kIGl0IHdpbGwgYmUgZWFzaWVyIHRvIHJlZmVyZW5jZSBpbiBvbm1vdXNlbW92ZSBoYW5kbGVyKVxyXG4gICAgdmFyIHNjYTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgc2Nyb2xsYWJsZSBjb250YWluZXIgYXJlYVxyXG4gICAgdmFyIFgsIFk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFggYW5kIFkgcG9zaXRpb24gb2YgbW91c2UgcG9pbnRlclxyXG4gICAgdmFyIGRlbHRhWCwgZGVsdGFZOyAgICAgICAgICAgICAgICAgICAgIC8vIGRlbHRhIGZyb20gaW5pdGlhbCBwb3NpdGlvblxyXG4gICAgdmFyIGk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5lZWRlZCBmb3IgbG9jYWwgbG9vcFxyXG4gICAgdmFyIHNjcm9sbFBvc2l0aW9uOyAgICAgICAgICAgICAgICAgICAgIC8vIHNjcm9sbCBwb3NpdGlvbiB2YXJpYWJsZSBuZWVkZWQgZm9yIGF1dG9zY3JvbGwgY2FsbFxyXG5cclxuICAgIFggPSBwb2ludGVyLnggPSBldnQuY2xpZW50WDtcclxuICAgIFkgPSBwb2ludGVyLnkgPSBldnQuY2xpZW50WTtcclxuXHJcbiAgICBkZWx0YVggPSBNYXRoLmFicyh0aHJlc2hvbGQueCAtIFgpOyAgICAgICAgIC8vIGNhbGN1bGF0ZSBkZWx0YSBmcm9tIGluaXRpYWwgcG9zaXRpb25cclxuICAgIGRlbHRhWSA9IE1hdGguYWJzKHRocmVzaG9sZC55IC0gWSk7XHJcblxyXG4gICAgaWYgKCFtb3ZlZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBcIm1vdmVkXCIgZmxhZyBpc24ndCBzZXQgKHRoaXMgaXMgdGhlIGZpcnN0IG1vbWVudCB3aGVuIG9iamVjdCBpcyBtb3ZlZClcclxuICAgIHtcclxuICAgICAgLy9yZW1lbWJlciByZWZlcmVuY2Ugb2YgdGhlIHNvdXJjZSByb3csIGNsb25lIHNvdXJjZSByb3cgYW5kIHNldCBvYmogYXMgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IHJvdyBzZXR0aW5ncyBvZiBcImNsb25lZFwiIGZsYWcgc2hvdWxkIGdvIGJlZm9yZSBjYWxsaW5nIHJvd0Nsb25lKCkgYmVjYXVzZSBcImNsb25lZFwiIGlzIG5lZWRlZCBpbiByb3dDbG9uZSgpIHRvIGN1dCBvdXQgXCJyZWRpcHMtY2xvbmVcIiBjbGFzcyBuYW1lIGZyb20gPGRpdiBjbGFzcz1cInJlZGlwcy1kcmFnIHJlZGlwcy1yb3cgcmVkaXBzLWNsb25lXCI+IGVsZW1lbnRzXHJcbiAgICAgIGlmIChjbG9uZUNsYXNzIHx8IChSRURJUFMuZHJhZy5jbG9uZS5rZXlSb3cgPT09IHRydWUgJiYgc2hpZnRLZXkpKVxyXG4gICAgICB7XHJcbiAgICAgICAgY2xvbmVkID0gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgUkVESVBTLmRyYWcub2JqT2xkID0gb2JqT2xkID0gb2JqOyAgICAgICAgLy8gcmVtZW1iZXIgcmVmZXJlbmNlIHRvIHRoZSBzb3VyY2Ugcm93XHJcbiAgICAgIFJFRElQUy5kcmFnLm9iaiA9IG9iaiA9IHJvd0Nsb25lKG9iaik7ICAgIC8vIGNsb25lIHNvdXJjZSByb3cgYW5kIHNldCBhcyBvYmpcclxuICAgICAgb2JqLnN0eWxlLnpJbmRleCA9IDk5OTsgICAgICAgICAgICAgICAgICAgLy8gc2V0IGhpZ2ggei1pbmRleCBmb3IgY2xvbmVkIG1pbmkgdGFibGVcclxuXHJcbiAgICAgIG9iai5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7ICAgICAgICAgICAgIC8vIHNldCBzdHlsZSB0byBmaXhlZCB0byBhbGxvdyBkcmFnZ2luZyBESVYgb2JqZWN0XHJcbiAgICAgIGNhbGN1bGF0ZUNlbGxzKCk7ICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIGNhbGN1bGF0ZSBjZWxscyBmb3IgY2FzZSB3aGVyZSBtb3ZlZCBlbGVtZW50IGNoYW5nZWQgY2VsbCBkaW1lbnNpb24sIHBsYWNlIDMgZWxlbWVudHMgaW4gdGhlIHNhbWUgY2VsbCBpbiBleGFtcGxlMDggYW5kIHRyeSB0byBtb3ZlIG9uZSBvdXQgb2YgdGhlIHRhYmxlIGNlbGxcclxuICAgICAgc2V0VGFibGVSb3dDb2x1bW4oKTsgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGN1cnJlbnQgdGFibGUsIHJvdyBhbmQgY29sdW1uXHJcblxyXG4gICAgICBpZiAoY2xvbmVkKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIGV2ZW50IGhhbmRsZXIgKHJvdyBjbG9uZWQvbW92ZWQpXHJcbiAgICAgIHtcclxuICAgICAgICBSRURJUFMuZHJhZy5ldmVudC5yb3dDbG9uZWQoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlXHJcbiAgICAgIHtcclxuICAgICAgICBSRURJUFMuZHJhZy5ldmVudC5yb3dNb3ZlZCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZXRQb3NpdGlvbigpOyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGNvbG9yIGZvciB0aGUgY3VycmVudCB0YWJsZSBjZWxsIGFuZCByZW1lbWJlciBwcmV2aW91cyBwb3NpdGlvbiBhbmQgY29sb3IsIHNldFBvc2l0aW9uKCkgbXVzdCBnbyBhZnRlciBjYWxsaW5nIGV2ZW50Lm1vdmVkKCkgYW5kIGV2ZW50LnJvd01vdmVkKCkgaWYgdXNlciB3YW50cyB0byBjaGFuZ2UgY29sb3Igb2Ygc291cmNlIHJvd1xyXG5cclxuICAgICAgaWYgKFggPiBzY3JlZW4ud2lkdGggLSBvYmpNYXJnaW5bMV0pICAgIC8vIGlmIGVsZW1lbnQgaXMgZmFyIGF3YXkgb24gdGhlIHJpZ2h0IHNpZGUgb2YgcGFnZSwgc2V0IHBvc3NpYmxlIHJpZ2h0IHBvc2l0aW9uIChzY3JlZW4ud2lkdGggLSBvYmplY3Qgd2lkdGgpLCBvYmpNYXJnaW5bMV0gKyBvYmpNYXJnaW5bM10gPSBvYmplY3Qgd2lkdGhcclxuICAgICAge1xyXG4gICAgICAgIG9iai5zdHlsZS5sZWZ0ID0gKHNjcmVlbi53aWR0aCAtIChvYmpNYXJnaW5bMV0gKyAgb2JqTWFyZ2luWzNdKSkgKyAncHgnO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoWSA+IHNjcmVlbi5oZWlnaHQgLSBvYmpNYXJnaW5bMl0pICAgLy8gaWYgZWxlbWVudCBpcyBiZWxvdyBwYWdlIGJvdHRvbSwgc2V0IHBvc3NpYmxlIGxvd2VyIHBvc2l0aW9uIChzY3JlZW4ud2lkdGggLSBvYmplY3QgaGVpZ2h0KSwgb2JqTWFyZ2luWzBdICsgb2JqTWFyZ2luWzJdID0gb2JqZWN0IGhlaWdodFxyXG4gICAgICB7XHJcbiAgICAgICAgb2JqLnN0eWxlLnRvcCAgPSAoc2NyZWVuLmhlaWdodCAtIChvYmpNYXJnaW5bMF0gKyBvYmpNYXJnaW5bMl0pKSArICdweCc7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBtb3ZlZCA9IHRydWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgbW92ZWRfZmxhZ1xyXG5cclxuICAgIC8vIHNldCBsZWZ0IGFuZCB0b3Agc3R5bGVzIGZvciB0aGUgbW92ZWQgZWxlbWVudCBpZiBlbGVtZW50IGlzIGluc2lkZSB3aW5kb3csIHRoaXMgY29uZGl0aW9ucyB3aWxsIHN0b3AgZWxlbWVudCBvbiB3aW5kb3cgYm91bmRzXHJcbiAgICBpZiAoWCA+IG9iak1hcmdpblszXSAmJiBYIDwgc2NyZWVuLndpZHRoIC0gb2JqTWFyZ2luWzFdKVxyXG4gICAge1xyXG4gICAgICBvYmouc3R5bGUubGVmdCA9IChYIC0gb2JqTWFyZ2luWzNdKSArICdweCc7XHJcbiAgICB9XHJcbiAgICBpZiAoWSA+IG9iak1hcmdpblswXSAmJiBZIDwgc2NyZWVuLmhlaWdodCAtIG9iak1hcmdpblsyXSlcclxuICAgIHtcclxuICAgICAgb2JqLnN0eWxlLnRvcCAgPSAoWSAtIG9iak1hcmdpblswXSkgKyAncHgnO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHNldCBjdXJyZW50IHRhYmxlLCByb3cgYW5kIGNlbGwgKHRoaXMgY29uZGl0aW9uIHNob3VsZCBzcGFyZSBDUFUpOiAxKSBpZiBtb3VzZSBwb2ludGVyIGlzIGluc2lkZSBESVYgaWQ9XCJyZWRpcHMtZHJhZ1wiIDIpIGFuZCBhdXRvc2Nyb2xsIGlzIG5vdCB3b3JraW5nIDMpIGFuZCBjdXJyZW50IHRhYmxlIGNvbnRhaW5zIG5lc3RlZCB0YWJsZSBvciBjdXJzb3IgaXMgb3V0c2lkZSBvZiBjdXJyZW50IGNlbGxcclxuICAgIGlmIChYIDwgZGl2Qm94WzFdICYmIFggPiBkaXZCb3hbM10gJiYgWSA8IGRpdkJveFsyXSAmJiBZID4gZGl2Qm94WzBdICYmXHJcbiAgICAgIGVkZ2UuZmxhZy54ID09PSAwICYmIGVkZ2UuZmxhZy55ID09PSAwICYmXHJcbiAgICAgIChjdXJyZW50Q2VsbC5jb250YWluVGFibGUgfHwgKFggPCBjdXJyZW50Q2VsbFszXSB8fCBYID4gY3VycmVudENlbGxbMV0gfHwgWSA8IGN1cnJlbnRDZWxsWzBdIHx8IFkgPiBjdXJyZW50Q2VsbFsyXSkpKVxyXG4gICAge1xyXG4gICAgICBzZXRUYWJsZVJvd0NvbHVtbigpOyAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGN1cnJlbnQgdGFibGUgcm93IGFuZCB0YWJsZSBjZWxsXHJcbiAgICAgIGNlbGxDaGFuZ2VkKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBuZXcgbG9jYXRpb24gaXMgaW5zaWRlIHRhYmxlIGFuZCBuZXcgbG9jYXRpb24gaXMgZGlmZmVyZW50IHRoZW4gb2xkIGxvY2F0aW9uXHJcbiAgICB9XHJcblxyXG4gICAgLy8gaWYgYXV0b1Njcm9sbCBvcHRpb24gaXMgZW5hYmxlZCAoYnkgZGVmYXVsdCBpdCBpcyBidXQgaXQgY2FuIGJlIHR1cm5lZCBvZmYpXHJcbiAgICBpZiAoUkVESVBTLmRyYWcuc2Nyb2xsLmVuYWJsZSlcclxuICAgIHtcclxuICAgICAgZWRnZS5wYWdlLnggPSBib3VuZCAtIChzY3JlZW4ud2lkdGggLyAyICA+IFggPyBYIC0gb2JqTWFyZ2luWzNdIDogc2NyZWVuLndpZHRoIC0gWCAtIG9iak1hcmdpblsxXSk7ICAgICAgIC8vIGNhbGN1bGF0ZSBob3Jpem9udGFsbHkgY3Jvc3NlZCBwYWdlIGJvdW5kXHJcblxyXG4gICAgICBpZiAoZWRnZS5wYWdlLnggPiAwKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgZWxlbWVudCBjcm9zc2VzIHBhZ2UgYm91bmQgdGhlbiBzZXQgc2Nyb2xsIGRpcmVjdGlvbiBhbmQgY2FsbCBhdXRvIHNjcm9sbFxyXG4gICAgICB7XHJcbiAgICAgICAgaWYgKGVkZ2UucGFnZS54ID4gYm91bmQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbiBjYXNlIHdoZW4gb2JqZWN0IGlzIG9ubHkgaGFsZiB2aXNpYmxlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZWRnZS5wYWdlLnggPSBib3VuZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGdldCBob3Jpem9udGFsIHdpbmRvdyBzY3JvbGwgcG9zaXRpb25cclxuICAgICAgICAvL3Njcm9sbFBvc2l0aW9uID0gd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0O1xyXG4gICAgICAgIHNjcm9sbFBvc2l0aW9uID0gMDsgICAvL2Rpc2FibGluZyBiZWNhdXNlIHdlIHNob3VsZG4ndCBoYXZlIHRoZSB1c2VyIHNjcm9sbGluZyBob3Jpem9udGFsbHkgYW5kIHRoaXMgaW1wcm92ZXMgcGVyZm9ybWFuY2UgZm9yIGxhcmdlIHRyZWVzXHJcblxyXG4gICAgICAgIGVkZ2UucGFnZS54ICo9IFggPCBzY3JlZW4ud2lkdGggLyAyID8gLTEgOiAxOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHNjcm9sbCBkaXJlY3Rpb25cclxuXHJcbiAgICAgICAgLy8gaWYgcGFnZSBib3VuZCBpcyBjcm9zc2VkIGFuZCB0aGlzIHR3byBjYXNlcyBhcmVuJ3QgbWV0OiAxKSBzY3JvbGxiYXIgaXMgb24gdGhlIGxlZnQgYW5kIHVzZXIgd2FudHMgdG8gc2Nyb2xsIGxlZnQgMikgc2Nyb2xsYmFyIGlzIG9uIHRoZSByaWdodCBhbmQgdXNlciB3YW50cyB0byBzY3JvbGwgcmlnaHRcclxuICAgICAgICBpZiAoISgoZWRnZS5wYWdlLnggPCAwICYmIHNjcm9sbFBvc2l0aW9uIDw9IDApIHx8IChlZGdlLnBhZ2UueCA+IDAgJiYgc2Nyb2xsUG9zaXRpb24gPj0gKHNjcm9sbERhdGEud2lkdGggLSBzY3JlZW4ud2lkdGgpKSkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgaWYgKGVkZ2UuZmxhZy54KysgPT09IDApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmlyZSBhdXRvc2Nyb2xsIGZ1bmN0aW9uICh0aGlzIHNob3VsZCBoYXBwZW4gb25seSBvbmNlKVxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBSRURJUFMuZXZlbnQucmVtb3ZlKHdpbmRvdywgJ3Njcm9sbCcsIGNhbGN1bGF0ZUNlbGxzKTsgICAgLy8gcmVzZXQgb25zY3JvbGwgZXZlbnRcclxuICAgICAgICAgICAgYXV0b1Njcm9sbFgod2luZG93KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGwgd2luZG93IGF1dG9zY3JvbGxcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZVxyXG4gICAgICB7XHJcbiAgICAgICAgZWRnZS5wYWdlLnggPSAwO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBlZGdlLnBhZ2UueSA9IGJvdW5kIC0gKHNjcmVlbi5oZWlnaHQgLyAyID4gWSA/IFkgLSBvYmpNYXJnaW5bMF0gOiBzY3JlZW4uaGVpZ2h0IC0gWSAtIG9iak1hcmdpblsyXSk7ICAgICAgLy8gY2FsY3VsYXRlIHZlcnRpY2FsbHkgY3Jvc3NlZCBwYWdlIGJvdW5kXHJcbiAgICAgIFxyXG4gICAgICBpZiAoZWRnZS5wYWdlLnkgPiAwKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgZWxlbWVudCBjcm9zc2VzIHBhZ2UgYm91bmRcclxuICAgICAge1xyXG4gICAgICAgIGlmIChlZGdlLnBhZ2UueSA+IGJvdW5kKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IG1heCBjcm9zc2VkIGJvdW5kXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZWRnZS5wYWdlLnkgPSBib3VuZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgc2Nyb2xsUG9zaXRpb24gPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXQgdmVydGljYWwgd2luZG93IHNjcm9sbCBwb3NpdGlvblxyXG4gICAgICAgIGVkZ2UucGFnZS55ICo9IFkgPCBzY3JlZW4uaGVpZ2h0IC8gMiA/IC0xIDogMTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHNjcm9sbCBkaXJlY3Rpb25cclxuICAgICAgICBcclxuICAgICAgICBpZiAoISgoZWRnZS5wYWdlLnkgPCAwICYmIHNjcm9sbFBvc2l0aW9uIDw9IDApIHx8IChlZGdlLnBhZ2UueSA+IDAgJiYgc2Nyb2xsUG9zaXRpb24gPj0gKHNjcm9sbERhdGEuaGVpZ2h0IC0gc2NyZWVuLmhlaWdodCkpKSkgICAgLy8gaWYgcGFnZSBib3VuZCBpcyBjcm9zc2VkIGFuZCB0aGlzIHR3byBjYXNlcyBhcmVuJ3QgbWV0OiAxKSBzY3JvbGxiYXIgaXMgb24gdGhlIHBhZ2UgdG9wIGFuZCB1c2VyIHdhbnRzIHRvIHNjcm9sbCB1cCAyKSBzY3JvbGxiYXIgaXMgb24gdGhlIHBhZ2UgYm90dG9tIGFuZCB1c2VyIHdhbnRzIHRvIHNjcm9sbCBkb3duXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgaWYgKGVkZ2UuZmxhZy55KysgPT09IDApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmlyZSBhdXRvc2Nyb2xsICh0aGlzIHNob3VsZCBoYXBwZW4gb25seSBvbmNlKVxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBSRURJUFMuZXZlbnQucmVtb3ZlKHdpbmRvdywgJ3Njcm9sbCcsIGNhbGN1bGF0ZUNlbGxzKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzZXQgb25zY3JvbGwgZXZlbnRcclxuICAgICAgICAgICAgYXV0b1Njcm9sbFkod2luZG93KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGwgd2luZG93IGF1dG9zY3JvbGxcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBcclxuICAgICAge1xyXG4gICAgICAgIGVkZ2UucGFnZS55ID0gMDtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgZm9yIChpID0gMDsgaSA8IHNjcm9sbERhdGEuY29udGFpbmVyLmxlbmd0aDsgaSsrKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRlc3QgaWYgZHJhZ2dlZCBvYmplY3QgaXMgaW4gc2Nyb2xsYWJsZSBjb250YWluZXIsIHRoaXMgY29kZSB3aWxsIGJlIGV4ZWN1dGVkIG9ubHkgaWYgc2Nyb2xsYWJsZSBjb250YWluZXIgKERJViB3aXRoIG92ZXJmbG93IG90aGVyIHRoYW4gJ3Zpc2libGUpIGV4aXN0cyBvbiBwYWdlXHJcbiAgICAgIHtcclxuICAgICAgICBzY2EgPSBzY3JvbGxEYXRhLmNvbnRhaW5lcltpXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBjdXJyZW50IHNjcm9sbGFibGUgY29udGFpbmVyIGFyZWFcclxuICAgICAgICBcclxuICAgICAgICBpZiAoc2NhLmF1dG9zY3JvbGwgJiYgWCA8IHNjYS5vZmZzZXRbMV0gJiYgWCA+IHNjYS5vZmZzZXRbM10gJiYgWSA8IHNjYS5vZmZzZXRbMl0gJiYgWSA+IHNjYS5vZmZzZXRbMF0pIC8vIGlmIGRyYWdnZWQgb2JqZWN0IGlzIGluc2lkZSBzY3JvbGxhYmxlIGNvbnRhaW5lciBhbmQgc2Nyb2xsYWJsZSBjb250YWluZXIgaGFzIGVuYWJsZWQgYXV0b3Njcm9sbCBvcHRpb25cclxuICAgICAgICB7XHJcbiAgICAgICAgICBlZGdlLmRpdi54ID0gYm91bmQgLSAoc2NhLm1pZHN0WCAgPiBYID8gWCAtIG9iak1hcmdpblszXSAtIHNjYS5vZmZzZXRbM10gOiBzY2Eub2Zmc2V0WzFdIC0gWCAtIG9iak1hcmdpblsxXSk7ICAgLy8gY2FsY3VsYXRlIGhvcml6b250YWxseSBjcm9zc2VkIHBhZ2UgYm91bmRcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYgKGVkZ2UuZGl2LnggPiAwKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgZWxlbWVudCBjcm9zc2VzIHBhZ2UgYm91bmQgdGhlbiBzZXQgc2Nyb2xsIGRpcmVjdGlvbiBhbmQgY2FsbCBhdXRvIHNjcm9sbFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoZWRnZS5kaXYueCA+IGJvdW5kKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW4gY2FzZSB3aGVuIG9iamVjdCBpcyBvbmx5IGhhbGYgdmlzaWJsZSAocGFnZSBpcyBzY3JvbGxlZCBvbiB0aGF0IG9iamVjdClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGVkZ2UuZGl2LnggPSBib3VuZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZWRnZS5kaXYueCAqPSBYIDwgc2NhLm1pZHN0WCA/IC0xIDogMTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBzY3JvbGwgZGlyZWN0aW9uOiBuZWdhdGl2ZSAtIGxlZnQsIHBvc2l0aXZlIC0gcmlnaHRcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChlZGdlLmZsYWcueCsrID09PSAwKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgb25zY3JvbGwgZXZlbnQgaGFuZGxlciBhbmQgY2FsbCBhdXRvU2Nyb2xsWSBmdW5jdGlvbiBvbmx5IG9uY2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIFJFRElQUy5ldmVudC5yZW1vdmUoc2NhLmRpdiwgJ3Njcm9sbCcsIGNhbGN1bGF0ZUNlbGxzKTtcclxuICAgICAgICAgICAgICBhdXRvU2Nyb2xsWChzY2EuZGl2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgZWRnZS5kaXYueCA9IDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGVkZ2UuZGl2LnkgPSBib3VuZCAtIChzY2EubWlkc3RZICA+IFkgPyBZIC0gb2JqTWFyZ2luWzBdIC0gc2NhLm9mZnNldFswXSA6IHNjYS5vZmZzZXRbMl0gLSBZIC0gb2JqTWFyZ2luWzJdKTsgICAvLyBjYWxjdWxhdGUgdmVydGljYWxseSBjcm9zc2VkIHBhZ2UgYm91bmRcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYgKGVkZ2UuZGl2LnkgPiAwKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgZWxlbWVudCBjcm9zc2VzIHBhZ2UgYm91bmQgdGhlbiBzZXQgc2Nyb2xsIGRpcmVjdGlvbiBhbmQgY2FsbCBhdXRvIHNjcm9sbFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoZWRnZS5kaXYueSA+IGJvdW5kKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW4gY2FzZSB3aGVuIG9iamVjdCBpcyBvbmx5IGhhbGYgdmlzaWJsZSAocGFnZSBpcyBzY3JvbGxlZCBvbiB0aGF0IG9iamVjdClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGVkZ2UuZGl2LnkgPSBib3VuZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZWRnZS5kaXYueSAqPSBZIDwgc2NhLm1pZHN0WSA/IC0xIDogMTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBzY3JvbGwgZGlyZWN0aW9uOiBuZWdhdGl2ZSAtIHVwLCBwb3NpdGl2ZSAtIGRvd25cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChlZGdlLmZsYWcueSsrID09PSAwKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgb25zY3JvbGwgZXZlbnQgaGFuZGxlciBhbmQgY2FsbCBhdXRvU2Nyb2xsWSBmdW5jdGlvbiBvbmx5IG9uY2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIFJFRElQUy5ldmVudC5yZW1vdmUoc2NhLmRpdiwgJ3Njcm9sbCcsIGNhbGN1bGF0ZUNlbGxzKTtcclxuICAgICAgICAgICAgICBhdXRvU2Nyb2xsWShzY2EuZGl2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgZWRnZS5kaXYueSA9IDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGJyZWFrOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBicmVhayB0aGUgbG9vcCAoY2hlY2tpbmcgZm9yIG90aGVyIHNjcm9sbGFibGUgY29udGFpbmVycyBpcyBub3QgbmVlZGVkKVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2UgKEkgbWVhbiBkcmFnZ2VkIG9iamVjdCBpc24ndCBpbnNpZGUgYW55IG9mIHNjcm9sbGFibGUgY29udGFpbmVyKSByZXNldCBjcm9zc2VkIGVkZ2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICBlZGdlLmRpdi54ID0gZWRnZS5kaXYueSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIHN0b3AgYWxsIHByb3BhZ2F0aW9uIG9mIHRoZSBldmVudCBpbiB0aGUgYnViYmxpbmcgcGhhc2UuICAoc2F2ZSBzeXN0ZW0gcmVzb3VyY2VzIGJ5IHR1cm5pbmcgb2ZmIGV2ZW50IGJ1YmJsaW5nIC8gcHJvcGFnYXRpb24pXHJcbiAgICBldnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcclxuICAgIGlmIChldnQuc3RvcFByb3BhZ2F0aW9uKSBcclxuICAgIHtcclxuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCAoZnJvbSBoYW5kbGVyT25Nb3VzZU1vdmUsIGF1dG9TY3JvbGxYLCBhdXRvU2Nyb2xsWSkgaW4gY2FzZSBvZiBjaGFuZ2Ugb2YgY3VycmVudCB0YWJsZSBjZWxsLlxyXG4gIC8vIFdoZW4gY2hhbmdlIGhhcHBlbnMsIHRoZW4gcmV0dXJuIGJhY2tncm91bmQgY29sb3IgdG8gb2xkIHBvc2l0aW9uLCBoaWdobGlnaHQgbmV3IHBvc2l0aW9uLCBjYWxjdWxhdGUgY2VsbCBib3VuZGFyaWVzIGFuZCBjYWxsIGV2ZW50LmNoYW5nZWQuXHJcbiAgY2VsbENoYW5nZWQgPSBmdW5jdGlvbiAoKSBcclxuICB7XHJcbiAgICBpZiAoKHJvdyAhPT0gcm93X29sZCB8fCBjZWxsICE9PSBjZWxsX29sZCkpIFxyXG4gICAge1xyXG4gICAgICBpZiAocm93X29sZCAhPT0gbnVsbCAmJiBjZWxsX29sZCAhPT0gbnVsbCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgY2VsbCBiYWNrZ3JvdW5kIGNvbG9yIHRvIHRoZSBwcmV2aW91cyBjZWxsXHJcbiAgICAgIHtcclxuICAgICAgICBzZXRUZFN0eWxlKHJvd19vbGQsIGJnU3R5bGVPbGQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGJhY2tncm91bmQgY29sb3IgZm9yIHByZXZpb3VzIHRhYmxlIHJvd1xyXG4gICAgICAgIFJFRElQUy5kcmFnLnRkLnByZXZpb3VzID0gdGQucHJldmlvdXMgPSB0YWJsZS5yb3dzW3Jvd19vbGRdLmNlbGxzW2NlbGxfb2xkXTsgICAgICAvLyBkZWZpbmUgcHJldmlvdXMgdGFibGUgY2VsbFxyXG4gICAgICAgIFJFRElQUy5kcmFnLnRkLmN1cnJlbnQgPSB0ZC5jdXJyZW50ID0gdGFibGUucm93c1tyb3ddLmNlbGxzW2NlbGxdOyAgICAgICAgICAgICAgICAvLyBkZWZpbmUgY3VycmVudCB0YWJsZSBjZWxsXHJcblxyXG4gICAgICAgIGlmIChyb3cgIT09IHJvd19vbGQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgdGFibGUgb3Igcm93IHNob3VsZCBjaGFuZ2UgKGNoYW5naW5nIGNlbGwgaW4gdGhlIHNhbWUgcm93IHdpbGwgYmUgaWdub3JlZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICBSRURJUFMuZHJhZy5ldmVudC5yb3dDaGFuZ2VkKHRkLmN1cnJlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgc2V0UG9zaXRpb24oKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBJbiBpbml0aWFsaXphdGlvbiBwaGFzZSwgdGhpcyBtZXRob2QgaXMgYXR0YWNoZWQgYXMgb25yZXNpemUgZXZlbnQgaGFuZGxlciBmb3Igd2luZG93LiAgSXQgYWxzbyBjYWxjdWxhdGVzIHdpbmRvdyB3aWR0aCBhbmQgd2luZG93IGhlaWdodC4gUmVzdWx0IGlzIHNhdmVkIGluIHZhcmlhYmxlcyBzY3JlZW4ud2lkdGggYW5kIHNjcmVlbi5oZWlnaHQgdmlzaWJsZSBpbnNpZGUgUkVESVBTLmRyYWcgcHJpdmF0ZSBzY29wZS5cclxuICBoYW5kbGVyT25SZXNpemUgPSBmdW5jdGlvbiAoKSBcclxuICB7XHJcbiAgICBzY3JlZW4ud2lkdGggID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICBzY3JlZW4uaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgXHJcbiAgICBzY3JvbGxEYXRhLndpZHRoICA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aDsgICAgIC8vIHNldCBzY3JvbGwgc2l6ZSAob25yZXNpemUsIG9ubG9hZCBhbmQgb25tb3VzZXVwIGV2ZW50KVxyXG4gICAgc2Nyb2xsRGF0YS5oZWlnaHQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xyXG4gICAgXHJcbiAgICBjYWxjdWxhdGVDZWxscygpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBjb2x1bXMgYW5kIHJvd3Mgb2Zmc2V0IChjZWxscyBkaW1lbnNpb25zKVxyXG4gIH07XHJcblxyXG4gIC8vIE1ldGhvZCBzZXRzIGN1cnJlbnQgcm93IGFuZCBjZWxsLiAgQ3VycmVudCBjZWxsIHBvc2l0aW9uIGlzIGJhc2VkIG9uIHBvc2l0aW9uIG9mIG1vdXNlIHBvaW50ZXIgYW5kIGNhbGN1bGF0ZWQgZ3JpZCBvZiB0YWJsZXMgaW5zaWRlIGRyYWcgY29udGFpbmVyLlxyXG4gIC8vIFJvd3Mgd2l0aCBkaXNwbGF5PSdub25lJyBhcmUgbm90IGNvbnRhaW5lZCBpbiByb3dfb2Zmc2V0IGFycmF5IHNvIHJvdyBib3VuZHMgY2FsY3VsYXRpb24gc2hvdWxkIHRha2UgY2FyZSBhYm91dCBzcGFyc2UgYXJyYXlzIChzaW5jZSB2ZXJzaW9uIDQuMy42KS5cclxuICBzZXRUYWJsZVJvd0NvbHVtbiA9IGZ1bmN0aW9uICgpXHJcbiAge1xyXG4gICAgdmFyIHByZXZpb3VzOyAgICAgICAvLyBzZXQgcHJldmlvdXMgcG9zaXRpb24gKGN1cnJlbnQgY2VsbCB3aWxsIG5vdCBiZSBoaWdobGlnaHRlZClcclxuICAgIHZhciByb3dfb2Zmc2V0OyAgICAgLy8gcm93IG9mZnNldHMgZm9yIHRoZSBzZWxlY3RlZCB0YWJsZSAocm93IGJveCBib3VuZHMpXHJcbiAgICB2YXIgcm93X2ZvdW5kOyAgICAgIC8vIHJlbWVtYmVyIGZvdW5kIHJvd1xyXG4gICAgdmFyIHRvcyA9IFtdOyAgICAgICAvLyB0YWJsZSBvZmZzZXRcclxuICAgIHZhciBYLCBZOyAgICAgICAgICAgLy8gWCBhbmQgWSBwb3NpdGlvbiBvZiBtb3VzZSBwb2ludGVyXHJcbiAgICB2YXIgaTsgICAgICAgICAgICAgIC8vIHVzZWQgaW4gbG9jYWwgbG9vcFxyXG5cclxuICAgIHByZXZpb3VzID0gZnVuY3Rpb24gKCkgICAgLy8gc2V0IHByZXZpb3VzIHBvc2l0aW9uIChjdXJyZW50IGNlbGwgd2lsbCBub3QgYmUgaGlnaGxpZ2h0ZWQpXHJcbiAgICB7XHJcbiAgICAgIGlmIChyb3dfb2xkICE9PSBudWxsICYmIGNlbGxfb2xkICE9PSBudWxsKVxyXG4gICAgICB7XHJcbiAgICAgICAgcm93ID0gcm93X29sZDtcclxuICAgICAgICBjZWxsID0gY2VsbF9vbGQ7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgWCA9IHBvaW50ZXIueDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJlcGFyZSBYIGFuZCBZIHBvc2l0aW9uIG9mIG1vdXNlIHBvaW50ZXJcclxuICAgIFkgPSBwb2ludGVyLnk7XHJcblxyXG4gICAgdG9zWzBdID0gdGFibGUucmVkaXBzLm9mZnNldFswXTsgLy8gdG9wXHJcbiAgICB0b3NbMV0gPSB0YWJsZS5yZWRpcHMub2Zmc2V0WzFdOyAvLyByaWdodFxyXG4gICAgdG9zWzJdID0gdGFibGUucmVkaXBzLm9mZnNldFsyXTsgLy8gYm90dG9tXHJcbiAgICB0b3NbM10gPSB0YWJsZS5yZWRpcHMub2Zmc2V0WzNdOyAvLyBsZWZ0XHJcblxyXG4gICAgLy8gaWYgdGFibGUgYmVsb25ncyB0byB0aGUgc2Nyb2xsYWJsZSBjb250YWluZXIgdGhlbiBzZXQgc2Nyb2xsYWJsZSBjb250YWluZXIgb2Zmc2V0IGlmIG5lZWRlZCBpbiBjYXNlIHdoZW4gc29tZSBwYXJ0cyBvZiB0YWJsZSBhcmUgaGlkZGVuIChmb3IgZXhhbXBsZSB3aXRoIFwib3ZlcmZsb3c6IGF1dG9cIilcclxuICAgIGlmICh0YWJsZS5zY2EgIT09IHVuZGVmaW5lZClcclxuICAgIHtcclxuICAgICAgdG9zWzBdID0gdG9zWzBdID4gdGFibGUuc2NhLm9mZnNldFswXSA/IHRvc1swXSA6IHRhYmxlLnNjYS5vZmZzZXRbMF07IC8vIHRvcFxyXG4gICAgICB0b3NbMV0gPSB0b3NbMV0gPCB0YWJsZS5zY2Eub2Zmc2V0WzFdID8gdG9zWzFdIDogdGFibGUuc2NhLm9mZnNldFsxXTsgLy8gcmlnaHRcclxuICAgICAgdG9zWzJdID0gdG9zWzJdIDwgdGFibGUuc2NhLm9mZnNldFsyXSA/IHRvc1syXSA6IHRhYmxlLnNjYS5vZmZzZXRbMl07IC8vIGJvdHRvbVxyXG4gICAgICB0b3NbM10gPSB0b3NbM10gPiB0YWJsZS5zY2Eub2Zmc2V0WzNdID8gdG9zWzNdIDogdGFibGUuc2NhLm9mZnNldFszXTsgLy8gbGVmdFxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0b3NbM10gPCBYICYmIFggPCB0b3NbMV0gJiYgdG9zWzBdIDwgWSAmJiBZIDwgdG9zWzJdKSAgICAgICAgICAgICAgICAgLy8gbW91c2UgcG9pbnRlciBpcyBpbnNpZGUgdGFibGUgKG9yIHNjcm9sbGFibGUgY29udGFpbmVyKVxyXG4gICAge1xyXG4gICAgICByb3dfb2Zmc2V0ID0gdGFibGUucmVkaXBzLnJvd19vZmZzZXQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWZpbmUgcm93IG9mZnNldHMgZm9yIHRoZSBzZWxlY3RlZCB0YWJsZSAocm93IGJveCBib3VuZHMpXHJcblxyXG4gICAgICBmb3IgKHJvdyA9IDA7IHJvdyA8IHJvd19vZmZzZXQubGVuZ3RoIC0gMTsgcm93KyspICAgICAgICAgICAgICAgICAgICAgICAvLyBmaW5kIHRoZSBjdXJyZW50IHJvdyAobG9vcCBza2lwcyBoaWRkZW4gcm93cylcclxuICAgICAge1xyXG4gICAgICAgIGlmIChyb3dfb2Zmc2V0W3Jvd10gPT09IHVuZGVmaW5lZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiByb3cgZG9lc24ndCBleGlzdCAoaW4gY2FzZSBvZiBoaWRkZW4gcm93KSAtIHNraXAgaXRcclxuICAgICAgICB7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGN1cnJlbnRDZWxsWzBdID0gcm93X29mZnNldFtyb3ddWzBdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgdG9wIGFuZCBib3R0b20gY2VsbCBib3VuZHNcclxuXHJcbiAgICAgICAgaWYgKHJvd19vZmZzZXRbcm93ICsgMV0gIT09IHVuZGVmaW5lZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBib3R0b20gY2VsbCBib3VuZCAoaWYgaXMgcG9zc2libGUpIC0gaGlkZGVuIHJvdyBkb2Vzbid0IGV4aXN0XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgY3VycmVudENlbGxbMl0gPSByb3dfb2Zmc2V0W3JvdyArIDFdWzBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGlkZGVuIHJvdyAobGlrZSBzdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZm9yIChpID0gcm93ICsgMjsgaSA8IHJvd19vZmZzZXQubGVuZ3RoOyBpKyspICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWFyY2ggZm9yIG5leHQgdmlzaWJsZSByb3dcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHJvd19vZmZzZXRbaV0gIT09IHVuZGVmaW5lZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmlzaWJsZSByb3cgZm91bmRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGN1cnJlbnRDZWxsWzJdID0gcm93X29mZnNldFtpXVswXTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKFkgPD0gY3VycmVudENlbGxbMl0pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvcCBib3VuZCBvZiB0aGUgbmV4dCByb3dcclxuICAgICAgICB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJvd19mb3VuZCA9IHJvdzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbWVtYmVyIGZvdW5kIHJvd1xyXG5cclxuICAgICAgaWYgKHJvdyA9PT0gcm93X29mZnNldC5sZW5ndGggLSAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgbG9vcCBleGNlZWRzLCB0aGVuIHNldCBib3VuZHMgZm9yIHRoZSBsYXN0IHJvdyAob2Zmc2V0IGZvciB0aGUgbGFzdCByb3cgZG9lc24ndCB3b3JrIGluIElFOCwgc28gdXNlIHRhYmxlIGJvdW5kcylcclxuICAgICAge1xyXG4gICAgICAgIGN1cnJlbnRDZWxsWzBdID0gcm93X29mZnNldFtyb3ddWzBdO1xyXG4gICAgICAgIGN1cnJlbnRDZWxsWzJdID0gdGFibGUucmVkaXBzLm9mZnNldFsyXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY2VsbCA9IDA7XHJcblxyXG4gICAgICBpZiAocm93IDwgMCB8fCBjZWxsIDwgMCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgY2VsbCA8IDAgb3Igcm93IDwgMCB0aGVuIHVzZSBsYXN0IHBvc3NpYmxlIGxvY2F0aW9uXHJcbiAgICAgIHtcclxuICAgICAgICBwcmV2aW91cygpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKHJvdyAhPT0gcm93X2ZvdW5kKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50IGNlbGwgZm91bmQgYnV0IGlmIGN1cnJlbnQgcm93IGRpZmZlciBmcm9tIHByZXZpb3VzbHkgZm91bmQgcm93ICh0aGFua3MgdG9vIHdoaWxlIGxvb3Agd2l0aCByb3ctLSkgdGhlbiB0ZXN0IGlmIFkgaXMgaW5zaWRlIGN1cnJlbnQgY2VsbCwgKHRoaXMgc2hvdWxkIHByZXZlbnQgY2FzZSB3aGVyZSBURCBib3JkZXIgPiAxcHggYW5kIHVwcGVyIGNvbHNwYW5lZCByb3cgbGlrZSBpbiBleGFtcGxlMTUpIGxvZ2ljIHdpbGwgZW5kIGluIHVwcGVyIGNvbHNwYW5lZCByb3cgd2hpbGUgY3VycmVudCByb3cgd2lsbCBub3QgbW92ZSAtIGFuZCB0aGF0IHdhcyB3cm9uZ1xyXG4gICAgICB7XHJcblxyXG4gICAgICAgIGN1cnJlbnRDZWxsWzBdID0gcm93X29mZnNldFtyb3ddWzBdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVjYWxjdWxhdGUgdG9wIGFuZCBib3R0b20gcm93IG9mZnNldCAoYWdhaW4pXHJcbiAgICAgICAgY3VycmVudENlbGxbMl0gPSBjdXJyZW50Q2VsbFswXSArIHRhYmxlLnJvd3Nbcm93XS5jZWxsc1tjZWxsXS5vZmZzZXRIZWlnaHQ7XHJcblxyXG4gICAgICAgIGlmIChZIDwgY3VycmVudENlbGxbMF0gfHwgWSA+IGN1cnJlbnRDZWxsWzJdKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgWSBpcyBvdXRzaWRlIG9mIHRoZSBjdXJyZW50IHJvdywgcmV0dXJuIHByZXZpb3VzIGxvY2F0aW9uXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJldmlvdXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBNZXRob2Qgc2V0cyBiYWNrZ3JvdW5kIGNvbG9yIGZvciB0aGUgY3VycmVudCB0YWJsZSBjZWxsIGFuZCByZW1lbWJlcnMgcHJldmlvdXMgcG9zaXRpb24gYW5kIGJhY2tncm91bmQgY29sb3IuICBJdCBpcyBjYWxsZWQgZnJvbSBoYW5kbGVyT25Nb3VzZU1vdmUgYW5kIGNlbGxDaGFuZ2VkLlxyXG4gIHNldFBvc2l0aW9uID0gZnVuY3Rpb24gKClcclxuICB7XHJcbiAgICBpZiAocm93ICE9PSBudWxsICYmIGNlbGwgIT09IG51bGwpICAgICAgLy8gaW4gY2FzZSBpZiBvcmRpbmFyeSBlbGVtZW50IGlzIHBsYWNlZCBpbnNpZGUgJ2RlbnknIHRhYmxlIGNlbGxcclxuICAgIHtcclxuICAgICAgYmdTdHlsZU9sZCA9IGdldFRkU3R5bGUocm93KTsgICAgICAgICAvLyByZW1lbWJlciBiYWNrZ3JvdW5kIGNvbG9yIGJlZm9yZSBzZXR0aW5nIHRoZSBuZXcgYmFja2dyb3VuZCBjb2xvclxyXG4gICAgICBzZXRUZFN0eWxlKHJvdyk7ICAgICAgICAgICAgICAgICAgICAgIC8vIGhpZ2hsaWdodCBjdXJyZW50IFREIC8gVFIgKGNvbG9ycyBhbmQgc3R5bGVzIGFyZSByZWFkIGZyb20gcHVibGljIHByb3BlcnR5IFwiaG92ZXJcIlxyXG4gICAgICByb3dfb2xkID0gcm93OyAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbWVtYmVyIGN1cnJlbnQgcG9zaXRpb24gKGZvciByb3cgYW5kIGNlbGwpXHJcbiAgICAgIGNlbGxfb2xkID0gY2VsbDtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBNZXRob2Qgc2V0cyB0YWJsZSBjZWxsKHMpIGJhY2tncm91bmQgc3R5bGVzIChiYWNrZ3JvdW5kIGNvbG9ycyBhbmQgYm9yZGVyIHN0eWxlcykuXHJcbiAgICogSWYgdGRTdHlsZSBpcyB1bmRlZmluZWQgdGhlbiBjdXJyZW50IHRkL3RyIHdpbGwgYmUgaGlnaGxpZ2h0ZWQgZnJvbSBwdWJsaWMgcHJvcGVydHkgaG92ZXIuY29sb3JfdGQsIGhvdmVyLmNvbG9yX3RyIC4uLlxyXG4gICAqIEBwYXJhbSB7SW50ZWdlcn0gcmkgUm93IGluZGV4LlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0IE9iamVjdCBjb250YWlucyBiYWNrZ3JvdW5kIGNvbG9yIGFuZCBib3JkZXIgc3R5bGVzIChcInRcIiBpcyBURCBzdHlsZSBvYmplY3QgaXMgcHJlcGFyZWQgaW4gZ2V0VGRTdHlsZSBtZXRob2QpLlxyXG4gICAqL1xyXG4gIHNldFRkU3R5bGUgPSBmdW5jdGlvbiAocmksIHQpIFxyXG4gIHtcclxuICAgIHZhciB0ciwgczsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZWZlcmVuY2UgdG8gdGhlIHRhYmxlIHJvdyBhbmQgdGQuc3R5bGVcclxuXHJcbiAgICB0ciA9IHRhYmxlLnJvd3NbcmldOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCB0YWJsZSByb3dcclxuICAgIFxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ci5jZWxscy5sZW5ndGg7IGkrKykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBjb2xvcnMgdG8gdGFibGUgY2VsbHMgKHJlc3BlY3RpdmVseSkgb3IgZmlyc3QgY29sb3IgdG8gYWxsIGNlbGxzIChpbiBjYXNlIG9mIHNldHRpbmdzIGhvdmVyIHRvIHRoZSByb3cpXHJcbiAgICB7XHJcbiAgICAgIHMgPSB0ci5jZWxsc1tpXS5zdHlsZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHJlZmVyZW5jZSB0byBjdXJyZW50IFREIHN0eWxlXHJcbiAgICAgIHMuYmFja2dyb3VuZENvbG9yID0gKHQgPT09IHVuZGVmaW5lZCkgPyBSRURJUFMuZHJhZy5ob3Zlci5jb2xvclRyIDogdC5jb2xvcltpXS50b1N0cmluZygpOyAgLy8gVFIgYmFja2dyb3VuZCBjb2xvciAtIHRkU3R5bGUgaXMgdW5kZWZpbmVkIHRoZW4gaGlnaGxpZ2h0IFREIG90aGVyd2lzZSByZXR1cm4gcHJldmlvdXMgYmFja2dyb3VuZCBjb2xvclxyXG4gICAgICBcclxuICAgICAgaWYgKFJFRElQUy5kcmFnLmhvdmVyLmJvcmRlclRyICE9PSB1bmRlZmluZWQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUUiBib3JkZXIgLSBpZiBob3Zlci5ib3JkZXJUZCBpcyBzZXQgdGhlbiB0YWtlIGNhcmUgb2YgYm9yZGVyIHN0eWxlXHJcbiAgICAgIHtcclxuICAgICAgICBpZiAodCA9PT0gdW5kZWZpbmVkKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgYm9yZGVyIChoaWdobGlnaHQpIC0gc291cmNlIHJvdyB3aWxsIG5vdCBoYXZlIGFueSBib3JkZXJcclxuICAgICAgICB7XHJcbiAgICAgICAgICBpZiAocm93IDwgcm93X3NvdXJjZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgcm93IGlzIG1vdmVkIGFib3ZlIHNvdXJjZSByb3cgaW4gY3VycmVudCB0YWJsZVxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBzLmJvcmRlclRvcCA9IFJFRElQUy5kcmFnLmhvdmVyLmJvcmRlclRyO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHJvdyBpcyBtb3ZlZCBiZWxvdyBzb3VyY2Ugcm93IGluIGN1cnJlbnQgdGFibGVcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgcy5ib3JkZXJCb3R0b20gPSBSRURJUFMuZHJhZy5ob3Zlci5ib3JkZXJUcjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIHByZXZpb3VzIHN0YXRlIGJvcmRlclRvcCBhbmQgYm9yZGVyQm90dG9tIChleGl0IGZyb20gVEQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcy5ib3JkZXJUb3BXaWR0aCA9IHQudG9wW2ldWzBdO1xyXG4gICAgICAgICAgcy5ib3JkZXJUb3BTdHlsZSA9IHQudG9wW2ldWzFdO1xyXG4gICAgICAgICAgcy5ib3JkZXJUb3BDb2xvciA9IHQudG9wW2ldWzJdO1xyXG4gICAgICAgICAgcy5ib3JkZXJCb3R0b21XaWR0aCA9IHQuYm90dG9tW2ldWzBdO1xyXG4gICAgICAgICAgcy5ib3JkZXJCb3R0b21TdHlsZSA9IHQuYm90dG9tW2ldWzFdO1xyXG4gICAgICAgICAgcy5ib3JkZXJCb3R0b21Db2xvciA9IHQuYm90dG9tW2ldWzJdO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG5cclxuICAvLyBNZXRob2QgcmV0dXJucyBiYWNrZ3JvdW5kIGFuZCBib3JkZXIgc3R5bGVzIGFzIG9iamVjdCBmb3IgdGhlIGlucHV0IHBhcmFtZXRlciByb3cgaW5kZXggKHJpKS4gIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgYmFja2dyb3VuZCBjb2xvciBhbmQgYm9yZGVyIHN0eWxlcyAoZm9yIHRoZSByb3cpLlxyXG4gIGdldFRkU3R5bGUgPSBmdW5jdGlvbiAocmkpIFxyXG4gIHtcclxuICAgIHZhciB0ciwgYzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZWZlcmVuY2UgdG8gdGhlIHRhYmxlIHJvdyBhbmQgdGQgcmVmZXJlbmNlICAgXHJcbiAgICB2YXIgdCA9IHtjb2xvcjogW10sIHRvcDogW10sIHJpZ2h0OiBbXSwgYm90dG9tOiBbXSwgbGVmdDogW119OyAgICAgICAgLy8gZGVmaW5lIFREIHN0eWxlIG9iamVjdCB3aXRoIGJhY2tncm91bmQgY29sb3IgYW5kIGJvcmRlciBzdHlsZXM6IHRvcCwgcmlnaHQsIGJvdHRvbSBhbmQgbGVmdFxyXG4gICAgICBcclxuICAgIHZhciBib3JkZXIgPSBmdW5jdGlvbiAoYywgbmFtZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcml2YXRlIG1ldGhvZCBnZXRzIGJvcmRlciBzdHlsZXM6IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdFxyXG4gICAge1xyXG4gICAgICB2YXIgd2lkdGggPSAnYm9yZGVyJyArIG5hbWUgKyAnV2lkdGgnLCBzdHlsZSA9ICdib3JkZXInICsgbmFtZSArICdTdHlsZScsIGNvbG9yID0gJ2JvcmRlcicgKyBuYW1lICsgJ0NvbG9yJztcclxuICAgICAgcmV0dXJuIFtnZXRTdHlsZShjLCB3aWR0aCksIGdldFN0eWxlKGMsIHN0eWxlKSwgZ2V0U3R5bGUoYywgY29sb3IpXTtcclxuICAgIH07XHJcblxyXG4gICAgdHIgPSB0YWJsZS5yb3dzW3JpXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgdGFibGUgcm93XHJcbiAgICBcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHIuY2VsbHMubGVuZ3RoOyBpKyspICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1lbWJlciBzdHlsZXMgZm9yIGVhY2ggdGFibGUgY2VsbFxyXG4gICAge1xyXG4gICAgICBjID0gdHIuY2VsbHNbaV07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBURCByZWZlcmVuY2VcclxuICAgICAgdC5jb2xvcltpXSA9IGMuc3R5bGUuYmFja2dyb3VuZENvbG9yOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1lbWJlciBiYWNrZ3JvdW5kIGNvbG9yXHJcbiAgICAgIFxyXG4gICAgICBpZiAoUkVESVBTLmRyYWcuaG92ZXIuYm9yZGVyVHIgIT09IHVuZGVmaW5lZCkgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbWVtYmVyIHRvcCBhbmQgYm90dG9tIFREIGJvcmRlciBzdHlsZXMgaWYgaG92ZXIuYm9yZGVyVHIgcHJvcGVydHkgaXMgc2V0XHJcbiAgICAgIHtcclxuICAgICAgICB0LnRvcFtpXSA9IGJvcmRlcihjLCAnVG9wJyk7XHJcbiAgICAgICAgdC5ib3R0b21baV0gPSBib3JkZXIoYywgJ0JvdHRvbScpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHQ7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogTWV0aG9kIHJldHVybnMgYXJyYXkgb2YgZWxlbWVudCBib3VuZHMgKG9mZnNldCkgdG9wLCByaWdodCwgYm90dG9tIGFuZCBsZWZ0IChuZWVkZWQgZm9yIHRhYmxlIGdyaWQgY2FsY3VsYXRpb24pLlxyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGJveCBIVE1MRWxlbWVudCBmb3IgYm94IG1ldHJpY3MuXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IFtwb3NpdGlvbl0gSFRNTEVsZW1lbnQgXCJwb3NpdGlvblwiIHN0eWxlLiBFbGVtZW50cyB3aXRoIHN0eWxlIFwiZml4ZWRcIiB3aWxsIG5vdCBoYXZlIGluY2x1ZGVkIHBhZ2Ugc2Nyb2xsIG9mZnNldC5cclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtib3hfc2Nyb2xsXSBJZiBzZXQgdG8gXCJmYWxzZVwiIHRoZW4gZWxlbWVudCBzY3JvbGwgb2Zmc2V0IHdpbGwgbm90IGJlIGluY2x1ZGVkIGluIGNhbGN1bGF0aW9uIChkZWZhdWx0IGlzIFwidHJ1ZVwiKS5cclxuICAgKiBAcmV0dXJuIHtBcnJheX0gQm94IG9mZnNldCBhcnJheTogWyB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQgXVxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogLy8gY2FsY3VsYXRlIGJveCBvZmZzZXQgZm9yIHRoZSBkaXYgaWQ9XCJyZWRpcHMtZHJhZ1wiXHJcbiAgICogZGl2Ym94ID0gYm94T2Zmc2V0KGRyYWdDb250YWluZXIpO1xyXG4gICAqIEBleGFtcGxlXHJcbiAgICogLy8gaW5jbHVkZSBzY3JvbGwgcG9zaXRpb24gaW4gb2Zmc2V0XHJcbiAgICogb2Zmc2V0ID0gYm94T2Zmc2V0KHJvd09iaiwgJ2ZpeGVkJyk7XHJcbiAgICogQGV4YW1wbGVcclxuICAgKiAvLyBnZXQgRElWIG9mZnNldCB3aXRoIG9yIHdpdGhvdXQgXCJwYWdlIHNjcm9sbFwiIGFuZCBleGNsdWRlZCBlbGVtZW50IHNjcm9sbCBvZmZzZXRcclxuICAgKiBjYiA9IGJveE9mZnNldChkaXYsIHBvc2l0aW9uLCBmYWxzZSk7XHJcbiAgICovXHJcbiAgYm94T2Zmc2V0ID0gZnVuY3Rpb24gKGJveCwgcG9zaXRpb24sIGJveF9zY3JvbGwpXHJcbiAge1xyXG4gICAgdmFyIG9MZWZ0ID0gMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWZpbmUgb2Zmc2V0IGxlZnQgKHRha2UgY2FyZSBvZiBob3Jpem9udGFsIHNjcm9sbCBwb3NpdGlvbilcclxuICAgIHZhciBvVG9wICA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVmaW5lIG9mZnNldCB0b3AgKHRha2UgY2FyZSBvZCB2ZXJ0aWNhbCBzY3JvbGwgcG9zaXRpb24pXHJcbiAgICB2YXIgYm94T2xkID0gYm94OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbWVtYmVyIGJveCBvYmplY3RcclxuXHJcbiAgICBpZiAocG9zaXRpb24gIT09ICdmaXhlZCcpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRhYmxlX3Bvc2l0aW9uIGlzIHVuZGVmaW5lZCwgJycgb3IgJ3BhZ2Vfc2Nyb2xsJyB0aGVuIGluY2x1ZGUgcGFnZSBzY3JvbGwgb2Zmc2V0LCB3aW5kb3dTY3JvbGxQb3NpdGlvbiBpcyBzZXQgaW4gY2FsY3VsYXRlQ2VsbHMoKSwgY2FsY3VsYXRlQ2VsbHMoKSBpcyBjYWxsZWQgb24gd2luZG93IHNjcm9sbCBldmVudFxyXG4gICAge1xyXG4gICAgICBvTGVmdCA9IDAgLSB3aW5kb3dTY3JvbGxQb3NpdGlvblswXTsgICAgICAgICAgICAgICAgICAgICAgICAvLyBkZWZpbmUgb2Zmc2V0IGxlZnQgKHRha2UgY2FyZSBvZiBob3Jpem9udGFsIHNjcm9sbCBwb3NpdGlvbilcclxuICAgICAgb1RvcCAgPSAwIC0gd2luZG93U2Nyb2xsUG9zaXRpb25bMV07ICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVmaW5lIG9mZnNldCB0b3AgKHRha2UgY2FyZSBvZCB2ZXJ0aWNhbCBzY3JvbGwgcG9zaXRpb24pXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGJveF9zY3JvbGwgPT09IHVuZGVmaW5lZCB8fCBib3hfc2Nyb2xsID09PSB0cnVlKSAgICAgICAgICAvLyBjbGltYiB1cCB0aHJvdWdoIERPTSBoaWVyYXJjaHkgKGdldFNjcm9sbFBvc2l0aW9uKCkgdGFrZXMgY2FyZSBhYm91dCBwYWdlIHNjcm9sbCBwb3NpdGlvbnMpXHJcbiAgICB7XHJcbiAgICAgIGRvXHJcbiAgICAgIHtcclxuICAgICAgICBvTGVmdCArPSBib3gub2Zmc2V0TGVmdCAtIGJveC5zY3JvbGxMZWZ0O1xyXG4gICAgICAgIG9Ub3AgKz0gYm94Lm9mZnNldFRvcCAtIGJveC5zY3JvbGxUb3A7XHJcbiAgICAgICAgYm94ID0gYm94Lm9mZnNldFBhcmVudDtcclxuICAgICAgfVxyXG4gICAgICB3aGlsZSAoYm94ICYmIGJveC5ub2RlTmFtZSAhPT0gJ0JPRFknKTtcclxuICAgIH1cclxuICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2xpbWIgdXAgdG8gdGhlIEJPRFkgZWxlbWVudCBidXQgd2l0aG91dCBzY3JvbGwgcG9zaXRpb25zXHJcbiAgICB7XHJcbiAgICAgIGRvXHJcbiAgICAgIHtcclxuICAgICAgICBvTGVmdCArPSBib3gub2Zmc2V0TGVmdDtcclxuICAgICAgICBvVG9wICs9IGJveC5vZmZzZXRUb3A7XHJcbiAgICAgICAgYm94ID0gYm94Lm9mZnNldFBhcmVudDtcclxuICAgICAgfVxyXG4gICAgICB3aGlsZSAoYm94ICYmIGJveC5ub2RlTmFtZSAhPT0gJ0JPRFknKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAgICAgICAgdG9wICAgICAgICAgICAgICAgICByaWdodCwgICAgICAgICAgICAgICAgICAgICBib3R0b20gICAgICAgICAgIGxlZnRcclxuICAgIHJldHVybiBbIG9Ub3AsIG9MZWZ0ICsgYm94T2xkLm9mZnNldFdpZHRoLCBvVG9wICsgYm94T2xkLm9mZnNldEhlaWdodCwgb0xlZnQgXTtcclxuICB9O1xyXG5cclxuICAvLyBNZXRob2QgaXMgY2FsbGVkIGluIGV2ZXJ5IHBvc3NpYmxlIGNhc2Ugd2hlbiBwb3NpdGlvbiBvciBzaXplIG9mIHRhYmxlIGdyaWQgY291bGQgY2hhbmdlIGxpa2U6IHBhZ2Ugc2Nyb2xsaW5nLCBlbGVtZW50IGRyb3BwZWQgdG8gdGhlIHRhYmxlIGNlbGwsIGVsZW1lbnQgc3RhcnQgZHJhZ2dpbmcgYW5kIHNvIG9uLlxyXG4gIC8vIEl0IGNhbGN1bGF0ZXMgdGFibGUgcm93IG9mZnNldHMgKHRhYmxlIGdyaWQpIGFuZCBzYXZlcyB0byB0aGUgXCJ0YWJsZXNcIiBhcnJheS5cclxuICAvLyBUYWJsZSByb3dzIHdpdGggc3R5bGUgZGlzcGxheT0nbm9uZScgYXJlIHNraXBwZWQuXHJcbiAgY2FsY3VsYXRlQ2VsbHMgPSBmdW5jdGlvbiAoKSBcclxuICB7XHJcbiAgICB2YXIgcm93X29mZnNldDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJvdyBib3hcclxuICAgIHZhciBwb3NpdGlvbjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgZWxlbWVudCAodGFibGUgb3IgdGFibGUgY29udGFpbmVyKSBoYXMgcG9zaXRpb246Zml4ZWQgdGhlbiBcInBhZ2Ugc2Nyb2xsXCIgb2Zmc2V0IHNob3VsZCBub3QgYmUgYWRkZWRcclxuICAgIHZhciBjYjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYm94IG9mZnNldCBmb3IgY29udGFpbmVyIGJveCAoY2IpXHJcblxyXG4gICAgd2luZG93U2Nyb2xsUG9zaXRpb24gPSBnZXRTY3JvbGxQb3NpdGlvbigpOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGVDZWxscygpIGlzIGNhbGxlZCBvbiB3aW5kb3cgc2Nyb2xsIGV2ZW50IHNvIGhlcmUgaXMgcGVyZmVjdCBwbGFjZSB0byByZWZyZXNoIHdpbmRvdyBzY3JvbGwgcG9zaXRpb25cclxuICAgIHJvd19vZmZzZXQgPSBbXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5pdGlhbGl6ZSByb3dfb2Zmc2V0IGFycmF5XHJcbiAgICBcclxuICAgIHBvc2l0aW9uID0gZ2V0U3R5bGUodGFibGUsICdwb3NpdGlvbicpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHRhYmxlIHN0eWxlIHBvc2l0aW9uICh0byBleGNsdWRlIFwicGFnZSBzY3JvbGxcIiBvZmZzZXQgZnJvbSBjYWxjdWxhdGlvbiBpZiBuZWVkZWQpXHJcbiAgICBcclxuICAgIGlmIChwb3NpdGlvbiAhPT0gJ2ZpeGVkJykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGFibGUgZG9lc24ndCBoYXZlIHN0eWxlIHBvc2l0aW9uOmZpeGVkIHRoZW4gdGFibGUgY29udGFpbmVyIHNob3VsZCBiZSB0ZXN0ZWRcclxuICAgIHtcclxuICAgICAgcG9zaXRpb24gPSBnZXRTdHlsZSh0YWJsZS5wYXJlbnROb2RlLCAncG9zaXRpb24nKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZm9yICh2YXIgaSA9IHRhYmxlLnJvd3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pICAgICAgICAgICAgICAgICAgICAvLyBiYWNrd2FyZCBsb29wIGhhcyBiZXR0ZXIgcGVyZm9tYW5jZVxyXG4gICAge1xyXG4gICAgICBpZiAodGFibGUucm93c1tpXS5zdHlsZS5kaXNwbGF5ICE9PSAnbm9uZScpICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgcm93cyB0byB0aGUgb2Zmc2V0IGFycmF5IGlmIHJvdyBpcyBub3QgaGlkZGVuXHJcbiAgICAgIHtcclxuICAgICAgICByb3dfb2Zmc2V0W2ldID0gYm94T2Zmc2V0KHRhYmxlLnJvd3NbaV0sIHBvc2l0aW9uKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0YWJsZS5yZWRpcHMub2Zmc2V0ID0gYm94T2Zmc2V0KHRhYmxlLCBwb3NpdGlvbik7ICAgICAgICAgICAgICAgICAgIC8vIHNhdmUgdGFibGUgaW5mb3JtYXRpb25zICh0YWJsZSBvZmZzZXQgYW5kIHJvdyBvZmZzZXRzKVxyXG4gICAgdGFibGUucmVkaXBzLnJvd19vZmZzZXQgPSByb3dfb2Zmc2V0O1xyXG5cclxuICAgIGRpdkJveCA9IGJveE9mZnNldChkcmFnQ29udGFpbmVyKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIGJveCBvZmZzZXQgZm9yIHRoZSBkaXYgaWQ9cmVkaXBzLWRyYWdcclxuICAgIFxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY3JvbGxEYXRhLmNvbnRhaW5lci5sZW5ndGg7IGkrKykgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHNjcm9sbGFibGUgY29udGFpbmVyIGFyZWFzIGlmIG5lZWRlZFxyXG4gICAge1xyXG4gICAgICBwb3NpdGlvbiA9IGdldFN0eWxlKHNjcm9sbERhdGEuY29udGFpbmVyW2ldLmRpdiwgJ3Bvc2l0aW9uJyk7ICAgICAvLyBzZXQgY29udGFpbmVyIGJveCBzdHlsZSBwb3NpdGlvbiAodG8gZXhjbHVkZSBwYWdlIHNjcm9sbCBvZmZzZXQgZnJvbSBjYWxjdWxhdGlvbiBpZiBuZWVkZWQpXHJcbiAgICAgIGNiID0gYm94T2Zmc2V0KHNjcm9sbERhdGEuY29udGFpbmVyW2ldLmRpdiwgcG9zaXRpb24sIGZhbHNlKTsgICAgIC8vIGdldCBESVYgY29udGFpbmVyIG9mZnNldCB3aXRoIG9yIHdpdGhvdXQgXCJwYWdlIHNjcm9sbFwiIGFuZCBleGNsdWRlZCBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIGNvbnRlbnRcclxuICAgICAgXHJcbiAgICAgIHNjcm9sbERhdGEuY29udGFpbmVyW2ldLm9mZnNldCA9IGNiOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByZXBhcmUgc2Nyb2xsYWJsZSBjb250YWluZXIgYXJlYXNcclxuICAgICAgc2Nyb2xsRGF0YS5jb250YWluZXJbaV0ubWlkc3RYID0gKGNiWzFdICsgY2JbM10pIC8gMjtcclxuICAgICAgc2Nyb2xsRGF0YS5jb250YWluZXJbaV0ubWlkc3RZID0gKGNiWzBdICsgY2JbMl0pIC8gMjtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBNZXRob2QgcmV0dXJucyBjdXJyZW50IHBhZ2Ugc2Nyb2xsIHZhbHVlcyBhcyBhcnJheSAoWCBhbmQgWSBheGlzKS5cclxuICBnZXRTY3JvbGxQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIFxyXG4gIHtcclxuICAgIHZhciBzY3JvbGxZID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XHJcbiAgICAvL3ZhciBzY3JvbGxYID0gd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0O1xyXG4gICAgdmFyIHNjcm9sbFggPSAwO1xyXG5cclxuICAgIHJldHVybiBbIHNjcm9sbFgsIHNjcm9sbFkgXTtcclxuICB9O1xyXG5cclxuICAvLyBIb3Jpem9udGFsIGF1dG8gc2Nyb2xsIG1ldGhvZC4gIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHNvIFdpbmRvdyBvciBESVYgZWxlbWVudCAoc28gLSBzY3JvbGwgb2JqZWN0KS5cclxuICBhdXRvU2Nyb2xsWCA9IGZ1bmN0aW9uIChzbykgXHJcbiAge1xyXG4gICAgdmFyIHBvcywgICAgICAvLyBsZWZ0IHN0eWxlIHBvc2l0aW9uXHJcbiAgICAgIG9sZCwgICAgICAvLyBvbGQgd2luZG93IHNjcm9sbCBwb3NpdGlvbiAobmVlZGVkIGZvciB3aW5kb3cgc2Nyb2xsaW5nKVxyXG4gICAgICBzY3JvbGxQb3NpdGlvbiwgLy8gZGVmaW5lIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uXHJcbiAgICAgIG1heHNwLCAgICAgIC8vIG1heGltdW0gc2Nyb2xsIHBvc2l0aW9uXHJcbiAgICAgIGVkZ2VDcm9zc2VkLCAgLy8gY3Jvc3NlZCBlZGdlIGZvciB3aW5kb3cgYW5kIHNjcm9sbGFibGUgY29udGFpbmVyXHJcbiAgICAgIFggPSBwb2ludGVyLngsICAvLyBkZWZpbmUgcG9pbnRlciBYIHBvc2l0aW9uXHJcbiAgICAgIFkgPSBwb2ludGVyLnk7ICAvLyBkZWZpbmUgcG9pbnRlciBZIHBvc2l0aW9uXHJcbiAgICAvLyBpZiBtb3VzZXVwIHRoZW4gc3RvcCBoYW5kbGluZyBcImN1cnJlbnQgY2VsbFwiXHJcbiAgICBpZiAoZWRnZS5mbGFnLnggPiAwKSB7XHJcbiAgICAgIC8vIGNhbGN1bGF0ZSBjZWxsIChhdXRvc2Nyb2xsIGlzIHdvcmtpbmcpXHJcbiAgICAgIGNhbGN1bGF0ZUNlbGxzKCk7XHJcbiAgICAgIC8vIHNldCBjdXJyZW50IHRhYmxlIHJvdyBhbmQgdGFibGUgY2VsbFxyXG4gICAgICBzZXRUYWJsZVJvd0NvbHVtbigpO1xyXG4gICAgICAvLyBzZXQgY3VycmVudCB0YWJsZSwgcm93IGFuZCBjZWxsIGlmIG1vdXNlIHBvaW50ZXIgaXMgaW5zaWRlIERJViBpZD1cInJlZGlwcy1kcmFnXCJcclxuICAgICAgaWYgKFggPCBkaXZCb3hbMV0gJiYgWCA+IGRpdkJveFszXSAmJiBZIDwgZGl2Qm94WzJdICYmIFkgPiBkaXZCb3hbMF0pIHtcclxuICAgICAgICBjZWxsQ2hhbmdlZCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBzYXZlIHNjcm9sbCBvYmplY3QgdG8gdGhlIGdsb2JhbCB2YXJpYWJsZSBmb3IgdGhlIGZpcnN0IGNhbGwgZnJvbSBoYW5kbGVyT25Nb3VzZU1vdmVcclxuICAgIC8vIHJlY3Vyc2l2ZSBjYWxscyB3aWxsIG5vdCBlbnRlciB0aGlzIGNvZGUgYW5kIHJlZmVyZW5jZSB0byB0aGUgc2Nyb2xsRGF0YS5vYmogd2lsbCBiZSBwcmVzZXJ2ZWRcclxuICAgIGlmICh0eXBlb2Yoc28pID09PSAnb2JqZWN0Jykge1xyXG4gICAgICBzY3JvbGxEYXRhLm9iaiA9IHNvO1xyXG4gICAgfVxyXG4gICAgLy8gd2luZG93IGF1dG9zY3JvbGwgKGRlZmluZSBjdXJyZW50LCBvbGQgYW5kIG1heGltdW0gc2Nyb2xsIHBvc2l0aW9uKVxyXG4gICAgaWYgKHNjcm9sbERhdGEub2JqID09PSB3aW5kb3cpIHtcclxuICAgICAgc2Nyb2xsUG9zaXRpb24gPSBvbGQgPSBnZXRTY3JvbGxQb3NpdGlvbigpWzBdO1xyXG4gICAgICBtYXhzcCA9IHNjcm9sbERhdGEud2lkdGggLSBzY3JlZW4ud2lkdGg7XHJcbiAgICAgIGVkZ2VDcm9zc2VkID0gZWRnZS5wYWdlLng7XHJcbiAgICB9XHJcbiAgICAvLyBzY3JvbGxhYmxlIGNvbnRhaW5lciAoZGVmaW5lIGN1cnJlbnQgYW5kIG1heGltdW0gc2Nyb2xsIHBvc2l0aW9uKVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHNjcm9sbFBvc2l0aW9uID0gc2Nyb2xsRGF0YS5vYmouc2Nyb2xsTGVmdDtcclxuICAgICAgbWF4c3AgPSBzY3JvbGxEYXRhLm9iai5zY3JvbGxXaWR0aCAtIHNjcm9sbERhdGEub2JqLmNsaWVudFdpZHRoO1xyXG4gICAgICBlZGdlQ3Jvc3NlZCA9IGVkZ2UuZGl2Lng7XHJcbiAgICB9XHJcbiAgICAvLyBpZiBzY3JvbGxpbmcgaXMgcG9zc2libGVcclxuICAgIGlmIChlZGdlLmZsYWcueCA+IDAgJiYgKChlZGdlQ3Jvc3NlZCA8IDAgJiYgc2Nyb2xsUG9zaXRpb24gPiAwKSB8fCAoZWRnZUNyb3NzZWQgPiAwICYmIHNjcm9sbFBvc2l0aW9uIDwgbWF4c3ApKSkge1xyXG4gICAgICAvLyBpZiBvYmplY3QgaXMgd2luZG93XHJcbiAgICAgIGlmIChzY3JvbGxEYXRhLm9iaiA9PT0gd2luZG93KSB7XHJcbiAgICAgICAgLy8gc2Nyb2xsIHdpbmRvd1xyXG4gICAgICAgIHdpbmRvdy5zY3JvbGxCeShlZGdlQ3Jvc3NlZCwgMCk7XHJcbiAgICAgICAgLy8gZ2V0IG5ldyB3aW5kb3cgc2Nyb2xsIHBvc2l0aW9uIChhZnRlciBzY3JvbGxpbmcpXHJcbiAgICAgICAgLy8gYmVjYXVzZSBhdCBwYWdlIHRvcCBvciBib3R0b20gZWRnZVkgY2FuIGJlIGJpZ2dlciB0aGVuIHRoZSByZXN0IG9mIHNjcm9sbGluZyBhcmVhXHJcbiAgICAgICAgLy8gaXQgd2lsbCBiZSBuaWNlIHRvIGtub3cgaG93IG11Y2ggd2FzIHdpbmRvdyBzY3JvbGxlZCBhZnRlciBzY3JvbGxCeSBjb21tYW5kXHJcbiAgICAgICAgc2Nyb2xsUG9zaXRpb24gPSBnZXRTY3JvbGxQb3NpdGlvbigpWzBdO1xyXG4gICAgICAgIC8vIGdldCBjdXJyZW50IG9iamVjdCB0b3Agc3R5bGVcclxuICAgICAgICBwb3MgPSBwYXJzZUludChvYmouc3R5bGUubGVmdCwgMTApO1xyXG4gICAgICAgIGlmIChpc05hTihwb3MpKSB7XHJcbiAgICAgICAgICBwb3MgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAvLyBvciBzY3JvbGxhYmxlIGNvbnRhaW5lclxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBzY3JvbGxEYXRhLm9iai5zY3JvbGxMZWZ0ICs9IGVkZ2VDcm9zc2VkO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIHJlY3Vyc2l2ZSBhdXRvc2Nyb2xsIGNhbGxcclxuICAgICAgc2V0VGltZW91dChhdXRvU2Nyb2xsWCwgUkVESVBTLmRyYWcuc2Nyb2xsLnNwZWVkKTtcclxuICAgIH1cclxuICAgIC8vIGF1dG9zY3JvbGwgaXMgZW5kZWQ6IGVsZW1lbnQgaXMgb3V0IG9mIHRoZSBwYWdlIGVkZ2Ugb3IgbWF4aW11bSBwb3NpdGlvbiBpcyByZWFjaGVkIChsZWZ0IG9yIHJpZ2h0KVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIC8vIHJldHVybiBvbnNjcm9sbCBldmVudCBoYW5kbGVyICh0byB3aW5kb3cgb3IgZGl2IGVsZW1lbnQpXHJcbiAgICAgIFJFRElQUy5ldmVudC5hZGQoc2Nyb2xsRGF0YS5vYmosICdzY3JvbGwnLCBjYWxjdWxhdGVDZWxscyk7XHJcbiAgICAgIC8vIHJlc2V0IGF1dG8gc2Nyb2xsIGZsYWcgWFxyXG4gICAgICBlZGdlLmZsYWcueCA9IDA7XHJcbiAgICAgIC8vIHJlc2V0IGN1cnJlbnQgY2VsbCBwb3NpdGlvblxyXG4gICAgICBjdXJyZW50Q2VsbCA9IFswLCAwLCAwLCAwXTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBWZXJ0aWNhbCBhdXRvIHNjcm9sbCBtZXRob2QuICBAcGFyYW0ge0hUTUxFbGVtZW50fSBzbyBXaW5kb3cgb3IgRElWIGVsZW1lbnQgKHNvIC0gc2Nyb2xsIG9iamVjdCkuXHJcbiAgYXV0b1Njcm9sbFkgPSBmdW5jdGlvbiAoc28pIFxyXG4gIHtcclxuICAgIHZhciBwb3MsICAgICAgLy8gdG9wIHN0eWxlIHBvc2l0aW9uXHJcbiAgICAgIG9sZCwgICAgICAvLyBvbGQgd2luZG93IHNjcm9sbCBwb3NpdGlvbiAobmVlZGVkIGZvciB3aW5kb3cgc2Nyb2xsaW5nKVxyXG4gICAgICBzY3JvbGxQb3NpdGlvbiwgLy8gZGVmaW5lIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uXHJcbiAgICAgIG1heHNwLCAgICAgIC8vIG1heGltdW0gc2Nyb2xsIHBvc2l0aW9uXHJcbiAgICAgIGVkZ2VDcm9zc2VkLCAgLy8gY3Jvc3NlZCBlZGdlIGZvciB3aW5kb3cgYW5kIHNjcm9sbGFibGUgY29udGFpbmVyXHJcbiAgICAgIFggPSBwb2ludGVyLngsICAvLyBkZWZpbmUgcG9pbnRlciBYIHBvc2l0aW9uXHJcbiAgICAgIFkgPSBwb2ludGVyLnk7ICAvLyBkZWZpbmUgcG9pbnRlciBZIHBvc2l0aW9uXHJcbiAgICBcclxuICAgIGlmIChlZGdlLmZsYWcueSA+IDApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgbW91c2V1cCB0aGVuIHN0b3AgaGFuZGxpbmcgXCJjdXJyZW50IGNlbGxcIlxyXG4gICAge1xyXG4gICAgICBjYWxjdWxhdGVDZWxscygpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgY2VsbCAoYXV0b3Njcm9sbCBpcyB3b3JraW5nKVxyXG4gICAgICBzZXRUYWJsZVJvd0NvbHVtbigpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgY3VycmVudCB0YWJsZSByb3cgYW5kIHRhYmxlIGNlbGxcclxuICAgICAgXHJcbiAgICAgIGlmIChYIDwgZGl2Qm94WzFdICYmIFggPiBkaXZCb3hbM10gJiYgWSA8IGRpdkJveFsyXSAmJiBZID4gZGl2Qm94WzBdKSAgIC8vIHNldCBjdXJyZW50IHRhYmxlLCByb3cgYW5kIGNlbGwgaWYgbW91c2UgcG9pbnRlciBpcyBpbnNpZGUgRElWIGlkPVwicmVkaXBzLWRyYWdcIlxyXG4gICAgICB7XHJcbiAgICAgICAgY2VsbENoYW5nZWQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBzYXZlIHNjcm9sbCBvYmplY3QgdG8gdGhlIGdsb2JhbCB2YXJpYWJsZSBmb3IgdGhlIGZpcnN0IGNhbGwgZnJvbSBoYW5kbGVyT25Nb3VzZU1vdmUsIHJlY3Vyc2l2ZSBjYWxscyB3aWxsIG5vdCBlbnRlciB0aGlzIGNvZGUgYW5kIHJlZmVyZW5jZSB0byB0aGUgc2Nyb2xsRGF0YS5vYmogd2lsbCBiZSBwcmVzZXJ2ZWRcclxuICAgIGlmICh0eXBlb2Yoc28pID09PSAnb2JqZWN0JykgXHJcbiAgICB7XHJcbiAgICAgIHNjcm9sbERhdGEub2JqID0gc287XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmIChzY3JvbGxEYXRhLm9iaiA9PT0gd2luZG93KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2luZG93IGF1dG9zY3JvbGwgKGRlZmluZSBjdXJyZW50LCBvbGQgYW5kIG1heGltdW0gc2Nyb2xsIHBvc2l0aW9uKVxyXG4gICAge1xyXG4gICAgICBzY3JvbGxQb3NpdGlvbiA9IG9sZCA9IGdldFNjcm9sbFBvc2l0aW9uKClbMV07XHJcbiAgICAgIG1heHNwID0gc2Nyb2xsRGF0YS5oZWlnaHQgLSBzY3JlZW4uaGVpZ2h0O1xyXG4gICAgICBlZGdlQ3Jvc3NlZCA9IGVkZ2UucGFnZS55O1xyXG4gICAgfVxyXG4gICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzY3JvbGxhYmxlIGNvbnRhaW5lciAoZGVmaW5lIGN1cnJlbnQgYW5kIG1heGltdW0gc2Nyb2xsIHBvc2l0aW9uKVxyXG4gICAge1xyXG4gICAgICBzY3JvbGxQb3NpdGlvbiA9IHNjcm9sbERhdGEub2JqLnNjcm9sbFRvcDtcclxuICAgICAgbWF4c3AgPSBzY3JvbGxEYXRhLm9iai5zY3JvbGxIZWlnaHQgLSBzY3JvbGxEYXRhLm9iai5jbGllbnRIZWlnaHQ7XHJcbiAgICAgIGVkZ2VDcm9zc2VkID0gZWRnZS5kaXYueTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gaWYgc2Nyb2xsaW5nIGlzIHBvc3NpYmxlXHJcbiAgICBpZiAoZWRnZS5mbGFnLnkgPiAwICYmICgoZWRnZUNyb3NzZWQgPCAwICYmIHNjcm9sbFBvc2l0aW9uID4gMCkgfHwgKGVkZ2VDcm9zc2VkID4gMCAmJiBzY3JvbGxQb3NpdGlvbiA8IG1heHNwKSkpIFxyXG4gICAge1xyXG4gICAgICBpZiAoc2Nyb2xsRGF0YS5vYmogPT09IHdpbmRvdykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBvYmplY3QgaXMgd2luZG93XHJcbiAgICAgIHtcclxuICAgICAgICB3aW5kb3cuc2Nyb2xsQnkoMCwgZWRnZUNyb3NzZWQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2Nyb2xsIHdpbmRvd1xyXG4gICAgICAgIHNjcm9sbFBvc2l0aW9uID0gZ2V0U2Nyb2xsUG9zaXRpb24oKVsxXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXQgbmV3IHdpbmRvdyBzY3JvbGwgcG9zaXRpb24gKGFmdGVyIHNjcm9sbGluZyksIGJlY2F1c2UgYXQgcGFnZSB0b3Agb3IgYm90dG9tIGVkZ2VZIGNhbiBiZSBiaWdnZXIgdGhlbiB0aGUgcmVzdCBvZiBzY3JvbGxpbmcgYXJlYSwgaXQgd2lsbCBiZSBuaWNlIHRvIGtub3cgaG93IG11Y2ggd2FzIHdpbmRvdyBzY3JvbGxlZCBhZnRlciBzY3JvbGxCeSBjb21tYW5kXHJcbiAgICAgICAgcG9zID0gcGFyc2VJbnQob2JqLnN0eWxlLnRvcCwgMTApOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdldCBjdXJyZW50IG9iamVjdCB0b3Agc3R5bGVcclxuICAgICAgICBcclxuICAgICAgICBpZiAoaXNOYU4ocG9zKSkgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcG9zID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3Igc2Nyb2xsYWJsZSBjb250YWluZXJcclxuICAgICAge1xyXG4gICAgICAgIHNjcm9sbERhdGEub2JqLnNjcm9sbFRvcCArPSBlZGdlQ3Jvc3NlZDtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgc2V0VGltZW91dChhdXRvU2Nyb2xsWSwgUkVESVBTLmRyYWcuc2Nyb2xsLnNwZWVkKTsgICAgICAgICAgICAgICAgICAgICAgLy8gcmVjdXJzaXZlIGF1dG9zY3JvbGwgY2FsbFxyXG4gICAgfVxyXG4gICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhdXRvc2Nyb2xsIGlzIGVuZGVkOiBlbGVtZW50IGlzIG91dCBvZiB0aGUgcGFnZSBlZGdlIG9yIG1heGltdW0gcG9zaXRpb24gaXMgcmVhY2hlZCAodG9wIG9yIGJvdHRvbSlcclxuICAgIHtcclxuICAgICAgUkVESVBTLmV2ZW50LmFkZChzY3JvbGxEYXRhLm9iaiwgJ3Njcm9sbCcsIGNhbGN1bGF0ZUNlbGxzKTsgICAgICAgICAgICAgLy8gcmV0dXJuIG9uc2Nyb2xsIGV2ZW50IGhhbmRsZXIgKHRvIHdpbmRvdyBvciBkaXYgZWxlbWVudClcclxuICAgICAgZWRnZS5mbGFnLnkgPSAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzZXQgYXV0byBzY3JvbGwgZmxhZyBZXHJcbiAgICAgIGN1cnJlbnRDZWxsID0gWzAsIDAsIDAsIDBdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlc2V0IGN1cnJlbnQgY2VsbCBwb3NpdGlvblxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIE1ldGhvZCBjb3BpZXMgY3VzdG9tIHByb3BlcnRpZXMgZnJvbSBzb3VyY2UgZWxlbWVudCB0byB0aGUgY2xvbmVkIGVsZW1lbnQgYW5kIHNldHMgZXZlbnQgaGFuZGxlcnMgKG9ubW91c2Vkb3duIGFuZCBvbmRibGNsaWNrKS5cclxuICAgKiBUaGlzIGFjdGlvbiB3aWxsIGJlIHRha2VuIG9uIERJViBlbGVtZW50IGl0c2VsZiBhbmQgYWxsIGNoaWxkIERJViBlbGVtZW50cy5cclxuICAgKiBOZWVkZWQgaW4gY2FzZSB3aGVuIERJViBlbGVtZW50IGlzIGNsb25lZCBvciBST1cgaXMgY2xvbmVkIChmb3IgZHJhZ2dpbmcgbW9kZT1cInJvd1wiKS5cclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBzcmMgU291cmNlIGVsZW1lbnQgKERJViBvciBUUiBlbGVtZW50KS5cclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjbG4gQ2xvbmVkIGVsZW1lbnQgKERJViBvciBUUiBlbGVtZW50KS5cclxuICAgKi9cclxuICBjb3B5UHJvcGVydGllcyA9IGZ1bmN0aW9uIChzcmMsIGNsbikgXHJcbiAge1xyXG4gICAgdmFyIGNvcHkgPSBbXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvcHkgbWV0aG9kXHJcbiAgICB2YXIgY2hpbGRzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29weSBwcm9wZXJ0aWVzIGZvciBjaGlsZCBlbGVtZW50cyAodGhpcyBtZXRob2QgY2FsbHMgXCJjb3B5XCIgbWV0aG9kKVxyXG4gICAgXHJcbiAgICBjb3B5WzBdID0gZnVuY3Rpb24gKGUxLCBlMikgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVmaW5lIGNvcHkgbWV0aG9kIGZvciBESVYgZWxlbWVudHMgKGUxIHNvdXJjZSBlbGVtZW50LCBlMiBjbG9uZWQgZWxlbWVudCksIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDA5NDgxMS9qYXZhc2NyaXB0LWNsb25lbm9kZS1hbmQtcHJvcGVydGllc1xyXG4gICAge1xyXG4gICAgICBpZiAoZTEucmVkaXBzKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHJlZGlwcyBwcm9wZXJ0eSBleGlzdHMgaW4gc291cmNlIGVsZW1lbnQsIGNvcHkgY3VzdG9tIHByb3BlcnRpZXMgKHJlZGlwcy5lbmFibGVkLCAgcmVkaXBzLmNvbnRhaW5lciAuLi4pXHJcbiAgICAgIHtcclxuICAgICAgICBlMi5yZWRpcHMgPSB7fTtcclxuICAgICAgICBlMi5yZWRpcHMuZW5hYmxlZCA9IGUxLnJlZGlwcy5lbmFibGVkO1xyXG4gICAgICAgIGUyLnJlZGlwcy5jb250YWluZXIgPSBlMS5yZWRpcHMuY29udGFpbmVyO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChlMS5yZWRpcHMuZW5hYmxlZCkgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBvbm1vdXNlZG93biBldmVudCBoYW5kbGVyIGlmIHNvdXJjZSBlbGVtZW50IGlzIGVuYWJsZWRcclxuICAgICAgICB7XHJcbiAgICAgICAgICByZWdpc3RlckV2ZW50cyhlMik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBjb3B5WzFdID0gZnVuY3Rpb24gKGUxLCBlMikgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVmaW5lIGNvcHkgbWV0aG9kIGZvciBUUiBlbGVtZW50cyBcclxuICAgIHtcclxuICAgICAgaWYgKGUxLnJlZGlwcykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiByZWRpcHMgcHJvcGVydHkgZXhpc3RzIGluIHNvdXJjZSBlbGVtZW50LCBjb3B5IGN1c3RvbSBwcm9wZXJ0aWVzIChyZWRpcHMuZW1wdHlSb3cgLi4uKVxyXG4gICAgICB7XHJcbiAgICAgICAgZTIucmVkaXBzID0ge307XHJcbiAgICAgICAgZTIucmVkaXBzLmVtcHR5Um93ID0gZTEucmVkaXBzLmVtcHR5Um93O1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBjaGlsZHMgPSBmdW5jdGlvbiAoZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVmaW5lIG1ldGhvZCB0byBjb3B5IHByb3BlcnRpZXMgZm9yIGNoaWxkIGVsZW1lbnRzIChpbnB1dCBwYXJhbWV0ZXIgaXMgZWxlbWVudCBpbmRleCAwIC0gRElWLCAxIC0gVFIpXHJcbiAgICB7XHJcbiAgICAgIHZhciBlbDEsIGVsMjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29sbGVjdGlvbiBvZiBESVYvVFIgZWxlbWVudHMgaW4gc291cmNlIGFuZCBjbG9uZWQgZWxlbWVudFxyXG4gICAgICB2YXIgdG4gPSBbJ0RJVicsICdUUiddOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRhZyBuYW1lXHJcbiAgICAgIFxyXG4gICAgICBlbDEgPSBzcmMuZ2V0RWxlbWVudHNCeVRhZ05hbWUodG5bZV0pOyAgICAgICAgICAgIC8vIGNvbGxlY3QgY2hpbGQgRElWL1RSIGVsZW1lbnRzIGZyb20gdGhlIHNvdXJjZSBlbGVtZW50IChwb3NzaWJsZSBpZiBkaXYgZWxlbWVudCBjb250YWlucyB0YWJsZSlcclxuICAgICAgZWwyID0gY2xuLmdldEVsZW1lbnRzQnlUYWdOYW1lKHRuW2VdKTsgICAgICAgICAgICAvLyBjb2xsZWN0IGNoaWxkIERJVi9UUiBlbGVtZW50cyBmcm9tIGNsb25lZCBlbGVtZW50XHJcbiAgICAgIFxyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsMi5sZW5ndGg7IGkrKykgICAgICAgICAgICAgIC8vIGNvcHkgY3VzdG9tIHByb3BlcnRpZXMgKHJlZGlwcy5lbmFibGVkLCAgcmVkaXBzLmNvbnRhaW5lciAuLi4pIGFuZCBzZXQgZXZlbnQgaGFuZGxlcnMgdG8gY2hpbGQgRElWIGVsZW1lbnRzXHJcbiAgICAgIHtcclxuICAgICAgICBjb3B5W2VdKGVsMVtpXSwgZWwyW2ldKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgaWYgKHNyYy5ub2RlTmFtZSA9PT0gJ0RJVicpICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHNvdXJjZSBlbGVtZW50IGlzIERJViBlbGVtZW50IHRoZW4gY29weSBjdXN0b20gcHJvcGVydGllcyBmb3IgRElWIGVsZW1lbnRcclxuICAgIHtcclxuICAgICAgY29weVswXShzcmMsIGNsbik7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChzcmMubm9kZU5hbWUgPT09ICdUUicpICAgICAgICAgICAgICAgICAgICAgLy8gaWYgc291cmNlIGVsZW1lbnQgaXMgVFIgZWxlbWVudCB0aGVuIGNvcHkgY3VzdG9tIHByb3BlcnRpZXMgZm9yIFRSIGVsZW1lbnRcclxuICAgIHtcclxuICAgICAgY29weVsxXShzcmMsIGNsbik7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNoaWxkcygwKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb3B5IHByb3BlcnRpZXMgZm9yIERJViBjaGlsZCBlbGVtZW50c1xyXG4gICAgY2hpbGRzKDEpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvcHkgcHJvcGVydGllcyBmb3IgVFIgY2hpbGQgZWxlbWVudHNcclxuICB9O1xyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogTWV0aG9kIHVwZGF0ZXMgY2xpbWl0MV9YIG9yIGNsaW1pdDJfWCBjbGFzcyBuYW1lIChYIGRlZmluZXMgY2xvbmluZyBsaW1pdCkuXHJcbiAgICogPHVsPlxyXG4gICAqIDxsaT5jbGltaXQxX1ggLSBhZnRlciBjbG9uaW5nIFggZWxlbWVudHMsIGxhc3QgZWxlbWVudCB3aWxsIGJlIG5vcm1hbCBkcmFnLWFibGUgZWxlbWVudDwvbGk+XHJcbiAgICogPGxpPmNsaW1pdDJfWCAtIGFmdGVyIGNsb25pbmcgWCBlbGVtZW50cywgbGFzdCBlbGVtZW50IHdpbGwgc3RheSB1bm1vdmFibGU8L2xpPlxyXG4gICAqIDwvdWw+XHJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgRWxlbWVudCBvbiB3aGljaCBjbmFtZSBjbGFzcyBzaG91bGQgYmUgdXBkYXRlZC5cclxuICAgKiBAcGFyYW0ge0ludGVnZXJ9IHZhbHVlIEluY3JlbWVudCBvciBkZWNyZW1lbnQgY2xpbWl0IHZhbHVlLlxyXG4gICAqL1xyXG4gIGNsb25lTGltaXQgPSBmdW5jdGlvbiAoZWwsIHZhbHVlKSBcclxuICB7XHJcbiAgICB2YXIgbWF0Y2hBcnJheTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaCBhcnJheVxyXG4gICAgdmFyIGxpbWl0VHlwZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGltaXQgdHlwZSAoMSAtIGNsb25lIGJlY29tZXMgXCJub3JtYWxcIiBkcmFnIGVsZW1lbnQgYXQgbGFzdDsgMiAtIGNsb25lIGVsZW1lbnQgc3RheXMgaW1tb3ZhYmxlKVxyXG4gICAgdmFyIGxpbWl0OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGltaXQgbnVtYmVyXHJcbiAgICB2YXIgY2xhc3NlczsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjbGFzcyBuYW1lcyBvZiBjbG9uZSBlbGVtZW50XHJcbiAgICBcclxuICAgIGNsYXNzZXMgPSBlbC5jbGFzc05hbWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlYWQgY2xhc3MgbmFtZSBmcm9tIGVsZW1lbnRcclxuICAgIG1hdGNoQXJyYXkgPSBjbGFzc2VzLm1hdGNoKC9jbGltaXQoXFxkKV8oXFxkKykvKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWF0Y2ggY2xpbWl0IGNsYXNzIG5hbWVcclxuICAgIFxyXG4gICAgaWYgKG1hdGNoQXJyYXkgIT09IG51bGwpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgRElWIGNsYXNzIGNvbnRhaW5zIGNsaW1pdFxyXG4gICAge1xyXG4gICAgICBsaW1pdFR5cGUgPSBwYXJzZUludChtYXRjaEFycmF5WzFdLCAxMCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJlcGFyZSBsaW1pdFR5cGUgKDEgb3IgMikgYW5kIGxpbWl0XHJcbiAgICAgIGxpbWl0ID0gcGFyc2VJbnQobWF0Y2hBcnJheVsyXSwgMTApO1xyXG4gICAgICBcclxuICAgICAgaWYgKGxpbWl0ID09PSAwICYmIHZhbHVlID09PSAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGN1cnJlbnQgbGltaXQgaXMgMCBhbmQgc2hvdWxkIGJlIHNldCB0byAxIHRoZW4gcmV0dXJuIFwiY2xvbmluZ1wiIHRvIHRoZSBESVYgZWxlbWVudFxyXG4gICAgICB7XHJcbiAgICAgICAgY2xhc3NlcyArPSAnIHJlZGlwcy1jbG9uZSc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgXCJyZWRpcHMtY2xvbmVcIiBjbGFzcyB0byBjbGFzcyBhdHRyaWJ1dGVcclxuICAgICAgICBcclxuICAgICAgICBpZiAobGltaXRUeXBlID09PSAyKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVuYWJsZSBESVYgZWxlbWVudCBmb3IgY2xpbWl0MiB0eXBlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZW5hYmxlRHJhZyh0cnVlLCBlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBsaW1pdCArPSB2YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIGxpbWl0IHZhbHVlXHJcbiAgICAgIGNsYXNzZXMgPSBjbGFzc2VzLnJlcGxhY2UoL2NsaW1pdFxcZF9cXGQrL2csICdjbGltaXQnICsgbGltaXRUeXBlICsgJ18nICsgbGltaXQpOyAgICAgICAgIC8vIHVwZGF0ZSBjbGltaXQgY2xhc3MgbmFtZSB3aXRoIG5ldyBsaW1pdCB2YWx1ZVxyXG4gICAgICBcclxuICAgICAgaWYgKGxpbWl0IDw9IDApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRlc3QgaWYgbGltaXQgZHJvcHMgdG8gemVyb1xyXG4gICAgICB7XHJcbiAgICAgICAgY2xhc3NlcyA9IGNsYXNzZXMucmVwbGFjZSgncmVkaXBzLWNsb25lJywgJycpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBubyBtb3JlIGNsb25pbmcsIGN1dCBvdXQgXCJyZWRpcHMtY2xvbmVcIiBmcm9tIGNsYXNzIG5hbWVcclxuICAgICAgICBcclxuICAgICAgICBpZiAobGltaXRUeXBlID09PSAyKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGxpbWl0IHR5cGUgaXMgMiB0aGVuIGRpc2FibGUgY2xvbmUgZWxlbWVudCAoaXQgd2lsbCBzdGF5IGluIGNlbGwpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZW5hYmxlRHJhZyhmYWxzZSwgZWwpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGlzYWJsZSBzb3VyY2UgRElWIGVsZW1lbnRcclxuICAgICAgICAgIFJFRElQUy5kcmFnLmV2ZW50LmNsb25lZEVuZDIoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGwgZXZlbnQuY2xvbmVkRW5kMiBoYW5kbGVyXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgUkVESVBTLmRyYWcuZXZlbnQuY2xvbmVkRW5kMSgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbCBldmVudC5jbG9uZWRFbmQxIGhhbmRsZXJcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGVsLmNsYXNzTmFtZSA9IG5vcm1hbGl6ZShjbGFzc2VzKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBub3JtYWxpemUgc3BhY2VzIGFuZCByZXR1cm4gY2xhc3NlcyB0byB0aGUgY2xvbmUgb2JqZWN0XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogTWV0aG9kIGF0dGFjaGVzIC8gZGV0YWNoZXMgb25tb3VzZWRvd24sIG9udG91Y2hzdGFydCBhbmQgb25kYmxjbGljayBldmVudHMgdG8gRElWIGVsZW1lbnRzIGFuZCBhdHRhY2hlcyBvbnNjcm9sbCBldmVudCB0byB0aGUgc2Nyb2xsIGNvbnRhaW5lcnMgaW4gaW5pdGlhbGl6YXRpb24gcGhhc2UuXHJcbiAgICogSXQgYWxzbyBjYW4gYmUgdXNlZCBmb3IgZWxlbWVudCBpbml0aWFsaXphdGlvbiBhZnRlciBESVYgZWxlbWVudCB3YXMgbWFudWFsbHkgYWRkZWQgdG8gdGhlIHRhYmxlLlxyXG4gICAqIElmIGNsYXNzIGF0dHJpYnV0ZSBvZiBESVYgY29udGFpbmVyIGNvbnRhaW5zIFwicmVkaXBzLW5vYXV0b3Njcm9sbFwiIGNsYXNzIG5hbWUgdGhlbiBhdXRvU2Nyb2xsIG9wdGlvbiB3aWxsIGJlIGRpc2FibGVkLlxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbnxTdHJpbmd9IGVuYWJsZV9mbGFnIEVuYWJsZSAvIGRpc2FibGUgZWxlbWVudCAob3IgZWxlbWVudCBzdWJ0cmVlIGxpa2UgdGFibGUsIGRyYWdnaW5nIGNvbnRhaW5lciAuLi4pLlxyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8U3RyaW5nfSBbZWxdIEhUTUwgbm9kZSBvciBDU1Mgc2VsZWN0b3IgdG8gZW5hYmxlIC8gZGlzYWJsZS4gUGFyYW1ldGVyIGRlZmluZXMgZWxlbWVudCByZWZlcmVuY2Ugb3IgQ1NTIHNlbGVjdG9yIG9mIERJViBlbGVtZW50cyB0byBlbmFibGUgLyBkaXNhYmxlLlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogLy8gZW5hYmxlIGVsZW1lbnQgd2l0aCBpZD1cImlkMTIzXCIgKGVsZW1lbnQgaWQgc2hvdWxkIGJlIGEgc3RyaW5nIGFjY29yZGluZyB0byBET00gZG9jcylcclxuICAgKiByZC5lbmFibGVEcmFnKHRydWUsICcjaWQxMjMnKTtcclxuICAgKlxyXG4gICAqIC8vIG9yIGluaXQgbWFudWFsbHkgYWRkZWQgZWxlbWVudCB3aXRoIGtub3duIGlkXHJcbiAgICogUkVESVBTLmRyYWcuZW5hYmxlRHJhZyh0cnVlLCAnI2lkMjM0Jyk7XHJcbiAgICpcclxuICAgKiAvLyBkaXNhYmxlIGFsbCBESVYgZWxlbWVudHMgaW4gZHJhZzEgc3VidHJlZVxyXG4gICAqIHJkLmVuYWJsZURyYWcoZmFsc2UsICcjZHJhZzEgZGl2JylcclxuICAgKlxyXG4gICAqIC8vIGluaXQgRElWIGVsZW1lbnRzIGluIGRyYWdnaW5nIGFyZWEgKGluY2x1ZGluZyBuZXdseSBhZGRlZCBESVYgZWxlbWVudClcclxuICAgKiAvLyBESVYgaW5pdGlhbGl6YXRpb24gd2lsbCB3b3JrIGlmIHRhYmxlIG5vZGUgc3RheXMgaW50YWN0ICh0YWJsZSBpcyBub3QgZ2VuZXJhdGVkIGR5bmFtaWNhbGx5KVxyXG4gICAqIFJFRElQUy5kcmFnLmVuYWJsZURyYWcoJ2luaXQnKTtcclxuICAgKlxyXG4gICAqIC8vIGluaXQgYWRkZWQgZWxlbWVudCB3aXRoIHJlZmVyZW5jZSBteUVsZW1lbnRcclxuICAgKiBSRURJUFMuZHJhZy5lbmFibGVEcmFnKHRydWUsIG15RWxlbWVudCk7XHJcbiAgICpcclxuICAgKiAvLyBkaXNhYmxlIGFsbCBESVYgZWxlbWVudHMgd2l0aGluIFREICh0ZCBpcyByZWZlcmVuY2UgdG8gVEQgbm9kZSlcclxuICAgKiBSRURJUFMuZHJhZy5lbmFibGVEcmFnKGZhbHNlLCB0ZCk7XHJcbiAgICovXHJcbiAgZW5hYmxlRHJhZyA9IGZ1bmN0aW9uIChlbmFibGVfZmxhZywgZWwpIFxyXG4gIHtcclxuICAgIHZhciBkaXYgPSBbXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb2xsZWN0aW9uIG9mIGRpdiBlbGVtZW50cyBjb250YWluZWQgaW4gdGFibGVzIG9yIG9uZSBkaXYgZWxlbWVudFxyXG4gICAgXHJcbiAgICBpZiAoZWwgPT09IHVuZGVmaW5lZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29sbGVjdCBESVYgZWxlbWVudHMgaW5zaWRlIGN1cnJlbnQgZHJhZyBhcmVhIChkcmFnIGVsZW1lbnRzIGFuZCBzY3JvbGwgY29udGFpbmVycykgZS5nLiBlbmFibGVEcmFnKHRydWUpXHJcbiAgICB7XHJcbiAgICAgIGRpdiA9IGRyYWdDb250YWluZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RpdicpO1xyXG4gICAgfSAgICBcclxuICAgIGVsc2UgaWYgKHR5cGVvZihlbCkgPT09ICdzdHJpbmcnKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcImVsXCIgaXMgc3RyaW5nIChDU1Mgc2VsZWN0b3IpIC0gaXQgY2FuIGNvbGxlY3Qgb25lIERJViBlbGVtZW50IChsaWtlIFwiI2QxMlwiKSBvciBtYW55IERJViBlbGVtZW50cyAobGlrZSBcIiNkcmFnMSBkaXZcIilcclxuICAgIHtcclxuICAgICAgZGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YoZWwpID09PSAnb2JqZWN0JyAmJiAoZWwubm9kZU5hbWUgIT09ICdESVYnIHx8IGVsLmNsYXNzTmFtZS5pbmRleE9mKCdyZWRpcHMtZHJhZycpID09PSAtMSkpICAgICAgLy8gXCJlbFwiIGlzIG5vZGUgcmVmZXJlbmNlIHRvIGVsZW1lbnQgdGhhdCBpcyBub3QgRElWIGNsYXNzPVwicmVkaXBzLWRyYWdcIlxyXG4gICAge1xyXG4gICAgICBkaXYgPSBlbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnZGl2Jyk7XHJcbiAgICB9XHJcbiAgICBlbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm9uZSBvZiBhYm92ZSwgZWwgaXMgRElWIGNsYXNzPVwicmVkaXBzLWRyYWdcIiwgc28gcHJlcGFyZSBhcnJheSB3aXRoIG9uZSBESVYgZWxlbWVudFxyXG4gICAge1xyXG4gICAgICBkaXZbMF0gPSBlbDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZW5hYmxlRGl2cyhlbmFibGVfZmxhZywgZGl2KTtcclxuICB9O1xyXG4gIFxyXG4gIFxyXG4gIGVuYWJsZURpdnMgPSBmdW5jdGlvbihlbmFibGVfZmxhZywgZGl2KVxyXG4gIHtcclxuICAgICB2YXIgaSwgaiwgaywgICAgLy8gbG9jYWwgdmFyaWFibGVzIHVzZWQgaW4gbG9vcFxyXG4gICAgICB0YmxzID0gW10sICAgIC8vIGNvbGxlY3Rpb24gb2YgdGFibGVzIGluc2lkZSBzY3JvbGxhYmxlIGNvbnRhaW5lclxyXG4gICAgICBib3JkZXJTdHlsZSwgIC8vIGJvcmRlciBzdHlsZSAoc29saWQgb3IgZG90dGVkKVxyXG4gICAgICBvcGFjaXR5LCAgICAvLyAoaW50ZWdlcikgc2V0IG9wYWNpdHkgZm9yIGVuYWJsZWQgLyBkaXNhYmxlZCBlbGVtZW50c1xyXG4gICAgICBjdXJzb3IsICAgICAvLyBjdXJzb3Igc3R5bGUgKG1vdmUgb3IgYXV0bylcclxuICAgICAgb3ZlcmZsb3csICAgLy8gY3NzIHZhbHVlIG9mIG92ZXJmbG93IHByb3BlcnR5XHJcbiAgICAgIGF1dG9zY3JvbGwsICAgLy8gYm9vbGVhbiAtIGlmIHNjcm9sbGFibGUgY29udGFpbmVyIHdpbGwgaGF2ZSBhdXRvc2Nyb2xsIG9wdGlvbiAoZGVmYXVsdCBpcyB0cnVlKVxyXG4gICAgICBlbmFibGVkLCAgICAvLyBlbmFibGVkIHByb3BlcnR5ICh0cnVlIG9yIGZhbHNlKVxyXG4gICAgICBjYiwgICAgICAgLy8gYm94IG9mZnNldCBmb3IgY29udGFpbmVyIGJveCAoY2IpXHJcbiAgICAgIHBvc2l0aW9uLCAgIC8vIGlmIHRhYmxlIGNvbnRhaW5lciBoYXMgcG9zaXRpb246Zml4ZWQgdGhlbiBcInBhZ2Ugc2Nyb2xsXCIgb2Zmc2V0IHNob3VsZCBub3QgYmUgYWRkZWRcclxuICAgICAgcmVnZXhEcmFnID0gL1xcYnJlZGlwcy1kcmFnXFxiL2ksIC8vIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBzZWFyY2ggXCJyZWRpcHMtZHJhZ1wiIGNsYXNzIG5hbWVcclxuICAgICAgcmVnZXhOb0F1dG9zY3JvbGwgPSAvXFxicmVkaXBzLW5vYXV0b3Njcm9sbFxcYi9pOyAvLyByZWd1bGFyIGV4cHJlc3Npb24gdG8gc2VhcmNoIFwicmVkaXBzLW5vYXV0b3Njcm9sbFwiIGNsYXNzIG5hbWUgICBcclxuXHJcbiAgICBvcGFjaXR5ID0gUkVESVBTLmRyYWcuc3R5bGUub3BhY2l0eURpc2FibGVkOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IG9wYWNpdHkgZm9yIGRpc2FibGVkIGVsZW1lbnRzIGZyb20gcHVibGljIHByb3BlcnR5IFwib3BhY2l0eURpc2FibGVkXCJcclxuICAgIFxyXG4gICAgaWYgKGVuYWJsZV9mbGFnID09PSB0cnVlIHx8IGVuYWJsZV9mbGFnID09PSAnaW5pdCcpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBzdHlsZXMgZm9yIGVuYWJsZWQgRElWIGVsZW1lbnRcclxuICAgIHtcclxuICAgICAgYm9yZGVyU3R5bGUgPSBSRURJUFMuZHJhZy5zdHlsZS5ib3JkZXJFbmFibGVkO1xyXG4gICAgICBjdXJzb3IgPSAnbW92ZSc7XHJcbiAgICAgIGVuYWJsZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVsc2Ugc2V0IHN0eWxlcyBmb3IgZGlzYWJsZWQgRElWIGVsZW1lbnRcclxuICAgIHtcclxuICAgICAgYm9yZGVyU3R5bGUgPSBSRURJUFMuZHJhZy5zdHlsZS5ib3JkZXJEaXNhYmxlZDtcclxuICAgICAgY3Vyc29yID0gJ2F1dG8nO1xyXG4gICAgICBlbmFibGVkID0gZmFsc2U7XHJcbiAgICB9ICAgIFxyXG4gICAgXHJcbiAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IGRpdi5sZW5ndGg7IGkrKykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWFpbiBsb29wIHRoYXQgZ29lcyB0aHJvdWdoIGFsbCBESVYgZWxlbWVudHNcclxuICAgIHsgICAgXHJcbiAgICAgIGlmIChyZWdleERyYWcudGVzdChkaXZbaV0uY2xhc3NOYW1lKSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgRElWIGVsZW1lbnQgY29udGFpbnMgXCJyZWRpcHMtZHJhZ1wiIGNsYXNzIG5hbWVcclxuICAgICAge1xyXG4gICAgICAgIGlmIChlbmFibGVfZmxhZyA9PT0gJ2luaXQnIHx8IGRpdltpXS5yZWRpcHMgPT09IHVuZGVmaW5lZCkgICAgICAgICAgICAgICAgICAgIC8vIGFkZCByZWZlcmVuY2UgdG8gdGhlIERJViBjb250YWluZXIgKGluaXRpYWxpemF0aW9uIG9yIG5ld2x5IGFkZGVkIGVsZW1lbnQgdG8gdGhlIHRhYmxlKSB0aGlzIHByb3BlcnR5IHNob3VsZCBub3QgYmUgY2hhbmdlZCBpbiBsYXRlciBlbGVtZW50IGVuYWJsZS9kaXNhYmxlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZGl2W2ldLnJlZGlwcyA9IHt9OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIFwicHJvcGVydHkgb2JqZWN0XCIgaW4gd2hpY2ggYWxsIGN1c3RvbSBwcm9wZXJ0aWVzIHdpbGwgYmUgc2F2ZWRcclxuICAgICAgICAgIGRpdltpXS5yZWRpcHMuY29udGFpbmVyID0gZHJhZ0NvbnRhaW5lcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZW5hYmxlX2ZsYWcgPT09IHRydWUgJiYgdHlwZW9mKG9wYWNpdHkpID09PSAnbnVtYmVyJykgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIG9wYWNpdHkgbWFza1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIGRpdltpXS5zdHlsZS5vcGFjaXR5ID0gJyc7XHJcbiAgICAgICAgICBkaXZbaV0uc3R5bGUuZmlsdGVyID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGVuYWJsZV9mbGFnID09PSBmYWxzZSAmJiB0eXBlb2Yob3BhY2l0eSkgPT09ICdudW1iZXInKSAgICAgICAgICAgICAgIC8vIHNldCBvcGFjaXR5IGZvciBkaXNhYmxlZCBlbGVtZW50c1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIGRpdltpXS5zdHlsZS5vcGFjaXR5ID0gb3BhY2l0eSAvIDEwMDtcclxuICAgICAgICAgIGRpdltpXS5zdHlsZS5maWx0ZXIgPSAnYWxwaGEob3BhY2l0eT0nICsgb3BhY2l0eSArICcpJztcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmVnaXN0ZXJFdmVudHMoZGl2W2ldLCBlbmFibGVkKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVnaXN0ZXIgZXZlbnQgbGlzdGVuZXIgZm9yIERJViBlbGVtZW50XHJcbiAgICAgICAgXHJcbiAgICAgICAgZGl2W2ldLnN0eWxlLmJvcmRlclN0eWxlID0gYm9yZGVyU3R5bGU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHN0eWxlcyBmb3IgRElWIGVsZW1lbnRcclxuICAgICAgICBkaXZbaV0uc3R5bGUuY3Vyc29yID0gY3Vyc29yO1xyXG4gICAgICAgIGRpdltpXS5yZWRpcHMuZW5hYmxlZCA9IGVuYWJsZWQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCBlbmFibGVkIHByb3BlcnR5IHRvIHRoZSBESVYgZWxlbWVudCAodHJ1ZSBvciBmYWxzZSlcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmIChlbmFibGVfZmxhZyA9PT0gJ2luaXQnKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF0dGFjaCBvbnNjcm9sbCBldmVudCB0byB0aGUgRElWIGVsZW1lbnQgaW4gaW5pdCBwaGFzZSBvbmx5IGlmIERJViBlbGVtZW50IGhhcyBvdmVyZmxvdyBvdGhlciB0aGFuIGRlZmF1bHQgdmFsdWUgJ3Zpc2libGUnIGFuZCB0aGF0IG1lYW5zIHNjcm9sbGFibGUgRElWIGNvbnRhaW5lclxyXG4gICAgICB7XHJcbiAgICAgICAgb3ZlcmZsb3cgPSBnZXRTdHlsZShkaXZbaV0sICdvdmVyZmxvdycpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXNrIGZvciBvdmVyZmxvdyBzdHlsZVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChvdmVyZmxvdyAhPT0gJ3Zpc2libGUnKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIERJViBpcyBzY3JvbGxhYmxlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgUkVESVBTLmV2ZW50LmFkZChkaXZbaV0sICdzY3JvbGwnLCBjYWxjdWxhdGVDZWxscyk7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlZmluZSBvbnNjcm9sbCBldmVudCBoYW5kbGVyIGZvciBzY3JvbGxhYmxlIGNvbnRhaW5lclxyXG4gICAgICAgICAgcG9zaXRpb24gPSBnZXRTdHlsZShkaXZbaV0sICdwb3NpdGlvbicpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBjb250YWluZXIgYm94IHN0eWxlIHBvc2l0aW9uICh0byBleGNsdWRlIHBhZ2Ugc2Nyb2xsIG9mZnNldCBmcm9tIGNhbGN1bGF0aW9uIGlmIG5lZWRlZClcclxuICAgICAgICAgIGNiID0gYm94T2Zmc2V0KGRpdltpXSwgcG9zaXRpb24sIGZhbHNlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXQgRElWIGNvbnRhaW5lciBvZmZzZXQgd2l0aCBvciB3aXRob3V0IFwicGFnZSBzY3JvbGxcIiBhbmQgZXhjbHVkZWQgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSBjb250ZW50XHJcbiAgICAgICAgICBhdXRvc2Nyb2xsID0gIXJlZ2V4Tm9BdXRvc2Nyb2xsLnRlc3QoZGl2W2ldLmNsYXNzTmFtZSk7ICAgICAgICAgICAgICAgICAgICAgLy8gc2VhcmNoIGZvciByZWRpcHMtbm9hdXRvc2Nyb2xsIG9wdGlvblxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBzY3JvbGxEYXRhLmNvbnRhaW5lcltqXSA9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJlcGFyZSBzY3JvbGxhYmxlIGNvbnRhaW5lciBhcmVhc1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBkaXYgOiBkaXZbaV0sICAgICAgICAgICAgICAgICAvLyByZWZlcmVuY2UgdG8gdGhlIHNjcm9sbGFibGUgY29udGFpbmVyXHJcbiAgICAgICAgICAgIG9mZnNldCA6IGNiLCAgICAgICAgICAgICAgICAgIC8vIGJveCBvZmZzZXQgb2YgdGhlIHNjcm9sbGFibGUgY29udGFpbmVyXHJcbiAgICAgICAgICAgIG1pZHN0WCA6IChjYlsxXSArIGNiWzNdKSAvIDIsIC8vIG1pZGRsZSBYXHJcbiAgICAgICAgICAgIG1pZHN0WSA6IChjYlswXSArIGNiWzJdKSAvIDIsIC8vIG1pZGRsZSBZXHJcbiAgICAgICAgICAgIGF1dG9zY3JvbGwgOiBhdXRvc2Nyb2xsICAgICAgIC8vIGF1dG9zY3JvbGwgZW5hYmxlZCBvciBkaXNhYmxlZCAodHJ1ZSBvciBmYWxzZSlcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHRibHMgPSBkaXZbaV0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RhYmxlJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWFyY2ggZm9yIHRhYmxlcyBpbnNpZGUgc2Nyb2xsYWJsZSBjb250YWluZXJcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgZm9yIChrID0gMDsgayA8IHRibHMubGVuZ3RoOyBrKyspICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvb3AgZ29lcyB0aHJvdWdoIGZvdW5kIHRhYmxlcyBpbnNpZGUgc2Nyb2xsYWJsZSBhcmVhXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHRibHNba10uc2NhID0gc2Nyb2xsRGF0YS5jb250YWluZXJbal07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIGEgcmVmZXJlbmNlIHRvIHRoZSBjb3JyZXNwb25kaW5nIHNjcm9sbGFibGUgYXJlYVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBqKys7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5jcmVhc2Ugc2Nyb2xsYWJsZSBjb250YWluZXIgY291bnRlclxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSAgIFxyXG4gIH07XHJcblxyXG4gIC8vTWV0aG9kIHJldHVybnMgc3R5bGUgdmFsdWUgZm9yIHJlcXVlc3RlZCBIVE1MIGVsZW1lbnQgYW5kIHN0eWxlIG5hbWUuXHJcbiAgZ2V0U3R5bGUgPSBmdW5jdGlvbiAoZWwsIHN0eWxlX25hbWUpIFxyXG4gIHtcclxuICAgIGlmIChlbCAmJiBlbC5jdXJyZW50U3R5bGUpIFxyXG4gICAge1xyXG4gICAgICByZXR1cm4gZWwuY3VycmVudFN0eWxlW3N0eWxlX25hbWVdO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZWwgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUpIFxyXG4gICAge1xyXG4gICAgICByZXR1cm4gZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbClbc3R5bGVfbmFtZV07XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gZmluZCB0aGUgZmlyc3QgcGFyZW50IGVsZW1lbnQgb2YgZWwgd2l0aCB0aGUgdGFnIG5hbWUgdGFnX25hbWUgXHJcbiAgZmluZFBhcmVudCA9IGZ1bmN0aW9uICh0YWdfbmFtZSwgZWwpIFxyXG4gIHtcclxuICAgIGVsID0gZWwucGFyZW50Tm9kZTsgICAgICAgICAgICAgICAgIC8vIHNldCBcImVsXCIgdG8gdGhlIG5leHQgbm9kZSAodG8gcHJldmVudCBmaW5kaW5nIG5vZGUgaXRzZWxmKVxyXG4gICAgXHJcbiAgICB3aGlsZSAoZWwpICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzdGFydCBsb29wXHJcbiAgICB7XHJcbiAgICAgIGlmIChlbC5ub2RlTmFtZSA9PT0gdGFnX25hbWUpICAgICAvLyBub2RlIGlzIGZvdW5kXHJcbiAgICAgIHtcclxuICAgICAgICAgIGJyZWFrOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vZGUgaXMgZm91bmQgYW5kIGxvb3AgY2FuIGJlIGVuZGVkXHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGVsID0gZWwucGFyZW50Tm9kZTsgICAgICAgICAgICAgICAvLyBtb3ZlIG9uIHRvIHRoZSBwYXJlbnQgbm9kZVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gZWw7XHJcbiAgfTtcclxuXHJcbiAgLy9GdW5jdGlvbiByZXR1cm5zIGEgc3RyaW5nIGluIHdoaWNoIGFsbCBvZiB0aGUgcHJlY2VkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZSBzcGFjZSBoYXMgYmVlbiByZW1vdmVkLCBhbmQgaW4gd2hpY2ggYWxsIGludGVybmFsIHNlcXVlbmNlcyBvZiB3aGl0ZSBpcyByZXBsYWNlZCB3aXRoIG9uZSB3aGl0ZSBzcGFjZS5cclxuICBub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyKSBcclxuICB7XHJcbiAgICBpZiAoc3RyICE9PSB1bmRlZmluZWQpIFxyXG4gICAge1xyXG4gICAgICBzdHIgPSBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpLnJlcGxhY2UoL1xcc3syLH0vZywgJyAnKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHN0cjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIG5vcm1hbGl6ZWQgc3RyaW5nICh3aXRob3V0IHByZWNlZGluZyBhbmQgdHJhaWxpbmcgc3BhY2VzKVxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIE1ldGhvZCBzZXRzIG9wYWNpdHkgdG8gdGFibGUgcm93IG9yIGRlbGV0ZXMgcm93IGNvbnRlbnQuXHJcbiAgICogSW5wdXQgcGFyYW1ldGVyIFwiZWxcIiBpcyByZWZlcmVuY2UgdG8gdGhlIHRhYmxlIHJvdyBvciByZWZlcmVuY2UgdG8gdGhlIGNsb25lZCBtaW5pIHRhYmxlICh3aGVuIHJvdyBpcyBtb3ZlZCkuXHJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxTdHJpbmd9IGVsIElkIG9mIHJvdyBoYW5kbGVyIChkaXYgY2xhc3M9XCJyZWRpcHMtZHJhZyByZWRpcHMtcm93XCIpIG9yIHJlZmVyZW5jZSB0byBlbGVtZW50IChzb3VyY2Ugcm93IG9yIG1pbmkgdGFibGUpLlxyXG4gICAqIEBwYXJhbSB7SW50ZWdlcnxTdHJpbmd9IG9wYWNpdHkgT3BhY2l0eSBsZXZlbCAoZnJvbSAwIHRvIDEwMCkgb3IgXCJlbXB0eVwiICh0aGVuIGNvbnRlbnQgb2YgdGFibGUgY2VsbHMgaW4gcm93IHdpbGwgYmUgZGVsZXRlZCAtIGluIHRoYXQgY2FzZSBmaXJzdCBwYXJhbWV0ZXIgc2hvdWxkIGJlIFRSKS5cclxuICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvbG9yXSBCYWNrZ3JvdW5kIGNvbG9yLlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogLy8gc2V0IHJlZmVyZW5jZSB0byB0aGUgUkVESVBTLmRyYWcgbGlicmFyeVxyXG4gICAqIHJkID0gUkVESVBTLmRyYWc7XHJcbiAgICpcclxuICAgKiAvLyBtYWtlIHJvdyBzZW1pLXRyYW5zcGFyZW50XHJcbiAgICogcmQucm93T3BhY2l0eShyb3dPYmosIDUwKTtcclxuICAgKlxyXG4gICAqIC8vIHNldCByb3cgYXMgZW1wdHkgYW5kIHdoaXRlIChjb250ZW50IGluIHRhYmxlIGNlbGxzIHdpbGwgYmUgZGVsZXRlZClcclxuICAgKiByZC5yb3dPcGFjaXR5KHJvd09iaiwgJ2VtcHR5JywgJ1doaXRlJyk7XHJcbiAgICovXHJcbiAgcm93T3BhY2l0eSA9IGZ1bmN0aW9uIChlbCwgb3BhY2l0eSwgY29sb3IpIFxyXG4gIHtcclxuICAgIHZhciB0ZE5vZGVMaXN0OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGFibGUgY2VsbHNcclxuICAgIHZhciBpLCBqOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbG9vcCB2YXJpYWJsZXNcclxuICAgIFxyXG4gICAgaWYgKHR5cGVvZihlbCkgPT09ICdzdHJpbmcnKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBpbnB1dCBwYXJhbWV0ZXIgaXMgc3RyaW5nICh0aGlzIHNob3VsZCBiZSBlbGVtZW50IGlkKSwgdGhlbiBzZXQgZWxlbWVudCByZWZlcmVuY2VcclxuICAgIHtcclxuICAgICAgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbCk7XHJcbiAgICAgIGVsID0gZmluZFBhcmVudCgnVEFCTEUnLCBlbCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVsIGNvdWxkIGJlIHJlZmVyZW5jZSBvZiB0aGUgRElWIGNsYXNzPVwicmVkaXBzLWRyYWcgcmVkaXBzLXJvd1wiIChyb3cgaGFuZGxlcilcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKGVsLm5vZGVOYW1lID09PSAnVFInKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBlbCBpcyBUUiwgdGhlbiBzZXQgYmFja2dyb3VuZCBjb2xvciB0byBlYWNoIGNlbGwgKGlmIG5lZWRlZCkgYW5kIGFwcGx5IG9wYWNpdHlcclxuICAgIHtcclxuICAgICAgdGROb2RlTGlzdCA9IGVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0ZCcpOyAgICAgICAgICAgICAgICAgLy8gY29sbGVjdCB0YWJsZSBjZWxsIGZyb20gdGhlIHJvd1xyXG4gICAgICBcclxuICAgICAgZm9yIChpID0gMDsgaSA8IHRkTm9kZUxpc3QubGVuZ3RoOyBpKyspICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IG9wYWNpdHkgZm9yIERJViBlbGVtZW50XHJcbiAgICAgIHtcclxuICAgICAgICB0ZE5vZGVMaXN0W2ldLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yID8gY29sb3IgOiAnJzsgLy8gc2V0IGJhY2tncm91bmQgY29sb3IgdG8gdGFibGUgY2VsbCBpZiBuZWVkZWRcclxuICAgICAgICBcclxuICAgICAgICBpZiAob3BhY2l0eSA9PT0gJ2VtcHR5JykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgb3BhY2l0eSBpcyBzZXQgdG8gXCJlbXB0eVwiIHRoZW4gZGVsZXRlIGNlbGwgY29udGVudFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHRkTm9kZUxpc3RbaV0uaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2Ugc2V0IG9wYWNpdHkgdG8gZXZlcnkgY2hpbGQgbm9kZSBpbiB0YWJsZSBjZWxsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IHRkTm9kZUxpc3RbaV0uY2hpbGROb2Rlcy5sZW5ndGg7IGorKykgICAvLyBsb29wIHRocm91Z2ggY2hpbGQgbm9kZXMgb2YgZXZlcnkgdGFibGUgY2VsbFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBhcHBseSBzdHlsZXMgb25seSB0byBFbGVtZW50IG5vZGVzIChub3QgdGV4dCBub2RlcywgYXR0cmlidXRlcyAuLi4pLCBodHRwOi8vY29kZS5zdGVwaGVubW9ybGV5Lm9yZy9qYXZhc2NyaXB0L2RvbS1ub2RldHlwZS1jb25zdGFudHMvXHJcbiAgICAgICAgICAgIGlmICh0ZE5vZGVMaXN0W2ldLmNoaWxkTm9kZXNbal0ubm9kZVR5cGUgPT09IDEpIFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgdGROb2RlTGlzdFtpXS5jaGlsZE5vZGVzW2pdLnN0eWxlLm9wYWNpdHkgPSBvcGFjaXR5IC8gMTAwO1xyXG4gICAgICAgICAgICAgIHRkTm9kZUxpc3RbaV0uY2hpbGROb2Rlc1tqXS5zdHlsZS5maWx0ZXIgPSAnYWxwaGEob3BhY2l0eT0nICsgb3BhY2l0eSArICcpJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHJvdyBpcyBtb3ZlZCB0aGVuIFJFRElQUy5kcmFnIHdpbGwgY3JlYXRlIG1pbmkgdGFibGUgd2l0aCBvbmUgcm93LCBhbGwgYnJvd3NlcnMgKElFOCwgT3BlcmExMSwgRkYzLjYsIENocm9tZTEwKSBjYW4gc2V0IG9wYWNpdHkgdG8gdGhlIHRhYmxlXHJcbiAgICB7XHJcbiAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSBvcGFjaXR5IC8gMTAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBvcGFjaXR5IGZvciBGRiwgQ2hyb21lLCBPcGVyYVxyXG4gICAgICBlbC5zdHlsZS5maWx0ZXIgPSAnYWxwaGEob3BhY2l0eT0nICsgb3BhY2l0eSArICcpJzsgICAgICAgICAvLyBzZXQgb3BhY2l0eSBmb3IgSUVcclxuICAgICAgZWwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3IgPyBjb2xvciA6ICcnOyAgICAgICAgICAgICAgLy8gc2V0IGJhY2tncm91bmQgY29sb3JcclxuICAgIH1cclxuICB9O1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLyogcHVibGljIHByb3BlcnRpZXMgKi9cclxuICAgIG9iaiA6IG9iaiwgICAgICAgICAgICAgICAgICAvL1R5cGU6IEhUTUxFbGVtZW50IC0gQ3VycmVudGx5IG1vdmVkIERJViBlbGVtZW50LiBSZWZlcmVuY2UgdG8gdGhlIFJFRElQUy5kcmFnLm9iaiAoZHJhZ2dlZCBESVYgZWxlbWVudCkgaXMgdmlzaWJsZSBhbmQgY2FuIGJlIHVzZWQgaW4gYXBwcm9wcmlhdGUgZXZlbnQgaGFuZGxlcnMuXHJcbiAgICBvYmpPbGQgIDogb2JqT2xkLCAgICAgICAgICAgLy9UeXBlOiBIVE1MRWxlbWVudCAtIFByZXZpb3VzbHkgbW92ZWQgRElWIGVsZW1lbnQgKGJlZm9yZSBjbGlja2VkIG9yIGNsb25lZCkuIEluIGNhc2Ugd2hlbiBESVYgZWxlbWVudCBpcyBjbG9uZWQsIG9iaiBpcyByZWZlcmVuY2Ugb2YgY3VycmVudCAoY2xvbmVkKSBESVYgZWxlbWVudCB3aGlsZSBvYmpPbGQgaXMgcmVmZXJlbmNlIG9mIGJvdHRvbSAob3JpZ2luKSBESVYgZWxlbWVudC5cclxuICAgIC8qKlxyXG4gICAgICogT2JqZWN0IGNvbnRhaW5zIHJlZmVyZW5jZSB0byBwcmV2aW91cywgc291cmNlLCBjdXJyZW50IGFuZCB0YXJnZXQgdGFibGUgY2VsbC4gVGQgcmVmZXJlbmNlcyBjYW4gYmUgdXNlZCBpbiBldmVudCBoYW5kbGVycy5cclxuICAgICAqIDx1bD5cclxuICAgICAqIDxsaT57SFRNTEVsZW1lbnR9IHRkLnNvdXJjZSAtIHJlZmVyZW5jZSB0byBzb3VyY2UgdGFibGUgY2VsbCAoc2V0IGluIG9ubW91c2Vkb3duKTwvbGk+XHJcbiAgICAgKiA8bGk+e0hUTUxFbGVtZW50fSB0ZC5wcmV2aW91cyAtIHJlZmVyZW5jZSB0byBwcmV2aW91cyB0YWJsZSBjZWxsIChzZXQgaW4gb25tb3VzZW1vdmUgYW5kIGF1dG9zY3JvbGwpPC9saT5cclxuICAgICAqIDxsaT57SFRNTEVsZW1lbnR9IHRkLmN1cnJlbnQgLSByZWZlcmVuY2UgdG8gY3VycmVudCB0YWJsZSBjZWxsIChzZXQgaW4gb25tb3VzZW1vdmUgYW5kIGF1dG9zY3JvbGwpPC9saT5cclxuICAgICAqIDxsaT57SFRNTEVsZW1lbnR9IHRkLnRhcmdldCAtIHJlZmVyZW5jZSB0byB0YXJnZXQgdGFibGUgY2VsbCAodGFyZ2V0IHRhYmxlIGNlbGwgaXMgc2V0IGluIGEgbW9tZW50IG9mIGRyb3BwaW5nIGVsZW1lbnQgdG8gdGhlIHRhYmxlIGNlbGwpPC9saT5cclxuICAgICAqIDwvdWw+XHJcbiAgICAgKiBAdHlwZSBPYmplY3RcclxuICAgICAqL1xyXG4gICAgdGQgOiB0ZCxcclxuICAgIC8qKlxyXG4gICAgICogSG92ZXIgb2JqZWN0IGNvbnRhaW5zIDQgcHJvcGVydGllczogY29sb3JUZCwgY29sb3JUciwgYm9yZGVyVGQgYW5kIGJvcmRlclRyLiBjb2xvclRkIGFuZCBjb2xvclRyIGRlZmluZSBob3ZlciBjb2xvciBmb3IgRElWIGVsZW1lbnQgYW5kIHRhYmxlIHJvdy5cclxuICAgICAqIElmIGJvcmRlclRkIGlzIGRlZmluZWQsIHRoZW4gaGlnaGxpZ2h0ZWQgY2VsbCB3aWxsIGhhdmUgYm9yZGVyLiBJZiBib3JkZXJUciBpcyBkZWZpbmVkIHRoZW4gaGlnaGxpZ2h0ZWQgcm93IHdpbGwgaGF2ZSBvbmx5IHRvcCBvciBib3R0b20gYm9yZGVyLlxyXG4gICAgICogVG9wIGJvcmRlciBzaG93cyB0aGF0IHJvdyB3aWxsIGJlIHBsYWNlZCBhYm92ZSBjdXJyZW50IHJvdywgd2hpbGUgYm90dG9tIGJvcmRlciBzaG93cyB0aGF0IGN1cnJlbnQgcm93IHdpbGwgYmUgcGxhY2VkIGJlbG93IGN1cnJlbnQgcm93LlxyXG4gICAgICogU29tZSBicm93c2VycyBtYXkgaGF2ZSBwcm9ibGVtIHdpdGggXCJib3JkZXItY29sbGFwc2U6Y29sbGFwc2VcIiB0YWJsZSBzdHlsZSBhbmQgYm9yZGVyIGhpZ2hsaWdodGluZy5cclxuICAgICAqIEluIHRoYXQgY2FzZSB0cnkgd2l0aG91dCBjb2xsYXBzaW5nIFREIGJvcmRlcnMgKGUuZyBzZXQgXCJib3JkZXItc3BhY2luZzowXCIgYW5kIHNtYWxsZXIgXCJ0ZC5ib3JkZXItd2lkdGhcIikuXHJcbiAgICAgKiBAdHlwZSBPYmplY3RcclxuICAgICAqIEBuYW1lIFJFRElQUy5kcmFnI2hvdmVyXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogLy8gc2V0IFwiIzlCQjNEQVwiIGFzIGhvdmVyIGNvbG9yIGZvciBURFxyXG4gICAgICogUkVESVBTLmRyYWcuaG92ZXIuY29sb3JUZCA9ICcjOUJCM0RBJztcclxuICAgICAqXHJcbiAgICAgKiAvLyBvciBzZXQgXCJMaW1lXCIgYXMgaG92ZXIgY29sb3IgZm9yIFRSXHJcbiAgICAgKiBSRURJUFMuZHJhZy5ob3Zlci5jb2xvclRyID0gJ0xpbWUnO1xyXG4gICAgICpcclxuICAgICAqIC8vIHNldCByZWQgYm9yZGVyIGZvciBoaWdobGlnaHRlZCBURFxyXG4gICAgICogUkVESVBTLmRyYWcuaG92ZXIuYm9yZGVyVGQgPSAnMnB4IHNvbGlkIHJlZCc7XHJcbiAgICAgKi9cclxuICAgIGhvdmVyIDogaG92ZXIsXHJcbiAgICAvKipcclxuICAgICAqIFNjcm9sbCBvYmplY3QgY29udGFpbnMgcHJvcGVydGllcyBuZWVkZWQgZm9yIGF1dG9zY3JvbGwgb3B0aW9uLlxyXG4gICAgICogPHVsPlxyXG4gICAgICogPGxpPntCb29sZWFufSBzY3JvbGwuZW5hYmxlIC0gRW5hYmxlIC8gZGlzYWJsZSBhdXRvc2Nyb2xsIG9wdGlvbi4gQnkgZGVmYXVsdCBhdXRvc2Nyb2xsIGlzIGVuYWJsZWQgYnV0IGl0IGNhbiBiZSB1c2VmdWxsIGluIHNvbWUgY2FzZXMgdG8gY29tcGxldGVseSB0dXJuIG9mZiBhdXRvc2Nyb2xsIChpZiBhcHBsaWNhdGlvbiBkb2Vzbid0IG5lZWQgYXV0b3Njcm9sbGluZyBwYWdlIG5vciBhdXRvc2Nyb2xsaW5nIERJViBjb250YWluZXIpLiBUdXJuaW5nIG9mZiBhdXRvc2Nyb2xsIHdpbGwgc3BlZWQgdXAgYXBwbGljYXRpb24gYmVjYXVzZSBleHRyYSBjYWxjdWxhdGlvbnMgd2lsbCBiZSBza2lwcGVkLiBEZWZhdWx0IGlzIHRydWU8L2xpPlxyXG4gICAgICogPGxpPntJbnRlZ2VyfSBzY3JvbGwuYm91bmQgLSBCb3VuZCBzaXplIGZvciB0cmlnZ2VyaW5nIHBhZ2UgYXV0b1Njcm9sbCBvciBhdXRvU2Nyb2xsIG9mIHNjcm9sbGFibGUgRElWIGNvbnRhaW5lci4gRGVmYXVsdCB2YWx1ZSBpcyAyNSAocHgpLjwvbGk+XHJcbiAgICAgKiA8bGk+e0ludGVnZXJ9IHNjcm9sbC5zcGVlZCAtIEF1dG9zY3JvbGwgcGF1c2UgaW4gbWlsbGlzZWNvbmRzLiBEZWZhdWx0IHZhbHVlIGlzIDIwIChtaWxsaXNlY29uZHMpLjwvbGk+XHJcbiAgICAgKiA8L3VsPlxyXG4gICAgICogQHR5cGUgT2JqZWN0XHJcbiAgICAgKi9cclxuICAgIHNjcm9sbCA6IHNjcm9sbCxcclxuICAgIC8qKlxyXG4gICAgICogT2JqZWN0IGNvbnRhaW5zIHN0eWxlcyAoY29sb3JzLCBvcGFjaXR5IGxldmVscykgZm9yIERJViBlbGVtZW50cyBhbmQgdGFibGUgcm93cy5cclxuICAgICAqIDx1bD5cclxuICAgICAqIDxsaT57U3RyaW5nfSBzdHlsZS5ib3JkZXJFbmFibGVkIC0gQm9yZGVyIHN0eWxlIGZvciBlbmFibGVkIERJViBlbGVtZW50cy4gRGVmYXVsdCBpcyBcInNvbGlkXCIuPC9saT5cclxuICAgICAqIDxsaT57U3RyaW5nfSBzdHlsZS5ib3JkZXJEaXNhYmxlZCAtIEJvcmRlciBzdHlsZSBmb3IgZGlzYWJsZWQgRElWIGVsZW1lbnRzLiBEZWZhdWx0IGlzIFwiZG90dGVkXCIuPC9saT5cclxuICAgICAqIDxsaT57SW50ZWdlcn0gc3R5bGUub3BhY2l0eURpc2FibGVkIC0gT3BhY2l0eSBsZXZlbCBmb3IgZGlzYWJsZWQgZWxlbWVudHMuIERlZmF1bHQgaXMgZW1wdHkgc3RyaW5nLjwvbGk+XHJcbiAgICAgKiA8bGk+e1N0cmluZ30gc3R5bGUucm93RW1wdHlDb2xvciAtIFwiRW1wdHkgcm93XCIgY29sb3IuIFdoZW4gbGFzdCByb3cgZnJvbSB0YWJsZSBpcyBtb3ZlZCB0aGVuIHRoaXMgY29sb3Igd2lsbCBiZSBzZXQgdG8gXCJlbXB0eSByb3dcIi4gRGVmYXVsdCBpcyBcIndoaXRlXCIuPC9saT5cclxuICAgICAqIDwvdWw+XHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogLy8gZGVmaW5lIGJvcmRlciBzdHlsZSBmb3IgZGlzYWJsZWQgZWxlbWVudHNcclxuICAgICAqIFJFRElQUy5kcmFnLnN0eWxlLmJvcmRlckRpc2FibGVkID0gJ2Rhc2hlZCc7XHJcbiAgICAgKiBAdHlwZSBPYmplY3RcclxuICAgICAqL1xyXG4gICAgc3R5bGUgOiBzdHlsZSxcclxuICAgIC8qKlxyXG4gICAgICogT2JqZWN0IGRlZmluZXMgc2V2ZXJhbCBydWxlcyByZWxhdGVkIHRvIGNsb25pbmcgRElWIGVsZW1lbnRzIGxpa2UgZW5hYmxlIGNsb25pbmcgd2l0aCBzaGlmdCBrZXksIGVuYWJsZSByZXR1cm5pbmcgY2xvbmVkIERJViBlbGVtZW50IHRvIGl0cyBzb3VyY2UgYW5kIHNvIG9uLlxyXG4gICAgICogSW5zdGVhZCBvZiBtb3ZpbmcsIERJViBlbGVtZW50IC8gcm93IHdpbGwgYmUgY2xvbmVkIGFuZCByZWFkeSBmb3IgZHJhZ2dpbmcuXHJcbiAgICAgKiBKdXN0IHByZXNzIFNISUZUIGtleSBhbmQgdHJ5IHRvIGRyYWcgRElWIGVsZW1lbnQgLyByb3cuXHJcbiAgICAgKiBpZiBjbG9uZS5zZW5kQmFjayBwcm9wZXJ0eSBzZXQgdG8gdHJ1ZSwgY2xvbmVkIERJViBlbGVtZW50IHdpbGwgYmUgZGVsZXRlZCB3aGVuIGRyb3BwZWQgdG8gdGhlIGNlbGwgY29udGFpbmluZyBpdHMgc291cmNlIGNsb25lIGVsZW1lbnQuXHJcbiAgICAgKiBJZiBleGlzdHMsIFwiY2xpbWl0XCIgY2xhc3Mgd2lsbCBiZSB1cGRhdGVkIChpbmNyZWFzZWQgYnkgMSkuXHJcbiAgICAgKiBjbG9uZS5kcm9wIHByb3BlcnR5IGRlZmluZXMgcGxhY2luZyBjbG9uZWQgRElWIGVsZW1lbnQgKGRyb3BwZWQgb3V0c2lkZSBhbnkgdGFibGUpIHRvIHRoZSBsYXN0IG1hcmtlZCBwb3NpdGlvbi5cclxuICAgICAqIElmIHRoaXMgcHJvcGVydHkgaXMgc2V0IHRvIHRydWUsIHRoZSBjbG9uZWQgRElWIGVsZW1lbnQgd2lsbCBiZSBhbHdheXMgcGxhY2VkIHRvIHRoZSB0YWJsZSBjZWxsLlxyXG4gICAgICogPHVsPlxyXG4gICAgICogPGxpPntCb29sZWFufSBjbG9uZS5rZXlEaXYgLSBJZiBzZXQgdG8gdHJ1ZSwgYWxsIERJViBlbGVtZW50cyBvbiB0YWJsZXMgY291bGQgYmUgY2xvbmVkIHdpdGggcHJlc3NlZCBTSElGVCBrZXkuIERlZmF1bHQgaXMgZmFsc2UuPC9saT5cclxuICAgICAqIDxsaT57Qm9vbGVhbn0gY2xvbmUua2V5Um93IC0gSWYgc2V0IHRvIHRydWUsIHRhYmxlIHJvd3MgY291bGQgYmUgY2xvbmVkIHdpdGggcHJlc3NlZCBTSElGVCBrZXkuIERlZmF1bHQgaXMgZmFsc2UuPC9saT5cclxuICAgICAqIDxsaT57Qm9vbGVhbn0gY2xvbmUuc2VuZEJhY2sgLSBJZiBzZXQgdG8gdHJ1ZSwgY2xvbmVkIGVsZW1lbnQgY2FuIGJlIHJldHVybmVkIHRvIGl0cyBzb3VyY2UuIERlZmF1bHQgaXMgZmFsc2UuPC9saT5cclxuICAgICAqIDxsaT57Qm9vbGVhbn0gY2xvbmUuZHJvcCAtIElmIHNldCB0byB0cnVlLCBjbG9uZWQgZWxlbWVudCB3aWxsIGJlIGFsd2F5cyBwbGFjZWQgdG8gdGhlIHRhYmxlICh0byB0aGUgbGFzdCBwb3NzaWJsZSBjZWxsKSBubyBtYXR0ZXIgaWYgaXMgZHJvcHBlZCBvdXRzaWRlIHRoZSB0YWJsZS4gRGVmYXVsdCBpcyBmYWxzZS48L2xpPlxyXG4gICAgICogPC91bD5cclxuICAgICAqIEB0eXBlIE9iamVjdFxyXG4gICAgICovXHJcbiAgICBjbG9uZSA6IGNsb25lLFxyXG4gICAgLyogcHVibGljIG1ldGhvZHMgKGRvY3VtZW50ZWQgaW4gbWFpbiBjb2RlKSAqL1xyXG4gICAgaW5pdCA6IGluaXQsXHJcbiAgICBlbmFibGVEcmFnIDogZW5hYmxlRHJhZyxcclxuICAgIGVuYWJsZURpdnMgOiBlbmFibGVEaXZzLFxyXG4gICAgcm93T3BhY2l0eSA6IHJvd09wYWNpdHksXHJcbiAgICBnZXRTY3JvbGxQb3NpdGlvbiA6IGdldFNjcm9sbFBvc2l0aW9uLFxyXG4gICAgZ2V0U3R5bGUgOiBnZXRTdHlsZSxcclxuICAgIGZpbmRQYXJlbnQgOiBmaW5kUGFyZW50LFxyXG4gICAgZXZlbnQgOiBldmVudFxyXG4gIH07XHJcbn0oKSk7XHJcblxyXG5cclxuaWYgKCFSRURJUFMuZXZlbnQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIFJFRElQUy5ldmVudCBpc24ndCBhbHJlYWR5IGRlZmluZWQgKGZyb20gb3RoZXIgUkVESVBTIGZpbGUpXHJcbntcclxuICBSRURJUFMuZXZlbnQgPSAoZnVuY3Rpb24gKCkgXHJcbiAge1xyXG4gICAgdmFyIGFkZDtcclxuICAgIHZhciByZW1vdmU7XHJcblxyXG4gICAgYWRkID0gZnVuY3Rpb24gKG9iaiwgZXZlbnROYW1lLCBoYW5kbGVyKSAgICAgICAgICAgICAgICAgICAgLy8gYWRkIGV2ZW50IGxpc3RlbmVyXHJcbiAgICB7XHJcbiAgICAgIGlmIChvYmouYWRkRXZlbnRMaXN0ZW5lcikgXHJcbiAgICAgIHtcclxuICAgICAgICBvYmouYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIGZhbHNlKTsgICAgICAgIC8vIChmYWxzZSkgcmVnaXN0ZXIgZXZlbnQgaW4gYnViYmxlIHBoYXNlIChldmVudCBwcm9wYWdhdGVzIGZyb20gZnJvbSB0YXJnZXQgZWxlbWVudCB1cCB0byB0aGUgRE9NIHJvb3QpXHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAob2JqLmF0dGFjaEV2ZW50KSBcclxuICAgICAge1xyXG4gICAgICAgIG9iai5hdHRhY2hFdmVudCgnb24nICsgZXZlbnROYW1lLCBoYW5kbGVyKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIFxyXG4gICAgICB7XHJcbiAgICAgICAgb2JqWydvbicgKyBldmVudE5hbWVdID0gaGFuZGxlcjtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZW1vdmUgPSBmdW5jdGlvbiAob2JqLCBldmVudE5hbWUsIGhhbmRsZXIpICAgICAgICAgICAgICAgICAvLyByZW1vdmUgZXZlbnQgbGlzdGVuZXJcclxuICAgIHtcclxuICAgICAgaWYgKG9iai5yZW1vdmVFdmVudExpc3RlbmVyKSBcclxuICAgICAge1xyXG4gICAgICAgIG9iai5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgZmFsc2UpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKG9iai5kZXRhY2hFdmVudCkgXHJcbiAgICAgIHtcclxuICAgICAgICBvYmouZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50TmFtZSwgaGFuZGxlcik7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBcclxuICAgICAge1xyXG4gICAgICAgIG9ialsnb24nICsgZXZlbnROYW1lXSA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHsgYWRkOiBhZGQsIHJlbW92ZTogcmVtb3ZlIH07XHJcbiAgfSgpKTtcclxufSIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIHJlZGlwcyA9IHt9O1xyXG5cclxucmVkaXBzLmluaXQgPSBmdW5jdGlvbiAoKSBcclxue1xyXG4gIHZhciByZCA9IFJFRElQUy5kcmFnOyAgIC8vIHJlZmVyZW5jZSB0byB0aGUgUkVESVBTLmRyYWcgbGlicmFyeVxyXG5cclxuICByZC5pbml0KCk7XHJcblxyXG4gIC8vcmQuY2xvbmUua2V5RGl2ID0gcmQuY2xvbmUua2V5Um93ID0gdHJ1ZTsgICAvLyBlbmFibGUgY2xvbmUgZWxlbWVudCBhbmQgY2xvbmUgcm93IHdpdGggc2hpZnQga2V5XHJcblxyXG4gIHJkLmV2ZW50LnJvd0Ryb3BwZWQgPSBmdW5jdGlvbiAobmV3UGFyZW50Um93KVxyXG4gIHtcclxuICAgIHZhciBtb3ZlZElEICAgICAgID0gcGFyc2VJbnQocmQub2JqT2xkLmlkLnJlcGxhY2UoJ3Jvd2lkJywgJycpKTtcclxuICAgIHZhciBuZXdQYXJlbnRJRCAgID0gcGFyc2VJbnQobmV3UGFyZW50Um93LmlkLnJlcGxhY2UoJ3Jvd2lkJywgJycpKTtcclxuICAgIFNwcmVhZFNoZWV0Vmlldy5tb3ZlTm9kZShtb3ZlZElELCBuZXdQYXJlbnRJRCk7XHJcbiAgfTtcclxuXHJcbiAgcmQuZXZlbnQucm93RHJvcHBlZFNvdXJjZSA9IGZ1bmN0aW9uICgpICAgICAgICAgLy8gcm93IHdhcyBkcm9wcGVkIHRvIHRoZSBzb3VyY2UgLSBldmVudCBoYW5kbGVyLCBtaW5pIHRhYmxlIChjbG9uZWQgcm93KSB3aWxsIGJlIGRlbGV0ZWQgYW5kIHNvdXJjZSByb3cgc2hvdWxkIHJldHVybiB0byBvcmlnaW5hbCBzdGF0ZVxyXG4gIHtcclxuICAgIHJkLnJvd09wYWNpdHkocmQub2JqT2xkLCAxMDApOyAgICAgICAgICAgICAgICAvLyBtYWtlIHNvdXJjZSByb3cgY29tcGxldGVseSB2aXNpYmxlIChubyBvcGFjaXR5KVxyXG4gIH07XHJcblxyXG4gIHJkLmV2ZW50LnJvd01vdmVkID0gZnVuY3Rpb24gKClcclxuICB7XHJcbiAgICByZC5yb3dPcGFjaXR5KHJkLm9iaiwgODUpOyAgICAgICAgICAgICAgICAgICAgLy8gc2V0IG9wYWNpdHkgZm9yIG1vdmVkIHJvdywgcmQub2JqIGlzIHJlZmVyZW5jZSBvZiBjbG9uZWQgcm93IChtaW5pIHRhYmxlKVxyXG4gICAgcmQucm93T3BhY2l0eShyZC5vYmpPbGQsIDIwLCAnV2hpdGUnKTsgICAgICAgIC8vIHNldCBvcGFjaXR5IGZvciBzb3VyY2Ugcm93IGFuZCBjaGFuZ2Ugc291cmNlIHJvdyBiYWNrZ3JvdW5kIGNvbG9yLCBvYmoub2JqT2xkIGlzIHJlZmVyZW5jZSBvZiBzb3VyY2Ugcm93XHJcbiAgfTtcclxuXHJcbiAgcmQuZXZlbnQucm93Q2xpY2tlZCAgID0gZnVuY3Rpb24gKCkge307XHJcbiAgcmQuZXZlbnQucm93Tm90TW92ZWQgID0gZnVuY3Rpb24gKCkge307XHJcbiAgcmQuZXZlbnQucm93Q2xvbmVkICAgID0gZnVuY3Rpb24gKCkge307XHJcbiAgcmQuZXZlbnQucm93Tm90Q2xvbmVkID0gZnVuY3Rpb24gKCkge307XHJcbiAgcmQuZXZlbnQucm93RGVsZXRlZCAgID0gZnVuY3Rpb24gKCkge307XHJcblxyXG4gIHJkLmV2ZW50LnJvd1VuZGVsZXRlZCA9IGZ1bmN0aW9uICgpICAgICAgICAgICAgIC8vIHJvdyBpcyB1bmRlbGV0ZWQgKHJldHVybiBzb3VyY2Ugcm93IHRvIG9yaWdpbmFsIHN0YXRlKVxyXG4gIHtcclxuICAgIHJkLnJvd09wYWNpdHkocmQub2JqT2xkLCAxMDApO1xyXG4gIH07XHJcbn07XHJcbiIsInZhciBGaWVsZCA9IGZ1bmN0aW9uKG5hbWUpXHJcbntcclxuICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gIHRoaXMuZGF0YXR5cGUgPSBGaWVsZC5OVU1CRVI7XHJcbiAgdGhpcy5mb3JtYXQgPSBGaWVsZC5OVU1CRVJfRk9STUFUO1xyXG4gIHRoaXMucHJlY2lzaW9uID0gMjtcclxuICB0aGlzLmFnZ190eXBlID0gRmllbGQuTk9fQUdHUkVHQVRJT047XHJcbiAgdGhpcy5hZ2dfcXR5X2ZpZWxkID0gbnVsbDtcclxufTtcclxuXHJcbkZpZWxkLk5VTUJFUiA9ICcwJztcclxuRmllbGQuU1RSSU5HID0gJzEnO1xyXG5GaWVsZC5DSE9JQ0UgPSAnMic7XHJcblxyXG5GaWVsZC5OT19BR0dSRUdBVElPTiA9ICcwJztcclxuRmllbGQuU1VNX0FOWV9BR0dSRUdBVElPTiA9ICcxJztcclxuXHJcbkZpZWxkLk5VTUJFUl9GT1JNQVQgPSAnMCc7XHJcbkZpZWxkLlBFUkNFTlRfRk9STUFUID0gJzEnO1xyXG5GaWVsZC5TQ0lFTlRJRklDX0ZPUk1BVCA9ICcyJztcclxuXHJcbkZpZWxkLmZvcm1hdFZhbHVlID0gZnVuY3Rpb24oZmllbGQsIHZhbHVlKVxyXG57XHJcbiAgaWYoZmllbGQuZGF0YXR5cGUgPT09IEZpZWxkLk5VTUJFUilcclxuICB7XHJcbiAgICB2YWx1ZSA9IE51bWJlcih2YWx1ZSk7ICAgICAgLy9UT0RPOiBoYW5kbGUgY2FzZSB3aGVyZSB2YWx1ZSBkb2Vzbid0IHBhcnNlIHRvIGEgbnVtYmVyXHJcbiAgICBcclxuICAgIGlmKGZpZWxkLmZvcm1hdCA9PT0gRmllbGQuTlVNQkVSX0ZPUk1BVClcclxuICAgIHtcclxuICAgICAgcmV0dXJuIHZhbHVlLnRvRml4ZWQoZmllbGQucHJlY2lzaW9uKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoZmllbGQuZm9ybWF0ID09PSBGaWVsZC5QRVJDRU5UX0ZPUk1BVClcclxuICAgIHtcclxuICAgICAgcmV0dXJuICgxMDAuMCAqIHZhbHVlKS50b0ZpeGVkKGZpZWxkLnByZWNpc2lvbikgKyAnJSc7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKGZpZWxkLmZvcm1hdCA9PT0gRmllbGQuU0NJRU5USUZJQ19GT1JNQVQpXHJcbiAgICB7XHJcbiAgICAgIHJldHVybiB2YWx1ZS50b0V4cG9uZW50aWFsKGZpZWxkLnByZWNpc2lvbik7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGVsc2UgaWYoZmllbGQuZGF0YXR5cGUgPT09IEZpZWxkLlNUUklORylcclxuICB7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfSBcclxuICBlbHNlIGlmKGZpZWxkLmRhdGF0eXBlID09PSBGaWVsZC5DSE9JQ0UpXHJcbiAge1xyXG4gICAgLy9UT0RPOiBpbXBsZW1lbnRcclxuICB9ICAgICAgXHJcbn07ICAiLCJ2YXIgc2Nyb2xsQmFyV2lkdGg7XHJcblxyXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpXHJcbntcclxuICBzY3JvbGxCYXJXaWR0aCA9IGdldFNjcm9sbEJhcldpZHRoKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2dldCB0aGUgc2Nyb2xsYmFyIHdpZHRoIGZvciB0aGUgYnJvd3NlciwgdG8gdXNlIGxhdGVyIGZvciBzaXppbmcgb3RoZXIgZWxlbWVudHNcclxuICBkb2N1bWVudC5vbmtleWRvd24gPSBjaGVja0tleTsgXHJcbiAgaG1zLmluaXQoKTtcclxufSk7XHJcblxyXG52YXIgZ2V0U2Nyb2xsQmFyV2lkdGggPSBmdW5jdGlvbigpIFxyXG57XHJcbiAgdmFyIGRpdiwgd2lkdGg7XHJcbiAgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgZGl2LmlubmVySFRNTCA9ICc8ZGl2IHN0eWxlPVwid2lkdGg6NTBweDtoZWlnaHQ6NTBweDtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi01MHB4O3RvcDotNTBweDtvdmVyZmxvdzphdXRvO1wiPjxkaXYgc3R5bGU9XCJ3aWR0aDoxcHg7aGVpZ2h0OjEwMHB4O1wiPjwvZGl2PjwvZGl2Pic7XHJcbiAgZGl2ID0gZGl2LmZpcnN0Q2hpbGQ7XHJcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXYpO1xyXG4gIHdpZHRoID0gZGl2Lm9mZnNldFdpZHRoIC0gZGl2LmNsaWVudFdpZHRoO1xyXG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZGl2KTtcclxuICByZXR1cm4gd2lkdGg7XHJcbn07IiwidmFyIEtFWV9VUF9BUlJPVyA9IDM4O1xyXG52YXIgS0VZX0RPV05fQVJST1cgPSA0MDtcclxudmFyIEtFWV9MRUZUX0FSUk9XID0gMzc7XHJcbnZhciBLRVlfUklHSFRfQVJST1cgPSAzOTtcclxuXHJcbmZ1bmN0aW9uIGNoZWNrS2V5KGUpIFxyXG57XHJcbiAgZSA9IGUgfHwgd2luZG93LmV2ZW50O1xyXG5cclxuICBpZiAoZS5rZXlDb2RlID09IEtFWV9VUF9BUlJPVykgXHJcbiAge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgdmFyIHByZXZSb3cgPSAkKGdldEFuY2VzdG9yVGFnKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQsICd0cicpKS5wcmV2KClbMF07XHJcbiAgICBcclxuICAgIGlmKHByZXZSb3cpXHJcbiAgICB7XHJcbiAgICAgICQoJyMnICsgZ2V0TmV4dEVsZW1lbnRJRChwcmV2Um93KSkuZm9jdXMoKTtcclxuICAgIH0gICAgICBcclxuICB9XHJcbiAgZWxzZSBpZiAoZS5rZXlDb2RlID09IEtFWV9ET1dOX0FSUk9XKSBcclxuICB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB2YXIgbmV4dFJvdyA9ICQoZ2V0QW5jZXN0b3JUYWcoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCwgJ3RyJykpLm5leHQoKVswXTtcclxuICAgIFxyXG4gICAgaWYobmV4dFJvdylcclxuICAgIHtcclxuICAgICAgJCgnIycgKyBnZXROZXh0RWxlbWVudElEKG5leHRSb3cpKS5mb2N1cygpO1xyXG4gICAgfSAgICAgICBcclxuICB9XHJcbiAgZWxzZSBpZiAoZS5rZXlDb2RlID09IEtFWV9SSUdIVF9BUlJPVykgXHJcbiAge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgJChnZXRBbmNlc3RvclRhZyhkb2N1bWVudC5hY3RpdmVFbGVtZW50LCAndGQnKSkubmV4dCgpLmZpbmQoJ2lucHV0JykuZm9jdXMoKTsgIFxyXG4gIH1cclxuICBlbHNlIGlmIChlLmtleUNvZGUgPT0gS0VZX0xFRlRfQVJST1cpIFxyXG4gIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICQoZ2V0QW5jZXN0b3JUYWcoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCwgJ3RkJykpLnByZXYoKS5maW5kKCdpbnB1dCcpLmZvY3VzKCk7ICBcclxuICB9ICAgIFxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXROZXh0RWxlbWVudElEKG5ld1Jvdylcclxue1xyXG4gIHZhciBpZCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuaWQ7ICBcclxuICBpZihpZC5pbmRleE9mKCdub2RlSW5wdXQnKSA+IC0xKVxyXG4gIHtcclxuICAgIHJldHVybiAnbm9kZUlucHV0JyArIG5ld1Jvdy5pZC5yZXBsYWNlKCdyb3dpZCcsJycpO1xyXG4gIH1cclxuICBlbHNlXHJcbiAge1xyXG4gICAgdmFyIGNsYXNzZXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmNsYXNzTmFtZS5zcGxpdCgnICcpO1xyXG5cclxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSsrKVxyXG4gICAge1xyXG4gICAgICB2YXIgYyA9IGNsYXNzZXNbaV07XHJcblxyXG4gICAgICBpZihjLmluZGV4T2YoJ2ZpZWxkSW5wdXQnKSA+IC0xICYmIGMgIT0gJ2ZpZWxkSW5wdXQnKVxyXG4gICAgICB7XHJcbiAgICAgICAgdmFyIGZpZWxkTmFtZSA9IGMucmVwbGFjZSgnZmllbGRJbnB1dCcsICcnKTtcclxuICAgICAgICByZXR1cm4gZmllbGROYW1lICsgbmV3Um93LmlkLnJlcGxhY2UoJ2RhdGFyb3dpZCcsJycpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSAgIFxyXG59XHJcblxyXG52YXIgZ2V0QW5jZXN0b3JUYWcgPSBmdW5jdGlvbiB1cFRvKGVsLCB0YWdOYW1lKSBcclxue1xyXG4gIHRhZ05hbWUgPSB0YWdOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gIHdoaWxlIChlbCAmJiBlbC5wYXJlbnROb2RlKSBcclxuICB7XHJcbiAgICBlbCA9IGVsLnBhcmVudE5vZGU7XHJcbiAgICBpZiAoZWwudGFnTmFtZSAmJiBlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT0gdGFnTmFtZSkgXHJcbiAgICB7XHJcbiAgICAgIHJldHVybiBlbDtcclxuICAgIH1cclxuICB9XHJcbn07IiwidmFyIERFRkFVTFRfTk9ERV9JTlBVVF9XSURUSCA9IDM5MDtcclxuXHJcbmZ1bmN0aW9uIGFkZFJvdyhub2RlKSAgICAgICAvL2FkZCBub2RlIGFuZCBkYXRhIGlucHV0IGZvciBlYWNoIGZpZWxkXHJcbntcclxuICB2YXIgbWFya3VwID0gJyc7XHJcbiAgdmFyIGRyYWdIYW5kbGUgPSAnPGRpdiBjbGFzcz1cInJlZGlwcy1kcmFnIHB1bGwtcmlnaHRcIj48aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tbW92ZVwiPjwvaT48L2Rpdj4nO1xyXG4gIHZhciBkZWxldGVCdXR0b24gPSAnPGEgaHJlZj1cIiNcIiBjbGFzcz1cInB1bGwtcmlnaHQgYnRuIGJ0bi1kYW5nZXIgYnRuLXhzIGRlbGV0ZS1idXR0b25cIiBvbmNsaWNrPVwiU3ByZWFkU2hlZXRWaWV3LmRlbGV0ZU5vZGUoJyArIG5vZGUuaWQgKyAnKVwiPjxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmVcIj48L2k+PC9hPic7XHJcbiAgdmFyIGNvcHlCdXR0b24gPSAnPGEgaHJlZj1cIiNcIiAgY2xhc3M9XCJwdWxsLXJpZ2h0IGJ0biBidG4taW5mbyBidG4teHMgY29weS1idXR0b25cIiBvbmNsaWNrPVwiU3ByZWFkU2hlZXRWaWV3LmNvcHlOb2RlKCcgKyBub2RlLmlkICsgJylcIj48aSBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tcGx1c1wiPjwvaT48L2E+JztcclxuICBcclxuICBtYXJrdXAgKz0gJzx0ciBpZD1cInJvd2lkJyArIG5vZGUuaWQgKyAnXCIgY2xhc3M9XCJub2RlUm93XCI+PHRkIGNsYXNzPVwicmVkaXBzLXJvd2hhbmRsZXIgY2VsbFwiPjxkaXYgaWQ9XCJub2RlQ29udGVudCcgKyBub2RlLmlkICsgJ1wiIGNsYXNzPVwibm9kZS1jb250YWluZXJcIj4nO1xyXG4gIG1hcmt1cCArPSBkZWxldGVCdXR0b24gKyBjb3B5QnV0dG9uICsgZHJhZ0hhbmRsZTtcclxuXHJcbiAgbWFya3VwICs9IGdldE5vZGVDb250ZW50TWFya3VwKG5vZGUpO1xyXG5cclxuICBpZihub2RlLmNoaWxkcmVuICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FkZCB0aGUgY2hpbGRyZW4gb2YgdGhpcyBub2RlIGJlbG93IHRoaXMgbm9kZSdzIHJvd1xyXG4gIHtcclxuICAgIGZvcih2YXIgaSBpbiBub2RlLmNoaWxkcmVuKVxyXG4gICAge1xyXG4gICAgICBtYXJrdXAgKz0gYWRkUm93KG5vZGUuY2hpbGRyZW5baV0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBtYXJrdXAgKz0gJzwvZGl2PjwvdGQ+PC90cj4nO1xyXG4gIHJldHVybiBtYXJrdXA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldE5vZGVDb250ZW50TWFya3VwKG5vZGUpXHJcbntcclxuICB2YXIgbWFya3VwID0gJyc7XHJcbiAgdmFyIGRlcHRoQWRqdXN0bWVudCA9IChub2RlLmRlcHRoLTEpICogMTA7XHJcbiAgXHJcbiAgaWYobm9kZS5jaGlsZHJlbiAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDApICAgICAgICAgICAvL2lmIGNoaWxkcmVuIGFyZSB2aXNpYmxlXHJcbiAge1xyXG4gICAgLy9oaWRlIGNoaWxkcmVuIGJ1dHRvblxyXG4gICAgbWFya3VwICs9ICc8YSBocmVmPVwiI1wiIGlkPVwiaWNvbicgKyBub2RlLmlkICsgJ1wiIHN0eWxlPVwibWFyZ2luLWxlZnQ6JyArIGRlcHRoQWRqdXN0bWVudCArICdweFwiIG9uY2xpY2s9XCJTcHJlYWRTaGVldFZpZXcudG9nZ2xlRXhwYW5kSWNvbignICsgbm9kZS5pZCArICcpXCIgY2xhc3M9XCJidG4gYnRuLXhzXCI+PHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93blwiPjwvc3Bhbj48L2E+JztcclxuICB9XHJcbiAgZWxzZSBpZihub2RlLl9jaGlsZHJlbiAmJiBub2RlLl9jaGlsZHJlbi5sZW5ndGggPiAwKSAgICAvL2lmIGNoaWxkcmVuIGFyZSBoaWRkZW5cclxuICB7XHJcbiAgICAvL3Nob3cgY2hpbGRyZW4gaWNvblxyXG4gICAgbWFya3VwICs9ICc8YSBocmVmPVwiI1wiIGlkPVwiaWNvbicgKyBub2RlLmlkICsgJ1wiIHN0eWxlPVwibWFyZ2luLWxlZnQ6JyArIGRlcHRoQWRqdXN0bWVudCArICdweFwiIG9uY2xpY2s9XCJTcHJlYWRTaGVldFZpZXcudG9nZ2xlRXhwYW5kSWNvbignICsgbm9kZS5pZCArICcpXCIgY2xhc3M9XCJidG4gYnRuLXhzXCI+PHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHRcIj48L3NwYW4+PC9hPic7XHJcbiAgfVxyXG4gIGVsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiBub2RlIGhhcyBubyBjaGlsZHJlbiAoaXMgYSBsZWFmKVxyXG4gIHtcclxuICAgIG1hcmt1cCArPSAnPGEgaHJlZj1cIiNcIiBpZD1cImljb24nICsgbm9kZS5pZCArICdcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0OicgKyAoZGVwdGhBZGp1c3RtZW50KzEyKSArICdweFwiIG9uY2xpY2s9XCJTcHJlYWRTaGVldFZpZXcudG9nZ2xlRXhwYW5kSWNvbignICsgbm9kZS5pZCArICcpXCIgY2xhc3M9XCJidG4gYnRuLXhzXCI+PHNwYW4+PC9zcGFuPjwvYT4nO1xyXG4gICAgZGVwdGhBZGp1c3RtZW50IC09IDEwO1xyXG4gIH0gXHJcbiAgXHJcbiAgbWFya3VwICs9ICc8aW5wdXQgaWQ9XCJub2RlSW5wdXQnICsgbm9kZS5pZCArICdcIiBjbGFzcz1cIm5vZGVUZXh0SW5wdXRcIiB0eXBlPVwidGV4dFwiIHZhbHVlPVwiJyArIG5vZGUubmFtZSArICdcIiBzdHlsZT1cIndpZHRoOicgKyAoREVGQVVMVF9OT0RFX0lOUFVUX1dJRFRILWRlcHRoQWRqdXN0bWVudCkgKyAncHhcIiBvbmlucHV0PVwiU3ByZWFkU2hlZXRWaWV3LnVwZGF0ZU5vZGVOYW1lKCcgKyBub2RlLmlkICsgJylcIi8+JzsgIFxyXG4gIHJldHVybiBtYXJrdXA7IFxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRGaWVsZE1lbnVNYXJrdXAoZmllbGROYW1lLCB4LCB5LCBmaWVsZHMpXHJcbntcclxuICB2YXIgZmllbGQgPSBUcmVlLmdldEZpZWxkKGZpZWxkTmFtZSk7XHJcbiAgXHJcbiAgdmFyIG1lbnUgPSBuZXcgTWVudSgpO1xyXG5cclxuICB2YXIgbnVtYmVySXRlbSA9IG5ldyBNZW51SXRlbSgnTnVtYmVyJywgRmllbGQuTlVNQkVSLCAnZGF0YXR5cGUnLCBmaWVsZCk7XHJcbiAgdmFyIGZvcm1hdEl0ZW0gPSBuZXcgTWVudUl0ZW0oJ0Zvcm1hdCcpO1xyXG4gIFxyXG4gIHZhciBudW1iZXJGb3JtYXRJdGVtID0gbmV3IE1lbnVJdGVtKCdOdW1iZXInLCBGaWVsZC5OVU1CRVJfRk9STUFULCAnZm9ybWF0JywgZmllbGQpO1xyXG4gIG51bWJlckZvcm1hdEl0ZW0uaXRlbXMucHVzaChuZXcgTWVudUl0ZW0oJzAnLCAwLCAncHJlY2lzaW9uJywgZmllbGQpKTtcclxuICB2YXIgZGlzcGxheVN0cmluZyA9ICcwLic7XHJcbiAgZm9yKHZhciBpID0gMTsgaSA8IDExOyBpKyspXHJcbiAge1xyXG4gICAgZGlzcGxheVN0cmluZyArPSAnMCc7XHJcbiAgICBudW1iZXJGb3JtYXRJdGVtLml0ZW1zLnB1c2gobmV3IE1lbnVJdGVtKGRpc3BsYXlTdHJpbmcsIGksICdwcmVjaXNpb24nLCBmaWVsZCkpO1xyXG4gIH1cclxuICBmb3JtYXRJdGVtLml0ZW1zLnB1c2gobnVtYmVyRm9ybWF0SXRlbSk7XHJcbiAgXHJcbiAgdmFyIHBlcmNlbnRGb3JtYXRJdGVtID0gbmV3IE1lbnVJdGVtKCdQZXJjZW50JywgRmllbGQuUEVSQ0VOVF9GT1JNQVQsICdmb3JtYXQnLCBmaWVsZCk7XHJcbiAgcGVyY2VudEZvcm1hdEl0ZW0uaXRlbXMucHVzaChuZXcgTWVudUl0ZW0oJzAnLCAwLCAncHJlY2lzaW9uJywgZmllbGQpKTtcclxuICB2YXIgZGlzcGxheVN0cmluZyA9ICcwLic7XHJcbiAgZm9yKHZhciBpID0gMTsgaSA8IDExOyBpKyspXHJcbiAge1xyXG4gICAgZGlzcGxheVN0cmluZyArPSAnMCc7XHJcbiAgICBwZXJjZW50Rm9ybWF0SXRlbS5pdGVtcy5wdXNoKG5ldyBNZW51SXRlbShkaXNwbGF5U3RyaW5nICsgJyUnLCBpLCAncHJlY2lzaW9uJywgZmllbGQpKTtcclxuICB9XHJcbiAgZm9ybWF0SXRlbS5pdGVtcy5wdXNoKHBlcmNlbnRGb3JtYXRJdGVtKTtcclxuICBcclxuICB2YXIgc2NpZW50aWZpY0Zvcm1hdEl0ZW0gPSBuZXcgTWVudUl0ZW0oJ1NjaWVudGlmaWMnLCBGaWVsZC5TQ0lFTlRJRklDX0ZPUk1BVCwgJ2Zvcm1hdCcsIGZpZWxkKTtcclxuICBzY2llbnRpZmljRm9ybWF0SXRlbS5pdGVtcy5wdXNoKG5ldyBNZW51SXRlbSgnMCcsIDAsICdwcmVjaXNpb24nLCBmaWVsZCkpO1xyXG4gIHZhciBkaXNwbGF5U3RyaW5nID0gJzAuJztcclxuICBmb3IodmFyIGkgPSAxOyBpIDwgMTE7IGkrKylcclxuICB7XHJcbiAgICBkaXNwbGF5U3RyaW5nICs9ICcwJztcclxuICAgIHNjaWVudGlmaWNGb3JtYXRJdGVtLml0ZW1zLnB1c2gobmV3IE1lbnVJdGVtKGRpc3BsYXlTdHJpbmcgKyAnZSswJywgaSwgJ3ByZWNpc2lvbicsIGZpZWxkKSk7XHJcbiAgfVxyXG4gIGZvcm1hdEl0ZW0uaXRlbXMucHVzaChzY2llbnRpZmljRm9ybWF0SXRlbSk7ICBcclxuICBcclxuICBudW1iZXJJdGVtLml0ZW1zLnB1c2goZm9ybWF0SXRlbSk7XHJcbiAgXHJcbiAgdmFyIGFnZ3JlZ2F0aW9uSXRlbSA9IG5ldyBNZW51SXRlbSgnQWdncmVnYXRpb24nKTtcclxuICBhZ2dyZWdhdGlvbkl0ZW0uaXRlbXMucHVzaChuZXcgTWVudUl0ZW0oJ05vIEFnZ3JlZ2F0aW9uJywgRmllbGQuTk9fQUdHUkVHQVRJT04sICdhZ2dfdHlwZScsIGZpZWxkKSk7XHJcbiAgXHJcbiAgdmFyIHN1bUFueUFnZ0l0ZW0gPSBuZXcgTWVudUl0ZW0oJ1N1bSBhbnkgZGVmaW5lZCBjaGlsZHJlbicsIEZpZWxkLlNVTV9BTllfQUdHUkVHQVRJT04sICdhZ2dfdHlwZScsIGZpZWxkKTtcclxuICBcclxuICBmb3IodmFyIGluZGV4IGluIGZpZWxkcylcclxuICB7XHJcbiAgICB2YXIgZiA9IGZpZWxkc1tpbmRleF07XHJcbiAgICBcclxuICAgIGlmKGYubmFtZSAhPSBmaWVsZC5uYW1lKVxyXG4gICAge1xyXG4gICAgICBzdW1BbnlBZ2dJdGVtLml0ZW1zLnB1c2gobmV3IE1lbnVJdGVtKGYubmFtZSwgZi5uYW1lLCAnYWdnX3F0eV9maWVsZCcsIGZpZWxkKSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIGFnZ3JlZ2F0aW9uSXRlbS5pdGVtcy5wdXNoKHN1bUFueUFnZ0l0ZW0pO1xyXG4gIG51bWJlckl0ZW0uaXRlbXMucHVzaChhZ2dyZWdhdGlvbkl0ZW0pO1xyXG4gIFxyXG4gIG1lbnUuaXRlbXMgPSBbXTtcclxuICBtZW51Lml0ZW1zLnB1c2gobnVtYmVySXRlbSk7XHJcbiAgbWVudS5pdGVtcy5wdXNoKG5ldyBNZW51SXRlbSgnVGV4dCcsIEZpZWxkLlNUUklORywgJ2RhdGF0eXBlJywgZmllbGQpKTtcclxuICAvL1RPRE86IG1lbnUuaXRlbXMucHVzaChuZXcgTWVudUl0ZW0oJ0Nob2ljZScsIEZpZWxkLkNIT0lDRSwgJ2RhdGF0eXBlJywgZmllbGQpKTtcclxuICBcclxuICB2YXIgbWFya3VwID0gJzxkaXYgaWQ9XCJmaWVsZE1lbnVcIiBzdHlsZT1cImxlZnQ6JyArIHggKyAncHg7dG9wOicgKyB5ICsgJ3B4O1wiPic7XHJcbiAgXHJcbiAgbWFya3VwICs9IGdlbmVyYXRlTWVudU1hcmt1cChtZW51KTtcclxuICBcclxuICBtYXJrdXAgKz0gJzwvZGl2Pic7XHJcbiAgcmV0dXJuIG1hcmt1cDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVNZW51TWFya3VwKG1lbnUpXHJcbntcclxuICB2YXIgbWFya3VwID0gJzx1bD4nO1xyXG4gIFxyXG4gIGZvcih2YXIgaSA9IDA7IGkgPCBtZW51Lml0ZW1zLmxlbmd0aDsgaSsrKVxyXG4gIHtcclxuICAgIHZhciBpdGVtID0gbWVudS5pdGVtc1tpXTtcclxuICAgIFxyXG4gICAgbWFya3VwICs9ICc8bGkgb25jbGljaz1cIk1lbnUuaGFuZGxlQ2xpY2soJyArIGl0ZW0uaWQgKyAnKTtcIj4nO1xyXG5cclxuICAgIHZhciBjaGVja01hcmtDbGFzcyA9ICd1bmNoZWNrZWRNZW51SXRlbSc7XHJcbiAgICBpZihpdGVtLmZpZWxkICYmIGl0ZW0uY2hlY2tlZClcclxuICAgIHtcclxuICAgICAgY2hlY2tNYXJrQ2xhc3MgPSAnY2hlY2tlZE1lbnVJdGVtJztcclxuICAgIH1cclxuICAgIFxyXG4gICAgbWFya3VwICs9ICc8aW1nIGlkPVwibWVudUl0ZW0nICsgaXRlbS5pZCArICdcIiBzcmM9XCInICsgQ0hFQ0tfTUFSS19JTUFHRV9QQVRIICsgJ1wiIGNsYXNzPVwiJyArIGNoZWNrTWFya0NsYXNzICsgJ1wiLz4nO1xyXG4gICAgbWFya3VwICs9IGl0ZW0uZGlzcGxheTtcclxuICAgIFxyXG4gICAgaWYoaXRlbS5pdGVtcyAmJiBpdGVtLml0ZW1zLmxlbmd0aCA+IDApXHJcbiAgICB7XHJcbiAgICAgIG1hcmt1cCArPSAnPGRpdiBjbGFzcz1cImFycm93UmlnaHRcIj48L2Rpdj4nO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKGl0ZW0uaXRlbXMgJiYgaXRlbS5pdGVtcy5sZW5ndGggPiAwKVxyXG4gICAge1xyXG4gICAgICBtYXJrdXAgKz0gZ2VuZXJhdGVNZW51TWFya3VwKGl0ZW0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBtYXJrdXAgKz0gJzwvbGk+JztcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIG1hcmt1cCArICc8L3VsPic7XHJcbn0iLCJ2YXIgTWVudSA9IGZ1bmN0aW9uKClcclxue1xyXG4gIHZhciBpdGVtcyA9IFtdO1xyXG4gIE1lbnUubWVudSA9IHRoaXM7XHJcbn07XHJcblxyXG5NZW51Lm1lbnU7XHJcblxyXG5NZW51LmhhbmRsZUNsaWNrID0gZnVuY3Rpb24oaWQpXHJcbntcclxuICB2YXIgY2xpY2tlZCA9IE1lbnUubWVudS5nZXRNZW51SXRlbShpZCwgTWVudS5tZW51KTtcclxuICB2YXIgcGFyZW50ID0gTWVudS5tZW51LmdldE1lbnVJdGVtUGFyZW50KGlkLCBNZW51Lm1lbnUpO1xyXG5cclxuICBpZihjbGlja2VkLmZpZWxkKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgdGhlIG1lbnUgaXRlbSBkb2Vzbid0IGhhdmUgYSBmaWVsZCB0aGVuIGlnbm9yZSBpdFxyXG4gIHtcclxuICAgIHZhciBmaWVsZCA9IFRyZWUuZ2V0RmllbGQoY2xpY2tlZC5maWVsZC5uYW1lKTtcclxuICAgIGZpZWxkW2NsaWNrZWQudmFyTmFtZV0gPSBjbGlja2VkLnZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2V0IHZhbHVlIGZvciB0aGUgZmllbGQgaW4gdGhlIG1vZGVsIGJhc2VkIG9uIHRoZSBjbGlja2VkIG1lbnUgaXRlbVxyXG4gIFxyXG4gICAgZm9yKHZhciBpIGluIHBhcmVudC5pdGVtcykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jbGVhciB0aGUgY2hlY2ttYXJrcyBmb3IgYWxsIGl0ZW0gb24gdGhlIHNhbWUgbWVudSBsZXZlbFxyXG4gICAge1xyXG4gICAgICAkKCcjbWVudUl0ZW0nICsgcGFyZW50Lml0ZW1zW2ldLmlkKS5yZW1vdmVDbGFzcygnY2hlY2tlZE1lbnVJdGVtJykuYWRkQ2xhc3MoJ3VuY2hlY2tlZE1lbnVJdGVtJyk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICAkKCcjbWVudUl0ZW0nICsgaWQpLnJlbW92ZUNsYXNzKCd1bmNoZWNrZWRNZW51SXRlbScpLmFkZENsYXNzKCdjaGVja2VkTWVudUl0ZW0nKTsgICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIHRoZSBpdGVtIHRoYXQgd2FzIGNsaWNrZWRcclxuICAgIFxyXG4gICAgaWYocGFyZW50ID09PSBNZW51Lm1lbnUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiB0aGlzIGlzIGEgdG9wIGxldmVsIG1lbnUgaXRlbSB0aGVuIHVwZGF0ZSB0aGUgZm9ybWF0dGluZywgc2luY2Ugd2Ugb25seSB3YW50IHRvIGRvIHRoaXMgb25jZSBwZXIgY2xpY2tcclxuICAgIHtcclxuICAgICAgU3ByZWFkU2hlZXRWaWV3LnVwZGF0ZUZpZWxkRm9ybWF0dGluZyhmaWVsZCk7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuTWVudS5wcm90b3R5cGUuZ2V0TWVudUl0ZW0gPSBmdW5jdGlvbihpZCwgbWVudUl0ZW0pXHJcbntcclxuICBpZihpZCA9PT0gbWVudUl0ZW0uaWQpXHJcbiAge1xyXG4gICAgcmV0dXJuIG1lbnVJdGVtO1xyXG4gIH1cclxuICBlbHNlIGlmKG1lbnVJdGVtLml0ZW1zICYmIG1lbnVJdGVtLml0ZW1zLmxlbmd0aCA+IDApXHJcbiAge1xyXG4gICAgdmFyIGZvdW5kO1xyXG4gICAgZm9yKHZhciBpID0gMDsgaSA8IG1lbnVJdGVtLml0ZW1zLmxlbmd0aDsgaSsrKVxyXG4gICAge1xyXG4gICAgICBmb3VuZCA9IHRoaXMuZ2V0TWVudUl0ZW0oaWQsIG1lbnVJdGVtLml0ZW1zW2ldKTtcclxuICAgICAgXHJcbiAgICAgIGlmKGZvdW5kKVxyXG4gICAgICB7XHJcbiAgICAgICAgcmV0dXJuIGZvdW5kO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBudWxsO1xyXG59O1xyXG5cclxuTWVudS5wcm90b3R5cGUuZ2V0TWVudUl0ZW1QYXJlbnQgPSBmdW5jdGlvbihpZCwgbWVudUl0ZW0pXHJcbntcclxuICBpZihtZW51SXRlbS5pdGVtcyAmJiBtZW51SXRlbS5pdGVtcy5sZW5ndGggPiAwKVxyXG4gIHtcclxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBtZW51SXRlbS5pdGVtcy5sZW5ndGg7IGkrKylcclxuICAgIHsgXHJcbiAgICAgIGlmKG1lbnVJdGVtLml0ZW1zW2ldLmlkID09PSBpZClcclxuICAgICAge1xyXG4gICAgICAgIHJldHVybiBtZW51SXRlbTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlXHJcbiAgICAgIHtcclxuICAgICAgICB2YXIgZm91bmQgPSB0aGlzLmdldE1lbnVJdGVtUGFyZW50KGlkLCBtZW51SXRlbS5pdGVtc1tpXSk7XHJcbiAgICAgICAgaWYoZm91bmQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcmV0dXJuIGZvdW5kO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbnVsbDtcclxufTsiLCJ2YXIgTWVudUl0ZW0gPSBmdW5jdGlvbihkaXNwbGF5LCB2YWx1ZSwgdmFyTmFtZSwgZmllbGQpXHJcbntcclxuICB0aGlzLmRpc3BsYXkgPSBkaXNwbGF5O1xyXG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICB0aGlzLnZhck5hbWUgPSB2YXJOYW1lO1xyXG4gIHRoaXMuZmllbGQgPSBmaWVsZDtcclxuICB0aGlzLml0ZW1zID0gW107XHJcbiAgdGhpcy5pZCA9IE1lbnVJdGVtLmlkKys7XHJcbiAgdGhpcy5wYXJlbnQgPSAtMTtcclxuXHJcbiAgaWYoZmllbGQpXHJcbiAge1xyXG4gICAgdGhpcy5jaGVja2VkID0gZmllbGRbdmFyTmFtZV0gPT09IHZhbHVlO1xyXG4gIH1cclxuICBlbHNlXHJcbiAge1xyXG4gICAgdGhpcy5jaGVja2VkID0gZmFsc2U7XHJcbiAgfVxyXG59O1xyXG5cclxuTWVudUl0ZW0uaWQgPSAwOyIsInZhciByZXNpemVDb2x1bW5MZWZ0ID0gMDtcclxudmFyIHJlc2l6ZUZpZWxkID0gJzAnO1xyXG52YXIgTUlOX0NPTFVNTl9XSURUSCA9IDcwO1xyXG52YXIgR1JJUFNfV0lEVEggPSAxNjtcclxuXHJcbnZhciBzdGFydFJlc2l6ZSA9IGZ1bmN0aW9uKGUsIGdyaXApXHJcbntcclxuICAkKGRvY3VtZW50KS5iaW5kKCd0b3VjaG1vdmUucmVzaXplQ29sR3JpcCBtb3VzZW1vdmUucmVzaXplQ29sR3JpcCcsIHJlc2l6ZURyYWcpLmJpbmQoJ3RvdWNoZW5kLnJlc2l6ZUNvbEdyaXAgbW91c2V1cC5yZXNpemVDb2xHcmlwJywgcmVzaXplRW5kKTtcclxuXHJcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc2l6ZUxpbmUnKS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNpemVMaW5lJykuc3R5bGUubGVmdCA9IGUucGFnZVggKyAncHgnO1xyXG5cclxuICByZXNpemVDb2x1bW5MZWZ0ID0gJChncmlwLnBhcmVudE5vZGUpLnBvc2l0aW9uKCkubGVmdDsgICAgICAgICAgICAgICAgICAgIC8vc2F2ZSB0aGUgbGVmdCBwb3NpdGlvbiBvZiB0aGUgY29sdW1uIGJlaW5nIHJlc2l6ZWRcclxuICByZXNpemVGaWVsZCA9IGdyaXAucGFyZW50Tm9kZS5pZC5yZXBsYWNlKCdjb2xIZWFkZXInLCAnJyk7ICAgICAgICAgICAgICAgIC8vc2F2ZSB0aGUgZmllbGQgb2YgdGhlIGNvbHVtbiBiZWluZyByZXNpemVkXHJcbn07XHJcblxyXG52YXIgcmVzaXplRW5kID0gZnVuY3Rpb24oZSlcclxue1xyXG4gICQoZG9jdW1lbnQpLnVuYmluZCgndG91Y2htb3ZlLnJlc2l6ZUNvbEdyaXAgbW91c2Vtb3ZlLnJlc2l6ZUNvbEdyaXAnLCByZXNpemVEcmFnKS51bmJpbmQoJ3RvdWNoZW5kLnJlc2l6ZUNvbEdyaXAgbW91c2V1cC5yZXNpemVDb2xHcmlwJywgcmVzaXplRW5kKTtcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzaXplTGluZScpLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcclxuXHJcbiAgdmFyIG5ld1dpZHRoID0gZS5wYWdlWCAtIHJlc2l6ZUNvbHVtbkxlZnQgLSBHUklQU19XSURUSDtcclxuXHJcbiAgaWYobmV3V2lkdGggPCBNSU5fQ09MVU1OX1dJRFRIKVxyXG4gIHtcclxuICAgIG5ld1dpZHRoID0gTUlOX0NPTFVNTl9XSURUSDtcclxuICB9XHJcblxyXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb2xIZWFkZXJJbnB1dCcgKyByZXNpemVGaWVsZCkuc3R5bGUud2lkdGggPSBuZXdXaWR0aCArICdweCc7ICAgIC8vcmVzaXplIHRoZSB3aWR0aCBvZiB0aGUgY29sdW1uIGhlYWRlclxyXG5cclxuICAvL3Jlc2l6ZSB0aGUgd2lkdGggb2YgZXZlcnkgY2VsbCBpbiB0aGUgY29sdW1uXHJcbiAgdmFyIGNvbHVtbkNlbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZpZWxkSW5wdXQnICsgcmVzaXplRmllbGQpO1xyXG5cclxuICBmb3IodmFyIGkgPSAwOyBpIDwgY29sdW1uQ2VsbHMubGVuZ3RoOyBpKyspXHJcbiAge1xyXG4gICAgY29sdW1uQ2VsbHNbaV0uc3R5bGUud2lkdGggPSAobmV3V2lkdGggKyA4KSArICdweCc7XHJcbiAgfVxyXG59O1xyXG5cclxudmFyIHJlc2l6ZURyYWcgPSBmdW5jdGlvbihlKVxyXG57XHJcbiAgaWYoZS5wYWdlWCA+IHJlc2l6ZUNvbHVtbkxlZnQgKyBNSU5fQ09MVU1OX1dJRFRIICsgR1JJUFNfV0lEVEgpXHJcbiAge1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc2l6ZUxpbmUnKS5zdHlsZS5sZWZ0ID0gZS5wYWdlWCArICdweCc7ICAgICAgLy9tb3ZlIHRoZSByZXNpemUgbGluZSBhcyB0aGUgdXNlciBkcmFncyBpdFxyXG4gIH1cclxufTsiLCJmdW5jdGlvbiBUcmVlKCkge31cclxuXHJcblRyZWUudHJlZSA9IG51bGw7XHJcblxyXG5UcmVlLmdldFRyZWUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIFRyZWUudHJlZTsgfTtcclxuVHJlZS5zZXRUcmVlID0gZnVuY3Rpb24odCkgeyBUcmVlLnRyZWUgPSB0OyB9O1xyXG5cclxuVHJlZS5nZXRGaWVsZHMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIFRyZWUudHJlZS5maWVsZHM7IH07XHJcblxyXG5UcmVlLmdldEZpZWxkID0gZnVuY3Rpb24obmFtZSlcclxue1xyXG4gIGZvcih2YXIgaSBpbiBUcmVlLnRyZWUuZmllbGRzKVxyXG4gIHtcclxuICAgIHZhciBmaWVsZCA9IFRyZWUudHJlZS5maWVsZHNbaV07XHJcbiAgICBpZihmaWVsZC5uYW1lID09PSBuYW1lKVxyXG4gICAge1xyXG4gICAgICByZXR1cm4gZmllbGQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5UcmVlLnJlbW92ZU5vZGUgPSBmdW5jdGlvbihub2RlKVxyXG57XHJcbiAgdmFyIHBhcmVudE5vZGUgPSBUcmVlLmZpbmRQYXJlbnQobm9kZS5pZCk7XHJcblxyXG4gIGlmKHBhcmVudE5vZGUpXHJcbiAge1xyXG4gICAgcGFyZW50Tm9kZS5jaGlsZHJlbi5zcGxpY2UocGFyZW50Tm9kZS5jaGlsZHJlbi5pbmRleE9mKG5vZGUpLCAxKTtcclxuICB9XHJcbiAgZWxzZVxyXG4gIHtcclxuICAgIFRyZWUudHJlZS5jaGlsZHJlbi5zcGxpY2UoVHJlZS50cmVlLmNoaWxkcmVuLmluZGV4T2Yobm9kZSksIDEpOyAgXHJcbiAgfVxyXG59O1xyXG5cclxuVHJlZS5hZGROb2RlID0gZnVuY3Rpb24obm9kZSwgcGFyZW50Tm9kZSlcclxue1xyXG4gIHBhcmVudE5vZGUuY2hpbGRyZW4ucHVzaChub2RlKTsgICAgICAgICAvL2FkZCB0aGUgbW92ZWQgbm9kZSB0byBpdCdzIG5ldyBwYXJlbnQgaW4gdGhlIG1vZGVsXHJcbiAgVHJlZS5zZXREZXB0aHMocGFyZW50Tm9kZSk7ICAgICAgICAgLy9zZXQgdGhlIG5ldyBkZXB0aCB2YWx1ZXMgZm9yIHRoZSBtb3ZlZCBub2RlcyAgICBcclxufTtcclxuXHJcblRyZWUuaW5zZXJ0Tm9kZSA9IGZ1bmN0aW9uKG5vZGUsIHNvdXJjZU5vZGUpXHJcbntcclxuICB2YXIgcGFyZW50Tm9kZSA9IFRyZWUuZmluZFBhcmVudChzb3VyY2VOb2RlLmlkKTtcclxuICBpZihwYXJlbnROb2RlKVxyXG4gIHtcclxuICAgIHBhcmVudE5vZGUuY2hpbGRyZW4uc3BsaWNlKHBhcmVudE5vZGUuY2hpbGRyZW4uaW5kZXhPZihzb3VyY2VOb2RlKSwgMCwgbm9kZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgfVxyXG4gIGVsc2VcclxuICB7XHJcbiAgICBUcmVlLnRyZWUuY2hpbGRyZW4uc3BsaWNlKFRyZWUudHJlZS5jaGlsZHJlbi5pbmRleE9mKHNvdXJjZU5vZGUpLCAwLCBub2RlKTtcclxuICB9ICAgXHJcbn07XHJcblxyXG5UcmVlLmNsb25lTm9kZSA9IGZ1bmN0aW9uKHNvdXJjZU5vZGUpXHJcbntcclxuICB2YXIgbmV3Tm9kZSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBzb3VyY2VOb2RlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jbG9uZSB0aGUgc291cmNlIG5vZGVcclxuICBUcmVlLmFzc2lnbk5ld05vZGVJRHMobmV3Tm9kZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2Fzc2lnbiB1bmlxdWUgaWRzIHRvIGVhY2ggbm9kZSBpbiB0aGUgY2xvbmVcclxuICByZXR1cm4gbmV3Tm9kZTsgIFxyXG59O1xyXG5cclxuVHJlZS5hc3NpZ25OZXdOb2RlSURzID0gZnVuY3Rpb24obm9kZSlcclxue1xyXG4gIG5vZGUuaWQgPSBUcmVlLnRyZWUubmV4dE5vZGVJRCsrO1xyXG4gIFxyXG4gIGZvcih2YXIgaSBpbiBub2RlLmNoaWxkcmVuKVxyXG4gIHtcclxuICAgIFRyZWUuYXNzaWduTmV3Tm9kZUlEcyhub2RlLmNoaWxkcmVuW2ldKTtcclxuICB9XHJcbn07XHJcblxyXG5UcmVlLmV4cGFuZE5vZGUgPSBmdW5jdGlvbihub2RlKVxyXG57XHJcbiAgbm9kZS5jaGlsZHJlbiA9IG5vZGUuX2NoaWxkcmVuO1xyXG4gIG5vZGUuX2NoaWxkcmVuID0gW107XHJcbn07XHJcblxyXG5UcmVlLmNvbGxhcHNlTm9kZSA9IGZ1bmN0aW9uKG5vZGUpXHJcbntcclxuICBub2RlLl9jaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XHJcbiAgbm9kZS5jaGlsZHJlbiA9IFtdOyAgXHJcbn07XHJcblxyXG5UcmVlLmlzTm9kZUNoaWxkbGVzcyA9IGZ1bmN0aW9uKG5vZGUpXHJcbntcclxuICByZXR1cm4gKCFub2RlLmNoaWxkcmVuIHx8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSAmJiAoIW5vZGUuX2NoaWxkcmVuIHx8IG5vZGUuX2NoaWxkcmVuLmxlbmd0aCA9PT0gMCk7XHJcbn07XHJcblxyXG5UcmVlLmlzTm9kZUNvbGxhcHNlZCA9IGZ1bmN0aW9uKG5vZGUpXHJcbntcclxuICByZXR1cm4gbm9kZS5fY2hpbGRyZW4gJiYgbm9kZS5fY2hpbGRyZW4ubGVuZ3RoID4gMDtcclxufTtcclxuXHJcblRyZWUuaXNOb2RlRXhwYW5kZWQgPSBmdW5jdGlvbihub2RlKVxyXG57XHJcbiAgcmV0dXJuIG5vZGUuY2hpbGRyZW4gJiYgbm9kZS5jaGlsZHJlbi5sZW5ndGggPiAwOyAgXHJcbn07XHJcblxyXG5UcmVlLnNldERlcHRocyA9IGZ1bmN0aW9uKG5vZGUpXHJcbntcclxuICBmb3IodmFyIGkgaW4gbm9kZS5jaGlsZHJlbilcclxuICB7XHJcbiAgICBub2RlLmNoaWxkcmVuW2ldLmRlcHRoID0gbm9kZS5kZXB0aCArIDE7XHJcbiAgICBUcmVlLnNldERlcHRocyhub2RlLmNoaWxkcmVuW2ldKTtcclxuICB9XHJcbn07XHJcblxyXG5UcmVlLmZpbmROb2RlID0gZnVuY3Rpb24obm9kZUlELCBub2RlKVxyXG57XHJcbiAgaWYoIW5vZGUpIHsgbm9kZSA9IFRyZWUudHJlZTsgfVxyXG4gIFxyXG4gIGlmKG5vZGUuaWQgPT09IG5vZGVJRClcclxuICB7XHJcbiAgICByZXR1cm4gbm9kZTtcclxuICB9XHJcbiAgZWxzZVxyXG4gIHtcclxuICAgIGZvcih2YXIgaSBpbiBub2RlLmNoaWxkcmVuKVxyXG4gICAge1xyXG4gICAgICB2YXIgZm91bmROb2RlID0gVHJlZS5maW5kTm9kZShub2RlSUQsIG5vZGUuY2hpbGRyZW5baV0pO1xyXG5cclxuICAgICAgaWYoZm91bmROb2RlKSB7IHJldHVybiBmb3VuZE5vZGU7IH1cclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG5UcmVlLmZpbmRQYXJlbnQgPSBmdW5jdGlvbihub2RlSUQsIG5vZGUsIHBhcmVudClcclxue1xyXG4gIGlmKCFub2RlKSB7IG5vZGUgPSBUcmVlLnRyZWU7IH1cclxuICBcclxuICBpZihub2RlLmlkID09PSBub2RlSUQpXHJcbiAge1xyXG4gICAgcmV0dXJuIHBhcmVudDtcclxuICB9XHJcbiAgZWxzZVxyXG4gIHtcclxuICAgIGZvcih2YXIgaSBpbiBub2RlLmNoaWxkcmVuKVxyXG4gICAge1xyXG4gICAgICB2YXIgZm91bmRQYXJlbnQgPSBUcmVlLmZpbmRQYXJlbnQobm9kZUlELCBub2RlLmNoaWxkcmVuW2ldLCBub2RlKTtcclxuXHJcbiAgICAgIGlmKGZvdW5kUGFyZW50KSB7IHJldHVybiBmb3VuZFBhcmVudDsgfVxyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcblRyZWUudXBkYXRlTm9kZVZhbHVlID0gZnVuY3Rpb24obm9kZUlELCBmaWVsZCwgdmFsdWUpXHJcbntcclxuICB2YXIgbm9kZSA9IFRyZWUuZmluZE5vZGUobm9kZUlELCBUcmVlLnRyZWUpO1xyXG5cclxuICBpZihub2RlKVxyXG4gIHtcclxuICAgIGlmKCFub2RlLnZhbHVlcykgeyBub2RlLnZhbHVlcyA9IHt9OyB9XHJcbiAgICBub2RlLnZhbHVlc1tmaWVsZF0gPSB2YWx1ZTsgICAgIFxyXG4gIH1cclxufTtcclxuXHJcblRyZWUudHJhdmVyc2UgPSBmdW5jdGlvbihjaGlsZHJlbkZuLCB2aXNpdEZuLCBwYXJlbnQpIFxyXG57XHJcbiAgaWYgKCFwYXJlbnQpIHsgcGFyZW50ID0gVHJlZS50cmVlOyB9XHJcblxyXG4gIHZpc2l0Rm4ocGFyZW50KTtcclxuICBcclxuICB2YXIgY2hpbGRyZW4gPSBjaGlsZHJlbkZuKHBhcmVudCk7XHJcbiAgZm9yICh2YXIgaSBpbiBjaGlsZHJlbikgXHJcbiAge1xyXG4gICAgVHJlZS50cmF2ZXJzZShjaGlsZHJlbkZuLCB2aXNpdEZuLCBjaGlsZHJlbltpXSk7XHJcbiAgfVxyXG59O1xyXG5cclxuVHJlZS50cmF2ZXJzZURlc2NlbmRhbnRzID0gZnVuY3Rpb24oY2hpbGRyZW5GbiwgdmlzaXRGbiwgcGFyZW50KVxyXG57XHJcbiAgaWYoIXBhcmVudCkgeyBwYXJlbnQgPSBUcmVlLnRyZWU7IH1cclxuICBcclxuICBmb3IodmFyIGkgaW4gcGFyZW50LmNoaWxkcmVuKVxyXG4gIHtcclxuICAgIFRyZWUudHJhdmVyc2UoY2hpbGRyZW5GbiwgdmlzaXRGbiwgcGFyZW50LmNoaWxkcmVuW2ldKTtcclxuICB9XHJcbn07XHJcblxyXG5UcmVlLmdldENoaWxkcmVuID0gZnVuY3Rpb24obm9kZSlcclxue1xyXG4gIHJldHVybiBub2RlLmNoaWxkcmVuICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCA/IG5vZGUuY2hpbGRyZW4gOiBudWxsO1xyXG59OyIsInZhciBwcm9qZWN0ID1cclxue1xyXG4gIHNhdmVUb0RhdGFiYXNlOiBmdW5jdGlvbigpXHJcbiAge1xyXG4gICAgJC5hamF4KHsgdHlwZTogJ1BPU1QnLCB1cmw6ICcvYXBpL3RyZWUnLCBkYXRhVHlwZTogJ2pzb24nLCBkYXRhOiB7IGpzb246IEpTT04uc3RyaW5naWZ5KFRyZWUuZ2V0VHJlZSgpKSB9IH0pO1xyXG4gICAgLy9UT0RPOiByZXBsYWNlIHdpdGggLT4gJC5hamF4KHsgdHlwZTogJ1BPU1QnLCB1cmw6ICcvYXBpL3RyZWUnLCBkYXRhVHlwZTogJ2pzb24nLCBkYXRhOiB7IGpzb246IEpTT04uc3RyaW5naWZ5KHByb2plY3QuZGF0YSkgfSB9KTtcclxuICB9LFxyXG4gIGZpZWxkczogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgIHJldHVybiB0aGlzLmRhdGEuZmllbGRzO1xyXG4gIH0sXHJcbiAgY2xlYW5zZURhdGE6IGZ1bmN0aW9uKClcclxuICB7XHJcbiAgICBUcmVlLnRyYXZlcnNlKFRyZWUuZ2V0Q2hpbGRyZW4sIGZ1bmN0aW9uKG5vZGUpXHJcbiAgICB7XHJcbiAgICAgIGlmKCFub2RlLmNoaWxkcmVuKSB7IG5vZGUuY2hpbGRyZW4gPSBbXTsgfVxyXG4gICAgICBkZWxldGUgbm9kZS5wYXJlbnQ7XHJcbiAgICB9KTsgICAgXHJcbiAgfSxcclxuICBhZGRGaWVsZDogZnVuY3Rpb24oZmllbGROYW1lKVxyXG4gIHtcclxuICAgIHRoaXMuZGF0YS5maWVsZHMucHVzaChuZXcgRmllbGQoZmllbGROYW1lKSk7XHJcbiAgfSAgICBcclxufTsiLCJ2YXIgcHJvamVjdHMgPVxyXG57XHJcbiAgaW5pdDogZnVuY3Rpb24oZmluaXNoRm4pXHJcbiAgeyAgXHRcclxuICAgICQuYWpheCh7IHR5cGU6ICdHRVQnLCB1cmw6ICdhcGkvcHJvamVjdHMnfSkuZG9uZShmdW5jdGlvbihkYXRhKSAgIC8vcmVhZCBwcm9qZWN0cyBmcm9tIHRoZSBzZXJ2ZXJcclxuICAgIHsgXHJcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgIGZpbmlzaEZuKGRhdGEucHJvamVjdHMpO1xyXG4gICAgfSk7ICAgICBcclxuICB9LFxyXG4gIGNyZWF0ZU5ld1Byb2plY3Q6IGZ1bmN0aW9uKG5ld1Byb2plY3ROYW1lKVxyXG4gIHtcclxuICBcdCQuYWpheCh7IHR5cGU6ICdQT1NUJywgdXJsOiAnL2FwaS9hZGRQcm9qZWN0P3Byb2plY3ROYW1lPScgKyBuZXdQcm9qZWN0TmFtZSB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHRoZSBuZXcgcHJvamVjdCB0byB0aGUgcHJvamVjdHMgZG9jdW1lbnQgaW4gdGhlIGRhdGFiYXNlXHJcbiAgXHRcclxuICAgIHByb2plY3QuZGF0YSA9IHsgXCJwcm9qZWN0SURcIjogcHJvamVjdC5uZXh0UHJvamVjdElELCBcInByb2plY3ROYW1lXCI6IG5ld1Byb2plY3ROYW1lLCBcIm5hbWVcIjogbmV3UHJvamVjdE5hbWUsIFwidmVyc2lvblwiOiAxLCBcIm5leHROb2RlSURcIjogMiwgXCJkZXB0aFwiOiAwLCBcImZpZWxkc1wiOiBbXSwgXCJjaGlsZHJlblwiOiBbeyBcImlkXCI6IDEsIFwibmFtZVwiOiBuZXdQcm9qZWN0TmFtZSwgXCJkZXB0aFwiOiAxLCBcImNoaWxkcmVuXCI6IFtdIH1dIH07XHJcbiAgXHRwcm9qZWN0LnNhdmVUb0RhdGFiYXNlKCk7XHJcbiAgICBUcmVlLnNldFRyZWUocHJvamVjdC5kYXRhKTsgICAgLy9UT0RPOiByZW1vdmUgICAgXHJcbiAgfSxcclxuICBvcGVuUHJvamVjdDogZnVuY3Rpb24ocHJvamVjdElELCBmaW5pc2hGbilcclxuICB7XHJcbiAgICAkLmFqYXgoeyB0eXBlOiAnR0VUJywgdXJsOiAnYXBpL3RyZWU/cHJvamVjdElEPScgKyBwcm9qZWN0SUQgfSkuZG9uZShmdW5jdGlvbihkYXRhKSAgICAgICAgICAgICAgIC8vcmVhZCB0cmVlIGZvciB0aGUgc2VsZWN0ZWQgcHJvamVjdCBmcm9tIHRoZSBkYXRhYmFzZVxyXG4gICAge1xyXG4gICAgICBUcmVlLnNldFRyZWUoZGF0YSk7ICAgLy9UT0RPOiByZW1vdmVcclxuICAgICAgZmluaXNoRm4oZGF0YSk7XHJcbiAgICB9KTsgICAgIFxyXG4gIH0gXHJcbn07IiwidmFyIGhtcyA9IFxyXG57XHJcbiAgaW5pdDogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgIHByb2plY3RzLmluaXQoZnVuY3Rpb24ocHJvamVjdHMpIHsgaGVhZGVyVmlldy5yZW5kZXIocHJvamVjdHMpOyB9KTsgICBcclxuICB9LFxyXG4gIG9wZW5Qcm9qZWN0OiBmdW5jdGlvbihwcm9qZWN0SUQpXHJcbiAge1xyXG4gICAgcHJvamVjdHMub3BlblByb2plY3QocHJvamVjdElELCBmdW5jdGlvbihkYXRhKVxyXG4gICAge1xyXG4gICAgICBwcm9qZWN0LmRhdGEgPSBkYXRhO1xyXG4gICAgICBzcHJlYWRTaGVldC5kaXNwbGF5KCk7ICAgICAgXHJcbiAgICB9KTtcclxuICAgIGlmKHRoaXMudmlldykgeyB0aGlzLnZpZXcuZGVzdHJveSgpOyB9XHJcbiAgICB0aGlzLnZpZXcgPSBzcHJlYWRTaGVldFZpZXc7ICAgICAgIFxyXG4gIH0sXHJcbiAgc2F2ZVRvRGF0YWJhc2U6IGZ1bmN0aW9uKCkgeyBwcm9qZWN0LnNhdmVUb0RhdGFiYXNlKCk7IH0sXHJcbiAgc3dpdGNoVmlldzogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgIGlmKHRoaXMudmlldyA9PT0gc3ByZWFkU2hlZXRWaWV3KVxyXG4gICAge1xyXG4gICAgICB0aGlzLnZpZXcuZGVzdHJveSgpO1xyXG4gICAgICB0aGlzLnZpZXcgPSB0cmVlVmlldztcclxuICAgICAgLy90cmVlLmRpc3BsYXkoKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYodGhpcy52aWV3ID09PSB0cmVlVmlldylcclxuICAgIHtcclxuICAgICAgdGhpcy52aWV3LmRlc3Ryb3koKTtcclxuICAgICAgdGhpcy52aWV3ID0gc3ByZWFkU2hlZXRWaWV3O1xyXG4gICAgICBzcHJlYWRTaGVldC5kaXNwbGF5KCk7ICAgICAgXHJcbiAgICB9XHJcbiAgfSxcclxuICBjcmVhdGVOZXdQcm9qZWN0OiBmdW5jdGlvbihuZXdQcm9qZWN0TmFtZSlcclxuICB7ICBcdFxyXG4gICAgcHJvamVjdHMuY3JlYXRlTmV3UHJvamVjdChuZXdQcm9qZWN0TmFtZSk7XHJcbiAgXHRcclxuICAgIHRoaXMudmlldy5kZXN0cm95KCk7XHJcbiAgICB0aGlzLnZpZXcgPSBzcHJlYWRTaGVldFZpZXc7XHJcbiAgICBzcHJlYWRTaGVldC5kaXNwbGF5KCk7ICAgICAgXHJcbiAgfSxcclxuICBuZXh0UHJvamVjdElEOiBmdW5jdGlvbigpXHJcbiAge1xyXG4gICAgcmV0dXJuIHByb2plY3RzLm5leHRQcm9qZWN0SUQrKztcclxuICB9XHJcbn07IiwidmFyIHNwcmVhZFNoZWV0ID0gXHJcbntcclxuICBkaXNwbGF5OiBmdW5jdGlvbigpXHJcbiAge1xyXG4gICAgcHJvamVjdC5jbGVhbnNlRGF0YSgpOyAgICAgICAgICAgICAgICAgIC8vcmVxdWlyZWQgdG8gcmVtb3ZlIGNpcmN1bGFyIHJlZmVyZW5jZXMgdGhhdCBvdGhlciB2aWV3cyBtYXkgYWRkXHJcbiAgICBzcHJlYWRTaGVldFZpZXcucmVuZGVyKHByb2plY3QuZGF0YSk7XHJcbiAgfSxcclxuICBmaWVsZHM6IGZ1bmN0aW9uKClcclxuICB7XHJcbiAgICByZXR1cm4gcHJvamVjdC5maWVsZHMoKTtcclxuICB9LFxyXG4gIHVwZGF0ZUZpZWxkVmFsdWU6IGZ1bmN0aW9uKGZpZWxkTmFtZSwgbm9kZUlEKVxyXG4gIHtcclxuICAgIFRyZWUudXBkYXRlTm9kZVZhbHVlKHBhcnNlSW50KG5vZGVJRCksIGZpZWxkTmFtZSwgJCgnIycgKyBmaWVsZE5hbWUgKyBub2RlSUQpLnZhbCgpKTtcclxuICBcclxuICAgIC8vVE9ETzogc2hvdWxkIHBlcmZvcm0gdGhlIGFnZ3JlZ2F0aW9uIGJhc2VkIG9uIHRoZSBmaWVsZCBzZXR0aW5ncyBmb3IgYWdncmVnYXRpbmdcclxuICAgIGZvcih2YXIgaSBpbiBUcmVlLmdldFRyZWUoKS5jaGlsZHJlbilcclxuICAgIHtcclxuICAgICAgYWdncmVnYXRlX2FueShUcmVlLmdldFRyZWUoKS5jaGlsZHJlbltpXSwgZmllbGROYW1lKTtcclxuICAgIH0gICAgIFxyXG4gIH0sXHJcbiAgcmF3VmFsdWU6IGZ1bmN0aW9uKGZpZWxkTmFtZSwgbm9kZUlEKVxyXG4gIHtcclxuICAgIHZhciBmaWVsZCA9IFRyZWUuZ2V0RmllbGQoZmllbGROYW1lKTtcclxuICAgIHZhciBub2RlID0gVHJlZS5maW5kTm9kZShwYXJzZUludChub2RlSUQpKTtcclxuICAgIFxyXG4gICAgaWYobm9kZS52YWx1ZXMgJiYgbm9kZS52YWx1ZXNbZmllbGQubmFtZV0pXHJcbiAgICB7XHJcbiAgICAgIHJldHVybiBub2RlLnZhbHVlc1tmaWVsZC5uYW1lXTtcclxuICAgIH0gIFxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9ICAgIFxyXG4gIH0sXHJcbiAgZm9ybWF0dGVkVmFsdWU6IGZ1bmN0aW9uKGZpZWxkLCBub2RlKVxyXG4gIHtcclxuICAgIGlmKG5vZGUudmFsdWVzICYmIG5vZGUudmFsdWVzW2ZpZWxkLm5hbWVdKVxyXG4gICAge1xyXG4gICAgICByZXR1cm4gRmllbGQuZm9ybWF0VmFsdWUoZmllbGQsIG5vZGUudmFsdWVzW2ZpZWxkLm5hbWVdKTtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgIHtcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgfSAgICBcclxuICB9LFxyXG4gIGFkZEZpZWxkOiBmdW5jdGlvbihmaWVsZE5hbWUpXHJcbiAge1xyXG4gICAgcHJvamVjdC5hZGRGaWVsZChmaWVsZE5hbWUpO1xyXG4gICAgc3ByZWFkU2hlZXRWaWV3LmFkZEZpZWxkKGZpZWxkTmFtZSk7XHJcbiAgfSxcclxuICBoYXNDaGlsZHJlbjogZnVuY3Rpb24obm9kZSlcclxuICB7XHJcbiAgICByZXR1cm4gKG5vZGUuY2hpbGRyZW4gJiYgbm9kZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB8fCAobm9kZS5fY2hpbGRyZW4gJiYgbm9kZS5fY2hpbGRyZW4ubGVuZ3RoID4gMCk7XHJcbiAgfSxcclxuICBjaGlsZHJlbkhpZGRlbjogZnVuY3Rpb24obm9kZSlcclxuICB7XHJcbiAgICByZXR1cm4gbm9kZS5fY2hpbGRyZW4gJiYgbm9kZS5fY2hpbGRyZW4ubGVuZ3RoID4gMDtcclxuICB9XHJcbn07IiwidmFyIGhlYWRlclZpZXcgPSBcclxue1xyXG4gIHJlbmRlcjogZnVuY3Rpb24ocHJvamVjdHMpXHJcbiAge1xyXG4gICAgdmFyIG1hcmt1cCA9ICc8c2VsZWN0IGlkPVwicHJvamVjdFNlbGVjdG9yXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj4nICtcclxuICAgICc8b3B0aW9uIGlkPVwic2VsZWN0UHJvamVjdE9wdGlvblwiIHZhbHVlPVwiMFwiPlNlbGVjdCBQcm9qZWN0Li4uPC9vcHRpb24+JztcclxuICBcclxuICAgIHByb2plY3RzLmZvckVhY2goZnVuY3Rpb24ocHJvamVjdClcclxuICAgIHtcclxuICAgICAgbWFya3VwICs9ICc8b3B0aW9uIHZhbHVlPVwiJyArIHByb2plY3QuaWQgKyAnXCI+JyArIHByb2plY3QubmFtZSArICc8L29wdGlvbj4nO1xyXG4gICAgfSk7XHJcbiAgXHJcbiAgICBtYXJrdXAgKz0gJzxvcHRpb24gaWQ9XCJuZXdQcm9qZWN0T3B0aW9uXCIgdmFsdWU9XCItMVwiPkNyZWF0ZSBOZXcgUHJvamVjdC4uLjwvb3B0aW9uPjwvc2VsZWN0PidcclxuICAgICsgJzxpbnB1dCBpZD1cImVkaXROZXdQcm9qZWN0TmFtZUlucHV0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj48L2lucHV0PidcclxuICAgICsgJzxhIGhyZWY9XCIjXCIgaWQ9XCJzYXZlLWRhdGFiYXNlLWJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCI+U2F2ZSB0byBEYXRhYmFzZTwvYT4nXHJcbiAgICArICc8YSBocmVmPVwiI1wiIGlkPVwic3dpdGNoVmlld0J1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCI+U3dpdGNoIFZpZXc8L2E+JztcclxuICAgIC8vbWFya3VwICs9ICc8YSBocmVmPVwiI1wiIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCIgaWQ9XCJzYXZlLWZpbGUtYnV0dG9uXCIgb25jbGljaz1cInNhdmVMb2NhbGx5KClcIj5TYXZlIGFzIEZpbGU8L2E+JzsgICAgXHJcbiAgICBcclxuICAgICQoJyNoZWFkZXInKS5odG1sKG1hcmt1cCk7XHJcbiAgICBcclxuICAgIC8vZXZlbnQgaGFuZGxlcnNcclxuICAgICQoJyNwcm9qZWN0U2VsZWN0b3InKS5jaGFuZ2UoZnVuY3Rpb24oKSB7IGhlYWRlclZpZXcuc2VsZWN0UHJvamVjdCgkKHRoaXMpKTsgfSk7XHJcbiAgICAkKCcjc2F2ZS1kYXRhYmFzZS1idXR0b24nKS5jbGljayhmdW5jdGlvbigpIHsgaG1zLnNhdmVUb0RhdGFiYXNlKCk7IH0pO1xyXG4gICAgJCgnI3N3aXRjaFZpZXdCdXR0b24nKS5jbGljayhmdW5jdGlvbigpIHsgaG1zLnN3aXRjaFZpZXcoKTsgfSk7XHJcbiAgICAkKCcjZWRpdE5ld1Byb2plY3ROYW1lSW5wdXQnKS5rZXl1cChmdW5jdGlvbihlKSB7IGhlYWRlclZpZXcuY3JlYXRlTmV3UHJvamVjdChlKTsgfSk7XHJcbiAgfSxcclxuICBzZWxlY3RQcm9qZWN0OiBmdW5jdGlvbihwcm9qZWN0U2VsZWN0b3IpXHJcbiAge1xyXG4gICAgaWYocHJvamVjdFNlbGVjdG9yLmZpbmQoXCI6c2VsZWN0ZWRcIikuYXR0cignaWQnKSA9PT0gXCJuZXdQcm9qZWN0T3B0aW9uXCIpXHJcbiAgICB7XHJcbiAgICAgICQoJyNlZGl0TmV3UHJvamVjdE5hbWVJbnB1dCcpLnZhbChcIlR5cGUgTmV3IFByb2plY3QgTmFtZSBhbmQgUHJlc3MgRW50ZXIgdG8gQ3JlYXRlXCIpO1xyXG4gICAgICAkKCcjZWRpdE5ld1Byb2plY3ROYW1lSW5wdXQnKS5zaG93KCkuZm9jdXMoKS5zZWxlY3QoKTtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgIHtcclxuICAgICAgJCgnI3NlbGVjdFByb2plY3RPcHRpb24nKS5yZW1vdmUoKTsgICAgIC8vcmVtb3ZlIHRoZSBzZWxlY3QgcHJvamVjdCBvcHRpb24sIG9uY2UgdGhlIHVzZXIgc2VsZWN0cyBhIHByb2plY3QgICAgICBcclxuICAgICAgaG1zLm9wZW5Qcm9qZWN0KHByb2plY3RTZWxlY3Rvci52YWwoKSk7XHJcbiAgICB9ICAgICAgIFxyXG4gIH0sXHJcbiAgY3JlYXRlTmV3UHJvamVjdDogZnVuY3Rpb24oZSlcclxuICB7XHJcbiAgICBpZihlLmtleUNvZGUgPT0gRU5URVJfS0VZKVxyXG4gICAge1xyXG4gICAgXHQkKCcjc2VsZWN0UHJvamVjdE9wdGlvbicpLnJlbW92ZSgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlIHRoZSBzZWxlY3QgcHJvamVjdCBvcHRpb24sIG9uY2UgdGhlIHVzZXIgc2VsZWN0cyBhIHByb2plY3QgXHJcbiAgICBcdFxyXG4gICAgXHR2YXIgbmV3UHJvamVjdE5hbWUgPSAkKCcjZWRpdE5ld1Byb2plY3ROYW1lSW5wdXQnKS52YWwoKTtcclxuICAgIFx0JCgnI2VkaXROZXdQcm9qZWN0TmFtZUlucHV0JykuaGlkZSgpO1xyXG4gICAgXHRcclxuICAgIFx0Ly9hZGQgYW4gb3B0aW9uIGZvciB0aGUgbmV3IHByb2plY3QgdG8gdGhlIHByb2plY3RzIGxpc3QsIHNlbGVjdCB0aGF0IG9wdGlvblxyXG4gICAgXHR2YXIgbmV3UHJvamVjdElEID0gaG1zLm5leHRQcm9qZWN0SUQoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1RPRE86IG5lZWQgdG8gZ2V0IHRoaXMgZnJvbSB0aGUgZGF0YWJhc2UgdG8gaW5zdXJlIHdlIGdldCB0aGUgY29ycmVjdCBpZFxyXG4gICAgXHR2YXIgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcclxuICAgIFx0b3B0aW9uLnRleHQgPSBuZXdQcm9qZWN0TmFtZTtcclxuICAgIFx0b3B0aW9uLnZhbHVlID0gbmV3UHJvamVjdElELnRvU3RyaW5nKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgXHQkKG9wdGlvbikuaW5zZXJ0QmVmb3JlKCcjcHJvamVjdFNlbGVjdG9yIG9wdGlvbjpudGgtY2hpbGQoJyArICQoJyNwcm9qZWN0U2VsZWN0b3InKS5sZW5ndGggKyAnKScpO1xyXG4gICAgXHQkKCcjcHJvamVjdFNlbGVjdG9yJykudmFsKG5ld1Byb2plY3RJRCk7XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgIGhtcy5jcmVhdGVOZXdQcm9qZWN0KG5ld1Byb2plY3ROYW1lKTtcclxuICAgIH0gICAgXHJcbiAgfVxyXG59OyIsInZhciBwcm9qZWN0QWN0aW9uID1cclxue1xyXG4gIGluaXQ6IGZ1bmN0aW9uKClcclxuICB7XHJcbiAgICAkKCcjcHJvamVjdC1hY3Rpb24tY29udGFpbmVyJykuaHRtbChwcm9qZWN0QWN0aW9uLm1hcmt1cCgpKTtcclxuICAgIFxyXG4gICAgJCgnI3Byb2plY3RBY3Rpb25JbnB1dCcpLmtleXVwKGZ1bmN0aW9uKGUpXHJcbiAgICB7XHJcbiAgICAgIGlmKGUua2V5Q29kZSA9PSBFTlRFUl9LRVkpXHJcbiAgICAgIHtcclxuICAgICAgICBwcm9qZWN0QWN0aW9uLmVudGVyUHJlc3NlZCgpO1xyXG4gICAgICB9XHJcbiAgICB9KTsgXHJcbiAgICBcclxuICAgICQoXCIjcHJvamVjdEFjdGlvblNlbGVjdG9yXCIpLmNoYW5nZShwcm9qZWN0QWN0aW9uLmhhbmRsZSk7XHJcbiAgfSxcclxuICBoYW5kbGU6IGZ1bmN0aW9uKClcclxuICB7XHJcbiAgXHRpZigkKCcjcHJvamVjdEFjdGlvblNlbGVjdG9yJykudmFsKCkgPT0gJ2FkZEZpZWxkJylcclxuICBcdHtcclxuICAgICAgJCgnI3Byb2plY3RBY3Rpb25JbnB1dCcpLnZhbChcIlR5cGUgTmV3IEZpZWxkIE5hbWUgYW5kIFByZXNzIEVudGVyIHRvIENyZWF0ZVwiKTtcclxuICBcdFx0JCgnI3Byb2plY3RBY3Rpb25JbnB1dCcpLnNob3coKS5mb2N1cygpLnNlbGVjdCgpO1xyXG4gIFx0fVx0XHJcbiAgfSxcclxuICBlbnRlclByZXNzZWQ6IGZ1bmN0aW9uKClcclxuICB7XHJcbiAgXHRpZigkKCcjcHJvamVjdEFjdGlvblNlbGVjdG9yJykudmFsKCkgPT0gJ2FkZEZpZWxkJylcclxuICBcdHtcclxuICAgICAgc3ByZWFkU2hlZXQuYWRkRmllbGQoJCgnI3Byb2plY3RBY3Rpb25JbnB1dCcpLnZhbCgpKTtcdFxyXG4gICAgICAkKCcjcHJvamVjdEFjdGlvbklucHV0JykuaGlkZSgpO1xyXG4gICAgICAkKCcjcHJvamVjdEFjdGlvblNlbGVjdG9yJykudmFsKCdibGFuaycpO1xyXG4gIFx0fVxyXG4gIH0sXHJcbiAgbWFya3VwOiBmdW5jdGlvbigpXHJcbiAge1xyXG4gICAgcmV0dXJuICc8dGFibGU+PHRyIGlkPVwiaGVhZGVyUm93XCI+PHRyPjxkaXYgaWQ9XCJwcm9qZWN0LXNlbGVjdC1jb250YWluZXJcIj4nXHJcbiAgICArICc8c2VsZWN0IGlkPVwicHJvamVjdEFjdGlvblNlbGVjdG9yXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj4nXHJcbiAgICArICc8b3B0aW9uIHZhbHVlPVwiYmxhbmtcIj48L29wdGlvbj4nXHJcbiAgICArICc8b3B0aW9uIHZhbHVlPVwiYWRkRmllbGRcIj5BZGQgRmllbGQ8L29wdGlvbj4nXHJcbiAgICArICc8L3NlbGVjdD4nXHJcbiAgICArICc8aW5wdXQgaWQ9XCJwcm9qZWN0QWN0aW9uSW5wdXRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPjwvaW5wdXQ+J1xyXG4gICAgKyAnPC9kaXY+PC90cj48dGFibGU+JzsgXHJcbiAgfVxyXG59OyIsIi8vVE9ETzogYWRkIGNvbW1lbnRzXHJcbnZhciBzcHJlYWRTaGVldFZpZXcgPSBcclxue1xyXG4gIHJlbmRlcjogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgICQoJ2JvZHknKS5hcHBlbmQodGhpcy5zcHJlYWRTaGVldE1hcmt1cCgpKTtcclxuICBcclxuICAgIHByb2plY3RBY3Rpb24uaW5pdCgpO1xyXG4gICAgdGhpcy5yZW5kZXJGaWVsZHNSb3coKTtcclxuICAgIHRoaXMucmVuZGVyRGF0YVRhYmxlKCk7XHJcbiAgICB0aGlzLnJlbmRlck5vZGVDb2x1bW4oKTtcclxuICB9LFxyXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uKCkgXHJcbiAgeyBcclxuICAgICQoJyNzcHJlYWRTaGVldFZpZXcnKS5yZW1vdmUoKTsgXHJcbiAgfSxcclxuICBzcHJlYWRTaGVldE1hcmt1cDogZnVuY3Rpb24oKVxyXG4gIHtcclxuICAgIHJldHVybiAnPGRpdiBpZD1cInNwcmVhZFNoZWV0Vmlld1wiPicgK1xyXG4gICAgICAnPGRpdiBpZD1cInByb2plY3QtYWN0aW9uLWNvbnRhaW5lclwiPjwvZGl2PicgK1xyXG4gICAgICAnPGRpdiBpZD1cImZpZWxkcy1oZWFkZXItcm93XCI+PC9kaXY+JyArXHJcbiAgICAgICc8ZGl2IGlkPVwicmVkaXBzLWRyYWdcIj48L2Rpdj4nICtcclxuICAgICAgJzxkaXYgaWQ9XCJkYXRhLWNvbnRhaW5lclwiPjwvZGl2PicgK1xyXG4gICAgJzwvZGl2Pic7XHJcbiAgfSxcclxuICByZW5kZXJGaWVsZHNSb3c6IGZ1bmN0aW9uKClcclxuICB7XHJcbiAgICAkKCcjZmllbGRzLWhlYWRlci1yb3cnKS5odG1sKCc8dGFibGUgaWQ9XCJmaWVsZEhlYWRlclRhYmxlXCI+PHRyIGlkPVwiZmllbGRIZWFkZXJSb3dcIj48L3RyPjwvdGFibGU+Jyk7XHJcbiAgXHJcbiAgICBzcHJlYWRTaGVldC5maWVsZHMoKS5mb3JFYWNoKGZ1bmN0aW9uKGZpZWxkKVxyXG4gICAgeyBcclxuICAgICAgJCgnI2ZpZWxkSGVhZGVyUm93JykuYXBwZW5kKHNwcmVhZFNoZWV0Vmlldy5maWVsZEhlYWRlcihmaWVsZC5uYW1lKSk7XHJcbiAgICAgICQoJyNmaWVsZE1lbnVCdXR0b24nICsgZmllbGQubmFtZSkuY2xpY2soZnVuY3Rpb24oZSkgeyBzcHJlYWRTaGVldFZpZXcuc2hvd0ZpZWxkTWVudShlLCBmaWVsZC5uYW1lKTsgfSk7XHJcbiAgICB9KTtcclxuICBcclxuICAgICQoJyNmaWVsZHMtaGVhZGVyLXJvdycpLmNzcygncmlnaHQnLCBzY3JvbGxCYXJXaWR0aCArICdweCcpOyAgIC8vc2hvcnRlbiB0aGUgd2lkdGggb2YgdGhlIGZpZWxkc1JvdyBieSB0aGUgd2lkdGggb2YgdGhlIHNjcm9sbCBiYXIgICBcclxuICB9LFxyXG4gIGZpZWxkSGVhZGVyOiBmdW5jdGlvbihmaWVsZE5hbWUpXHJcbiAge1xyXG4gICAgcmV0dXJuICc8dGQgY2xhc3M9XCJmaWVsZEhlYWRlckNlbGxcIj48ZGl2IGNsYXNzPVwiZmllbGRIZWFkZXJDb250YWluZXJcIj4nXHJcbiAgICAgICsgJzxkaXYgY2xhc3M9XCJtb3ZlQ29sR3JpcFwiPjwvZGl2PidcclxuICAgICAgKyAnPGRpdiBjbGFzcz1cImZpZWxkTmFtZUlucHV0Q29udGFpbmVyXCI+PHRleHRhcmVhIGlkPVwiY29sSGVhZGVySW5wdXQnICsgZmllbGROYW1lICsgJ1wiIGNsYXNzPVwiZmllbGROYW1lSW5wdXRcIj4nICsgZmllbGROYW1lICsgJzwvdGV4dGFyZWE+PC9kaXY+J1xyXG4gICAgICArICc8ZGl2IGNsYXNzPVwiZmllbGRIZWFkZXJCdXR0b25cIj4nXHJcbiAgICAgICsgJzxpbWcgaWQ9XCJmaWVsZE1lbnVCdXR0b24nICsgZmllbGROYW1lICsgJ1wiIHNyYz1cImltYWdlcy9kb3duLWFycm93LnBuZ1wiLz4nXHJcbiAgICAgICsgJzwvZGl2PidcclxuICAgICAgKyAnPGRpdiBpZD1cImdyaXAnICsgZmllbGROYW1lICsgJ1wiIGNsYXNzPVwicmVzaXplQ29sR3JpcFwiIG9ubW91c2Vkb3duPVwic3RhcnRSZXNpemUoZXZlbnQsIHRoaXMpXCI+PC9kaXY+J1xyXG4gICAgICArICc8L2Rpdj48L3RkPic7XHJcbiAgfSxcclxuICBzaG93RmllbGRNZW51OiBmdW5jdGlvbihlLCBmaWVsZE5hbWUpXHJcbiAge1xyXG4gICAgaWYoJCgnI2ZpZWxkTWVudScpLmxlbmd0aCA9PT0gMClcclxuICAgIHtcclxuICAgICAgJChnZXRGaWVsZE1lbnVNYXJrdXAoZmllbGROYW1lLCBlLmNsaWVudFgsIGUuY2xpZW50WSwgVHJlZS5nZXRUcmVlKCkuZmllbGRzKSkuYXBwZW5kVG8oJ2JvZHknKTtcclxuICAgICAgJCgnI2ZpZWxkTWVudScpLm1vdXNlbGVhdmUoZnVuY3Rpb24oKSB7ICQoJyNmaWVsZE1lbnUnKS5yZW1vdmUoKTsgfSk7XHJcbiAgICB9ICAgIFxyXG4gIH0sXHJcbiAgcmVuZGVyRGF0YVRhYmxlOiBmdW5jdGlvbigpXHJcbiAgeyAgICBcclxuICAgICQoJyNkYXRhLWNvbnRhaW5lcicpLmFwcGVuZCgnPHRhYmxlIGlkPVwiZGF0YVRhYmxlXCI+PC90YWJsZT4nKTtcclxuICAgIFRyZWUuZ2V0VHJlZSgpLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIFxyXG4gICAgeyBcclxuICAgICAgc3ByZWFkU2hlZXRWaWV3LnJlbmRlckRhdGFSb3coY2hpbGQpOyBcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAkKCcjZGF0YS1jb250YWluZXInKS5zY3JvbGwoZnVuY3Rpb24oKSBcclxuICAgIHtcclxuICAgICAgJCgnI3JlZGlwcy1kcmFnJykuc2Nyb2xsVG9wKCQoJyNkYXRhLWNvbnRhaW5lcicpLnNjcm9sbFRvcCgpKTtcclxuICAgICAgJCgnI2ZpZWxkcy1oZWFkZXItcm93Jykuc2Nyb2xsTGVmdCgkKCcjZGF0YS1jb250YWluZXInKS5zY3JvbGxMZWZ0KCkpOyAgICAgIFxyXG4gICAgfSk7ICAgICBcclxuICB9LFxyXG4gIHJlbmRlckRhdGFSb3c6IGZ1bmN0aW9uKG5vZGUsIHBhcmVudFJvdylcclxuICB7XHJcbiAgICBpZihwYXJlbnRSb3cpIHsgJCgnPHRyIGlkPVwiZGF0YXJvd2lkJyArIG5vZGUuaWQgKyAnXCIgY2xhc3M9XCJkYXRhUm93XCI+PC90cj4nKS5pbnNlcnRBZnRlcihwYXJlbnRSb3cpOyB9XHJcbiAgICBlbHNlIHsgJCgnI2RhdGFUYWJsZScpLmFwcGVuZCgnPHRyIGlkPVwiZGF0YXJvd2lkJyArIG5vZGUuaWQgKyAnXCIgY2xhc3M9XCJkYXRhUm93XCI+PC90cj4nKTsgfVxyXG4gICAgXHJcbiAgICBUcmVlLmdldEZpZWxkcygpLmZvckVhY2goZnVuY3Rpb24oZmllbGQpIFxyXG4gICAgeyAgXHJcbiAgICAgIHNwcmVhZFNoZWV0Vmlldy5yZW5kZXJEYXRhQ2VsbCgkKCcjZGF0YXJvd2lkJyArIG5vZGUuaWQpLCBmaWVsZC5uYW1lLCBub2RlLmlkLCBzcHJlYWRTaGVldC5mb3JtYXR0ZWRWYWx1ZShmaWVsZCwgbm9kZSkpOyAgICBcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBpZihwYXJlbnRSb3cpIHsgbm9kZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkKSB7IHNwcmVhZFNoZWV0Vmlldy5yZW5kZXJEYXRhUm93KGNoaWxkLCAkKCcjZGF0YXJvd2lkJyArIG5vZGUuaWQpKTsgfSk7IH1cclxuICAgIGVsc2UgeyBub2RlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIHsgc3ByZWFkU2hlZXRWaWV3LnJlbmRlckRhdGFSb3coY2hpbGQpOyB9KTsgfSAgIFxyXG4gIH0sXHJcbiAgcmVuZGVyRGF0YUNlbGw6IGZ1bmN0aW9uKHJvdywgZmllbGROYW1lLCBub2RlSUQsIHZhbHVlKVxyXG4gIHtcclxuICAgICQocm93KS5hcHBlbmQoc3ByZWFkU2hlZXRWaWV3LmZpZWxkQ2VsbChmaWVsZE5hbWUsIG5vZGVJRCwgdmFsdWUpKTtcclxuICAgICQoJyMnICsgZmllbGROYW1lICsgbm9kZUlEKS5vbignaW5wdXQnLCBmdW5jdGlvbigpIHsgc3ByZWFkU2hlZXQudXBkYXRlRmllbGRWYWx1ZShmaWVsZE5hbWUsIG5vZGVJRCk7IH0pO1xyXG4gICAgJCgnIycgKyBmaWVsZE5hbWUgKyBub2RlSUQpLmZvY3VzKGZ1bmN0aW9uKCkgeyAkKHRoaXMpLnZhbChzcHJlYWRTaGVldC5yYXdWYWx1ZShmaWVsZE5hbWUsIG5vZGVJRCkpOyB9KTsgICAgIFxyXG4gIH0sXHJcbiAgZmllbGRDZWxsOiBmdW5jdGlvbihmaWVsZE5hbWUsIG5vZGVJRCwgdmFsdWUpXHJcbiAge1xyXG4gICAgcmV0dXJuICc8dGQgY2xhc3M9XCJjZWxsXCI+PGlucHV0IGNsYXNzPVwiZmllbGRJbnB1dCBmaWVsZElucHV0JyArIGZpZWxkTmFtZSArICdcIiB0eXBlPVwidGV4dFwiIGlkPVwiJyArIGZpZWxkTmFtZSArIG5vZGVJRCArICdcIiB2YWx1ZT1cIicgKyB2YWx1ZSArICdcIj48L3RkPic7XHJcbiAgfSxcclxuICByZW5kZXJOb2RlQ29sdW1uOiBmdW5jdGlvbigpXHJcbiAge1xyXG4gICAgJCgnI3JlZGlwcy1kcmFnJykuaHRtbCgnPHRhYmxlIGlkPVwidHJlZVRhYmxlXCI+PC90YWJsZT4nKTtcclxuICAgIFRyZWUuZ2V0VHJlZSgpLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIHsgc3ByZWFkU2hlZXRWaWV3LnJlbmRlck5vZGVDZWxsKGNoaWxkKTsgfSk7XHJcbiAgICAkKCcjcmVkaXBzLWRyYWcnKS5jc3MoJ2JvdHRvbScsIHNjcm9sbEJhcldpZHRoICsgJ3B4Jyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2hvcnRlbiB0aGUgaGVpZ2h0IG9mIHRoZSB0cmVlIHNlY3Rpb24gYnkgdGhlIHdpZHRoIG9mIHRoZSBzY3JvbGwgYmFyXHJcbiAgXHRyZWRpcHMuaW5pdCgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaW5pdGlhbGl6ZSB0cmVlIGRyYWcvZHJvcCBsaWJyYXJ5ICAgIFxyXG4gIH0sXHJcbiAgcmVuZGVyTm9kZUNlbGw6IGZ1bmN0aW9uKG5vZGUsIHBhcmVudENlbGwpXHJcbiAge1xyXG4gICAgaWYocGFyZW50Q2VsbCkgeyAkKHNwcmVhZFNoZWV0Vmlldy5ub2RlUm93KG5vZGUuaWQpKS5pbnNlcnRBZnRlcihwYXJlbnRDZWxsKTsgfVxyXG4gICAgZWxzZSB7ICQoJyN0cmVlVGFibGUnKS5hcHBlbmQoc3ByZWFkU2hlZXRWaWV3Lm5vZGVSb3cobm9kZS5pZCkpOyB9XHJcbiAgICBcclxuICAgICQoJyNub2RlQ29udGVudCcgKyBub2RlLmlkKS5hcHBlbmQoc3ByZWFkU2hlZXRWaWV3LmRlbGV0ZUJ1dHRvbihub2RlLmlkKSArIHNwcmVhZFNoZWV0Vmlldy5jb3B5QnV0dG9uKG5vZGUuaWQpICsgc3ByZWFkU2hlZXRWaWV3LmRyYWdIYW5kbGUpO1xyXG4gICAgc3ByZWFkU2hlZXRWaWV3LmFkZE5vZGVDb250ZW50KG5vZGUpO1xyXG4gICAgJCgnI25vZGVJbnB1dCcgKyBub2RlLmlkKS5vbignaW5wdXQnLCBmdW5jdGlvbigpIHsgU3ByZWFkU2hlZXRWaWV3LnVwZGF0ZU5vZGVOYW1lKG5vZGUuaWQpOyB9KTtcclxuICAgIFxyXG4gICAgaWYocGFyZW50Q2VsbCkgeyBub2RlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIHsgc3ByZWFkU2hlZXRWaWV3LnJlbmRlck5vZGVDZWxsKGNoaWxkLCAgJCgnI3Jvd2lkJyArIG5vZGUuaWQpKTsgfSk7IH1cclxuICAgIGVsc2UgeyBub2RlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIHsgc3ByZWFkU2hlZXRWaWV3LnJlbmRlck5vZGVDZWxsKGNoaWxkKTsgfSk7IH0gICBcclxuICB9LFxyXG4gIG5vZGVSb3c6IGZ1bmN0aW9uKG5vZGVJRCkgeyByZXR1cm4gJzx0ciBpZD1cInJvd2lkJyArIG5vZGVJRCArICdcIiBjbGFzcz1cIm5vZGVSb3dcIj48dGQgY2xhc3M9XCJyZWRpcHMtcm93aGFuZGxlciBjZWxsXCI+PGRpdiBpZD1cIm5vZGVDb250ZW50JyArIG5vZGVJRCArICdcIiBjbGFzcz1cIm5vZGUtY29udGFpbmVyXCI+PC9kaXY+PC90ZD48L3RyPic7IH0sXHJcbiAgZHJhZ0hhbmRsZTogJzxkaXYgY2xhc3M9XCJyZWRpcHMtZHJhZyBwdWxsLXJpZ2h0XCI+PGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLW1vdmVcIj48L2k+PC9kaXY+JyxcclxuICBjb3B5QnV0dG9uOiBmdW5jdGlvbihub2RlSUQpIHsgcmV0dXJuICc8YSBocmVmPVwiI1wiICBjbGFzcz1cInB1bGwtcmlnaHQgYnRuIGJ0bi1pbmZvIGJ0bi14cyBjb3B5LWJ1dHRvblwiIG9uY2xpY2s9XCJTcHJlYWRTaGVldFZpZXcuY29weU5vZGUoJyArIG5vZGVJRCArICcpXCI+PGkgY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXBsdXNcIj48L2k+PC9hPicgfSxcclxuICBkZWxldGVCdXR0b246IGZ1bmN0aW9uKG5vZGVJRCkgeyByZXR1cm4gJzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJwdWxsLXJpZ2h0IGJ0biBidG4tZGFuZ2VyIGJ0bi14cyBkZWxldGUtYnV0dG9uXCIgb25jbGljaz1cIlNwcmVhZFNoZWV0Vmlldy5kZWxldGVOb2RlKCcgKyBub2RlSUQgKyAnKVwiPjxpIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmVcIj48L2k+PC9hPicgfSxcclxuICBleHBhbmRJY29uOiBmdW5jdGlvbihub2RlSUQpIHsgcmV0dXJuICc8YSBocmVmPVwiI1wiIGlkPVwiaWNvbicgKyBub2RlSUQgKyAnXCIgY2xhc3M9XCJidG4gYnRuLXhzXCI+PHNwYW4+PC9zcGFuPjwvYT4nOyB9LFxyXG4gIG5vZGVJbnB1dDogZnVuY3Rpb24obm9kZSkgeyByZXR1cm4gJzxpbnB1dCBpZD1cIm5vZGVJbnB1dCcgKyBub2RlLmlkICsgJ1wiIGNsYXNzPVwibm9kZVRleHRJbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgdmFsdWU9XCInICsgbm9kZS5uYW1lICsgJ1wiLz4nOyB9LFxyXG4gIGFkZE5vZGVDb250ZW50OiBmdW5jdGlvbihub2RlKVxyXG4gIHtcclxuICAgICQoJyNub2RlQ29udGVudCcgKyBub2RlLmlkKS5hcHBlbmQoc3ByZWFkU2hlZXRWaWV3LmV4cGFuZEljb24obm9kZS5pZCkgKyBzcHJlYWRTaGVldFZpZXcubm9kZUlucHV0KG5vZGUpKTsgICAgXHJcbiAgICBcclxuICAgIHZhciBkZXB0aEFkanVzdG1lbnQgPSAobm9kZS5kZXB0aC0xKSAqIDEwO1xyXG4gICAgdmFyIHdpZHRoQWRqdXN0bWVudCA9IGRlcHRoQWRqdXN0bWVudDtcclxuICAgIFxyXG4gICAgaWYoc3ByZWFkU2hlZXQuaGFzQ2hpbGRyZW4obm9kZSkpXHJcbiAgICB7XHJcbiAgICAgIGlmKHNwcmVhZFNoZWV0LmNoaWxkcmVuSGlkZGVuKG5vZGUpKVxyXG4gICAgICB7XHJcbiAgICAgICAgJCgnI2ljb24nICsgbm9kZS5pZCkuYXBwZW5kKCc8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1yaWdodFwiPjwvc3Bhbj4nKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlXHJcbiAgICAgIHtcclxuICAgICAgICAkKCcjaWNvbicgKyBub2RlLmlkKS5hcHBlbmQoJzxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWRvd25cIj48L3NwYW4+Jyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgIHtcclxuICAgICAgJCgnI2ljb24nICsgbm9kZS5pZCkuYXBwZW5kKCc8c3Bhbj48L3NwYW4+Jyk7XHJcbiAgICAgIGRlcHRoQWRqdXN0bWVudCArPSAxMjtcclxuICAgICAgd2lkdGhBZGp1c3RtZW50IC09IDEwO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAkKCcjaWNvbicgKyBub2RlLmlkKS5jbGljayhmdW5jdGlvbigpIHsgc3ByZWFkU2hlZXRWaWV3LnRvZ2dsZU5vZGVFeHBhbnNpb24obm9kZS5pZCk7IH0pO1xyXG4gICAgJCgnI2ljb24nICsgbm9kZS5pZCkuY3NzKCdtYXJnaW4tbGVmdCcsIGRlcHRoQWRqdXN0bWVudCArICdweCcpO1xyXG4gICAgJCgnI25vZGVJbnB1dCcgKyBub2RlLmlkKS5jc3MoJ3dpZHRoJywgKERFRkFVTFRfTk9ERV9JTlBVVF9XSURUSC13aWR0aEFkanVzdG1lbnQpICsgJ3B4Jyk7XHJcbiAgfSxcclxuICB0b2dnbGVOb2RlRXhwYW5zaW9uOiBmdW5jdGlvbihub2RlSUQpXHJcbiAge1xyXG4gICAgdmFyIG5vZGUgPSBUcmVlLmZpbmROb2RlKG5vZGVJRCk7XHJcbiAgICBcclxuICAgIGlmKFRyZWUuaXNOb2RlRXhwYW5kZWQobm9kZSkpXHJcbiAgICB7XHJcbiAgICAgIFRyZWUudHJhdmVyc2VEZXNjZW5kYW50cyhUcmVlLmdldENoaWxkcmVuLCBmdW5jdGlvbihuKSAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlIGRlc2NlbmRhbnQgbm9kZSByb3dzIGZyb20gdGhlIERPTVxyXG4gICAgICB7XHJcbiAgICAgICAgJCgnI2RhdGFyb3dpZCcgKyBuLmlkKS5yZW1vdmUoKTtcclxuICAgICAgICAkKCcjcm93aWQnICsgbi5pZCkucmVtb3ZlKCk7XHJcbiAgICAgIH0sIG5vZGUpO1xyXG4gICAgICBcclxuICAgICAgVHJlZS5jb2xsYXBzZU5vZGUobm9kZSk7ICAgICAgICAgICAgICAgICBcclxuICAgIH1cclxuICAgIGVsc2UgaWYoVHJlZS5pc05vZGVDb2xsYXBzZWQobm9kZSkpXHJcbiAgICB7XHJcbiAgICAgIFRyZWUuZXhwYW5kTm9kZShub2RlKTtcclxuICAgICAgXHJcbiAgICAgIHZhciBjaGlsZDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hZGQgZGVzY2VuZGFudCBub2RlIHJvd3MgdG8gdGhlIERPTVxyXG4gICAgICBmb3IodmFyIGkgPSBub2RlLmNoaWxkcmVuLmxlbmd0aC0xOyBpID49IDA7IGktLSkgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaXRlcmF0ZSBpbiByZXZlcnNlIG9yZGVyIHRvIHByZXNlcnZlIHRoZSBub2RlIG9yZGVyaW5nXHJcbiAgICAgIHtcclxuICAgICAgICBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XHJcbiAgICAgICAgc3ByZWFkU2hlZXRWaWV3LnJlbmRlckRhdGFSb3coY2hpbGQsICQoJyNkYXRhcm93aWQnICsgbm9kZS5pZCkpO1xyXG4gICAgICAgIHNwcmVhZFNoZWV0Vmlldy5yZW5kZXJOb2RlQ2VsbChjaGlsZCwgJCgnI3Jvd2lkJyArIG5vZGUuaWQpKTtcclxuICAgICAgfSAgICAgXHJcblxyXG4gICAgICBTcHJlYWRTaGVldFZpZXcuZW5hYmxlRHJhZ2dpbmcobm9kZSk7ICAgXHJcbiAgICB9XHJcbiAgICBcclxuICAgIHNwcmVhZFNoZWV0Vmlldy5yZWRyYXdOb2RlQ29udGVudChub2RlKTsgICAgIFxyXG4gIH0sXHJcbiAgcmVkcmF3Tm9kZUNvbnRlbnQ6IGZ1bmN0aW9uKG5vZGUpXHJcbiAge1xyXG4gICAgJCgnI2ljb24nICsgbm9kZS5pZCkucmVtb3ZlKCk7XHJcbiAgICAkKCcjbm9kZUlucHV0JyArIG5vZGUuaWQpLnJlbW92ZSgpO1xyXG4gICAgc3ByZWFkU2hlZXRWaWV3LmFkZE5vZGVDb250ZW50KG5vZGUpOyAgICAgIFxyXG4gIH0sXHJcbiAgYWRkRmllbGQ6IGZ1bmN0aW9uKGZpZWxkTmFtZSlcclxuICB7XHJcbiAgICAkKCcjZmllbGRIZWFkZXJSb3cnKS5hcHBlbmQodGhpcy5maWVsZEhlYWRlck1hcmt1cChmaWVsZE5hbWUsIFRyZWUuZ2V0VHJlZSgpLmZpZWxkcy5sZW5ndGgpKTtcclxuICAgICQoJyNmaWVsZE1lbnVCdXR0b24nICsgZmllbGROYW1lKS5jbGljayhmdW5jdGlvbihlKSB7IHNwcmVhZFNoZWV0Vmlldy5zaG93RmllbGRNZW51KGUsIGZpZWxkTmFtZSk7IH0pO1xyXG4gICAgJCgnLmRhdGFSb3cnKS5lYWNoKGZ1bmN0aW9uKGksIGl0ZW0pIHsgc3ByZWFkU2hlZXRWaWV3LnJlbmRlckRhdGFDZWxsKGl0ZW0sIGZpZWxkTmFtZSwgcGFyc2VJbnQoaXRlbS5pZC5yZXBsYWNlKCdkYXRhcm93aWQnLCAnJykpLCAnJyk7IH0pOyAgICAgICAgXHJcbiAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gU3ByZWFkU2hlZXRWaWV3KCkge31cclxuXHJcblNwcmVhZFNoZWV0Vmlldy5tb3ZlTm9kZSA9IGZ1bmN0aW9uKG5vZGVJRCwgbmV3UGFyZW50SUQpXHJcbntcclxuICB2YXIgbmV3UGFyZW50Tm9kZSA9IFRyZWUuZmluZE5vZGUobmV3UGFyZW50SUQpO1xyXG4gIHZhciBub2RlID0gVHJlZS5maW5kTm9kZShub2RlSUQpO1xyXG5cclxuICBTcHJlYWRTaGVldFZpZXcucmVtb3ZlTm9kZShub2RlKTtcclxuICBUcmVlLmFkZE5vZGUobm9kZSwgbmV3UGFyZW50Tm9kZSk7XHJcbiAgU3ByZWFkU2hlZXRWaWV3LmFkZE5vZGUobm9kZSwgbmV3UGFyZW50Tm9kZSk7XHJcbn1cclxuXHJcblNwcmVhZFNoZWV0Vmlldy5hZGROb2RlID0gZnVuY3Rpb24obm9kZSwgcGFyZW50Tm9kZSlcclxue1xyXG4gIC8vZXhwYW5kIHRoZSBuZXcgcGFyZW50IG5vZGUsIGlmIGl0J3MgY29sbGFwc2VkXHJcbiAgaWYoVHJlZS5pc05vZGVDb2xsYXBzZWQocGFyZW50Tm9kZSkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAge1xyXG4gICAgU3ByZWFkU2hlZXRWaWV3LmV4cGFuZE5vZGUocGFyZW50Tm9kZSk7XHJcbiAgfVxyXG4gIHNwcmVhZFNoZWV0Vmlldy5yZWRyYXdOb2RlQ29udGVudChwYXJlbnROb2RlKTtcclxuXHJcbiAgLy9hZGQgdGhlIG1vdmVkIG5vZGUgYW5kIGl0cyBkZXNjZW5kYW50cyB0byB0aGUgbmV3IHBhcmVudCBpbiB0aGUgdmlld1xyXG4gICQoYWRkUm93KG5vZGUpKS5pbnNlcnRBZnRlcigkKCcjcm93aWQnICsgcGFyZW50Tm9kZS5pZCkpOyBcclxuICAkKGFkZERhdGFSb3cobm9kZSwgVHJlZS5nZXRUcmVlKCkuZmllbGRzKSkuaW5zZXJ0QWZ0ZXIoJCgnI2RhdGFyb3dpZCcgKyBwYXJlbnROb2RlLmlkKSk7XHJcbiAgXHJcbiAgU3ByZWFkU2hlZXRWaWV3LmVuYWJsZURyYWdnaW5nKG5vZGUpOyAgICAgXHJcbn07XHJcblxyXG5TcHJlYWRTaGVldFZpZXcuaW5zZXJ0Tm9kZSA9IGZ1bmN0aW9uKG5vZGUsIGluc2VydEJlZm9yZU5vZGUpXHJcbntcclxuICAkKGFkZFJvdyhub2RlKSkuaW5zZXJ0QmVmb3JlKCQoJyNyb3dpZCcgKyBpbnNlcnRCZWZvcmVOb2RlLmlkKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2luc2VydCB0aGUgbmV3IHJvd3MgYmVmb3JlIHRoZSBzb3VyY2Ugcm93XHJcbiAgJChhZGREYXRhUm93KG5vZGUsIFRyZWUuZ2V0VHJlZSgpLmZpZWxkcykpLmluc2VydEJlZm9yZSgkKCcjZGF0YXJvd2lkJyArIGluc2VydEJlZm9yZU5vZGUuaWQpKTsgLy9pbnNlcnQgdGhlIG5ldyByb3dzIGJlZm9yZSB0aGUgc291cmNlIHJvd1xyXG4gIFNwcmVhZFNoZWV0Vmlldy5lbmFibGVEcmFnZ2luZyhub2RlKTsgICBcclxufTtcclxuXHJcblNwcmVhZFNoZWV0Vmlldy5yZW1vdmVOb2RlID0gZnVuY3Rpb24obm9kZSkgICAgIC8vcmVtb3ZlIHRoZSBub2RlIGFuZCBpdHMgZGVzY2VuZGFudHMgZnJvbSB0aGUgdmlldyBcclxue1xyXG4gIFRyZWUudHJhdmVyc2UoVHJlZS5nZXRDaGlsZHJlbiwgZnVuY3Rpb24obikgXHJcbiAgeyBcclxuICAgICQoJyNyb3dpZCcgKyBuLmlkKS5yZW1vdmUoKTtcclxuICAgICQoJyNkYXRhcm93aWQnICsgbi5pZCkucmVtb3ZlKCk7IFxyXG4gIH0sIG5vZGUpOyAgXHJcbiAgXHJcbiAgdmFyIHBhcmVudE5vZGUgPSBUcmVlLmZpbmRQYXJlbnQobm9kZS5pZCk7XHJcbiAgVHJlZS5yZW1vdmVOb2RlKG5vZGUpO1xyXG4gIHNwcmVhZFNoZWV0Vmlldy5yZWRyYXdOb2RlQ29udGVudChwYXJlbnROb2RlKTsgLy9pZiB0aGUgcGFyZW50IGlzIGNoaWxkbGVzcyBub3csIHRoZW4gaGlkZSB0aGUgb2xkIHBhcmVudCdzIGV4cGFuZC9jb2xsYXBzZSBpY29uIFxyXG59O1xyXG5cclxuU3ByZWFkU2hlZXRWaWV3LmVuYWJsZURyYWdnaW5nID0gZnVuY3Rpb24obm9kZSlcclxue1xyXG4gIFRyZWUudHJhdmVyc2UoVHJlZS5nZXRDaGlsZHJlbiwgZnVuY3Rpb24obilcclxuICB7XHJcbiAgICBSRURJUFMuZHJhZy5lbmFibGVEaXZzKCdpbml0JywgJCgnI3Jvd2lkJyArIG4uaWQpLmZpbmQoJ2RpdicpKTsgICAgXHJcbiAgfSwgbm9kZSk7ICBcclxufTtcclxuXHJcblNwcmVhZFNoZWV0Vmlldy51cGRhdGVGaWVsZEZvcm1hdHRpbmcgPSBmdW5jdGlvbihmaWVsZCkgICAgICAgICAgICAgICAgIC8vZm9ybWF0cyBhbGwgdGhlIHZhbHVlcyBmb3IgdGhlIGZpZWxkICh0aGUgZW50aXJlIGNvbHVtbilcclxue1xyXG4gICQoJy5maWVsZElucHV0JyArIGZpZWxkLm5hbWUpLmVhY2goZnVuY3Rpb24oaW5kZXgpIFxyXG4gIHtcclxuICAgIHZhciBub2RlSUQgPSAkKHRoaXMpLmF0dHIoJ2lkJykucmVwbGFjZShmaWVsZC5uYW1lLCAnJyk7XHJcbiAgICB2YXIgbm9kZSA9IFRyZWUuZmluZE5vZGUocGFyc2VJbnQobm9kZUlEKSk7XHJcbiAgICBcclxuICAgIGlmKG5vZGUudmFsdWVzKVxyXG4gICAge1xyXG4gICAgICB2YXIgdmFsdWUgPSBOdW1iZXIobm9kZS52YWx1ZXNbZmllbGQubmFtZV0pOyAgICAgICAgICAgICAgLy9nZXQgdGhlIHZhbHVlIGZyb20gdGhlIG1vZGVsXHJcbiAgICAgICQodGhpcykudmFsKEZpZWxkLmZvcm1hdFZhbHVlKGZpZWxkLCB2YWx1ZSkpOyAgICAgICAgICAgICAvL2Zvcm1hdCB0aGUgdmFsdWUgYW5kIGRpc3BsYXkgaXRcclxuICAgIH1cclxuICB9KTtcclxufTtcclxuXHJcblNwcmVhZFNoZWV0Vmlldy5jb3B5Tm9kZSA9IGZ1bmN0aW9uKG5vZGVJRClcclxue1xyXG4gIHZhciBzb3VyY2VOb2RlID0gVHJlZS5maW5kTm9kZShub2RlSUQpO1xyXG4gIHZhciBuZXdOb2RlID0gVHJlZS5jbG9uZU5vZGUoc291cmNlTm9kZSk7XHJcbiAgVHJlZS5pbnNlcnROb2RlKG5ld05vZGUsIHNvdXJjZU5vZGUpO1xyXG4gIFNwcmVhZFNoZWV0Vmlldy5pbnNlcnROb2RlKG5ld05vZGUsIHNvdXJjZU5vZGUpO1xyXG59O1xyXG5cclxuU3ByZWFkU2hlZXRWaWV3LmRlbGV0ZU5vZGUgPSBmdW5jdGlvbihub2RlSUQpXHJcbntcclxuICBTcHJlYWRTaGVldFZpZXcucmVtb3ZlTm9kZShUcmVlLmZpbmROb2RlKG5vZGVJRCkpO1xyXG59O1xyXG5cclxuU3ByZWFkU2hlZXRWaWV3LnVwZGF0ZU5vZGVOYW1lID0gZnVuY3Rpb24obm9kZUlEKVxyXG57XHJcbiAgdmFyIG5vZGUgPSBUcmVlLmZpbmROb2RlKG5vZGVJRCk7XHJcbiAgXHJcbiAgbm9kZS5uYW1lID0gJCgnI25vZGVJbnB1dCcgKyBub2RlSUQpLnZhbCgpO1xyXG4gICQoJyNub2RlSW5wdXQnICsgbm9kZUlEKS5hdHRyKCd2YWx1ZScsICQoJyNub2RlSW5wdXQnICsgbm9kZUlEKS52YWwoKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZSB0aGUgaW5wdXQgdmFsdWUgaW4gdGhlIERPTSwgc28gdGhhdCB3aGVuIHdlIGRyYWcvbW92ZSB0aGUgcm93LCB0aGUgdmFsdWUgaXMgY29ycmVjdFxyXG59O1xyXG5cclxuU3ByZWFkU2hlZXRWaWV3LnVwZGF0ZUZpZWxkVmFsdWUgPSBmdW5jdGlvbihmaWVsZCwgbm9kZUlEKVxyXG57XHJcbiAgVHJlZS51cGRhdGVOb2RlVmFsdWUocGFyc2VJbnQobm9kZUlEKSwgZmllbGQsICQoJyMnICsgZmllbGQgKyBub2RlSUQpLnZhbCgpKTtcclxuXHJcbiAgLy9UT0RPOiBzaG91bGQgcGVyZm9ybSB0aGUgYWdncmVnYXRpb24gYmFzZWQgb24gdGhlIGZpZWxkIHNldHRpbmdzIGZvciBhZ2dyZWdhdGluZ1xyXG4gIGZvcih2YXIgaSBpbiBUcmVlLmdldFRyZWUoKS5jaGlsZHJlbilcclxuICB7XHJcbiAgICBhZ2dyZWdhdGVfYW55KFRyZWUuZ2V0VHJlZSgpLmNoaWxkcmVuW2ldLCBmaWVsZCk7XHJcbiAgfVxyXG59OyIsInZhciB0cmVlVmlldyA9IFxyXG57XHJcbiAgcmVuZGVyOiBmdW5jdGlvbigpXHJcbiAge1xyXG4gICAgXHJcbiAgfSxcclxuICBkZXN0cm95OiBmdW5jdGlvbigpXHJcbiAge1xyXG4gICAgJCgnI3RyZWUtY29udGFpbmVyJykucmVtb3ZlKCk7XHJcbiAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gVHJlZVZpZXcoKSB7fVxyXG5cclxuVHJlZVZpZXcuZGlzcGxheSA9IGZ1bmN0aW9uKHRyZWVEYXRhKVxyXG57XHJcbiAgJCgnYm9keScpLmFwcGVuZCgnPGRpdiBpZD1cInRyZWUtY29udGFpbmVyXCI+PC9kaXY+Jyk7XHJcblxyXG4gIC8vIENhbGN1bGF0ZSB0b3RhbCBub2RlcywgbWF4IGxhYmVsIGxlbmd0aFxyXG4gIHZhciB0b3RhbE5vZGVzID0gMDtcclxuICB2YXIgbWF4TGFiZWxMZW5ndGggPSAwO1xyXG4gIC8vIHZhcmlhYmxlcyBmb3IgZHJhZy9kcm9wXHJcbiAgdmFyIHNlbGVjdGVkTm9kZSA9IG51bGw7XHJcbiAgdmFyIGRyYWdnaW5nTm9kZSA9IG51bGw7XHJcbiAgLy8gcGFubmluZyB2YXJpYWJsZXNcclxuICB2YXIgcGFuU3BlZWQgPSAyMDA7XHJcbiAgdmFyIHBhbkJvdW5kYXJ5ID0gMjA7IC8vIFdpdGhpbiAyMHB4IGZyb20gZWRnZXMgd2lsbCBwYW4gd2hlbiBkcmFnZ2luZy5cclxuICAvLyBNaXNjLiB2YXJpYWJsZXNcclxuICB2YXIgaSA9IDA7XHJcbiAgdmFyIGR1cmF0aW9uID0gNzUwO1xyXG4gIHZhciByb290O1xyXG5cclxuICAvLyBzaXplIG9mIHRoZSBkaWFncmFtXHJcbiAgdmFyIHZpZXdlcldpZHRoID0gJCgnI3RyZWUtY29udGFpbmVyJykud2lkdGgoKTtcclxuICB2YXIgdmlld2VySGVpZ2h0ID0gJCgnI3RyZWUtY29udGFpbmVyJykuaGVpZ2h0KCk7XHJcblxyXG4gIHZhciB0cmVlID0gZDMubGF5b3V0LnRyZWUoKVxyXG4gICAgICAuc2l6ZShbdmlld2VySGVpZ2h0LCB2aWV3ZXJXaWR0aF0pO1xyXG5cclxuICAvLyBkZWZpbmUgYSBkMyBkaWFnb25hbCBwcm9qZWN0aW9uIGZvciB1c2UgYnkgdGhlIG5vZGUgcGF0aHMgbGF0ZXIgb24uXHJcbiAgdmFyIGRpYWdvbmFsID0gZDMuc3ZnLmRpYWdvbmFsKClcclxuICAgICAgLnByb2plY3Rpb24oZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgcmV0dXJuIFtkLnksIGQueF07XHJcbiAgICAgIH0pO1xyXG5cclxuICAvLyBBIHJlY3Vyc2l2ZSBoZWxwZXIgZnVuY3Rpb24gZm9yIHBlcmZvcm1pbmcgc29tZSBzZXR1cCBieSB3YWxraW5nIHRocm91Z2ggYWxsIG5vZGVzXHJcblxyXG4gIGZ1bmN0aW9uIHZpc2l0KHBhcmVudCwgdmlzaXRGbiwgY2hpbGRyZW5Gbikge1xyXG4gICAgICBpZiAoIXBhcmVudCkgcmV0dXJuO1xyXG5cclxuICAgICAgdmlzaXRGbihwYXJlbnQpO1xyXG5cclxuICAgICAgdmFyIGNoaWxkcmVuID0gY2hpbGRyZW5GbihwYXJlbnQpO1xyXG4gICAgICBpZiAoY2hpbGRyZW4pIHtcclxuICAgICAgICAgIHZhciBjb3VudCA9IGNoaWxkcmVuLmxlbmd0aDtcclxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgIHZpc2l0KGNoaWxkcmVuW2ldLCB2aXNpdEZuLCBjaGlsZHJlbkZuKTtcclxuICAgICAgICAgIH1cclxuICAgICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQ2FsbCB2aXNpdCBmdW5jdGlvbiB0byBlc3RhYmxpc2ggbWF4TGFiZWxMZW5ndGhcclxuICB2aXNpdCh0cmVlRGF0YSwgZnVuY3Rpb24oZCkge1xyXG4gICAgICB0b3RhbE5vZGVzKys7XHJcbiAgICAgIG1heExhYmVsTGVuZ3RoID0gTWF0aC5tYXgoZC5uYW1lLmxlbmd0aCwgbWF4TGFiZWxMZW5ndGgpO1xyXG5cclxuICB9LCBmdW5jdGlvbihkKSB7XHJcbiAgICAgIHJldHVybiBkLmNoaWxkcmVuICYmIGQuY2hpbGRyZW4ubGVuZ3RoID4gMCA/IGQuY2hpbGRyZW4gOiBudWxsO1xyXG4gIH0pO1xyXG5cclxuXHJcbiAgLy8gc29ydCB0aGUgdHJlZSBhY2NvcmRpbmcgdG8gdGhlIG5vZGUgbmFtZXNcclxuXHJcbiAgZnVuY3Rpb24gc29ydFRyZWUoKSB7XHJcbiAgICAgIHRyZWUuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgICByZXR1cm4gYi5uYW1lLnRvTG93ZXJDYXNlKCkgPCBhLm5hbWUudG9Mb3dlckNhc2UoKSA/IDEgOiAtMTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG4gIC8vIFNvcnQgdGhlIHRyZWUgaW5pdGlhbGx5IGluY2FzZSB0aGUgSlNPTiBpc24ndCBpbiBhIHNvcnRlZCBvcmRlci5cclxuICBzb3J0VHJlZSgpO1xyXG5cclxuICAvLyBUT0RPOiBQYW4gZnVuY3Rpb24sIGNhbiBiZSBiZXR0ZXIgaW1wbGVtZW50ZWQuXHJcblxyXG4gIGZ1bmN0aW9uIHBhbihkb21Ob2RlLCBkaXJlY3Rpb24pIHtcclxuICAgICAgdmFyIHNwZWVkID0gcGFuU3BlZWQ7XHJcbiAgICAgIGlmIChwYW5UaW1lcikge1xyXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHBhblRpbWVyKTtcclxuICAgICAgICAgIHRyYW5zbGF0ZUNvb3JkcyA9IGQzLnRyYW5zZm9ybShzdmdHcm91cC5hdHRyKFwidHJhbnNmb3JtXCIpKTtcclxuICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT0gJ2xlZnQnIHx8IGRpcmVjdGlvbiA9PSAncmlnaHQnKSB7XHJcbiAgICAgICAgICAgICAgdHJhbnNsYXRlWCA9IGRpcmVjdGlvbiA9PSAnbGVmdCcgPyB0cmFuc2xhdGVDb29yZHMudHJhbnNsYXRlWzBdICsgc3BlZWQgOiB0cmFuc2xhdGVDb29yZHMudHJhbnNsYXRlWzBdIC0gc3BlZWQ7XHJcbiAgICAgICAgICAgICAgdHJhbnNsYXRlWSA9IHRyYW5zbGF0ZUNvb3Jkcy50cmFuc2xhdGVbMV07XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PSAndXAnIHx8IGRpcmVjdGlvbiA9PSAnZG93bicpIHtcclxuICAgICAgICAgICAgICB0cmFuc2xhdGVYID0gdHJhbnNsYXRlQ29vcmRzLnRyYW5zbGF0ZVswXTtcclxuICAgICAgICAgICAgICB0cmFuc2xhdGVZID0gZGlyZWN0aW9uID09ICd1cCcgPyB0cmFuc2xhdGVDb29yZHMudHJhbnNsYXRlWzFdICsgc3BlZWQgOiB0cmFuc2xhdGVDb29yZHMudHJhbnNsYXRlWzFdIC0gc3BlZWQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzY2FsZVggPSB0cmFuc2xhdGVDb29yZHMuc2NhbGVbMF07XHJcbiAgICAgICAgICBzY2FsZVkgPSB0cmFuc2xhdGVDb29yZHMuc2NhbGVbMV07XHJcbiAgICAgICAgICBzY2FsZSA9IHpvb21MaXN0ZW5lci5zY2FsZSgpO1xyXG4gICAgICAgICAgc3ZnR3JvdXAudHJhbnNpdGlvbigpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyB0cmFuc2xhdGVYICsgXCIsXCIgKyB0cmFuc2xhdGVZICsgXCIpc2NhbGUoXCIgKyBzY2FsZSArIFwiKVwiKTtcclxuICAgICAgICAgIGQzLnNlbGVjdChkb21Ob2RlKS5zZWxlY3QoJ2cubm9kZScpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyB0cmFuc2xhdGVYICsgXCIsXCIgKyB0cmFuc2xhdGVZICsgXCIpXCIpO1xyXG4gICAgICAgICAgem9vbUxpc3RlbmVyLnNjYWxlKHpvb21MaXN0ZW5lci5zY2FsZSgpKTtcclxuICAgICAgICAgIHpvb21MaXN0ZW5lci50cmFuc2xhdGUoW3RyYW5zbGF0ZVgsIHRyYW5zbGF0ZVldKTtcclxuICAgICAgICAgIHBhblRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICBwYW4oZG9tTm9kZSwgc3BlZWQsIGRpcmVjdGlvbik7XHJcbiAgICAgICAgICB9LCA1MCk7XHJcbiAgICAgIH1cclxuICB9XHJcblxyXG4gIC8vIERlZmluZSB0aGUgem9vbSBmdW5jdGlvbiBmb3IgdGhlIHpvb21hYmxlIHRyZWVcclxuXHJcbiAgZnVuY3Rpb24gem9vbSgpIHtcclxuICAgICAgc3ZnR3JvdXAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIGQzLmV2ZW50LnRyYW5zbGF0ZSArIFwiKXNjYWxlKFwiICsgZDMuZXZlbnQuc2NhbGUgKyBcIilcIik7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gZGVmaW5lIHRoZSB6b29tTGlzdGVuZXIgd2hpY2ggY2FsbHMgdGhlIHpvb20gZnVuY3Rpb24gb24gdGhlIFwiem9vbVwiIGV2ZW50IGNvbnN0cmFpbmVkIHdpdGhpbiB0aGUgc2NhbGVFeHRlbnRzXHJcbiAgdmFyIHpvb21MaXN0ZW5lciA9IGQzLmJlaGF2aW9yLnpvb20oKS5zY2FsZUV4dGVudChbMC4xLCAzXSkub24oXCJ6b29tXCIsIHpvb20pO1xyXG5cclxuICBmdW5jdGlvbiBpbml0aWF0ZURyYWcoZCwgZG9tTm9kZSkge1xyXG4gICAgICBkcmFnZ2luZ05vZGUgPSBkO1xyXG4gICAgICBkMy5zZWxlY3QoZG9tTm9kZSkuc2VsZWN0KCcuZ2hvc3RDaXJjbGUnKS5hdHRyKCdwb2ludGVyLWV2ZW50cycsICdub25lJyk7XHJcbiAgICAgIGQzLnNlbGVjdEFsbCgnLmdob3N0Q2lyY2xlJykuYXR0cignY2xhc3MnLCAnZ2hvc3RDaXJjbGUgc2hvdycpO1xyXG4gICAgICBkMy5zZWxlY3QoZG9tTm9kZSkuYXR0cignY2xhc3MnLCAnbm9kZSBhY3RpdmVEcmFnJyk7XHJcblxyXG4gICAgICBzdmdHcm91cC5zZWxlY3RBbGwoXCJnLm5vZGVcIikuc29ydChmdW5jdGlvbihhLCBiKSB7IC8vIHNlbGVjdCB0aGUgcGFyZW50IGFuZCBzb3J0IHRoZSBwYXRoJ3NcclxuICAgICAgICAgIGlmIChhLmlkICE9IGRyYWdnaW5nTm9kZS5pZCkgcmV0dXJuIDE7IC8vIGEgaXMgbm90IHRoZSBob3ZlcmVkIGVsZW1lbnQsIHNlbmQgXCJhXCIgdG8gdGhlIGJhY2tcclxuICAgICAgICAgIGVsc2UgcmV0dXJuIC0xOyAvLyBhIGlzIHRoZSBob3ZlcmVkIGVsZW1lbnQsIGJyaW5nIFwiYVwiIHRvIHRoZSBmcm9udFxyXG4gICAgICB9KTtcclxuICAgICAgLy8gaWYgbm9kZXMgaGFzIGNoaWxkcmVuLCByZW1vdmUgdGhlIGxpbmtzIGFuZCBub2Rlc1xyXG4gICAgICBpZiAobm9kZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgLy8gcmVtb3ZlIGxpbmsgcGF0aHNcclxuICAgICAgICAgIGxpbmtzID0gdHJlZS5saW5rcyhub2Rlcyk7XHJcbiAgICAgICAgICBub2RlUGF0aHMgPSBzdmdHcm91cC5zZWxlY3RBbGwoXCJwYXRoLmxpbmtcIilcclxuICAgICAgICAgICAgICAuZGF0YShsaW5rcywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gZC50YXJnZXQuaWQ7XHJcbiAgICAgICAgICAgICAgfSkucmVtb3ZlKCk7XHJcbiAgICAgICAgICAvLyByZW1vdmUgY2hpbGQgbm9kZXNcclxuICAgICAgICAgIG5vZGVzRXhpdCA9IHN2Z0dyb3VwLnNlbGVjdEFsbChcImcubm9kZVwiKVxyXG4gICAgICAgICAgICAgIC5kYXRhKG5vZGVzLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBkLmlkO1xyXG4gICAgICAgICAgICAgIH0pLmZpbHRlcihmdW5jdGlvbihkLCBpKSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChkLmlkID09IGRyYWdnaW5nTm9kZS5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgIH0pLnJlbW92ZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyByZW1vdmUgcGFyZW50IGxpbmtcclxuICAgICAgcGFyZW50TGluayA9IHRyZWUubGlua3ModHJlZS5ub2RlcyhkcmFnZ2luZ05vZGUucGFyZW50KSk7XHJcbiAgICAgIHN2Z0dyb3VwLnNlbGVjdEFsbCgncGF0aC5saW5rJykuZmlsdGVyKGZ1bmN0aW9uKGQsIGkpIHtcclxuICAgICAgICAgIGlmIChkLnRhcmdldC5pZCA9PSBkcmFnZ2luZ05vZGUuaWQpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfSkucmVtb3ZlKCk7XHJcblxyXG4gICAgICBkcmFnU3RhcnRlZCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICAvLyBkZWZpbmUgdGhlIGJhc2VTdmcsIGF0dGFjaGluZyBhIGNsYXNzIGZvciBzdHlsaW5nIGFuZCB0aGUgem9vbUxpc3RlbmVyXHJcbiAgdmFyIGJhc2VTdmcgPSBkMy5zZWxlY3QoXCIjdHJlZS1jb250YWluZXJcIikuYXBwZW5kKFwic3ZnXCIpXHJcbiAgICAgIC5hdHRyKFwid2lkdGhcIiwgdmlld2VyV2lkdGgpXHJcbiAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHZpZXdlckhlaWdodClcclxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcIm92ZXJsYXlcIilcclxuICAgICAgLmNhbGwoem9vbUxpc3RlbmVyKTtcclxuXHJcblxyXG4gIC8vIERlZmluZSB0aGUgZHJhZyBsaXN0ZW5lcnMgZm9yIGRyYWcvZHJvcCBiZWhhdmlvdXIgb2Ygbm9kZXMuXHJcbiAgZHJhZ0xpc3RlbmVyID0gZDMuYmVoYXZpb3IuZHJhZygpXHJcbiAgICAgIC5vbihcImRyYWdzdGFydFwiLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICBpZiAoZCA9PSByb290KSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZHJhZ1N0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgbm9kZXMgPSB0cmVlLm5vZGVzKGQpO1xyXG4gICAgICAgICAgZDMuZXZlbnQuc291cmNlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAvLyBpdCdzIGltcG9ydGFudCB0aGF0IHdlIHN1cHByZXNzIHRoZSBtb3VzZW92ZXIgZXZlbnQgb24gdGhlIG5vZGUgYmVpbmcgZHJhZ2dlZC4gT3RoZXJ3aXNlIGl0IHdpbGwgYWJzb3JiIHRoZSBtb3VzZW92ZXIgZXZlbnQgYW5kIHRoZSB1bmRlcmx5aW5nIG5vZGUgd2lsbCBub3QgZGV0ZWN0IGl0IGQzLnNlbGVjdCh0aGlzKS5hdHRyKCdwb2ludGVyLWV2ZW50cycsICdub25lJyk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5vbihcImRyYWdcIiwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgaWYgKGQgPT0gcm9vdCkge1xyXG4gICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChkcmFnU3RhcnRlZCkge1xyXG4gICAgICAgICAgICAgIGRvbU5vZGUgPSB0aGlzO1xyXG4gICAgICAgICAgICAgIGluaXRpYXRlRHJhZyhkLCBkb21Ob2RlKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBnZXQgY29vcmRzIG9mIG1vdXNlRXZlbnQgcmVsYXRpdmUgdG8gc3ZnIGNvbnRhaW5lciB0byBhbGxvdyBmb3IgcGFubmluZ1xyXG4gICAgICAgICAgcmVsQ29vcmRzID0gZDMubW91c2UoJCgnc3ZnJykuZ2V0KDApKTtcclxuICAgICAgICAgIGlmIChyZWxDb29yZHNbMF0gPCBwYW5Cb3VuZGFyeSkge1xyXG4gICAgICAgICAgICAgIHBhblRpbWVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICBwYW4odGhpcywgJ2xlZnQnKTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAocmVsQ29vcmRzWzBdID4gKCQoJ3N2ZycpLndpZHRoKCkgLSBwYW5Cb3VuZGFyeSkpIHtcclxuXHJcbiAgICAgICAgICAgICAgcGFuVGltZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgIHBhbih0aGlzLCAncmlnaHQnKTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAocmVsQ29vcmRzWzFdIDwgcGFuQm91bmRhcnkpIHtcclxuICAgICAgICAgICAgICBwYW5UaW1lciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgcGFuKHRoaXMsICd1cCcpO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChyZWxDb29yZHNbMV0gPiAoJCgnc3ZnJykuaGVpZ2h0KCkgLSBwYW5Cb3VuZGFyeSkpIHtcclxuICAgICAgICAgICAgICBwYW5UaW1lciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgcGFuKHRoaXMsICdkb3duJyk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChwYW5UaW1lcik7XHJcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG5cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgZC54MCArPSBkMy5ldmVudC5keTtcclxuICAgICAgICAgIGQueTAgKz0gZDMuZXZlbnQuZHg7XHJcbiAgICAgICAgICB2YXIgbm9kZSA9IGQzLnNlbGVjdCh0aGlzKTtcclxuICAgICAgICAgIG5vZGUuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIGQueTAgKyBcIixcIiArIGQueDAgKyBcIilcIik7XHJcbiAgICAgICAgICB1cGRhdGVUZW1wQ29ubmVjdG9yKCk7XHJcbiAgICAgIH0pLm9uKFwiZHJhZ2VuZFwiLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICBpZiAoZCA9PSByb290KSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZG9tTm9kZSA9IHRoaXM7XHJcbiAgICAgICAgICBpZiAoc2VsZWN0ZWROb2RlKSB7XHJcbiAgICAgICAgICAgICAgLy8gbm93IHJlbW92ZSB0aGUgZWxlbWVudCBmcm9tIHRoZSBwYXJlbnQsIGFuZCBpbnNlcnQgaXQgaW50byB0aGUgbmV3IGVsZW1lbnRzIGNoaWxkcmVuXHJcbiAgICAgICAgICAgICAgdmFyIGluZGV4ID0gZHJhZ2dpbmdOb2RlLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKGRyYWdnaW5nTm9kZSk7XHJcbiAgICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgZHJhZ2dpbmdOb2RlLnBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWROb2RlLmNoaWxkcmVuIHx8IHNlbGVjdGVkTm9kZS5fY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZE5vZGUuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZE5vZGUuY2hpbGRyZW4ucHVzaChkcmFnZ2luZ05vZGUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZE5vZGUuX2NoaWxkcmVuLnB1c2goZHJhZ2dpbmdOb2RlKTtcclxuICAgICAgICAgICAgICAgIH0gIFxyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIHNlbGVjdGVkTm9kZS5jaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICBzZWxlY3RlZE5vZGUuY2hpbGRyZW4ucHVzaChkcmFnZ2luZ05vZGUpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgbm9kZSBiZWluZyBhZGRlZCB0byBpcyBleHBhbmRlZCBzbyB1c2VyIGNhbiBzZWUgYWRkZWQgbm9kZSBpcyBjb3JyZWN0bHkgbW92ZWRcclxuICAgICAgICAgICAgICBleHBhbmQoc2VsZWN0ZWROb2RlKTtcclxuICAgICAgICAgICAgICBzb3J0VHJlZSgpO1xyXG4gICAgICAgICAgICAgIGVuZERyYWcoKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgZW5kRHJhZygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgZnVuY3Rpb24gZW5kRHJhZygpIHtcclxuICAgICAgc2VsZWN0ZWROb2RlID0gbnVsbDtcclxuICAgICAgZDMuc2VsZWN0QWxsKCcuZ2hvc3RDaXJjbGUnKS5hdHRyKCdjbGFzcycsICdnaG9zdENpcmNsZScpO1xyXG4gICAgICBkMy5zZWxlY3QoZG9tTm9kZSkuYXR0cignY2xhc3MnLCAnbm9kZScpO1xyXG4gICAgICAvLyBub3cgcmVzdG9yZSB0aGUgbW91c2VvdmVyIGV2ZW50IG9yIHdlIHdvbid0IGJlIGFibGUgdG8gZHJhZyBhIDJuZCB0aW1lXHJcbiAgICAgIGQzLnNlbGVjdChkb21Ob2RlKS5zZWxlY3QoJy5naG9zdENpcmNsZScpLmF0dHIoJ3BvaW50ZXItZXZlbnRzJywgJycpO1xyXG4gICAgICB1cGRhdGVUZW1wQ29ubmVjdG9yKCk7XHJcbiAgICAgIGlmIChkcmFnZ2luZ05vZGUgIT09IG51bGwpIHtcclxuICAgICAgICAgIHVwZGF0ZShyb290KTtcclxuICAgICAgICAgIGNlbnRlck5vZGUoZHJhZ2dpbmdOb2RlKTtcclxuICAgICAgICAgIGRyYWdnaW5nTm9kZSA9IG51bGw7XHJcbiAgICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIGNvbGxhcHNpbmcgYW5kIGV4cGFuZGluZyBub2Rlcy5cclxuXHJcbiAgZnVuY3Rpb24gY29sbGFwc2UoZCkge1xyXG4gICAgICBpZiAoZC5jaGlsZHJlbikge1xyXG4gICAgICAgICAgZC5fY2hpbGRyZW4gPSBkLmNoaWxkcmVuO1xyXG4gICAgICAgICAgZC5fY2hpbGRyZW4uZm9yRWFjaChjb2xsYXBzZSk7XHJcbiAgICAgICAgICBkLmNoaWxkcmVuID0gW107XHJcbiAgICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGV4cGFuZChkKSB7XHJcbiAgICAgIGlmIChkLl9jaGlsZHJlbikge1xyXG4gICAgICAgICAgZC5jaGlsZHJlbiA9IGQuX2NoaWxkcmVuO1xyXG4gICAgICAgICAgZC5jaGlsZHJlbi5mb3JFYWNoKGV4cGFuZCk7XHJcbiAgICAgICAgICBkLl9jaGlsZHJlbiA9IFtdO1xyXG4gICAgICB9XHJcbiAgfVxyXG5cclxuICB2YXIgb3ZlckNpcmNsZSA9IGZ1bmN0aW9uKGQpIHtcclxuICAgICAgc2VsZWN0ZWROb2RlID0gZDtcclxuICAgICAgdXBkYXRlVGVtcENvbm5lY3RvcigpO1xyXG4gIH07XHJcbiAgdmFyIG91dENpcmNsZSA9IGZ1bmN0aW9uKGQpIHtcclxuICAgICAgc2VsZWN0ZWROb2RlID0gbnVsbDtcclxuICAgICAgdXBkYXRlVGVtcENvbm5lY3RvcigpO1xyXG4gIH07XHJcblxyXG4gIC8vIEZ1bmN0aW9uIHRvIHVwZGF0ZSB0aGUgdGVtcG9yYXJ5IGNvbm5lY3RvciBpbmRpY2F0aW5nIGRyYWdnaW5nIGFmZmlsaWF0aW9uXHJcbiAgdmFyIHVwZGF0ZVRlbXBDb25uZWN0b3IgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGRhdGEgPSBbXTtcclxuICAgICAgaWYgKGRyYWdnaW5nTm9kZSAhPT0gbnVsbCAmJiBzZWxlY3RlZE5vZGUgIT09IG51bGwpIHtcclxuICAgICAgICAgIC8vIGhhdmUgdG8gZmxpcCB0aGUgc291cmNlIGNvb3JkaW5hdGVzIHNpbmNlIHdlIGRpZCB0aGlzIGZvciB0aGUgZXhpc3RpbmcgY29ubmVjdG9ycyBvbiB0aGUgb3JpZ2luYWwgdHJlZVxyXG4gICAgICAgICAgZGF0YSA9IFt7XHJcbiAgICAgICAgICAgICAgc291cmNlOiB7XHJcbiAgICAgICAgICAgICAgICAgIHg6IHNlbGVjdGVkTm9kZS55MCxcclxuICAgICAgICAgICAgICAgICAgeTogc2VsZWN0ZWROb2RlLngwXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICB0YXJnZXQ6IHtcclxuICAgICAgICAgICAgICAgICAgeDogZHJhZ2dpbmdOb2RlLnkwLFxyXG4gICAgICAgICAgICAgICAgICB5OiBkcmFnZ2luZ05vZGUueDBcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XTtcclxuICAgICAgfVxyXG4gICAgICB2YXIgbGluayA9IHN2Z0dyb3VwLnNlbGVjdEFsbChcIi50ZW1wbGlua1wiKS5kYXRhKGRhdGEpO1xyXG5cclxuICAgICAgbGluay5lbnRlcigpLmFwcGVuZChcInBhdGhcIilcclxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ0ZW1wbGlua1wiKVxyXG4gICAgICAgICAgLmF0dHIoXCJkXCIsIGQzLnN2Zy5kaWFnb25hbCgpKVxyXG4gICAgICAgICAgLmF0dHIoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKTtcclxuXHJcbiAgICAgIGxpbmsuYXR0cihcImRcIiwgZDMuc3ZnLmRpYWdvbmFsKCkpO1xyXG5cclxuICAgICAgbGluay5leGl0KCkucmVtb3ZlKCk7XHJcbiAgfTtcclxuXHJcbiAgLy8gRnVuY3Rpb24gdG8gY2VudGVyIG5vZGUgd2hlbiBjbGlja2VkL2Ryb3BwZWQgc28gbm9kZSBkb2Vzbid0IGdldCBsb3N0IHdoZW4gY29sbGFwc2luZy9tb3Zpbmcgd2l0aCBsYXJnZSBhbW91bnQgb2YgY2hpbGRyZW4uXHJcblxyXG4gIGZ1bmN0aW9uIGNlbnRlck5vZGUoc291cmNlKSB7XHJcbiAgICAgIHNjYWxlID0gem9vbUxpc3RlbmVyLnNjYWxlKCk7XHJcbiAgICAgIHggPSAtc291cmNlLnkwO1xyXG4gICAgICB5ID0gLXNvdXJjZS54MDtcclxuICAgICAgeCA9IHggKiBzY2FsZSArIHZpZXdlcldpZHRoIC8gMjtcclxuICAgICAgeSA9IHkgKiBzY2FsZSArIHZpZXdlckhlaWdodCAvIDI7XHJcbiAgICAgIGQzLnNlbGVjdCgnZycpLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgLmR1cmF0aW9uKGR1cmF0aW9uKVxyXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyB4ICsgXCIsXCIgKyB5ICsgXCIpc2NhbGUoXCIgKyBzY2FsZSArIFwiKVwiKTtcclxuICAgICAgem9vbUxpc3RlbmVyLnNjYWxlKHNjYWxlKTtcclxuICAgICAgem9vbUxpc3RlbmVyLnRyYW5zbGF0ZShbeCwgeV0pO1xyXG4gIH1cclxuXHJcbiAgLy8gVG9nZ2xlIGNoaWxkcmVuIGZ1bmN0aW9uXHJcblxyXG4gIGZ1bmN0aW9uIHRvZ2dsZUNoaWxkcmVuKGQpIHtcclxuICAgICAgaWYgKGQuY2hpbGRyZW4pIHtcclxuICAgICAgICAgIGQuX2NoaWxkcmVuID0gZC5jaGlsZHJlbjtcclxuICAgICAgICAgIGQuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgfSBlbHNlIGlmIChkLl9jaGlsZHJlbikge1xyXG4gICAgICAgICAgZC5jaGlsZHJlbiA9IGQuX2NoaWxkcmVuO1xyXG4gICAgICAgICAgZC5fY2hpbGRyZW4gPSBbXTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZDtcclxuICB9XHJcblxyXG4gIC8vIFRvZ2dsZSBjaGlsZHJlbiBvbiBjbGljay5cclxuXHJcbiAgZnVuY3Rpb24gY2xpY2soZCkge1xyXG4gICAgICBpZiAoZDMuZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuOyAvLyBjbGljayBzdXBwcmVzc2VkXHJcbiAgICAgIGQgPSB0b2dnbGVDaGlsZHJlbihkKTtcclxuICAgICAgdXBkYXRlKGQpO1xyXG4gICAgICBjZW50ZXJOb2RlKGQpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdXBkYXRlKHNvdXJjZSkge1xyXG4gICAgdmFyIGNvbXB1dGVOb2RlU2l6ZSA9IGZ1bmN0aW9uKG5vZGUsIGZpZWxkKVxyXG4gICAge1xyXG4gICAgICBpZihub2RlLnZhbHVlcyAmJiBub2RlLnZhbHVlc1tmaWVsZF0gJiYgbm9kZS52YWx1ZXNbZmllbGRdID4gNSlcclxuICAgICAge1xyXG4gICAgICAgIHJldHVybiBub2RlLnZhbHVlc1tmaWVsZF07XHJcbiAgICAgIH1cclxuICAgICAgZWxzZVxyXG4gICAgICB7XHJcbiAgICAgICAgcmV0dXJuIDU7XHJcbiAgICAgIH0gICAgICAgIFxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgICAvLyBDb21wdXRlIHRoZSBuZXcgaGVpZ2h0LCBmdW5jdGlvbiBjb3VudHMgdG90YWwgY2hpbGRyZW4gb2Ygcm9vdCBub2RlIGFuZCBzZXRzIHRyZWUgaGVpZ2h0IGFjY29yZGluZ2x5LlxyXG4gICAgICAvLyBUaGlzIHByZXZlbnRzIHRoZSBsYXlvdXQgbG9va2luZyBzcXVhc2hlZCB3aGVuIG5ldyBub2RlcyBhcmUgbWFkZSB2aXNpYmxlIG9yIGxvb2tpbmcgc3BhcnNlIHdoZW4gbm9kZXMgYXJlIHJlbW92ZWRcclxuICAgICAgLy8gVGhpcyBtYWtlcyB0aGUgbGF5b3V0IG1vcmUgY29uc2lzdGVudC5cclxuICAgICAgdmFyIGxldmVsV2lkdGggPSBbMV07XHJcbiAgICAgIHZhciBjaGlsZENvdW50ID0gZnVuY3Rpb24obGV2ZWwsIG4pIHtcclxuXHJcbiAgICAgICAgICBpZiAobi5jaGlsZHJlbiAmJiBuLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICBpZiAobGV2ZWxXaWR0aC5sZW5ndGggPD0gbGV2ZWwgKyAxKSBsZXZlbFdpZHRoLnB1c2goMCk7XHJcblxyXG4gICAgICAgICAgICAgIGxldmVsV2lkdGhbbGV2ZWwgKyAxXSArPSBuLmNoaWxkcmVuLmxlbmd0aDtcclxuICAgICAgICAgICAgICBuLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgICAgICBjaGlsZENvdW50KGxldmVsICsgMSwgZCk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIGNoaWxkQ291bnQoMCwgcm9vdCk7XHJcbiAgICAgIHZhciBuZXdIZWlnaHQgPSBkMy5tYXgobGV2ZWxXaWR0aCkgKiAyNTsgLy8gMjUgcGl4ZWxzIHBlciBsaW5lICBcclxuICAgICAgdHJlZSA9IHRyZWUuc2l6ZShbbmV3SGVpZ2h0LCB2aWV3ZXJXaWR0aF0pO1xyXG5cclxuICAgICAgLy8gQ29tcHV0ZSB0aGUgbmV3IHRyZWUgbGF5b3V0LlxyXG4gICAgICB2YXIgbm9kZXMgPSB0cmVlLm5vZGVzKHJvb3QpLnJldmVyc2UoKSxcclxuICAgICAgICAgIGxpbmtzID0gdHJlZS5saW5rcyhub2Rlcyk7XHJcblxyXG4gICAgICAvLyBTZXQgd2lkdGhzIGJldHdlZW4gbGV2ZWxzIGJhc2VkIG9uIG1heExhYmVsTGVuZ3RoLlxyXG4gICAgICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgIGQueSA9IChkLmRlcHRoICogKG1heExhYmVsTGVuZ3RoICogMTApKTsgLy9tYXhMYWJlbExlbmd0aCAqIDEwcHhcclxuICAgICAgICAgIC8vIGFsdGVybmF0aXZlbHkgdG8ga2VlcCBhIGZpeGVkIHNjYWxlIG9uZSBjYW4gc2V0IGEgZml4ZWQgZGVwdGggcGVyIGxldmVsXHJcbiAgICAgICAgICAvLyBOb3JtYWxpemUgZm9yIGZpeGVkLWRlcHRoIGJ5IGNvbW1lbnRpbmcgb3V0IGJlbG93IGxpbmVcclxuICAgICAgICAgIC8vIGQueSA9IChkLmRlcHRoICogNTAwKTsgLy81MDBweCBwZXIgbGV2ZWwuXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gVXBkYXRlIHRoZSBub2Rlc+KAplxyXG4gICAgICBub2RlID0gc3ZnR3JvdXAuc2VsZWN0QWxsKFwiZy5ub2RlXCIpXHJcbiAgICAgICAgICAuZGF0YShub2RlcywgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBkLmlkIHx8IChkLmlkID0gKytpKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gRW50ZXIgYW55IG5ldyBub2RlcyBhdCB0aGUgcGFyZW50J3MgcHJldmlvdXMgcG9zaXRpb24uXHJcbiAgICAgIHZhciBub2RlRW50ZXIgPSBub2RlLmVudGVyKCkuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgICAgLmNhbGwoZHJhZ0xpc3RlbmVyKVxyXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcIm5vZGVcIilcclxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBzb3VyY2UueTAgKyBcIixcIiArIHNvdXJjZS54MCArIFwiKVwiO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5vbignY2xpY2snLCBjbGljayk7XHJcblxyXG4gICAgICBub2RlRW50ZXIuYXBwZW5kKFwiY2lyY2xlXCIpXHJcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAnbm9kZUNpcmNsZScpXHJcbiAgICAgICAgICAuYXR0cihcInJcIiwgMClcclxuICAgICAgICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBkLl9jaGlsZHJlbiA/IFwibGlnaHRzdGVlbGJsdWVcIiA6IFwiI2ZmZlwiO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICBub2RlRW50ZXIuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gZC5jaGlsZHJlbiB8fCBkLl9jaGlsZHJlbiA/IC0xMCA6IDEwO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5hdHRyKFwiZHlcIiwgXCIuMzVlbVwiKVxyXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ25vZGVUZXh0JylcclxuICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBkLmNoaWxkcmVuIHx8IGQuX2NoaWxkcmVuID8gXCJlbmRcIiA6IFwic3RhcnRcIjtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGQubmFtZTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuc3R5bGUoXCJmaWxsLW9wYWNpdHlcIiwgMCk7XHJcblxyXG4gICAgICAvLyBwaGFudG9tIG5vZGUgdG8gZ2l2ZSB1cyBtb3VzZW92ZXIgaW4gYSByYWRpdXMgYXJvdW5kIGl0XHJcbiAgICAgIG5vZGVFbnRlci5hcHBlbmQoXCJjaXJjbGVcIilcclxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdnaG9zdENpcmNsZScpXHJcbiAgICAgICAgICAuYXR0cihcInJcIiwgMzApXHJcbiAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMC4yKSAvLyBjaGFuZ2UgdGhpcyB0byB6ZXJvIHRvIGhpZGUgdGhlIHRhcmdldCBhcmVhXHJcbiAgICAgIC5zdHlsZShcImZpbGxcIiwgXCJyZWRcIilcclxuICAgICAgICAgIC5hdHRyKCdwb2ludGVyLWV2ZW50cycsICdtb3VzZW92ZXInKVxyXG4gICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICAgICAgICBvdmVyQ2lyY2xlKG5vZGUpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICAgICAgICBvdXRDaXJjbGUobm9kZSk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgIC8vIFVwZGF0ZSB0aGUgdGV4dCB0byByZWZsZWN0IHdoZXRoZXIgbm9kZSBoYXMgY2hpbGRyZW4gb3Igbm90LlxyXG4gICAgICBub2RlLnNlbGVjdCgndGV4dCcpXHJcbiAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBkLmNoaWxkcmVuIHx8IGQuX2NoaWxkcmVuID8gLTEwIDogMTA7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGQuY2hpbGRyZW4gfHwgZC5fY2hpbGRyZW4gPyBcImVuZFwiIDogXCJzdGFydFwiO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gZC5uYW1lO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBDaGFuZ2UgdGhlIGNpcmNsZSBmaWxsIGRlcGVuZGluZyBvbiB3aGV0aGVyIGl0IGhhcyBjaGlsZHJlbiBhbmQgaXMgY29sbGFwc2VkXHJcbiAgICAgIG5vZGUuc2VsZWN0KFwiY2lyY2xlLm5vZGVDaXJjbGVcIilcclxuICAgICAgICAgIC5hdHRyKFwiclwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBjb21wdXRlTm9kZVNpemUoZCk7IH0pXHJcbiAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gZC5fY2hpbGRyZW4gPyBcImxpZ2h0c3RlZWxibHVlXCIgOiBcIiNmZmZcIjtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gVHJhbnNpdGlvbiBub2RlcyB0byB0aGVpciBuZXcgcG9zaXRpb24uXHJcbiAgICAgIHZhciBub2RlVXBkYXRlID0gbm9kZS50cmFuc2l0aW9uKClcclxuICAgICAgICAgIC5kdXJhdGlvbihkdXJhdGlvbilcclxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBkLnkgKyBcIixcIiArIGQueCArIFwiKVwiO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBGYWRlIHRoZSB0ZXh0IGluXHJcbiAgICAgIG5vZGVVcGRhdGUuc2VsZWN0KFwidGV4dFwiKVxyXG4gICAgICAgICAgLnN0eWxlKFwiZmlsbC1vcGFjaXR5XCIsIDEpO1xyXG5cclxuICAgICAgLy8gVHJhbnNpdGlvbiBleGl0aW5nIG5vZGVzIHRvIHRoZSBwYXJlbnQncyBuZXcgcG9zaXRpb24uXHJcbiAgICAgIHZhciBub2RlRXhpdCA9IG5vZGUuZXhpdCgpLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgLmR1cmF0aW9uKGR1cmF0aW9uKVxyXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHNvdXJjZS55ICsgXCIsXCIgKyBzb3VyY2UueCArIFwiKVwiO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5yZW1vdmUoKTtcclxuXHJcbiAgICAgIG5vZGVFeGl0LnNlbGVjdChcImNpcmNsZVwiKVxyXG4gICAgICAgICAgLmF0dHIoXCJyXCIsIDApO1xyXG5cclxuICAgICAgbm9kZUV4aXQuc2VsZWN0KFwidGV4dFwiKVxyXG4gICAgICAgICAgLnN0eWxlKFwiZmlsbC1vcGFjaXR5XCIsIDApO1xyXG5cclxuICAgICAgLy8gVXBkYXRlIHRoZSBsaW5rc+KAplxyXG4gICAgICB2YXIgbGluayA9IHN2Z0dyb3VwLnNlbGVjdEFsbChcInBhdGgubGlua1wiKVxyXG4gICAgICAgICAgLmRhdGEobGlua3MsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gZC50YXJnZXQuaWQ7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgIC8vIEVudGVyIGFueSBuZXcgbGlua3MgYXQgdGhlIHBhcmVudCdzIHByZXZpb3VzIHBvc2l0aW9uLlxyXG4gICAgICBsaW5rLmVudGVyKCkuaW5zZXJ0KFwicGF0aFwiLCBcImdcIilcclxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJsaW5rXCIpXHJcbiAgICAgICAgICAuYXR0cihcImRcIiwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgICAgIHZhciBvID0ge1xyXG4gICAgICAgICAgICAgICAgICB4OiBzb3VyY2UueDAsXHJcbiAgICAgICAgICAgICAgICAgIHk6IHNvdXJjZS55MFxyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGRpYWdvbmFsKHtcclxuICAgICAgICAgICAgICAgICAgc291cmNlOiBvLFxyXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ6IG9cclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gVHJhbnNpdGlvbiBsaW5rcyB0byB0aGVpciBuZXcgcG9zaXRpb24uXHJcbiAgICAgIGxpbmsudHJhbnNpdGlvbigpXHJcbiAgICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXHJcbiAgICAgICAgICAuYXR0cihcImRcIiwgZGlhZ29uYWwpO1xyXG5cclxuICAgICAgLy8gVHJhbnNpdGlvbiBleGl0aW5nIG5vZGVzIHRvIHRoZSBwYXJlbnQncyBuZXcgcG9zaXRpb24uXHJcbiAgICAgIGxpbmsuZXhpdCgpLnRyYW5zaXRpb24oKVxyXG4gICAgICAgICAgLmR1cmF0aW9uKGR1cmF0aW9uKVxyXG4gICAgICAgICAgLmF0dHIoXCJkXCIsIGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgICAgICB2YXIgbyA9IHtcclxuICAgICAgICAgICAgICAgICAgeDogc291cmNlLngsXHJcbiAgICAgICAgICAgICAgICAgIHk6IHNvdXJjZS55XHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICByZXR1cm4gZGlhZ29uYWwoe1xyXG4gICAgICAgICAgICAgICAgICBzb3VyY2U6IG8sXHJcbiAgICAgICAgICAgICAgICAgIHRhcmdldDogb1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5yZW1vdmUoKTtcclxuXHJcbiAgICAgIC8vIFN0YXNoIHRoZSBvbGQgcG9zaXRpb25zIGZvciB0cmFuc2l0aW9uLlxyXG4gICAgICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKGQpIHtcclxuICAgICAgICAgIGQueDAgPSBkLng7XHJcbiAgICAgICAgICBkLnkwID0gZC55O1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIEFwcGVuZCBhIGdyb3VwIHdoaWNoIGhvbGRzIGFsbCBub2RlcyBhbmQgd2hpY2ggdGhlIHpvb20gTGlzdGVuZXIgY2FuIGFjdCB1cG9uLlxyXG4gIHZhciBzdmdHcm91cCA9IGJhc2VTdmcuYXBwZW5kKFwiZ1wiKTtcclxuXHJcbiAgLy8gRGVmaW5lIHRoZSByb290XHJcbiAgcm9vdCA9IHRyZWVEYXRhO1xyXG4gIHJvb3QueDAgPSB2aWV3ZXJIZWlnaHQgLyAyO1xyXG4gIHJvb3QueTAgPSAwO1xyXG5cclxuICAvLyBDb2xsYXBzZSBhbGwgY2hpbGRyZW4gb2Ygcm9vdHMgY2hpbGRyZW4gYmVmb3JlIHJlbmRlcmluZy5cclxuICAvL3Jvb3QuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCl7XHJcbiAgLy9cdGNvbGxhcHNlKGNoaWxkKTtcclxuICAvL30pO1xyXG5cclxuICAvLyBMYXlvdXQgdGhlIHRyZWUgaW5pdGlhbGx5IGFuZCBjZW50ZXIgb24gdGhlIHJvb3Qgbm9kZS5cclxuICB1cGRhdGUocm9vdCk7XHJcbiAgY2VudGVyTm9kZShyb290KTtcclxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==